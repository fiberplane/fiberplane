/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AgentsAgentIdIndexImport } from './routes/agents/$agentId/index'
import { Route as AgentsAgentIdInstanceIdImport } from './routes/agents/$agentId/$instanceId'
import { Route as AgentsAgentIdInstanceIdIndexImport } from './routes/agents/$agentId/$instanceId/index'
import { Route as AgentsAgentIdInstanceIdTabIdImport } from './routes/agents/$agentId/$instanceId/$tabId'
import { Route as AgentsAgentIdInstanceIdMcpIndexImport } from './routes/agents/$agentId/$instanceId/mcp/index'
import { Route as AgentsAgentIdInstanceIdMcpServerIdImport } from './routes/agents/$agentId/$instanceId/mcp/$serverId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AgentsAgentIdIndexRoute = AgentsAgentIdIndexImport.update({
  id: '/agents/$agentId/',
  path: '/agents/$agentId/',
  getParentRoute: () => rootRoute,
} as any)

const AgentsAgentIdInstanceIdRoute = AgentsAgentIdInstanceIdImport.update({
  id: '/agents/$agentId/$instanceId',
  path: '/agents/$agentId/$instanceId',
  getParentRoute: () => rootRoute,
} as any)

const AgentsAgentIdInstanceIdIndexRoute =
  AgentsAgentIdInstanceIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AgentsAgentIdInstanceIdRoute,
  } as any)

const AgentsAgentIdInstanceIdTabIdRoute =
  AgentsAgentIdInstanceIdTabIdImport.update({
    id: '/$tabId',
    path: '/$tabId',
    getParentRoute: () => AgentsAgentIdInstanceIdRoute,
  } as any)

const AgentsAgentIdInstanceIdMcpIndexRoute =
  AgentsAgentIdInstanceIdMcpIndexImport.update({
    id: '/mcp/',
    path: '/mcp/',
    getParentRoute: () => AgentsAgentIdInstanceIdRoute,
  } as any)

const AgentsAgentIdInstanceIdMcpServerIdRoute =
  AgentsAgentIdInstanceIdMcpServerIdImport.update({
    id: '/mcp/$serverId',
    path: '/mcp/$serverId',
    getParentRoute: () => AgentsAgentIdInstanceIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/agents/$agentId/$instanceId': {
      id: '/agents/$agentId/$instanceId'
      path: '/agents/$agentId/$instanceId'
      fullPath: '/agents/$agentId/$instanceId'
      preLoaderRoute: typeof AgentsAgentIdInstanceIdImport
      parentRoute: typeof rootRoute
    }
    '/agents/$agentId/': {
      id: '/agents/$agentId/'
      path: '/agents/$agentId'
      fullPath: '/agents/$agentId'
      preLoaderRoute: typeof AgentsAgentIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/agents/$agentId/$instanceId/$tabId': {
      id: '/agents/$agentId/$instanceId/$tabId'
      path: '/$tabId'
      fullPath: '/agents/$agentId/$instanceId/$tabId'
      preLoaderRoute: typeof AgentsAgentIdInstanceIdTabIdImport
      parentRoute: typeof AgentsAgentIdInstanceIdImport
    }
    '/agents/$agentId/$instanceId/': {
      id: '/agents/$agentId/$instanceId/'
      path: '/'
      fullPath: '/agents/$agentId/$instanceId/'
      preLoaderRoute: typeof AgentsAgentIdInstanceIdIndexImport
      parentRoute: typeof AgentsAgentIdInstanceIdImport
    }
    '/agents/$agentId/$instanceId/mcp/$serverId': {
      id: '/agents/$agentId/$instanceId/mcp/$serverId'
      path: '/mcp/$serverId'
      fullPath: '/agents/$agentId/$instanceId/mcp/$serverId'
      preLoaderRoute: typeof AgentsAgentIdInstanceIdMcpServerIdImport
      parentRoute: typeof AgentsAgentIdInstanceIdImport
    }
    '/agents/$agentId/$instanceId/mcp/': {
      id: '/agents/$agentId/$instanceId/mcp/'
      path: '/mcp'
      fullPath: '/agents/$agentId/$instanceId/mcp'
      preLoaderRoute: typeof AgentsAgentIdInstanceIdMcpIndexImport
      parentRoute: typeof AgentsAgentIdInstanceIdImport
    }
  }
}

// Create and export the route tree

interface AgentsAgentIdInstanceIdRouteChildren {
  AgentsAgentIdInstanceIdTabIdRoute: typeof AgentsAgentIdInstanceIdTabIdRoute
  AgentsAgentIdInstanceIdIndexRoute: typeof AgentsAgentIdInstanceIdIndexRoute
  AgentsAgentIdInstanceIdMcpServerIdRoute: typeof AgentsAgentIdInstanceIdMcpServerIdRoute
  AgentsAgentIdInstanceIdMcpIndexRoute: typeof AgentsAgentIdInstanceIdMcpIndexRoute
}

const AgentsAgentIdInstanceIdRouteChildren: AgentsAgentIdInstanceIdRouteChildren =
  {
    AgentsAgentIdInstanceIdTabIdRoute: AgentsAgentIdInstanceIdTabIdRoute,
    AgentsAgentIdInstanceIdIndexRoute: AgentsAgentIdInstanceIdIndexRoute,
    AgentsAgentIdInstanceIdMcpServerIdRoute:
      AgentsAgentIdInstanceIdMcpServerIdRoute,
    AgentsAgentIdInstanceIdMcpIndexRoute: AgentsAgentIdInstanceIdMcpIndexRoute,
  }

const AgentsAgentIdInstanceIdRouteWithChildren =
  AgentsAgentIdInstanceIdRoute._addFileChildren(
    AgentsAgentIdInstanceIdRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents/$agentId/$instanceId': typeof AgentsAgentIdInstanceIdRouteWithChildren
  '/agents/$agentId': typeof AgentsAgentIdIndexRoute
  '/agents/$agentId/$instanceId/$tabId': typeof AgentsAgentIdInstanceIdTabIdRoute
  '/agents/$agentId/$instanceId/': typeof AgentsAgentIdInstanceIdIndexRoute
  '/agents/$agentId/$instanceId/mcp/$serverId': typeof AgentsAgentIdInstanceIdMcpServerIdRoute
  '/agents/$agentId/$instanceId/mcp': typeof AgentsAgentIdInstanceIdMcpIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents/$agentId': typeof AgentsAgentIdIndexRoute
  '/agents/$agentId/$instanceId/$tabId': typeof AgentsAgentIdInstanceIdTabIdRoute
  '/agents/$agentId/$instanceId': typeof AgentsAgentIdInstanceIdIndexRoute
  '/agents/$agentId/$instanceId/mcp/$serverId': typeof AgentsAgentIdInstanceIdMcpServerIdRoute
  '/agents/$agentId/$instanceId/mcp': typeof AgentsAgentIdInstanceIdMcpIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/agents/$agentId/$instanceId': typeof AgentsAgentIdInstanceIdRouteWithChildren
  '/agents/$agentId/': typeof AgentsAgentIdIndexRoute
  '/agents/$agentId/$instanceId/$tabId': typeof AgentsAgentIdInstanceIdTabIdRoute
  '/agents/$agentId/$instanceId/': typeof AgentsAgentIdInstanceIdIndexRoute
  '/agents/$agentId/$instanceId/mcp/$serverId': typeof AgentsAgentIdInstanceIdMcpServerIdRoute
  '/agents/$agentId/$instanceId/mcp/': typeof AgentsAgentIdInstanceIdMcpIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents/$agentId/$instanceId'
    | '/agents/$agentId'
    | '/agents/$agentId/$instanceId/$tabId'
    | '/agents/$agentId/$instanceId/'
    | '/agents/$agentId/$instanceId/mcp/$serverId'
    | '/agents/$agentId/$instanceId/mcp'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agents/$agentId'
    | '/agents/$agentId/$instanceId/$tabId'
    | '/agents/$agentId/$instanceId'
    | '/agents/$agentId/$instanceId/mcp/$serverId'
    | '/agents/$agentId/$instanceId/mcp'
  id:
    | '__root__'
    | '/'
    | '/agents/$agentId/$instanceId'
    | '/agents/$agentId/'
    | '/agents/$agentId/$instanceId/$tabId'
    | '/agents/$agentId/$instanceId/'
    | '/agents/$agentId/$instanceId/mcp/$serverId'
    | '/agents/$agentId/$instanceId/mcp/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsAgentIdInstanceIdRoute: typeof AgentsAgentIdInstanceIdRouteWithChildren
  AgentsAgentIdIndexRoute: typeof AgentsAgentIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsAgentIdInstanceIdRoute: AgentsAgentIdInstanceIdRouteWithChildren,
  AgentsAgentIdIndexRoute: AgentsAgentIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/agents/$agentId/$instanceId",
        "/agents/$agentId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/agents/$agentId/$instanceId": {
      "filePath": "agents/$agentId/$instanceId.tsx",
      "children": [
        "/agents/$agentId/$instanceId/$tabId",
        "/agents/$agentId/$instanceId/",
        "/agents/$agentId/$instanceId/mcp/$serverId",
        "/agents/$agentId/$instanceId/mcp/"
      ]
    },
    "/agents/$agentId/": {
      "filePath": "agents/$agentId/index.tsx"
    },
    "/agents/$agentId/$instanceId/$tabId": {
      "filePath": "agents/$agentId/$instanceId/$tabId.tsx",
      "parent": "/agents/$agentId/$instanceId"
    },
    "/agents/$agentId/$instanceId/": {
      "filePath": "agents/$agentId/$instanceId/index.tsx",
      "parent": "/agents/$agentId/$instanceId"
    },
    "/agents/$agentId/$instanceId/mcp/$serverId": {
      "filePath": "agents/$agentId/$instanceId/mcp/$serverId.tsx",
      "parent": "/agents/$agentId/$instanceId"
    },
    "/agents/$agentId/$instanceId/mcp/": {
      "filePath": "agents/$agentId/$instanceId/mcp/index.tsx",
      "parent": "/agents/$agentId/$instanceId"
    }
  }
}
ROUTE_MANIFEST_END */
