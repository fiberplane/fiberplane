// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`run test 'barrel files' with location '../../test-cases/barrel-files' 1`] = `
{
  "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure": {
    "id": "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
    "import": "measure",
    "importPath": "@fiberplane/hono-otel",
    "name": "@fiberplane/hono-otel",
    "pathId": "@fiberplane/hono-otel",
    "type": "MODULE_REFERENCE",
    "version": "0.3.1",
  },
  "MODULE_REFERENCE:User@..%2Ftypes": {
    "id": "MODULE_REFERENCE:User@..%2Ftypes",
    "import": "User",
    "importPath": "../types",
    "name": "../types",
    "pathId": "../types",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:getUser@.%2Fdb": {
    "id": "MODULE_REFERENCE:getUser@.%2Fdb",
    "import": "getUser",
    "importPath": "./db",
    "name": "./db",
    "pathId": "./db",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:hono%2Fcors@cors": {
    "id": "MODULE_REFERENCE:hono%2Fcors@cors",
    "import": "cors",
    "importPath": "hono/cors",
    "name": "hono",
    "pathId": "hono/cors",
    "type": "MODULE_REFERENCE",
    "version": "4.6.9",
  },
  "MODULE_REFERENCE:sleep@..%2Futils": {
    "id": "MODULE_REFERENCE:sleep@..%2Futils",
    "import": "sleep",
    "importPath": "../utils",
    "name": "../utils",
    "pathId": "../utils",
    "type": "MODULE_REFERENCE",
  },
  "ROUTE_ENTRY:index.ts@407": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@407",
    "method": "get",
    "modules": Set {},
    "path": "/user/1",
    "position": 407,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@426",
      "SOURCE_REFERENCE:index.ts@434",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@531": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@531",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 531,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@544",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:index.ts@102": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@407",
      "ROUTE_ENTRY:index.ts@531",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@102",
    "modules": Set {},
    "name": "app",
    "position": 102,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "SOURCE_REFERENCE:db%2FgetUser.ts@128": {
    "character": 6,
    "content": "const DEFAULT_USER_NAME = "John Doe"",
    "fileName": "db/getUser.ts",
    "id": "SOURCE_REFERENCE:db%2FgetUser.ts@128",
    "line": 4,
    "modules": Set {},
    "position": 128,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:db%2FgetUser.ts@166": {
    "character": 6,
    "content": "const DEFAULT_EMAIL = "john@doe.com"",
    "fileName": "db/getUser.ts",
    "id": "SOURCE_REFERENCE:db%2FgetUser.ts@166",
    "line": 5,
    "modules": Set {},
    "position": 166,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:db%2FgetUser.ts@222": {
    "character": 23,
    "content": "export const getUser = measure("getUser", async () => {
  await sleep(100);
  const value: User = {
    name: DEFAULT_USER_NAME,
    email: DEFAULT_EMAIL,
  };
  return value;
});",
    "fileName": "db/getUser.ts",
    "id": "SOURCE_REFERENCE:db%2FgetUser.ts@222",
    "line": 7,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:sleep@..%2Futils",
      "MODULE_REFERENCE:User@..%2Ftypes",
    },
    "position": 222,
    "references": Set {
      "SOURCE_REFERENCE:utils.ts@0",
      "SOURCE_REFERENCE:types.ts@29",
      "SOURCE_REFERENCE:db%2FgetUser.ts@128",
      "SOURCE_REFERENCE:db%2FgetUser.ts@166",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:db%2Findex.ts@9": {
    "character": 9,
    "content": "export { getUser } from "./getUser"",
    "fileName": "db/index.ts",
    "id": "SOURCE_REFERENCE:db%2Findex.ts@9",
    "line": 0,
    "modules": Set {},
    "position": 9,
    "references": Set {
      "SOURCE_REFERENCE:db%2FgetUser.ts@222",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@426": {
    "character": 19,
    "content": "cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@426",
    "line": 14,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 426,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@434": {
    "character": 27,
    "content": "async (c) => {
  // await getUser();
  const user = await getUser();
  return c.json(user);
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@434",
    "line": 14,
    "modules": Set {
      "MODULE_REFERENCE:getUser@.%2Fdb",
    },
    "position": 434,
    "references": Set {
      "SOURCE_REFERENCE:db%2Findex.ts@9",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@544": {
    "character": 13,
    "content": "(c) => c.text("Hello, Hono!")",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@544",
    "line": 20,
    "modules": Set {},
    "position": 544,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:types.ts@0": {
    "character": 0,
    "content": "export type Email = string;",
    "fileName": "types.ts",
    "id": "SOURCE_REFERENCE:types.ts@0",
    "line": 0,
    "modules": Set {},
    "position": 0,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:types.ts@29": {
    "character": 0,
    "content": "export type User = {
  name: string;
  email: Email;
};",
    "fileName": "types.ts",
    "id": "SOURCE_REFERENCE:types.ts@29",
    "line": 2,
    "modules": Set {},
    "position": 29,
    "references": Set {
      "SOURCE_REFERENCE:types.ts@0",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:utils.ts@0": {
    "character": 0,
    "content": "export async function sleep(duration: number) {
  return new Promise((resolve) => setTimeout(resolve, duration));
}",
    "fileName": "utils.ts",
    "id": "SOURCE_REFERENCE:utils.ts@0",
    "line": 0,
    "modules": Set {},
    "position": 0,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'goose-quotes' with location '../../../../examples/goose-quotes' 1`] = `
{
  "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure": {
    "id": "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
    "import": "measure",
    "importPath": "@fiberplane/hono-otel",
    "name": "@fiberplane/hono-otel",
    "pathId": "@fiberplane/hono-otel",
    "type": "MODULE_REFERENCE",
    "version": "0.4.0-canary.0",
  },
  "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon": {
    "id": "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
    "import": "neon",
    "importPath": "@neondatabase/serverless",
    "name": "@neondatabase/serverless",
    "pathId": "@neondatabase/serverless",
    "type": "MODULE_REFERENCE",
    "version": "0.10.1",
  },
  "MODULE_REFERENCE:createGoose@.%2Fdb%2Fclient": {
    "id": "MODULE_REFERENCE:createGoose@.%2Fdb%2Fclient",
    "import": "createGoose",
    "importPath": "./db/client",
    "name": "./db/client",
    "pathId": "./db/client",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
    "import": "drizzle",
    "importPath": "drizzle-orm/neon-http",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/neon-http",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@boolean": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@boolean",
    "import": "boolean",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@integer": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@integer",
    "import": "integer",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@jsonb": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@jsonb",
    "import": "jsonb",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@pgTable": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@pgTable",
    "import": "pgTable",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@serial": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@serial",
    "import": "serial",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@text": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@text",
    "import": "text",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm%2Fpg-core@timestamp": {
    "id": "MODULE_REFERENCE:drizzle-orm%2Fpg-core@timestamp",
    "import": "timestamp",
    "importPath": "drizzle-orm/pg-core",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm/pg-core",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm@asc": {
    "id": "MODULE_REFERENCE:drizzle-orm@asc",
    "import": "asc",
    "importPath": "drizzle-orm",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm@eq": {
    "id": "MODULE_REFERENCE:drizzle-orm@eq",
    "import": "eq",
    "importPath": "drizzle-orm",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm@ilike": {
    "id": "MODULE_REFERENCE:drizzle-orm@ilike",
    "import": "ilike",
    "importPath": "drizzle-orm",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm@isNull": {
    "id": "MODULE_REFERENCE:drizzle-orm@isNull",
    "import": "isNull",
    "importPath": "drizzle-orm",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:drizzle-orm@not": {
    "id": "MODULE_REFERENCE:drizzle-orm@not",
    "import": "not",
    "importPath": "drizzle-orm",
    "name": "drizzle-orm",
    "pathId": "drizzle-orm",
    "type": "MODULE_REFERENCE",
    "version": "0.35.3",
  },
  "MODULE_REFERENCE:geese@.%2Fdb%2Fschema": {
    "id": "MODULE_REFERENCE:geese@.%2Fdb%2Fschema",
    "import": "geese",
    "importPath": "./db/schema",
    "name": "./db/schema",
    "pathId": "./db/schema",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:geese@.%2Fschema": {
    "id": "MODULE_REFERENCE:geese@.%2Fschema",
    "import": "geese",
    "importPath": "./schema",
    "name": "./schema",
    "pathId": "./schema",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:getAllGeese@.%2Fdb%2Fclient": {
    "id": "MODULE_REFERENCE:getAllGeese@.%2Fdb%2Fclient",
    "import": "getAllGeese",
    "importPath": "./db/client",
    "name": "./db/client",
    "pathId": "./db/client",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:getGeeseByLanguage@.%2Fdb%2Fclient": {
    "id": "MODULE_REFERENCE:getGeeseByLanguage@.%2Fdb%2Fclient",
    "import": "getGeeseByLanguage",
    "importPath": "./db/client",
    "name": "./db/client",
    "pathId": "./db/client",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient": {
    "id": "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
    "import": "getGooseById",
    "importPath": "./db/client",
    "name": "./db/client",
    "pathId": "./db/client",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:hono%2Fcloudflare-workers@upgradeWebSocket": {
    "id": "MODULE_REFERENCE:hono%2Fcloudflare-workers@upgradeWebSocket",
    "import": "upgradeWebSocket",
    "importPath": "hono/cloudflare-workers",
    "name": "hono",
    "pathId": "hono/cloudflare-workers",
    "type": "MODULE_REFERENCE",
    "version": "4.6.9",
  },
  "MODULE_REFERENCE:hono@HonoRequest": {
    "id": "MODULE_REFERENCE:hono@HonoRequest",
    "import": "HonoRequest",
    "importPath": "hono",
    "name": "hono",
    "pathId": "hono",
    "type": "MODULE_REFERENCE",
    "version": "4.6.9",
  },
  "MODULE_REFERENCE:openai@OpenAI": {
    "id": "MODULE_REFERENCE:openai@OpenAI",
    "import": "OpenAI",
    "importPath": "openai",
    "name": "openai",
    "pathId": "openai",
    "type": "MODULE_REFERENCE",
    "version": "4.55.4",
  },
  "MODULE_REFERENCE:shouldHonk@.%2Futils": {
    "id": "MODULE_REFERENCE:shouldHonk@.%2Futils",
    "import": "shouldHonk",
    "importPath": "./utils",
    "name": "./utils",
    "pathId": "./utils",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient": {
    "id": "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    "import": "updateGoose",
    "importPath": "./db/client",
    "name": "./db/client",
    "pathId": "./db/client",
    "type": "MODULE_REFERENCE",
  },
  "ROUTE_ENTRY:src%2Findex.ts@10116": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@10116",
    "method": "patch",
    "modules": Set {},
    "path": "/api/geese/:id/motivations",
    "position": 10116,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@10156",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@10701": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@10701",
    "method": "post",
    "modules": Set {},
    "path": "/api/geese/:id/change-name-url-form",
    "position": 10701,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@10749",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@1084": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@1084",
    "method": "get",
    "modules": Set {},
    "path": "/api/geese",
    "position": 1084,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@1106",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@11580": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@11580",
    "method": "post",
    "modules": Set {},
    "path": "/api/geese/:id/avatar",
    "position": 11580,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@11614",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@13315": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@13315",
    "method": "get",
    "modules": Set {},
    "path": "/api/geese/:id/avatar",
    "position": 13315,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@13348",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@14420": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@14420",
    "method": undefined,
    "modules": Set {},
    "path": "/always-honk/:echo?",
    "position": 14420,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@14451",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@14611": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@14611",
    "method": "get",
    "modules": Set {},
    "path": "/ws",
    "position": 14611,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@14631",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@1837": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@1837",
    "method": "get",
    "modules": Set {},
    "path": "/api/geese-with-avatar",
    "position": 1837,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@1871",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@2425": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@2425",
    "method": "post",
    "modules": Set {},
    "path": "/api/geese",
    "position": 2425,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@2448",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@3088": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@3088",
    "method": "post",
    "modules": Set {},
    "path": "/api/geese/:id/generate",
    "position": 3088,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@3124",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@5086": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@5086",
    "method": "get",
    "modules": Set {},
    "path": "/api/geese/flock-leaders",
    "position": 5086,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@5122",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@5510": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@5510",
    "method": "get",
    "modules": Set {},
    "path": "/api/geese/:id",
    "position": 5510,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@5536",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@6005": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@6005",
    "method": "post",
    "modules": Set {},
    "path": "/api/geese/:id/bio",
    "position": 6005,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@6036",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@7748": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@7748",
    "method": "post",
    "modules": Set {},
    "path": "/api/geese/:id/honk",
    "position": 7748,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@7780",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@794": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@794",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 794,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@807",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@8515": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@8515",
    "method": "patch",
    "modules": Set {},
    "path": "/api/geese/:id",
    "position": 8515,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@8543",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:src%2Findex.ts@9584": {
    "fileName": "src/index.ts",
    "id": "ROUTE_ENTRY:src%2Findex.ts@9584",
    "method": "get",
    "modules": Set {},
    "path": "/api/geese/language/:language",
    "position": 9584,
    "sources": Set {
      "SOURCE_REFERENCE:src%2Findex.ts@9625",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:src%2Findex.ts@656": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:src%2Findex.ts@794",
      "ROUTE_ENTRY:src%2Findex.ts@1084",
      "ROUTE_ENTRY:src%2Findex.ts@1837",
      "ROUTE_ENTRY:src%2Findex.ts@2425",
      "ROUTE_ENTRY:src%2Findex.ts@3088",
      "ROUTE_ENTRY:src%2Findex.ts@5086",
      "ROUTE_ENTRY:src%2Findex.ts@5510",
      "ROUTE_ENTRY:src%2Findex.ts@6005",
      "ROUTE_ENTRY:src%2Findex.ts@7748",
      "ROUTE_ENTRY:src%2Findex.ts@8515",
      "ROUTE_ENTRY:src%2Findex.ts@9584",
      "ROUTE_ENTRY:src%2Findex.ts@10116",
      "ROUTE_ENTRY:src%2Findex.ts@10701",
      "ROUTE_ENTRY:src%2Findex.ts@11580",
      "ROUTE_ENTRY:src%2Findex.ts@13315",
      "ROUTE_ENTRY:src%2Findex.ts@14420",
      "ROUTE_ENTRY:src%2Findex.ts@14611",
    ],
    "fileName": "src/index.ts",
    "id": "ROUTE_TREE:src%2Findex.ts@656",
    "modules": Set {},
    "name": "app",
    "position": 656,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741": {
    "character": 28,
    "content": "export const getGooseById = measure(
  "getGooseById",
  async (db: ReturnType<typeof drizzle>, id: number) => {
    console.log(\`Fetching goose with id: \${id}\`);
    return (await db.select().from(geese).where(eq(geese.id, id)))?.[0];
  },
);",
    "fileName": "src/db/client.ts",
    "id": "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
    "line": 66,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:geese@.%2Fschema",
      "MODULE_REFERENCE:drizzle-orm@eq",
    },
    "position": 1741,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@2534": {
    "character": 34,
    "content": "export const getGeeseByLanguage = measure(
  "getGeeseByLanguage",
  async (db: ReturnType<typeof drizzle>, language: string) => {
    console.log(\`Fetching geese with programming language: \${language}\`);
    return await db
      .select()
      .from(geese)
      .where(ilike(geese.programmingLanguage, \`%\${language}%\`));
  },
);",
    "fileName": "src/db/client.ts",
    "id": "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@2534",
    "line": 92,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:geese@.%2Fschema",
      "MODULE_REFERENCE:drizzle-orm@ilike",
    },
    "position": 2534,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@260": {
    "character": 27,
    "content": "export const getAllGeese = measure(
  "getAllGeese",
  async (db: ReturnType<typeof drizzle>) => {
    console.log("Fetching all geese");
    return await db.select().from(geese);
  },
);",
    "fileName": "src/db/client.ts",
    "id": "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@260",
    "line": 6,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:geese@.%2Fschema",
    },
    "position": 260,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606": {
    "character": 27,
    "content": "export const updateGoose = measure(
  "updateGoose",
  async (
    db: ReturnType<typeof drizzle>,
    id: number,
    updateData: Partial<typeof geese.$inferInsert>,
  ) => {
    console.log({ action: "updateGoose", id, updateData });

    // Simulate a race condition by splitting the update into two parts
    const updatePromises = Object.entries(updateData).map(
      async ([key, value]) => {
        // Introduce a random delay to increase the chance of interleaved updates
        await new Promise((resolve) =>
          setTimeout(resolve, Math.random() * 1000),
        );

        return db
          .update(geese)
          .set({ [key]: value })
          .where(eq(geese.id, id))
          .returning();
      },
    );

    // Wait for all updates to complete
    const results = await Promise.all(updatePromises);

    // Return the last result, which may not contain all updates
    return results[results.length - 1][0];
  },
);",
    "fileName": "src/db/client.ts",
    "id": "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    "line": 131,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:geese@.%2Fschema",
      "MODULE_REFERENCE:drizzle-orm@eq",
    },
    "position": 3606,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@754": {
    "character": 27,
    "content": "export const createGoose = measure(
  "createGoose",
  async (
    db: ReturnType<typeof drizzle>,
    gooseData: Partial<typeof geese.$inferInsert> &
      Pick<typeof geese.$inferInsert, "name">,
  ) => {
    const { name, isFlockLeader, programmingLanguage, motivations, location } =
      gooseData;
    const description = \`A person named \${name} who talks like a Goose\`;

    console.log({
      action: "createGoose",
      name,
      isFlockLeader,
      programmingLanguage,
    });

    return await db
      .insert(geese)
      .values({
        name,
        description,
        isFlockLeader,
        programmingLanguage,
        motivations,
        location,
      })
      .returning({
        id: geese.id,
        name: geese.name,
        description: geese.description,
        isFlockLeader: geese.isFlockLeader,
        programmingLanguage: geese.programmingLanguage,
        motivations: geese.motivations,
        location: geese.location,
      });
  },
);",
    "fileName": "src/db/client.ts",
    "id": "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@754",
    "line": 26,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:geese@.%2Fschema",
    },
    "position": 754,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134": {
    "character": 21,
    "content": "export const geese = pgTable("geese", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description"),
  isFlockLeader: boolean("is_leader"),
  programmingLanguage: text("programming_language"),
  motivations: jsonb("motivations"),
  location: text("location"),
  bio: text("bio"),
  avatar: text("avatar"),
  honks: integer("honks").default(0),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});",
    "fileName": "src/db/schema.ts",
    "id": "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    "line": 10,
    "modules": Set {
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@pgTable",
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@serial",
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@text",
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@boolean",
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@jsonb",
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@integer",
      "MODULE_REFERENCE:drizzle-orm%2Fpg-core@timestamp",
    },
    "position": 134,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@10156": {
    "character": 40,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");
  const { motivations } = await c.req.json();

  console.log(\`Updating motivations for goose \${id}\`);

  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { motivations }),
  )();

  if (!updatedGoose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  console.log(\`Motivations updated for goose \${id}\`);
  return c.json(updatedGoose);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@10156",
    "line": 391,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    },
    "position": 10156,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@10749": {
    "character": 48,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");
  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const form = (await c.req.formData()) as FormData;
  const name = form.get("name");

  if (!name) {
    console.error("Name is required for changing goose name");
    return c.json({ message: "Name is required" }, 400);
  }

  console.log(\`Changing name of goose \${id} to \${name}\`);
  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { name }),
  )();

  console.log(\`Name changed for goose \${id}\`);
  return c.json(updatedGoose, 200);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@10749",
    "line": 413,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    },
    "position": 10749,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@1106": {
    "character": 22,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const name = c.req.query("name");
  console.log({ action: "search_geese", name });

  if (!name) {
    const allGeese = await measure("getAllGeese", () => getAllGeese(db))();
    console.log({ action: "get_all_geese", count: allGeese.length });
    return c.json(allGeese);
  }

  const searchResults = await measure("searchGeese", () =>
    db
      .select()
      .from(geese)
      .where(ilike(geese.name, \`%\${name}%\`))
      .orderBy(asc(geese.name)),
  )();

  console.log({
    action: "search_geese_results",
    count: searchResults.length,
    name,
  });

  return c.json(searchResults);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@1106",
    "line": 44,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getAllGeese@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:geese@.%2Fdb%2Fschema",
      "MODULE_REFERENCE:drizzle-orm@ilike",
      "MODULE_REFERENCE:drizzle-orm@asc",
    },
    "position": 1106,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@260",
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@11614": {
    "character": 34,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const { avatar, avatarName } = await c.req.parseBody();
  console.log({ action: "update_avatar", gooseId: id, avatarName });
  // Validate the avatar is a file
  if (!(avatar instanceof File)) {
    console.error(\`Invalid avatar type for goose \${id}: \${typeof avatar}\`);
    return c.json(
      { message: "Avatar must be a file", actualType: typeof avatar },
      422,
    );
  }

  // Validate the avatar is a JPEG, PNG, or GIF
  const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
  if (!allowedTypes.includes(avatar.type)) {
    console.error(\`Invalid avatar file type for goose \${id}: \${avatar.type}\`);
    return c.json({ message: "Avatar must be a JPEG, PNG, or GIF image" }, 422);
  }

  // Get the file extension from the avatar's type
  const fileExtension = avatar.type.split("/")[1];

  // Save the avatar to the bucket
  const bucketKey = \`goose-\${id}-avatar-\${Date.now()}.\${fileExtension}\`;
  await measure("uploadAvatar", () =>
    c.env.GOOSE_AVATARS.put(bucketKey, avatar.stream(), {
      httpMetadata: { contentType: avatar.type },
    }),
  )();

  console.log(\`Avatar uploaded for goose \${id}: \${bucketKey}\`);

  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { avatar: bucketKey }),
  )();

  console.log(\`Avatar updated for goose \${id}\`);
  return c.json(updatedGoose);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@11614",
    "line": 445,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    },
    "position": 11614,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@13348": {
    "character": 33,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const avatarKey = goose.avatar;

  if (!avatarKey) {
    console.warn(\`Goose \${id} has no avatar\`);
    return c.json({ message: "Goose has no avatar" }, 404);
  }

  console.log(\`Fetching avatar for goose \${id}: \${avatarKey}\`);

  const avatar = await measure("getAvatar", () =>
    c.env.GOOSE_AVATARS.get(avatarKey),
  )();

  if (!avatar) {
    console.error(\`Avatar not found for goose \${id}: \${avatarKey}\`);
    return c.json({ message: "Goose avatar not found" }, 404);
  }

  console.log(\`Avatar retrieved for goose \${id}\`);
  const responseHeaders = mapR2HttpMetadataToHeaders(avatar.httpMetadata);
  return new Response(avatar.body, {
    headers: responseHeaders,
  });
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@13348",
    "line": 500,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
    },
    "position": 13348,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Findex.ts@16630",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@14451": {
    "character": 31,
    "content": "(c) => {
  const echo = c.req.param("echo");
  console.log(\`Always honk endpoint called with echo: \${echo}\`);
  return c.text(\`Honk honk! \${echo ?? ""}\`);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@14451",
    "line": 543,
    "modules": Set {},
    "position": 14451,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@14631": {
    "character": 2,
    "content": "upgradeWebSocket((c) => {
    return {
      onMessage(event, ws) {
        const { type, payload } = JSON.parse(event.data);
        const sql = neon(c.env.DATABASE_URL);
        const db = drizzle(sql);

        console.log(\`WebSocket message received: \${type}\`);

        switch (type) {
          case "GET_GEESE":
            measure("getAllGeese", () => getAllGeese(db))().then((geese) => {
              console.log(\`Sending \${geese.length} geese over WebSocket\`);
              ws.send(JSON.stringify({ type: "GEESE", payload: geese }));
            });
            break;
          case "CREATE_GOOSE": {
            const {
              name,
              isFlockLeader,
              programmingLanguage,
              motivations,
              location,
            } = payload;
            const description = \`A person named \${name} who talks like a Goose\`;

            console.log(\`Creating new goose via WebSocket: \${name}\`);
            measure("createGoose", () =>
              createGoose(db, {
                name,
                description,
                isFlockLeader,
                programmingLanguage,
                motivations,
                location,
              }),
            )().then((newGoose) => {
              console.log(\`New goose created via WebSocket: \${newGoose[0].id}\`);
              ws.send(JSON.stringify({ type: "NEW_GOOSE", payload: newGoose }));
            });
            break;
          }
          // ... (handle other message types)
          default:
            console.warn(\`Unknown WebSocket message type: \${type}\`);
            break;
        }
      },
      onClose: () => {
        console.log("WebSocket connection closed");
      },
    };
  })",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@14631",
    "line": 551,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcloudflare-workers@upgradeWebSocket",
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getAllGeese@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:createGoose@.%2Fdb%2Fclient",
    },
    "position": 14631,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@260",
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@754",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@16501": {
    "character": 0,
    "content": "function trimPrompt(prompt: string) {
  return prompt
    .trim()
    .split("\\n")
    .map((l) => l.trim())
    .join("\\n");
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@16501",
    "line": 615,
    "modules": Set {},
    "position": 16501,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@16630": {
    "character": 0,
    "content": "function mapR2HttpMetadataToHeaders(metadata?: R2HTTPMetadata): Headers {
  const headers = new Headers();

  if (!metadata) {
    return headers;
  }

  if (metadata.contentType) {
    headers.set("Content-Type", metadata.contentType);
  }
  if (metadata.contentLanguage) {
    headers.set("Content-Language", metadata.contentLanguage);
  }
  if (metadata.contentDisposition) {
    headers.set("Content-Disposition", metadata.contentDisposition);
  }
  if (metadata.contentEncoding) {
    headers.set("Content-Encoding", metadata.contentEncoding);
  }
  if (metadata.cacheControl) {
    headers.set("Cache-Control", metadata.cacheControl);
  }
  if (metadata.cacheExpiry) {
    headers.set("Cache-Expiry", metadata.cacheExpiry.toUTCString());
  }

  return headers;
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@16630",
    "line": 623,
    "modules": Set {},
    "position": 16630,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@1871": {
    "character": 34,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  console.log("Fetching geese with avatars");

  const geeseWithAvatars = await measure("getGeeseWithAvatars", () =>
    db
      .select()
      .from(geese)
      .where(not(isNull(geese.avatar)))
      .orderBy(asc(geese.id)),
  )();

  console.log(\`Found \${geeseWithAvatars.length} geese with avatars\`);
  return c.json(geeseWithAvatars.map((g) => g.id));
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@1871",
    "line": 77,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:geese@.%2Fdb%2Fschema",
      "MODULE_REFERENCE:drizzle-orm@not",
      "MODULE_REFERENCE:drizzle-orm@isNull",
      "MODULE_REFERENCE:drizzle-orm@asc",
    },
    "position": 1871,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@2448": {
    "character": 23,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const { name, isFlockLeader, programmingLanguage, motivations, location } =
    await c.req.json();
  const description = \`A person named \${name} who talks like a Goose\`;

  console.log(\`Creating new goose: \${name}\`);

  const created = await measure("createGoose", () =>
    createGoose(db, {
      name,
      description,
      isFlockLeader,
      programmingLanguage,
      motivations,
      location,
    }),
  )();
  console.log({ action: "create_goose", id: created[0].id, name });
  return c.json(created);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@2448",
    "line": 100,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:createGoose@.%2Fdb%2Fclient",
    },
    "position": 2448,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@754",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@3124": {
    "character": 36,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const { name: gooseName } = goose;

  const openaiClient = new OpenAI({
    apiKey: c.env.OPENAI_API_KEY,
    // HACK - OpenAI freezes fetch when it is imported, so our monkey-patched version needs to be passed here
    fetch: globalThis.fetch,
  });

  console.log(\`Generating quotes for goose: \${gooseName}\`);

  const response = await measure("generateQuotes", () =>
    openaiClient.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: trimPrompt(\`
              You are a goose. You are a very smart goose. You are part goose, part AI. You are a GooseAI.
              You are also influenced heavily by the work of \${gooseName}.

              Always respond without preamble. If I ask for a list, give me a newline-separated list. That's it.
              Don't number it. Don't bullet it. Just newline it.

              Never forget to Honk. A lot.
          \`),
        },
        {
          role: "user",
          content: trimPrompt(\`
              Reimagine five famous quotes by \${gooseName}, except with significant goose influence.
          \`),
        },
      ],
      temperature: 0.7,
      max_tokens: 2048,
    }),
  )();

  const quotes = response.choices[0].message.content
    ?.split("\\n")
    .filter((quote) => quote.length > 0);
  console.log({
    action: "generate_quotes",
    gooseName,
    quoteCount: quotes?.length,
  });
  return c.json({ name: goose.name, quotes });
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@3124",
    "line": 127,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:openai@OpenAI",
    },
    "position": 3124,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Findex.ts@16501",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@5122": {
    "character": 36,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  console.log("Fetching flock leaders");

  const flockLeaders = await measure("getFlockLeaders", () =>
    db.select().from(geese).where(eq(geese.isFlockLeader, true)),
  )();

  console.log(\`Found \${flockLeaders.length} flock leaders\`);

  return c.json(flockLeaders);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@5122",
    "line": 193,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:geese@.%2Fdb%2Fschema",
      "MODULE_REFERENCE:drizzle-orm@eq",
    },
    "position": 5122,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fschema.ts@134",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@5536": {
    "character": 26,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  console.log(\`Fetching goose with id: \${id}\`);

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  console.log(\`Found goose: \${goose.name}\`);
  return c.json(goose);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@5536",
    "line": 211,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
    },
    "position": 5536,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@6036": {
    "character": 31,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const {
    name: gooseName,
    description,
    programmingLanguage,
    motivations,
    location,
  } = goose;

  console.log(\`Generating bio for goose: \${gooseName}\`);

  const openaiClient = new OpenAI({
    apiKey: c.env.OPENAI_API_KEY,
    fetch: globalThis.fetch,
  });

  const response = await measure("generateBio", () =>
    openaiClient.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: trimPrompt(\`
              You are a professional bio writer. Your task is to generate a compelling and engaging bio for a goose.
          \`),
        },
        {
          role: "user",
          content: trimPrompt(\`
              Generate a bio for a goose named \${gooseName} with the following details:
              Description: \${description}
              Programming Language: \${programmingLanguage}
              Motivations: \${motivations}
              Location: \${location}
          \`),
        },
      ],
      temperature: 0.7,
      max_tokens: 2048,
    }),
  )();

  const bio = response.choices[0].message.content;

  // Update the goose with the generated bio
  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { bio }),
  )();

  console.log(\`Bio generated and updated for goose: \${gooseName}\`);
  return c.json(updatedGoose);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@6036",
    "line": 233,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:openai@OpenAI",
      "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    },
    "position": 6036,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Findex.ts@16501",
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@7780": {
    "character": 32,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");
  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const currentHonks = goose.honks || 0;

  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { honks: currentHonks + 1 }),
  )();

  console.log(
    \`Honk received for goose: \${goose.name}. New honk count: \${updatedGoose.honks}\`,
  );
  return c.json({
    message: \`Honk honk! \${goose.name} honks back at you!\`,
    honks: updatedGoose.honks,
  });
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@7780",
    "line": 301,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    },
    "position": 7780,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@807": {
    "character": 13,
    "content": "(c) => {
  const honk = shouldHonk(c.req) ? "Honk honk!" : "";
  console.log(\`Home page accessed. Honk: \${honk}\`);
  return c.text(\`Hello Goose Quotes! \${honk}\`.trim());
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@807",
    "line": 33,
    "modules": Set {
      "MODULE_REFERENCE:shouldHonk@.%2Futils",
    },
    "position": 807,
    "references": Set {
      "SOURCE_REFERENCE:src%2Futils.ts@42",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@8543": {
    "character": 28,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");
  const updateData = await c.req.json();

  console.log(\`Updating goose \${id} with data:\`, updateData);

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  // Simulate a race condition by splitting the update into multiple parts
  const updatePromises = Object.entries(updateData).map(
    async ([key, value]) => {
      await new Promise((resolve) => setTimeout(resolve, Math.random() * 1000));
      return measure("updateGoose", () =>
        updateGoose(db, +id, { [key]: value }),
      )();
    },
  );

  await Promise.all(updatePromises);

  const updatedGoose = await measure("getGooseById", () =>
    getGooseById(db, +id),
  )();

  console.log(\`Goose \${id} updated successfully\`);
  return c.json(updatedGoose);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@8543",
    "line": 331,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGooseById@.%2Fdb%2Fclient",
      "MODULE_REFERENCE:updateGoose@.%2Fdb%2Fclient",
    },
    "position": 8543,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@1741",
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@3606",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Findex.ts@9625": {
    "character": 41,
    "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const language = c.req.param("language");

  console.log(\`Fetching geese with programming language: \${language}\`);

  const geeseByLanguage = await measure("getGeeseByLanguage", () =>
    getGeeseByLanguage(db, language),
  )();

  console.log(
    \`Found \${geeseByLanguage.length} geese for language: \${language}\`,
  );
  return c.json(geeseByLanguage);
}",
    "fileName": "src/index.ts",
    "id": "SOURCE_REFERENCE:src%2Findex.ts@9625",
    "line": 370,
    "modules": Set {
      "MODULE_REFERENCE:%40neondatabase%2Fserverless@neon",
      "MODULE_REFERENCE:drizzle-orm%2Fneon-http@drizzle",
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:getGeeseByLanguage@.%2Fdb%2Fclient",
    },
    "position": 9625,
    "references": Set {
      "SOURCE_REFERENCE:src%2Fdb%2Fclient.ts@2534",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:src%2Futils.ts@42": {
    "character": 0,
    "content": "export function shouldHonk(r: HonoRequest) {
  const { shouldHonk } = r.query();
  return typeof shouldHonk !== "undefined";
}",
    "fileName": "src/utils.ts",
    "id": "SOURCE_REFERENCE:src%2Futils.ts@42",
    "line": 2,
    "modules": Set {
      "MODULE_REFERENCE:hono@HonoRequest",
    },
    "position": 42,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'hono factory' with location '../../test-cases/hono-factory' 1`] = `
{
  "ROUTE_ENTRY:bye.ts@54": {
    "fileName": "bye.ts",
    "id": "ROUTE_ENTRY:bye.ts@54",
    "method": "get",
    "modules": Set {},
    "path": "/bye",
    "position": 54,
    "sources": Set {
      "SOURCE_REFERENCE:bye.ts@70",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:factory.ts@281": {
    "fileName": "factory.ts",
    "id": "ROUTE_ENTRY:factory.ts@281",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 281,
    "sources": Set {
      "SOURCE_REFERENCE:factory.ts@294",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@124": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@124",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 124,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@142",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@173": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@173",
    "method": "get",
    "modules": Set {},
    "path": "/bye",
    "position": 173,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@194",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:panic.ts@54": {
    "fileName": "panic.ts",
    "id": "ROUTE_ENTRY:panic.ts@54",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 54,
    "sources": Set {
      "SOURCE_REFERENCE:panic.ts@67",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:silence.ts@58": {
    "fileName": "silence.ts",
    "id": "ROUTE_ENTRY:silence.ts@58",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 58,
    "sources": Set {
      "SOURCE_REFERENCE:silence.ts@75",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:bye.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:bye.ts@54",
    ],
    "fileName": "bye.ts",
    "id": "ROUTE_TREE:bye.ts@36",
    "modules": Set {},
    "name": "bye",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:factory.ts@248": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:factory.ts@281",
      "ROUTE_TREE_REFERENCE:bye.ts@36",
      "ROUTE_TREE_REFERENCE:silence.ts@36",
      "ROUTE_TREE_REFERENCE:panic.ts@36",
    ],
    "fileName": "factory.ts",
    "id": "ROUTE_TREE:factory.ts@248",
    "modules": Set {},
    "name": "app",
    "position": 248,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:index.ts@101": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@124",
      "ROUTE_ENTRY:index.ts@173",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@101",
    "modules": Set {},
    "name": "subHello",
    "position": 101,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:index.ts@75": {
    "baseUrl": "",
    "entries": [
      "ROUTE_TREE_REFERENCE:factory.ts@248",
      "ROUTE_TREE_REFERENCE:index.ts@101",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@75",
    "modules": Set {},
    "name": "app",
    "position": 75,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:panic.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:panic.ts@54",
    ],
    "fileName": "panic.ts",
    "id": "ROUTE_TREE:panic.ts@36",
    "modules": Set {},
    "name": "app",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:silence.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:silence.ts@58",
    ],
    "fileName": "silence.ts",
    "id": "ROUTE_TREE:silence.ts@36",
    "modules": Set {},
    "name": "silence",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE_REFERENCE:bye.ts@36": {
    "fileName": "bye.ts",
    "id": "ROUTE_TREE_REFERENCE:bye.ts@36",
    "name": "bye",
    "path": "/bye",
    "position": 36,
    "targetId": "ROUTE_TREE:bye.ts@36",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "ROUTE_TREE_REFERENCE:factory.ts@248": {
    "fileName": "factory.ts",
    "id": "ROUTE_TREE_REFERENCE:factory.ts@248",
    "name": "app",
    "path": "/",
    "position": 248,
    "targetId": "ROUTE_TREE:factory.ts@248",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "ROUTE_TREE_REFERENCE:index.ts@101": {
    "fileName": "index.ts",
    "id": "ROUTE_TREE_REFERENCE:index.ts@101",
    "name": "subHello",
    "path": "/sub",
    "position": 101,
    "targetId": "ROUTE_TREE:index.ts@101",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "ROUTE_TREE_REFERENCE:panic.ts@36": {
    "fileName": "panic.ts",
    "id": "ROUTE_TREE_REFERENCE:panic.ts@36",
    "name": "app",
    "path": "/panic",
    "position": 36,
    "targetId": "ROUTE_TREE:panic.ts@36",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "ROUTE_TREE_REFERENCE:silence.ts@36": {
    "fileName": "silence.ts",
    "id": "ROUTE_TREE_REFERENCE:silence.ts@36",
    "name": "silence",
    "path": "/silence",
    "position": 36,
    "targetId": "ROUTE_TREE:silence.ts@36",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "SOURCE_REFERENCE:bye.ts@70": {
    "character": 16,
    "content": "(c) => c.text("Bye, sub!")",
    "fileName": "bye.ts",
    "id": "SOURCE_REFERENCE:bye.ts@70",
    "line": 3,
    "modules": Set {},
    "position": 70,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:factory.ts@294": {
    "character": 15,
    "content": "(c) => c.text("Hello, Hono!")",
    "fileName": "factory.ts",
    "id": "SOURCE_REFERENCE:factory.ts@294",
    "line": 9,
    "modules": Set {},
    "position": 294,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@142": {
    "character": 18,
    "content": "(c) => c.text("Hello, sub!")",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@142",
    "line": 6,
    "modules": Set {},
    "position": 142,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@194": {
    "character": 21,
    "content": "(c) => c.text("Bye, sub!")",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@194",
    "line": 7,
    "modules": Set {},
    "position": 194,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:panic.ts@67": {
    "character": 13,
    "content": "(c) => {
  c.status(500);
  return c.text("Panic!");
}",
    "fileName": "panic.ts",
    "id": "SOURCE_REFERENCE:panic.ts@67",
    "line": 3,
    "modules": Set {},
    "position": 67,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:silence.ts@75": {
    "character": 17,
    "content": "(c) => c.text("...")",
    "fileName": "silence.ts",
    "id": "SOURCE_REFERENCE:silence.ts@75",
    "line": 3,
    "modules": Set {},
    "position": 75,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'import as' with location '../../test-cases/import-as' 1`] = `
{
  "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure": {
    "id": "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
    "import": "measure",
    "importPath": "@fiberplane/hono-otel",
    "name": "@fiberplane/hono-otel",
    "pathId": "@fiberplane/hono-otel",
    "type": "MODULE_REFERENCE",
    "version": "0.3.1",
  },
  "MODULE_REFERENCE:db@.%2Fdb": {
    "id": "MODULE_REFERENCE:db@.%2Fdb",
    "import": "* as db",
    "importPath": "./db",
    "name": "./db",
    "pathId": "./db",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:getUserProfile@.%2Fdb": {
    "id": "MODULE_REFERENCE:getUserProfile@.%2Fdb",
    "import": "getProfile as getUserProfile",
    "importPath": "./db",
    "name": "./db",
    "pathId": "./db",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:hono%2Fcors@cors": {
    "id": "MODULE_REFERENCE:hono%2Fcors@cors",
    "import": "cors",
    "importPath": "hono/cors",
    "name": "hono",
    "pathId": "hono/cors",
    "type": "MODULE_REFERENCE",
    "version": "4.6.9",
  },
  "ROUTE_ENTRY:index.ts@170": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@170",
    "method": "get",
    "modules": Set {},
    "path": "/user/1/profile",
    "position": 170,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@197",
      "SOURCE_REFERENCE:index.ts@205",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@293": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@293",
    "method": "get",
    "modules": Set {},
    "path": "/user/1",
    "position": 293,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@312",
      "SOURCE_REFERENCE:index.ts@320",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:index.ts@151": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@170",
      "ROUTE_ENTRY:index.ts@293",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@151",
    "modules": Set {},
    "name": "app",
    "position": 151,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "SOURCE_REFERENCE:db.ts@157": {
    "character": 13,
    "content": "export const getUser = measure("getUser", async () => {
  await sleep();
  const value = {
    name: "John Doe",
    email: "john@doe.com",
  };
  return value;
});",
    "fileName": "db.ts",
    "id": "SOURCE_REFERENCE:db.ts@157",
    "line": 5,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
    },
    "position": 157,
    "references": Set {
      "SOURCE_REFERENCE:db.ts@56",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:db.ts@310": {
    "character": 0,
    "content": "export async function getProfile() {
  const user = await getUser();
  await sleep(10);
  return {
    ...user,
    image: "https://xsgames.co/randomusers/avatar.php?g=pixel",
  };
}",
    "fileName": "db.ts",
    "id": "SOURCE_REFERENCE:db.ts@310",
    "line": 14,
    "modules": Set {},
    "position": 310,
    "references": Set {
      "SOURCE_REFERENCE:db.ts@157",
      "SOURCE_REFERENCE:db.ts@56",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:db.ts@56": {
    "character": 6,
    "content": "const sleep = (duration = 100) =>
  new Promise((resolve) => setTimeout(resolve, duration))",
    "fileName": "db.ts",
    "id": "SOURCE_REFERENCE:db.ts@56",
    "line": 2,
    "modules": Set {},
    "position": 56,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@197": {
    "character": 27,
    "content": "cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@197",
    "line": 7,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 197,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@205": {
    "character": 35,
    "content": "async (c) => {
  const profile = await getUserProfile();
  return c.json(profile);
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@205",
    "line": 7,
    "modules": Set {
      "MODULE_REFERENCE:getUserProfile@.%2Fdb",
    },
    "position": 205,
    "references": Set {
      "SOURCE_REFERENCE:db.ts@310",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@312": {
    "character": 19,
    "content": "cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@312",
    "line": 12,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 312,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@320": {
    "character": 27,
    "content": "async (c) => {
  const user = await db.getUser();
  return c.json(user);
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@320",
    "line": 12,
    "modules": Set {
      "MODULE_REFERENCE:db@.%2Fdb",
    },
    "position": 320,
    "references": Set {
      "SOURCE_REFERENCE:db.ts@157",
    },
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'module imports' with location '../../test-cases/module-imports' 1`] = `
{
  "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure": {
    "id": "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
    "import": "measure",
    "importPath": "@fiberplane/hono-otel",
    "name": "@fiberplane/hono-otel",
    "pathId": "@fiberplane/hono-otel",
    "type": "MODULE_REFERENCE",
    "version": "0.3.1",
  },
  "MODULE_REFERENCE:User@.%2Ftypes": {
    "id": "MODULE_REFERENCE:User@.%2Ftypes",
    "import": "User",
    "importPath": "./types",
    "name": "./types",
    "pathId": "./types",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:getUser@.%2Fdb": {
    "id": "MODULE_REFERENCE:getUser@.%2Fdb",
    "import": "getUser",
    "importPath": "./db",
    "name": "./db",
    "pathId": "./db",
    "type": "MODULE_REFERENCE",
  },
  "MODULE_REFERENCE:hono%2Fcors@cors": {
    "id": "MODULE_REFERENCE:hono%2Fcors@cors",
    "import": "cors",
    "importPath": "hono/cors",
    "name": "hono",
    "pathId": "hono/cors",
    "type": "MODULE_REFERENCE",
    "version": "4.6.9",
  },
  "ROUTE_ENTRY:index.ts@133": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@133",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 133,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@207",
      "SOURCE_REFERENCE:index.ts@223",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@456": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@456",
    "method": "get",
    "modules": Set {},
    "path": "/slow",
    "position": 456,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@473",
      "SOURCE_REFERENCE:index.ts@481",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@848": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@848",
    "method": "get",
    "modules": Set {},
    "path": "user/1",
    "position": 848,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@866",
      "SOURCE_REFERENCE:index.ts@874",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:index.ts@114": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@133",
      "ROUTE_ENTRY:index.ts@456",
      "ROUTE_ENTRY:index.ts@848",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@114",
    "modules": Set {},
    "name": "app",
    "position": 114,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "SOURCE_REFERENCE:db.ts@137": {
    "character": 23,
    "content": "export const getUser = measure("getUser", async () => {
  await new Promise((resolve) => setTimeout(resolve, 100));
  const value: User = {
    name: "John Doe",
    email: "john@doe.com",
  };
  return value;
});",
    "fileName": "db.ts",
    "id": "SOURCE_REFERENCE:db.ts@137",
    "line": 4,
    "modules": Set {
      "MODULE_REFERENCE:%40fiberplane%2Fhono-otel@measure",
      "MODULE_REFERENCE:User@.%2Ftypes",
    },
    "position": 137,
    "references": Set {
      "SOURCE_REFERENCE:types.ts@29",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@207": {
    "character": 2,
    "content": "() => cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@207",
    "line": 9,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 207,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@223": {
    "character": 2,
    "content": "(c) => c.text("Hello, Hono!")",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@223",
    "line": 10,
    "modules": Set {},
    "position": 223,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@290": {
    "character": 0,
    "content": "export async function sleep(duration: number) {
  return new Promise((resolve) => setTimeout(resolve, duration));
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@290",
    "line": 14,
    "modules": Set {},
    "position": 290,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@473": {
    "character": 17,
    "content": "cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@473",
    "line": 19,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 473,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@481": {
    "character": 25,
    "content": "async (c) => {
  await sleep(1000);
  return c.text("Hello, Hono (slow)!");
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@481",
    "line": 19,
    "modules": Set {},
    "position": 481,
    "references": Set {
      "SOURCE_REFERENCE:index.ts@290",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@866": {
    "character": 18,
    "content": "cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@866",
    "line": 32,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 866,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@874": {
    "character": 26,
    "content": "async (c) => {
  // await getUser();
  const user = await getUser();
  return c.json(user);
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@874",
    "line": 32,
    "modules": Set {
      "MODULE_REFERENCE:getUser@.%2Fdb",
    },
    "position": 874,
    "references": Set {
      "SOURCE_REFERENCE:db.ts@137",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:types.ts@0": {
    "character": 0,
    "content": "export type Email = string;",
    "fileName": "types.ts",
    "id": "SOURCE_REFERENCE:types.ts@0",
    "line": 0,
    "modules": Set {},
    "position": 0,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:types.ts@29": {
    "character": 0,
    "content": "export type User = {
  name: string;
  email: Email;
};",
    "fileName": "types.ts",
    "id": "SOURCE_REFERENCE:types.ts@29",
    "line": 2,
    "modules": Set {},
    "position": 29,
    "references": Set {
      "SOURCE_REFERENCE:types.ts@0",
    },
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'multiple files' with location '../../test-cases/multiple' 1`] = `
{
  "ROUTE_ENTRY:index.ts@55": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@55",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 55,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@68",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:other.ts@102": {
    "fileName": "other.ts",
    "id": "ROUTE_ENTRY:other.ts@102",
    "method": "post",
    "modules": Set {},
    "path": "/",
    "position": 102,
    "sources": Set {
      "SOURCE_REFERENCE:other.ts@116",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:other.ts@54": {
    "fileName": "other.ts",
    "id": "ROUTE_ENTRY:other.ts@54",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 54,
    "sources": Set {
      "SOURCE_REFERENCE:other.ts@67",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:index.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@55",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@36",
    "modules": Set {},
    "name": "app",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:other.ts@35": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:other.ts@54",
      "ROUTE_ENTRY:other.ts@102",
    ],
    "fileName": "other.ts",
    "id": "ROUTE_TREE:other.ts@35",
    "modules": Set {},
    "name": "app",
    "position": 35,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "SOURCE_REFERENCE:index.ts@68": {
    "character": 13,
    "content": "(c) => c.text("Hello, Hono!")",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@68",
    "line": 4,
    "modules": Set {},
    "position": 68,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:other.ts@116": {
    "character": 14,
    "content": "(c) => c.json({ hello: "world" })",
    "fileName": "other.ts",
    "id": "SOURCE_REFERENCE:other.ts@116",
    "line": 7,
    "modules": Set {},
    "position": 116,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:other.ts@67": {
    "character": 13,
    "content": "(c) => {
  return c.json({});
}",
    "fileName": "other.ts",
    "id": "SOURCE_REFERENCE:other.ts@67",
    "line": 3,
    "modules": Set {},
    "position": 67,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'single file' with location '../../test-cases/single' 1`] = `
{
  "ROUTE_ENTRY:index.ts@55": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@55",
    "method": "get",
    "modules": Set {},
    "path": "/",
    "position": 55,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@68",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:index.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@55",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@36",
    "modules": Set {},
    "name": "app",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "SOURCE_REFERENCE:index.ts@68": {
    "character": 13,
    "content": "(c) => c.text("Hello, Hono!")",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@68",
    "line": 4,
    "modules": Set {},
    "position": 68,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
}
`;

exports[`run test 'split routes' with location '../../test-cases/split-routes' 1`] = `
{
  "MIDDLEWARE_ENTRY:index.ts@619": {
    "fileName": "index.ts",
    "id": "MIDDLEWARE_ENTRY:index.ts@619",
    "modules": Set {},
    "path": "/",
    "position": 619,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@627",
    },
    "type": "MIDDLEWARE_ENTRY",
  },
  "MODULE_REFERENCE:hono%2Fcors@cors": {
    "id": "MODULE_REFERENCE:hono%2Fcors@cors",
    "import": "cors",
    "importPath": "hono/cors",
    "name": "hono",
    "pathId": "hono/cors",
    "type": "MODULE_REFERENCE",
    "version": "4.6.9",
  },
  "ROUTE_ENTRY:index.ts@320": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@320",
    "method": "get",
    "modules": Set {},
    "path": "/api/v1/projects",
    "position": 320,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@353",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:index.ts@394": {
    "fileName": "index.ts",
    "id": "ROUTE_ENTRY:index.ts@394",
    "method": "get",
    "modules": Set {},
    "path": "/api/v1/projects/:id",
    "position": 394,
    "sources": Set {
      "SOURCE_REFERENCE:index.ts@431",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:projects.ts@253": {
    "fileName": "projects.ts",
    "id": "ROUTE_ENTRY:projects.ts@253",
    "method": "get",
    "modules": Set {},
    "path": "/api/v1/projects",
    "position": 253,
    "sources": Set {
      "SOURCE_REFERENCE:projects.ts@286",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:projects.ts@327": {
    "fileName": "projects.ts",
    "id": "ROUTE_ENTRY:projects.ts@327",
    "method": "get",
    "modules": Set {},
    "path": "/api/v1/projects/:id",
    "position": 327,
    "sources": Set {
      "SOURCE_REFERENCE:projects.ts@364",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:users.ts@179": {
    "fileName": "users.ts",
    "id": "ROUTE_ENTRY:users.ts@179",
    "method": "get",
    "modules": Set {},
    "path": "/api/v1/users",
    "position": 179,
    "sources": Set {
      "SOURCE_REFERENCE:users.ts@206",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_ENTRY:users.ts@244": {
    "fileName": "users.ts",
    "id": "ROUTE_ENTRY:users.ts@244",
    "method": "get",
    "modules": Set {},
    "path": "/api/v1/users/:id",
    "position": 244,
    "sources": Set {
      "SOURCE_REFERENCE:users.ts@275",
    },
    "type": "ROUTE_ENTRY",
  },
  "ROUTE_TREE:index.ts@103": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:index.ts@320",
      "ROUTE_ENTRY:index.ts@394",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@103",
    "modules": Set {},
    "name": "projects",
    "position": 103,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:index.ts@601": {
    "baseUrl": "",
    "entries": [
      "MIDDLEWARE_ENTRY:index.ts@619",
      "ROUTE_TREE_REFERENCE:users.ts@36",
      "ROUTE_TREE_REFERENCE:index.ts@103",
    ],
    "fileName": "index.ts",
    "id": "ROUTE_TREE:index.ts@601",
    "modules": Set {},
    "name": "app",
    "position": 601,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:projects.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:projects.ts@253",
      "ROUTE_ENTRY:projects.ts@327",
    ],
    "fileName": "projects.ts",
    "id": "ROUTE_TREE:projects.ts@36",
    "modules": Set {},
    "name": "projects",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE:users.ts@36": {
    "baseUrl": "",
    "entries": [
      "ROUTE_ENTRY:users.ts@179",
      "ROUTE_ENTRY:users.ts@244",
    ],
    "fileName": "users.ts",
    "id": "ROUTE_TREE:users.ts@36",
    "modules": Set {},
    "name": "users",
    "position": 36,
    "sources": Set {},
    "type": "ROUTE_TREE",
  },
  "ROUTE_TREE_REFERENCE:index.ts@103": {
    "fileName": "index.ts",
    "id": "ROUTE_TREE_REFERENCE:index.ts@103",
    "name": "projects",
    "path": "/",
    "position": 103,
    "targetId": "ROUTE_TREE:index.ts@103",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "ROUTE_TREE_REFERENCE:users.ts@36": {
    "fileName": "users.ts",
    "id": "ROUTE_TREE_REFERENCE:users.ts@36",
    "name": "users",
    "path": "/",
    "position": 36,
    "targetId": "ROUTE_TREE:users.ts@36",
    "type": "ROUTE_TREE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@133": {
    "character": 6,
    "content": "const PROJECTS = [
  {
    id: 1,
    name: "Project A",
    description: "Project A description",
  },
  {
    id: 2,
    name: "Project B",
    description: "Project B description",
  },
]",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@133",
    "line": 6,
    "modules": Set {},
    "position": 133,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@353": {
    "character": 33,
    "content": "(c) => {
  return c.json(PROJECTS);
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@353",
    "line": 19,
    "modules": Set {},
    "position": 353,
    "references": Set {
      "SOURCE_REFERENCE:index.ts@133",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@431": {
    "character": 37,
    "content": "(c) => {
  const id = Number.parseInt(c.req.param("id"));
  const project = PROJECTS.find((p) => p.id === id);
  return c.json(project);
}",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@431",
    "line": 23,
    "modules": Set {},
    "position": 431,
    "references": Set {
      "SOURCE_REFERENCE:index.ts@133",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:index.ts@627": {
    "character": 8,
    "content": "cors()",
    "fileName": "index.ts",
    "id": "SOURCE_REFERENCE:index.ts@627",
    "line": 32,
    "modules": Set {
      "MODULE_REFERENCE:hono%2Fcors@cors",
    },
    "position": 627,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:projects.ts@286": {
    "character": 33,
    "content": "(c) => {
  return c.json(PROJECTS);
}",
    "fileName": "projects.ts",
    "id": "SOURCE_REFERENCE:projects.ts@286",
    "line": 17,
    "modules": Set {},
    "position": 286,
    "references": Set {
      "SOURCE_REFERENCE:projects.ts@66",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:projects.ts@364": {
    "character": 37,
    "content": "(c) => {
  const id = Number.parseInt(c.req.param("id"));
  const project = PROJECTS.find((p) => p.id === id);
  return c.json(project);
}",
    "fileName": "projects.ts",
    "id": "SOURCE_REFERENCE:projects.ts@364",
    "line": 21,
    "modules": Set {},
    "position": 364,
    "references": Set {
      "SOURCE_REFERENCE:projects.ts@66",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:projects.ts@66": {
    "character": 6,
    "content": "const PROJECTS = [
  {
    id: 1,
    name: "Project A",
    description: "Project A description",
  },
  {
    id: 2,
    name: "Project B",
    description: "Project B description",
  },
]",
    "fileName": "projects.ts",
    "id": "SOURCE_REFERENCE:projects.ts@66",
    "line": 4,
    "modules": Set {},
    "position": 66,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:users.ts@206": {
    "character": 27,
    "content": "(c) => {
  return c.json(USERS);
}",
    "fileName": "users.ts",
    "id": "SOURCE_REFERENCE:users.ts@206",
    "line": 17,
    "modules": Set {},
    "position": 206,
    "references": Set {
      "SOURCE_REFERENCE:users.ts@63",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:users.ts@275": {
    "character": 31,
    "content": "(c) => {
  const id = Number.parseInt(c.req.param("id"));
  const user = USERS.find((u) => u.id === id);
  return c.json(user);
}",
    "fileName": "users.ts",
    "id": "SOURCE_REFERENCE:users.ts@275",
    "line": 21,
    "modules": Set {},
    "position": 275,
    "references": Set {
      "SOURCE_REFERENCE:users.ts@63",
    },
    "type": "SOURCE_REFERENCE",
  },
  "SOURCE_REFERENCE:users.ts@63": {
    "character": 6,
    "content": "const USERS = [
  {
    id: 1,
    name: "Alice",
    age: 25,
  },
  {
    id: 2,
    name: "Bob",
    age: 30,
  },
]",
    "fileName": "users.ts",
    "id": "SOURCE_REFERENCE:users.ts@63",
    "line": 4,
    "modules": Set {},
    "position": 63,
    "references": Set {},
    "type": "SOURCE_REFERENCE",
  },
}
`;
