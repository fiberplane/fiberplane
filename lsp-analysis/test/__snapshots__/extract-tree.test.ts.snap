// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`run test 'api' with location '../../api' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "MIDDLEWARE_ENTRY:src/app.ts@1135": {
      "fileName": "src/app.ts",
      "id": "MIDDLEWARE_ENTRY:src/app.ts@1135",
      "modules": [],
      "path": "/",
      "position": 1135,
      "sources": [
        "SOURCE_REFERENCE:src/app.ts@1143",
      ],
      "type": "MIDDLEWARE_ENTRY",
    },
    "MIDDLEWARE_ENTRY:src/app.ts@1538": {
      "fileName": "src/app.ts",
      "id": "MIDDLEWARE_ENTRY:src/app.ts@1538",
      "modules": [],
      "path": "/",
      "position": 1538,
      "sources": [
        "SOURCE_REFERENCE:src/app.ts@1551",
      ],
      "type": "MIDDLEWARE_ENTRY",
    },
    "MIDDLEWARE_ENTRY:src/app.ts@948": {
      "fileName": "src/app.ts",
      "id": "MIDDLEWARE_ENTRY:src/app.ts@948",
      "modules": [],
      "path": "/",
      "position": 948,
      "sources": [
        "SOURCE_REFERENCE:src/app.ts@956",
      ],
      "type": "MIDDLEWARE_ENTRY",
    },
    "MIDDLEWARE_ENTRY:src/index.node.ts@1521": {
      "fileName": "src/index.node.ts",
      "id": "MIDDLEWARE_ENTRY:src/index.node.ts@1521",
      "modules": [],
      "path": "/*",
      "position": 1521,
      "sources": [],
      "type": "MIDDLEWARE_ENTRY",
    },
    "ROUTE_ENTRY:src/index.node.ts@1684": {
      "fileName": "src/index.node.ts",
      "id": "ROUTE_ENTRY:src/index.node.ts@1684",
      "method": "get",
      "modules": [],
      "path": "*",
      "position": 1684,
      "sources": [],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@10611": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@10611",
      "method": "get",
      "modules": [],
      "path": "/v0/webhonc",
      "position": 10611,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@10634",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@1138": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@1138",
      "method": "get",
      "modules": [],
      "path": "/v0/app-routes",
      "position": 1138,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@1164",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@1494": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@1494",
      "method": "post",
      "modules": [],
      "path": "/v0/refresh-app-routes",
      "position": 1494,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@1529",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@1736": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@1736",
      "method": "post",
      "modules": [],
      "path": "/v0/app-routes",
      "position": 1736,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@1768",
        "SOURCE_REFERENCE:src/routes/app-routes.ts@1869",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@2393": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@2393",
      "method": "post",
      "modules": [],
      "path": "/v0/probed-routes",
      "position": 2393,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@2428",
        "SOURCE_REFERENCE:src/routes/app-routes.ts@2470",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@3485": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@3485",
      "method": "delete",
      "modules": [],
      "path": "/v0/app-routes/:method/:path",
      "position": 3485,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@3528",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@4058": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@4058",
      "method": "delete",
      "modules": [],
      "path": "/v0/app-requests/",
      "position": 4058,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@4090",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@4230": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@4230",
      "method": "get",
      "modules": [],
      "path": "/v0/all-requests",
      "position": 4230,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@4258",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/app-routes.ts@5752": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_ENTRY:src/routes/app-routes.ts@5752",
      "method": undefined,
      "modules": [],
      "path": "/v0/proxy-request/*",
      "position": 5752,
      "sources": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@5869",
        "SOURCE_REFERENCE:src/routes/app-routes.ts@5920",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/auth.ts@2241": {
      "fileName": "src/routes/auth.ts",
      "id": "ROUTE_ENTRY:src/routes/auth.ts@2241",
      "method": "delete",
      "modules": [],
      "path": "/v0/auth/user",
      "position": 2241,
      "sources": [
        "SOURCE_REFERENCE:src/routes/auth.ts@2269",
        "SOURCE_REFERENCE:src/routes/auth.ts@2277",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/auth.ts@2539": {
      "fileName": "src/routes/auth.ts",
      "id": "ROUTE_ENTRY:src/routes/auth.ts@2539",
      "method": "post",
      "modules": [],
      "path": "/v0/auth/verify",
      "position": 2539,
      "sources": [
        "SOURCE_REFERENCE:src/routes/auth.ts@2567",
        "SOURCE_REFERENCE:src/routes/auth.ts@2575",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/auth.ts@3212": {
      "fileName": "src/routes/auth.ts",
      "id": "ROUTE_ENTRY:src/routes/auth.ts@3212",
      "method": "post",
      "modules": [],
      "path": "/v0/auth/success",
      "position": 3212,
      "sources": [
        "SOURCE_REFERENCE:src/routes/auth.ts@3246",
        "SOURCE_REFERENCE:src/routes/auth.ts@3256",
        "SOURCE_REFERENCE:src/routes/auth.ts@3298",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/auth.ts@637": {
      "fileName": "src/routes/auth.ts",
      "id": "ROUTE_ENTRY:src/routes/auth.ts@637",
      "method": "get",
      "modules": [],
      "path": "/v0/auth/user",
      "position": 637,
      "sources": [
        "SOURCE_REFERENCE:src/routes/auth.ts@662",
        "SOURCE_REFERENCE:src/routes/auth.ts@670",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/inference/inference.ts@1427": {
      "fileName": "src/routes/inference/inference.ts",
      "id": "ROUTE_ENTRY:src/routes/inference/inference.ts@1427",
      "method": "post",
      "modules": [],
      "path": "/v0/generate-request",
      "position": 1427,
      "sources": [
        "SOURCE_REFERENCE:src/routes/inference/inference.ts@1465",
        "SOURCE_REFERENCE:src/routes/inference/inference.ts@1475",
        "SOURCE_REFERENCE:src/routes/inference/inference.ts@1520",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/inference/inference.ts@790": {
      "fileName": "src/routes/inference/inference.ts",
      "id": "ROUTE_ENTRY:src/routes/inference/inference.ts@790",
      "method": "post",
      "modules": [],
      "path": "/v0/expand-function",
      "position": 790,
      "sources": [
        "SOURCE_REFERENCE:src/routes/inference/inference.ts@822",
        "SOURCE_REFERENCE:src/routes/inference/inference.ts@830",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/settings.ts@401": {
      "fileName": "src/routes/settings.ts",
      "id": "ROUTE_ENTRY:src/routes/settings.ts@401",
      "method": "get",
      "modules": [],
      "path": "/v0/settings",
      "position": 401,
      "sources": [
        "SOURCE_REFERENCE:src/routes/settings.ts@425",
        "SOURCE_REFERENCE:src/routes/settings.ts@433",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/settings.ts@698": {
      "fileName": "src/routes/settings.ts",
      "id": "ROUTE_ENTRY:src/routes/settings.ts@698",
      "method": "post",
      "modules": [],
      "path": "/v0/settings",
      "position": 698,
      "sources": [
        "SOURCE_REFERENCE:src/routes/settings.ts@723",
        "SOURCE_REFERENCE:src/routes/settings.ts@731",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/source.ts@1359": {
      "fileName": "src/routes/source.ts",
      "id": "ROUTE_ENTRY:src/routes/source.ts@1359",
      "method": "post",
      "modules": [],
      "path": "/v0/source-function",
      "position": 1359,
      "sources": [
        "SOURCE_REFERENCE:src/routes/source.ts@1391",
        "SOURCE_REFERENCE:src/routes/source.ts@1399",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/source.ts@435": {
      "fileName": "src/routes/source.ts",
      "id": "ROUTE_ENTRY:src/routes/source.ts@435",
      "method": "get",
      "modules": [],
      "path": "/v0/source",
      "position": 435,
      "sources": [
        "SOURCE_REFERENCE:src/routes/source.ts@462",
        "SOURCE_REFERENCE:src/routes/source.ts@472",
        "SOURCE_REFERENCE:src/routes/source.ts@580",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/traces.ts@2035": {
      "fileName": "src/routes/traces.ts",
      "id": "ROUTE_ENTRY:src/routes/traces.ts@2035",
      "method": "get",
      "modules": [],
      "path": "/v1/traces/:traceId/spans",
      "position": 2035,
      "sources": [
        "SOURCE_REFERENCE:src/routes/traces.ts@2072",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/traces.ts@2783": {
      "fileName": "src/routes/traces.ts",
      "id": "ROUTE_ENTRY:src/routes/traces.ts@2783",
      "method": "post",
      "modules": [],
      "path": "/v1/traces/delete-all-hack",
      "position": 2783,
      "sources": [
        "SOURCE_REFERENCE:src/routes/traces.ts@2822",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/traces.ts@2982": {
      "fileName": "src/routes/traces.ts",
      "id": "ROUTE_ENTRY:src/routes/traces.ts@2982",
      "method": "post",
      "modules": [],
      "path": "/v1/traces",
      "position": 2982,
      "sources": [
        "SOURCE_REFERENCE:src/routes/traces.ts@3005",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:src/routes/traces.ts@815": {
      "fileName": "src/routes/traces.ts",
      "id": "ROUTE_ENTRY:src/routes/traces.ts@815",
      "method": "get",
      "modules": [],
      "path": "/v1/traces",
      "position": 815,
      "sources": [
        "SOURCE_REFERENCE:src/routes/traces.ts@837",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:src/app.ts@785": {
      "baseUrl": "",
      "entries": [
        "MIDDLEWARE_ENTRY:src/app.ts@948",
        "MIDDLEWARE_ENTRY:src/app.ts@1135",
        "MIDDLEWARE_ENTRY:src/app.ts@1538",
        "ROUTE_TREE_REFERENCE:src/routes/auth.ts@497",
        "ROUTE_TREE_REFERENCE:src/routes/traces.ts@568",
        "ROUTE_TREE_REFERENCE:src/routes/inference/inference.ts@647",
        "ROUTE_TREE_REFERENCE:src/routes/source.ts@370",
        "ROUTE_TREE_REFERENCE:src/routes/app-routes.ts@1073",
        "ROUTE_TREE_REFERENCE:src/routes/settings.ts@296",
      ],
      "fileName": "src/app.ts",
      "id": "ROUTE_TREE:src/app.ts@785",
      "name": "app",
      "position": 785,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/index.node.ts@1428": {
      "baseUrl": "",
      "entries": [
        "ROUTE_TREE_REFERENCE:src/app.ts@785",
        "MIDDLEWARE_ENTRY:src/index.node.ts@1521",
        "ROUTE_ENTRY:src/index.node.ts@1684",
      ],
      "fileName": "src/index.node.ts",
      "id": "ROUTE_TREE:src/index.node.ts@1428",
      "name": "app",
      "position": 1428,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/routes/app-routes.ts@1073": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:src/routes/app-routes.ts@1138",
        "ROUTE_ENTRY:src/routes/app-routes.ts@1494",
        "ROUTE_ENTRY:src/routes/app-routes.ts@1736",
        "ROUTE_ENTRY:src/routes/app-routes.ts@2393",
        "ROUTE_ENTRY:src/routes/app-routes.ts@3485",
        "ROUTE_ENTRY:src/routes/app-routes.ts@4058",
        "ROUTE_ENTRY:src/routes/app-routes.ts@4230",
        "ROUTE_ENTRY:src/routes/app-routes.ts@5752",
        "ROUTE_ENTRY:src/routes/app-routes.ts@10611",
      ],
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_TREE:src/routes/app-routes.ts@1073",
      "name": "app",
      "position": 1073,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/routes/auth.ts@497": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:src/routes/auth.ts@637",
        "ROUTE_ENTRY:src/routes/auth.ts@2241",
        "ROUTE_ENTRY:src/routes/auth.ts@2539",
        "ROUTE_ENTRY:src/routes/auth.ts@3212",
      ],
      "fileName": "src/routes/auth.ts",
      "id": "ROUTE_TREE:src/routes/auth.ts@497",
      "name": "app",
      "position": 497,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/routes/inference/inference.ts@647": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:src/routes/inference/inference.ts@790",
        "ROUTE_ENTRY:src/routes/inference/inference.ts@1427",
      ],
      "fileName": "src/routes/inference/inference.ts",
      "id": "ROUTE_TREE:src/routes/inference/inference.ts@647",
      "name": "app",
      "position": 647,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/routes/settings.ts@296": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:src/routes/settings.ts@401",
        "ROUTE_ENTRY:src/routes/settings.ts@698",
      ],
      "fileName": "src/routes/settings.ts",
      "id": "ROUTE_TREE:src/routes/settings.ts@296",
      "name": "app",
      "position": 296,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/routes/source.ts@370": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:src/routes/source.ts@435",
        "ROUTE_ENTRY:src/routes/source.ts@1359",
      ],
      "fileName": "src/routes/source.ts",
      "id": "ROUTE_TREE:src/routes/source.ts@370",
      "name": "app",
      "position": 370,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:src/routes/traces.ts@568": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:src/routes/traces.ts@815",
        "ROUTE_ENTRY:src/routes/traces.ts@2035",
        "ROUTE_ENTRY:src/routes/traces.ts@2783",
        "ROUTE_ENTRY:src/routes/traces.ts@2982",
      ],
      "fileName": "src/routes/traces.ts",
      "id": "ROUTE_TREE:src/routes/traces.ts@568",
      "name": "app",
      "position": 568,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE_REFERENCE:src/app.ts@785": {
      "fileName": "src/app.ts",
      "id": "ROUTE_TREE_REFERENCE:src/app.ts@785",
      "name": "app",
      "path": "/",
      "position": 785,
      "targetId": "ROUTE_TREE:src/app.ts@785",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:src/routes/app-routes.ts@1073": {
      "fileName": "src/routes/app-routes.ts",
      "id": "ROUTE_TREE_REFERENCE:src/routes/app-routes.ts@1073",
      "name": "app",
      "path": "/",
      "position": 1073,
      "targetId": "ROUTE_TREE:src/routes/app-routes.ts@1073",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:src/routes/auth.ts@497": {
      "fileName": "src/routes/auth.ts",
      "id": "ROUTE_TREE_REFERENCE:src/routes/auth.ts@497",
      "name": "app",
      "path": "/",
      "position": 497,
      "targetId": "ROUTE_TREE:src/routes/auth.ts@497",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:src/routes/inference/inference.ts@647": {
      "fileName": "src/routes/inference/inference.ts",
      "id": "ROUTE_TREE_REFERENCE:src/routes/inference/inference.ts@647",
      "name": "app",
      "path": "/",
      "position": 647,
      "targetId": "ROUTE_TREE:src/routes/inference/inference.ts@647",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:src/routes/settings.ts@296": {
      "fileName": "src/routes/settings.ts",
      "id": "ROUTE_TREE_REFERENCE:src/routes/settings.ts@296",
      "name": "app",
      "path": "/",
      "position": 296,
      "targetId": "ROUTE_TREE:src/routes/settings.ts@296",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:src/routes/source.ts@370": {
      "fileName": "src/routes/source.ts",
      "id": "ROUTE_TREE_REFERENCE:src/routes/source.ts@370",
      "name": "app",
      "path": "/",
      "position": 370,
      "targetId": "ROUTE_TREE:src/routes/source.ts@370",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:src/routes/traces.ts@568": {
      "fileName": "src/routes/traces.ts",
      "id": "ROUTE_TREE_REFERENCE:src/routes/traces.ts@568",
      "name": "app",
      "path": "/",
      "position": 568,
      "targetId": "ROUTE_TREE:src/routes/traces.ts@568",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/app.ts@1143": {
      "character": 10,
      "content": "async (c, next) => {
    try {
      await next();
    } catch (err) {
      logger.error(err);
      return c.json({ error: "Internal server error" }, 500);
    }
  }",
      "fileName": "src/app.ts",
      "id": "SOURCE_REFERENCE:src/app.ts@1143",
      "line": 37,
      "modules": [],
      "position": 1143,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/app.ts@1551": {
      "character": 4,
      "content": "honoLogger((message: string, ...rest: string[]) => {
      logger.debug(message, ...rest);
    })",
      "fileName": "src/app.ts",
      "id": "SOURCE_REFERENCE:src/app.ts@1551",
      "line": 50,
      "modules": [
        "MODULE_REFERENCE:honoLogger@hono/logger",
      ],
      "position": 1551,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/app.ts@956": {
      "character": 10,
      "content": "async (c, next) => {
    c.set("db", db);

    c.set("webhonc", webhonc);

    if (wsConnections) {
      c.set("wsConnections", wsConnections);
    }

    await next();
  }",
      "fileName": "src/app.ts",
      "id": "SOURCE_REFERENCE:src/app.ts@956",
      "line": 25,
      "modules": [],
      "position": 956,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/constants.ts@120": {
      "character": 37,
      "content": "const USER_PROJECT_ROOT_DIR = path.resolve(
  process.env.FPX_WATCH_DIR ?? process.cwd(),
)",
      "fileName": "src/constants.ts",
      "id": "SOURCE_REFERENCE:src/constants.ts@120",
      "line": 4,
      "modules": [
        "MODULE_REFERENCE:path@node:path",
      ],
      "position": 120,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@1544": {
      "character": 37,
      "content": "const appRoutesInsertSchema = createInsertSchema(appRoutes)",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@1544",
      "line": 35,
      "modules": [
        "MODULE_REFERENCE:createInsertSchema@drizzle-zod",
      ],
      "position": 1544,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@280",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@1717": {
      "character": 13,
      "content": "const appRequests = sqliteTable("app_requests", {
  id: integer("id", { mode: "number" }).primaryKey(),
  requestMethod: text("request_method", {
    mode: "text",
    enum: [
      "GET",
      "POST",
      "PATCH",
      "PUT",
      "DELETE",
      "HEAD",
      "OPTIONS",
      "CONNECT",
      "TRACE",
    ],
  }).notNull(),
  requestUrl: text("request_url", { mode: "text" }).notNull(),
  requestHeaders: text("request_headers", { mode: "json" }).$type<
    Record<string, string>
  >(),
  requestQueryParams: text("request_query_params", { mode: "json" }),
  requestPathParams: text("request_path_params", { mode: "json" }),
  requestBody: text("request_body", { mode: "json" }),
  // The hono route corresponding to this request
  requestRoute: text("request_route"),
  createdAt: text("created_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  updatedAt: text("updated_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  // responseId: integer("response_id").references(() => appResponses.id),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@1717",
      "line": 40,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
      ],
      "position": 1717,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@1731": {
      "character": 27,
      "content": "const appRequests = sqliteTable("app_requests", {
  id: integer("id", { mode: "number" }).primaryKey(),
  requestMethod: text("request_method", {
    mode: "text",
    enum: [
      "GET",
      "POST",
      "PATCH",
      "PUT",
      "DELETE",
      "HEAD",
      "OPTIONS",
      "CONNECT",
      "TRACE",
    ],
  }).notNull(),
  requestUrl: text("request_url", { mode: "text" }).notNull(),
  requestHeaders: text("request_headers", { mode: "json" }).$type<
    Record<string, string>
  >(),
  requestQueryParams: text("request_query_params", { mode: "json" }),
  requestPathParams: text("request_path_params", { mode: "json" }),
  requestBody: text("request_body", { mode: "json" }),
  // The hono route corresponding to this request
  requestRoute: text("request_route"),
  createdAt: text("created_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  updatedAt: text("updated_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  // responseId: integer("response_id").references(() => appResponses.id),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@1731",
      "line": 40,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
      ],
      "position": 1731,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@2737": {
      "character": 13,
      "content": "const appResponses = sqliteTable("app_responses", {
  id: integer("id", { mode: "number" }).primaryKey(),
  traceId: text("trace_id", { mode: "text" }).notNull(),
  responseStatusCode: integer("response_status_code", { mode: "number" }),
  responseTime: integer("response_time", { mode: "number" }),
  responseHeaders: text("response_headers", { mode: "json" }).$type<{
    [key: string]: string;
  }>(),
  responseBody: text("response_body", { mode: "text" }),
  failureReason: text("failure_reason"),
  failureDetails: text("failure_details", { mode: "json" }).$type<{
    [key: string]: string;
  }>(),
  isFailure: integer("is_failure", { mode: "boolean" }).default(false),
  createdAt: text("created_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  updatedAt: text("updated_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  requestId: integer("request_id").references(() => appRequests.id),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@2737",
      "line": 70,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
      ],
      "position": 2737,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@1717",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@2752": {
      "character": 28,
      "content": "const appResponses = sqliteTable("app_responses", {
  id: integer("id", { mode: "number" }).primaryKey(),
  traceId: text("trace_id", { mode: "text" }).notNull(),
  responseStatusCode: integer("response_status_code", { mode: "number" }),
  responseTime: integer("response_time", { mode: "number" }),
  responseHeaders: text("response_headers", { mode: "json" }).$type<{
    [key: string]: string;
  }>(),
  responseBody: text("response_body", { mode: "text" }),
  failureReason: text("failure_reason"),
  failureDetails: text("failure_details", { mode: "json" }).$type<{
    [key: string]: string;
  }>(),
  isFailure: integer("is_failure", { mode: "boolean" }).default(false),
  createdAt: text("created_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  updatedAt: text("updated_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  requestId: integer("request_id").references(() => appRequests.id),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@2752",
      "line": 70,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
      ],
      "position": 2752,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@1717",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@280": {
      "character": 13,
      "content": "const appRoutes = sqliteTable("app_routes", {
  id: integer("id", { mode: "number" }).primaryKey(),
  path: text("path", { mode: "text" }),
  method: text("method", { mode: "text" }),
  // The text of the function serving the request
  handler: text("handler", { mode: "text" }),
  // In practice, handler_type is either "route" or "middleware" - I didn't feel like defining an enum
  handlerType: text("handler_type", { mode: "text" }),
  // A flag that indicates if this route is currently registered or the result of an old probe
  currentlyRegistered: integer("currentlyRegistered", {
    mode: "boolean",
  }).default(false),
  registrationOrder: integer("registration_order", {
    mode: "number",
  }).default(-1),
  // A flag for route type that indicated if the route was added manually by user or by probe
  routeOrigin: text("route_origin", {
    mode: "text",
    enum: ["discovered", "custom", "open_api"],
  }).default("discovered"),
  // serialized OpenAPI spec for AI prompting
  openApiSpec: text("openapi_spec", { mode: "text" }),
  requestType: text("request_type", {
    mode: "text",
    enum: ["http", "websocket"],
  }).default("http"),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@280",
      "line": 6,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
      ],
      "position": 280,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@292": {
      "character": 25,
      "content": "const appRoutes = sqliteTable("app_routes", {
  id: integer("id", { mode: "number" }).primaryKey(),
  path: text("path", { mode: "text" }),
  method: text("method", { mode: "text" }),
  // The text of the function serving the request
  handler: text("handler", { mode: "text" }),
  // In practice, handler_type is either "route" or "middleware" - I didn't feel like defining an enum
  handlerType: text("handler_type", { mode: "text" }),
  // A flag that indicates if this route is currently registered or the result of an old probe
  currentlyRegistered: integer("currentlyRegistered", {
    mode: "boolean",
  }).default(false),
  registrationOrder: integer("registration_order", {
    mode: "number",
  }).default(-1),
  // A flag for route type that indicated if the route was added manually by user or by probe
  routeOrigin: text("route_origin", {
    mode: "text",
    enum: ["discovered", "custom", "open_api"],
  }).default("discovered"),
  // serialized OpenAPI spec for AI prompting
  openApiSpec: text("openapi_spec", { mode: "text" }),
  requestType: text("request_type", {
    mode: "text",
    enum: ["http", "websocket"],
  }).default("http"),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@292",
      "line": 6,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
      ],
      "position": 292,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@4716": {
      "character": 39,
      "content": "const appResponseInsertSchema = createInsertSchema(appResponses)",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@4716",
      "line": 127,
      "modules": [
        "MODULE_REFERENCE:createInsertSchema@drizzle-zod",
      ],
      "position": 4716,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@2737",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/db/schema.ts@6483": {
      "character": 24,
      "content": "const settings = sqliteTable("settings", {
  id: integer("id", { mode: "number" }).primaryKey({ autoIncrement: true }),
  key: text("key").notNull().unique(),
  value: text("value").notNull().default(""),
  createdAt: text("created_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
  updatedAt: text("updated_at").notNull().default(sql\`(CURRENT_TIMESTAMP)\`),
})",
      "fileName": "src/db/schema.ts",
      "id": "SOURCE_REFERENCE:src/db/schema.ts@6483",
      "line": 172,
      "modules": [
        "MODULE_REFERENCE:sqliteTable@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:integer@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:text@drizzle-orm/sqlite-core",
        "MODULE_REFERENCE:sql@drizzle-orm",
      ],
      "position": 6483,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/app-routes.ts@231": {
      "character": 34,
      "content": "const schemaProbedRoutes = z.object({
  routes: z.array(
    z.object({
      method: z.string(),
      path: z.string(),
      handler: z.string(),
      handlerType: z.string(),
    }),
  ),
})",
      "fileName": "src/lib/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/lib/app-routes.ts@231",
      "line": 7,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 231,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1890": {
      "character": 0,
      "content": "export type ExpandedFunctionContext = Array<ExpandedFunctionContextEntry>;",
      "fileName": "src/lib/expand-function/expand-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1890",
      "line": 61,
      "modules": [],
      "position": 1890,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@692",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1966": {
      "character": 0,
      "content": "export type ExpandedFunctionResult = {
  /** The file in which the function was found */
  file: string;
  /** The line on which the function definition starts */
  startLine: number;
  /** The column on which the function definition starts */
  startColumn: number;
  /** The line on which the function definition ends */
  endLine: number;
  /** The column on which the function definition ends */
  endColumn: number;
  context: ExpandedFunctionContext;
};",
      "fileName": "src/lib/expand-function/expand-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1966",
      "line": 63,
      "modules": [],
      "position": 1966,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1890",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@2427": {
      "character": 0,
      "content": "type ExpandFunctionOptions = {
  skipSourceMap?: boolean;
  debug?: boolean;
  hints?: { sourceFunction?: string | null; sourceFile?: string | null };
};",
      "fileName": "src/lib/expand-function/expand-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@2427",
      "line": 77,
      "modules": [],
      "position": 2427,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@4200": {
      "character": 0,
      "content": "export async function expandFunction(
  projectRoot: string,
  compiledFunction: string,
  options: ExpandFunctionOptions = {},
): Promise<ExpandedFunctionResult | null> {
  const searchResult = await searchFunction(
    projectRoot,
    compiledFunction,
    options,
  );
  if (!searchResult) {
    const truncatedFunc = compiledFunction.slice(0, 100);
    logger.warn(
      \`[expandFunction] No search result found for \${truncatedFunc}...\`,
    );
    return null;
  }

  const identifiers = analyzeOutOfScopeIdentifiers(
    searchResult.node,
    searchResult.sourceFile,
  );

  const context = await extractContext(
    projectRoot,
    searchResult.file,
    identifiers,
  );

  return {
    ...searchResult,
    context,
  };
}",
      "fileName": "src/lib/expand-function/expand-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@4200",
      "line": 111,
      "modules": [],
      "position": 4200,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@2427",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1966",
        "SOURCE_REFERENCE:src/lib/expand-function/search-function/index.ts@9",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@6099",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@6099": {
      "character": 0,
      "content": "async function extractContext(
  projectRoot: string,
  filePath: string,
  identifiers: OutOfScopeIdentifier[],
  options: { debug?: boolean } = { debug: false },
): Promise<ExpandedFunctionContext> {
  const { debug } = options;
  const context: ExpandedFunctionContext = [];

  if (!identifiers?.length) {
    if (debug) {
      logger.debug(
        "[debug] No out of scope identifiers found in function, skipping context extraction",
      );
    }
    return context;
  }

  try {
    const { connection } = await getTSServer(projectRoot);

    // Open the document containing the function
    // This makes the TSServer aware of the codebase, and allows us to execute requests
    // We do this to get more information on the definitions of the function's out-of-scope identifiers
    //
    await openFile(connection, filePath);

    const funcFileUri = getFileUri(filePath);

    // Loop through each identifier in the function and find its definition
    for (const identifier of identifiers) {
      const [sourceDefinition, textDocumentDefinition] = await Promise.all([
        getTsSourceDefinition(connection, funcFileUri, identifier.position),
        getTextDocumentDefinition(connection, funcFileUri, identifier.position),
        getDiagnostics(connection, funcFileUri),
      ]);

      // Here we can filter out standard globals that are defined in the runtime
      //   (e.g., \`console\`, \`URL\`, \`Number\`, etc.)
      // We can do this because the textDocumentDefinition will be a .d.ts file, while the sourceDefinition will not be present
      // This is a bit of a hack, but it works for now
      const isStandardGlobal =
        !sourceDefinition && textDocumentDefinition?.uri?.endsWith(".d.ts");
      if (isStandardGlobal) {
        if (debug) {
          logger.debug(
            \`[debug] Skipping expansion of \${identifier.name} as it is likely a standard global in the runtime\`,
          );
        }
        continue;
      }

      if (sourceDefinition) {
        // Find the node at the definition position
        const { node, sourceFile, definitionFilePath } =
          definitionToNode(sourceDefinition);

        // If there's a node, we can try to extract the value of the definition
        if (node) {
          // First, handle the case where it was imported from another file.
          // As of writing, we will hit this case when you do \`import * as schema from "./db"\`
          //
          const parentImportDeclaration = getParentImportDeclaration(node);
          if (
            parentImportDeclaration &&
            ts.isImportDeclaration(parentImportDeclaration)
          ) {
            const importClause = parentImportDeclaration.importClause;

            // Check if it's a namespace import (e.g., import * as schema from "./db")
            if (
              importClause?.namedBindings &&
              ts.isNamespaceImport(importClause.namedBindings)
            ) {
              const namespaceName = importClause.namedBindings.name.text;
              const moduleSpecifier = parentImportDeclaration.moduleSpecifier
                .getText()
                .replace(/['"]/g, "");

              // Resolve the imported module's file path using a utility that can account for TypeScript path aliases
              const importedFilePath = resolveModulePath(
                moduleSpecifier,
                filePath,
                projectRoot,
              );

              if (!importedFilePath) {
                logger.warn(
                  \`[extractContext] Failed to resolve imported file path for \${identifier.name}\`,
                );
                continue;
              }

              // Read the contents of the imported file
              let importedFileContent: string;
              try {
                importedFileContent = await fs.promises.readFile(
                  importedFilePath,
                  "utf-8",
                );
              } catch (readError) {
                logger.warn(
                  \`[extractContext] Failed to read imported file at \${importedFilePath} for namespace import \${namespaceName}\`,
                  readError,
                );
                continue;
              }

              // Create a context entry with the entire file's contents
              const contextEntry: ExpandedFunctionContextEntry = {
                name: namespaceName,
                type: "unknown",
                position: identifier.position,
                definition: {
                  uri: getFileUri(importedFilePath),
                  range: {
                    start: { line: 0, character: 0 },
                    end: {
                      line: Number.MAX_SAFE_INTEGER,
                      character: Number.MAX_SAFE_INTEGER,
                    },
                  },
                  text: importedFileContent,
                },
                // Optionally include package information if applicable
                package: extractPackageName(sourceDefinition.uri) ?? undefined,
              };

              context.push(contextEntry);
              continue;
            }

            const contextEntry = await contextForImport(
              connection,
              projectRoot,
              definitionFilePath,
              parentImportDeclaration,
              node,
              identifier,
            );

            // TODO - Recurse definition from imported files (not implemented yet)
            if (contextEntry) {
              context.push(contextEntry);
              continue;
            }

            logger.warn(
              \`[extractContext] Failed to follow import for \${identifier.name}\`,
            );
          }

          // HACK - If we resolved the definition to node_modules,
          //        we can skip any recursive expansion and just add the import as context for now
          if (isDependency(sourceDefinition?.uri)) {
            if (debug) {
              logger.debug(
                \`[debug] \${identifier.name} is likely an installed dependency\`,
              );
            }

            const contextEntry: ExpandedFunctionContextEntry = {
              name: identifier.name,
              // HACK - \`unknown\` just means "do not expand this"
              type: "unknown",
              position: identifier.position,
              definition: {
                uri: sourceDefinition.uri,
                range: sourceDefinition.range,
                // NOTE - We do not include definition text here, since it can be huge (since this is from a node_modules package)
                text: "#third-party-library-code",
              },
              package: extractPackageName(sourceDefinition.uri) ?? undefined,
            };
            context.push(contextEntry);
            continue;
          }

          const valueText = getDefinitionText(node, sourceFile);

          const contextEntry: ExpandedFunctionContextEntry = {
            name: identifier.name,
            type: valueText?.type ?? "unknown",
            position: identifier.position,
            definition: {
              uri: sourceDefinition.uri,
              range: sourceDefinition.range,
              text: valueText?.text,
            },
          };

          if (debug) {
            logger.debug(
              \`[debug] [extractContext] Context entry for \${identifier.name}\`,
              contextEntry,
            );
          }

          // Recursively expand context if the identifier is a function
          if (contextEntry?.type === "function") {
            const functionNode = valueText?.definitionNode ?? node;
            if (!functionNode) {
              logger.warn(
                \`[extractContext] No function body found for \${identifier.name}\`,
              );
              continue;
            }

            // Do type narrowing on the result to appease the call to analyzeOutOfScopeIdentifiers
            if (
              !ts.isFunctionDeclaration(functionNode) &&
              !ts.isArrowFunction(functionNode) &&
              !ts.isFunctionExpression(functionNode)
            ) {
              logger.warn(
                \`[extractContext] An unexpected node was returned for \${identifier.name}\`,
              );
              continue;
            }

            const functionIdentifiers = analyzeOutOfScopeIdentifiers(
              functionNode,
              sourceFile,
            );

            if (debug) {
              logger.debug(
                \`[debug] [extractContext] Analyzed NESTED out of scope identifiers for \${identifier.name}\`,
                functionIdentifiers,
              );
            }

            const subContext = await extractContext(
              projectRoot,
              sourceDefinition.uri.replace(/^file:\\/\\//, ""),
              functionIdentifiers,
            );
            contextEntry.context = subContext;
          }

          context.push(contextEntry);
        } else {
          logger.warn(
            \`[extractContext] AST parsing found no definition found for \${identifier.name} in \${definitionFilePath}\`,
          );
        }
      } else {
        logger.warn(
          \`[extractContext] TSServer found no definition found for \${identifier.name}\`,
        );
        logger.warn(\`[extractContext] Originating file: \${filePath}\`);
      }
    }
  } catch (error) {
    logger.error("[extractContext] Error querying TSServer:", error);
  }

  return context;
}",
      "fileName": "src/lib/expand-function/expand-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@6099",
      "line": 164,
      "modules": [
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:fs@node:fs",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
      ],
      "position": 6099,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1890",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1890",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@9",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@54",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@197",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@95",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@66",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@2125",
        "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@50",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@692",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@197",
        "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@108",
        "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@172",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@692",
        "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@108",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@692",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@692": {
      "character": 0,
      "content": "type ExpandedFunctionContextEntry = {
  /** The name of the constant or utility in the code */
  name: string;
  /**
   * The type of the constant or utility.
   * This will be used to help determine whether or not to recursively comb
   * helper utilities to expand context of their utilities, etc.
   *
   * For now, "unknown" is a placeholder for other ast nodes we do not want to want to expand.
   */
  type: FunctionContextType;
  /** The position of the constant or utility in the code */
  position: { line: number; character: number };
  definition?: {
    uri: string;
    range: {
      start: { line: number; character: number };
      end: { line: number; character: number };
    };
    /** The text of the definition (utility function, constant value, etc.) */
    text: string | undefined;
  };
  /** The package (in node_modules) that the constant or utility is defined in */
  package?: string;
  /**
   * Hurrah for recursive types!
   *
   * The child context of the constant or utility.
   * That is, if the constant or utility is a function,
   * this will contain definitions for any of the function's out-of-scope identifiers.
   */
  context?: ExpandedFunctionContext;
};",
      "fileName": "src/lib/expand-function/expand-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@692",
      "line": 27,
      "modules": [],
      "position": 692,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/types.ts@138",
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@1890",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@108": {
      "character": 9,
      "content": "export { extractPackageName } from "./extract-package-name.js"",
      "fileName": "src/lib/expand-function/imports/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@108",
      "line": 2,
      "modules": [],
      "position": 108,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@172": {
      "character": 9,
      "content": "export { isDependency } from "./is-dependency.js"",
      "fileName": "src/lib/expand-function/imports/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@172",
      "line": 3,
      "modules": [],
      "position": 172,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@50": {
      "character": 9,
      "content": "export { resolveModulePath } from "./resolve-imports.js"",
      "fileName": "src/lib/expand-function/imports/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/imports/index.ts@50",
      "line": 1,
      "modules": [],
      "position": 50,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/imports/resolve-imports.ts@536",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/imports/resolve-imports.ts@536": {
      "character": 0,
      "content": "export function resolveModulePath(
  moduleSpecifier: string,
  containingFile: string,
  projectRoot: string,
): string | null {
  // Path to tsconfig.json
  const tsconfigPath = ts.findConfigFile(
    projectRoot,
    ts.sys.fileExists,
    "tsconfig.json",
  );

  if (!tsconfigPath) {
    logger.warn(
      \`[resolveModulePath] tsconfig.json not found in project root: \${projectRoot}\`,
    );
    return null;
  }

  // Parse tsconfig.json
  const configFile = ts.readConfigFile(tsconfigPath, ts.sys.readFile);
  if (configFile.error) {
    logger.warn(
      "[resolveModulePath] Error reading tsconfig.json:",
      configFile.error.messageText,
    );
    return null;
  }

  const parsedConfig = ts.parseJsonConfigFileContent(
    configFile.config,
    ts.sys,
    path.dirname(tsconfigPath),
  );

  if (parsedConfig.errors.length > 0) {
    logger.warn(
      "[resolveModulePath] Error parsing tsconfig.json:",
      parsedConfig.errors.map((e) => e.messageText).join(", "),
    );
    return null;
  }

  // Resolve the module name
  const resolvedModule = ts.resolveModuleName(
    moduleSpecifier,
    containingFile,
    parsedConfig.options,
    ts.sys,
  );

  if (resolvedModule.resolvedModule?.resolvedFileName) {
    return resolvedModule.resolvedModule.resolvedFileName;
  }

  logger.warn(
    \`[resolveModulePath] Unable to resolve module: \${moduleSpecifier} from \${containingFile}\`,
  );
  return null;
}",
      "fileName": "src/lib/expand-function/imports/resolve-imports.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/imports/resolve-imports.ts@536",
      "line": 12,
      "modules": [
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:path@node:path",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
      ],
      "position": 536,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/index.ts@11": {
      "character": 2,
      "content": "export { expandFunction } from "./expand-function.js"",
      "fileName": "src/lib/expand-function/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/index.ts@11",
      "line": 1,
      "modules": [],
      "position": 11,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/expand-function.ts@4200",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/search-function/index.ts@9": {
      "character": 9,
      "content": "export { searchFunction } from "./search-function.js"",
      "fileName": "src/lib/expand-function/search-function/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/search-function/index.ts@9",
      "line": 0,
      "modules": [],
      "position": 9,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-function.ts@1194",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-file.ts@156": {
      "character": 0,
      "content": "export type SearchFunctionResult = {
  /** The file in which the function was found */
  file: string;
  /** The line on which the function definition starts */
  startLine: number;
  /** The column on which the function definition starts */
  startColumn: number;
  /** The line on which the function definition ends */
  endLine: number;
  /** The column on which the function definition ends */
  endColumn: number;

  /** The node that was found */
  node: FunctionNode;
  /** The source file that was found */
  sourceFile: ts.SourceFile;
};",
      "fileName": "src/lib/expand-function/search-function/search-file.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-file.ts@156",
      "line": 5,
      "modules": [
        "MODULE_REFERENCE:ts@typescript",
      ],
      "position": 156,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/types.ts@35",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-function.ts@1194": {
      "character": 0,
      "content": "export async function searchFunction(
  projectPath: string,
  functionString: string,
  options: SearchFunctionOptions = {},
): Promise<SearchFunctionResult | null> {
  const debug = options.debug || false;

  // HACK - Allows us to run tests without source maps
  if (options.skipSourceMap) {
    // Attempt to search the function directly in the source.
    const searchString = options.hints?.sourceFunction ?? functionString;
    try {
      const directResult = await searchSourceFunction(
        projectPath,
        searchString,
        {
          debug,
          hints: {
            sourceFile: options.hints?.sourceFile ?? undefined,
          },
        },
      );
      if (directResult) {
        return directResult;
      }
    } catch (error) {
      logger.error(\`Error searching for function directly in source: \${error}\`);
    }
    return null;
  }

  // Attempt to retrieve the source function text via a source map and search.
  try {
    const sourceFunction = await getSourceFunctionText(
      projectPath,
      functionString,
    );
    if (sourceFunction?.text) {
      if (debug) {
        logger.debug(
          \`[searchFunction] Searching for function via source mapping: \${sourceFunction}\`,
        );
      }
      try {
        const mappedResult = await searchSourceFunction(
          projectPath,
          sourceFunction?.text,
          {
            hints: {
              sourceFile: sourceFunction?.sourceFile ?? undefined,
            },
          },
        );
        if (mappedResult) {
          return mappedResult;
        }
        if (debug) {
          logger.debug(
            "no mapped result found for source function",
            sourceFunction,
          );
        }
      } catch (error) {
        logger.error(
          \`Error searching for function via source mapping: \${error}\`,
        );
      }
    }
  } catch (error) {
    logger.error(\`Error retrieving source function text: \${error}\`);
  }

  // If the function was not found in either search, return null.
  return null;
}",
      "fileName": "src/lib/expand-function/search-function/search-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-function.ts@1194",
      "line": 28,
      "modules": [],
      "position": 1194,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-function.ts@243",
        "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-file.ts@156",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-function.ts@243": {
      "character": 0,
      "content": "type SearchFunctionOptions = {
  skipSourceMap?: boolean;
  debug?: boolean;
  hints?: { sourceFunction?: string | null; sourceFile?: string | null };
};",
      "fileName": "src/lib/expand-function/search-function/search-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/search-function/search-function.ts@243",
      "line": 5,
      "modules": [],
      "position": 243,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@2125": {
      "character": 0,
      "content": "export async function getDiagnostics(
  connection: MessageConnection,
  filePath: string,
) {
  const fileUri = getFileUri(filePath);

  const diagnostics = await connection.sendRequest(
    "textDocument/publishDiagnostics",
    {
      uri: fileUri,
    },
  );
  console.log("diagnostics", diagnostics);
  return diagnostics;
}",
      "fileName": "src/lib/expand-function/tsserver/commands.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@2125",
      "line": 70,
      "modules": [
        "MODULE_REFERENCE:MessageConnection@vscode-jsonrpc",
      ],
      "position": 2125,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@254",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@3239": {
      "character": 0,
      "content": "export async function getTsSourceDefinition(
  connection: MessageConnection,
  filePath: string,
  position: ts.LineAndCharacter,
): Promise<Definition | null> {
  const fileUri = getFileUri(filePath);

  const sourceDefinition = await executeCommand(
    connection,
    "_typescript.goToSourceDefinition",
    [fileUri, position],
  );

  // INVESTIGATE - When is definitionResponse longer than 1?
  if (isDefinitionsArray(sourceDefinition)) {
    return sourceDefinition[0] ?? null;
  }

  logger.warn(
    \`[warning] getTsSourceDefinition returned an unexpected, unparseable response: \${sourceDefinition}\`,
  );

  return null;
}",
      "fileName": "src/lib/expand-function/tsserver/commands.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@3239",
      "line": 100,
      "modules": [
        "MODULE_REFERENCE:MessageConnection@vscode-jsonrpc",
        "MODULE_REFERENCE:ts@typescript",
      ],
      "position": 3239,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@254",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@4276",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@749",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@330": {
      "character": 6,
      "content": "const openedFiles = new Map<string, { content: string; version: number }>()",
      "fileName": "src/lib/expand-function/tsserver/commands.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@330",
      "line": 8,
      "modules": [],
      "position": 330,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@402": {
      "character": 0,
      "content": "export async function openFile(
  connection: MessageConnection,
  filePath: string,
) {
  const fileUri = getFileUri(filePath);
  const fileContent = fs.readFileSync(filePath, "utf-8");

  const existingFile = openedFiles.get(filePath);
  if (existingFile && existingFile.content === fileContent) {
    // logger.debug("[debug] [openFile] File already opened:", filePath);
    return;
  }

  const version = (existingFile?.version ?? 0) + 1;

  await connection.sendNotification("textDocument/didOpen", {
    textDocument: {
      uri: fileUri,
      languageId: "typescript",
      version: version,
      text: fileContent,
    },
  });
  openedFiles.set(filePath, { content: fileContent, version });
}",
      "fileName": "src/lib/expand-function/tsserver/commands.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@402",
      "line": 10,
      "modules": [
        "MODULE_REFERENCE:MessageConnection@vscode-jsonrpc",
        "MODULE_REFERENCE:fs@node:fs",
      ],
      "position": 402,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@330",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@330",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@4276": {
      "character": 0,
      "content": "export async function executeCommand(
  connection: MessageConnection,
  command: string,
  args: unknown[],
) {
  try {
    const response = await connection.sendRequest("workspace/executeCommand", {
      command: command,
      arguments: args,
    });
    return response;
  } catch (error) {
    logger.error(
      \`Error with 'workspace/executeCommand' for command: \${command} with args: \${JSON.stringify(args, null, 2)}\`,
      error,
    );
    return null;
  }
}",
      "fileName": "src/lib/expand-function/tsserver/commands.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@4276",
      "line": 136,
      "modules": [
        "MODULE_REFERENCE:MessageConnection@vscode-jsonrpc",
      ],
      "position": 4276,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@197": {
      "character": 9,
      "content": "export { getFileUri } from "./utils.js"",
      "fileName": "src/lib/expand-function/tsserver/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@197",
      "line": 7,
      "modules": [],
      "position": 197,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@254",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@54": {
      "character": 2,
      "content": "export { openFile } from "./commands.js"",
      "fileName": "src/lib/expand-function/tsserver/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@54",
      "line": 2,
      "modules": [],
      "position": 54,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@402",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@66": {
      "character": 2,
      "content": "export { getTextDocumentDefinition } from "./commands.js"",
      "fileName": "src/lib/expand-function/tsserver/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@66",
      "line": 3,
      "modules": [],
      "position": 66,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@9": {
      "character": 9,
      "content": "export { getTSServer } from "./server.js"",
      "fileName": "src/lib/expand-function/tsserver/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@9",
      "line": 0,
      "modules": [],
      "position": 9,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@1410",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@95": {
      "character": 2,
      "content": "export { getTsSourceDefinition } from "./commands.js"",
      "fileName": "src/lib/expand-function/tsserver/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/index.ts@95",
      "line": 4,
      "modules": [],
      "position": 95,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/commands.ts@3239",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@1410": {
      "character": 0,
      "content": "export async function getTSServer(pathToProject: string) {
  const resolvedPath = resolve(pathToProject);

  if (tsServerInstance) {
    // logger.debug(
    //   chalk.dim(
    //     \`[debug] Reusing existing TS Server instance for project: \${resolvedPath}\`,
    //   ),
    // );
    return tsServerInstance;
  }

  tsServerInstance = await initializeTSServer(resolvedPath);
  return tsServerInstance;
}",
      "fileName": "src/lib/expand-function/tsserver/server.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@1410",
      "line": 35,
      "modules": [
        "MODULE_REFERENCE:resolve@node:path",
      ],
      "position": 1410,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@906",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@906",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@906",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@1818",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@906",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@1818": {
      "character": 0,
      "content": "async function initializeTSServer(pathToProject: string) {
  logger.debug(
    chalk.dim(\`[debug] Initializing TS Server for project: \${pathToProject}\`),
  );

  const tsServer = spawn("npx", ["typescript-language-server", "--stdio"], {
    // NOTE - This will add quite a bit of startup time if the user has not yet downloaded typescript-language-server dependency before via npx...
    //        And I haven't tested what that overhead is...
    // NOTE - We *could* run the language server in the project root (via cwd switch), but I think we handle this by initializing the language server
    //        and pointing it to the project root below anyhow.
    // cwd: pathToProject,
    shell: true,
  });

  // Terminate the language server when the Node.js process exits
  process.on("exit", () => {
    logger.debug(
      chalk.dim(
        \`[debug] Terminating TS Server instance for project: \${pathToProject}\`,
      ),
    );
    tsServer.kill();
  });

  // NOTE - Uncomment to debug raw output of ts-language-server
  //
  // tsServer.stdout.on("data", (data) => {
  //   console.log("<TS-SERVER-DATA>")
  //   console.log(\`tsServer stdout: \${data.toString()}\`);
  //   console.log("</TS-SERVER-DATA>")
  // });

  tsServer.stderr.on("data", (data) => {
    logger.error(\`tsserver stderr: \${data.toString()}\`);
  });

  const connection = createMessageConnection(
    new StreamMessageReader(tsServer.stdout),
    new StreamMessageWriter(tsServer.stdin),
  );

  tsServer.stderr.on("data", (data) => {
    logger.error(\`tsserver stderr: \${data.toString()}\`);
  });
  tsServer.stdout.on("data", (data) => {
    logger.info("tsserver stdout:", data.toString());
  });

  // Handle notifications and errors
  connection.onError((error) => logger.error("Connection error:", error));
  connection.onClose(() => logger.info("Connection closed."));
  connection.onUnhandledNotification((notification) =>
    logger.error("Unhandled notification:", notification),
  );

  connection.listen();

  tsServer.on("close", (code) => {
    logger.debug(\`typescript-language-server process exited with code \${code}\`);
  });

  try {
    const rootUri = getFileUri(pathToProject);
    logger.debug(
      chalk.dim(
        \`[debug] Initializing typescript language server with rootUri: \${rootUri}\`,
      ),
    );

    const _response = await connection.sendRequest("initialize", {
      processId: process.pid,
      rootUri: rootUri,
      capabilities: {},
      workspaceFolders: [{ uri: rootUri, name: "app" }],
      initializationOptions: {
        preferences: {
          allowIncompleteCompletions: true,
          includeCompletionsForModuleExports: true,
          includeCompletionsWithInsertText: true,
        },
      },
    });

    logger.debug(chalk.dim("[debug] Initialized typescript language server"));
    // logger.debug('Initialization response:', JSON.stringify(_response, null, 2));

    await connection.sendNotification("initialized");

    registerNotificationHandlers(connection);

    return { connection, tsServer };
  } catch (error) {
    logger.error(chalk.red("Error initializing TS Server:"), error);
    throw error;
  }
}",
      "fileName": "src/lib/expand-function/tsserver/server.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@1818",
      "line": 51,
      "modules": [
        "MODULE_REFERENCE:chalk@chalk",
        "MODULE_REFERENCE:spawn@node:child_process",
        "MODULE_REFERENCE:chalk@chalk",
        "MODULE_REFERENCE:createMessageConnection@vscode-jsonrpc/node.js",
        "MODULE_REFERENCE:StreamMessageReader@vscode-jsonrpc/node.js",
        "MODULE_REFERENCE:StreamMessageWriter@vscode-jsonrpc/node.js",
        "MODULE_REFERENCE:chalk@chalk",
        "MODULE_REFERENCE:chalk@chalk",
        "MODULE_REFERENCE:chalk@chalk",
      ],
      "position": 1818,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@254",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@5166",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@5166": {
      "character": 0,
      "content": "function registerNotificationHandlers(connection: MessageConnection) {
  // Listen for diagnostics
  connection.onNotification("textDocument/publishDiagnostics", (params) => {
    if (!isPublishDiagnosticsParams(params)) {
      logger.debug(
        "[debug] Received unexpected params for \`textDocument/publishDiagnostics\`",
      );
      return;
    }
    const { uri, diagnostics } = params;
    if (diagnostics.length > 0) {
      logger.info(\`[textDocument/publishDiagnostics] Diagnostics for \${uri}:\`);
      for (const diag of diagnostics) {
        logger.info(
          \`- [\${diag.severity}] \${diag.message} at \${diag.range.start.line}:\${diag.range.start.character}\`,
        );
      }
    } else {
      logger.debug(
        \`[textDocument/publishDiagnostics] No diagnostics for \${uri}.\`,
      );
    }
  });

  // Listen for log messages
  connection.onNotification("window/logMessage", (params) => {
    const { type, message } = params;
    logger.info(\`[window/logMessage] Log Message [\${type}]: \${message}\`);
  });

  // Listen for show messages
  connection.onNotification("window/showMessage", (params) => {
    const { type, message } = params;
    logger.info(\`[window/showMessage] Show Message [\${type}]: \${message}\`);
  });
}",
      "fileName": "src/lib/expand-function/tsserver/server.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@5166",
      "line": 153,
      "modules": [
        "MODULE_REFERENCE:MessageConnection@vscode-jsonrpc/node.js",
      ],
      "position": 5166,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1641",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@906": {
      "character": 4,
      "content": "let tsServerInstance: {
  connection: MessageConnection;
  tsServer: ChildProcessWithoutNullStreams;
} | null = null",
      "fileName": "src/lib/expand-function/tsserver/server.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/server.ts@906",
      "line": 23,
      "modules": [
        "MODULE_REFERENCE:MessageConnection@vscode-jsonrpc/node.js",
        "MODULE_REFERENCE:ChildProcessWithoutNullStreams@node:child_process",
      ],
      "position": 906,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@116": {
      "character": 6,
      "content": "const RangeSchema = z.object({
  start: PositionSchema,
  end: PositionSchema,
})",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@116",
      "line": 7,
      "modules": [
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 116,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@32",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@32",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1323": {
      "character": 6,
      "content": "const PublishDiagnosticsParamsSchema = z.object({
  uri: z.string(),
  diagnostics: z.array(DiagnosticSchema),
})",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1323",
      "line": 56,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 1323,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@947",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1507": {
      "character": 0,
      "content": "export type PublishDiagnosticsParams = z.infer<
  typeof PublishDiagnosticsParamsSchema
>;",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1507",
      "line": 65,
      "modules": [
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 1507,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1323",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1641": {
      "character": 42,
      "content": "(
  data: unknown,
): data is PublishDiagnosticsParams => {
  return PublishDiagnosticsParamsSchema.safeParse(data).success;
}",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1641",
      "line": 69,
      "modules": [],
      "position": 1641,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1507",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@1323",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@200": {
      "character": 6,
      "content": "const DefinitionSchema = z.object({
  uri: z.string().url(),
  range: RangeSchema,
})",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@200",
      "line": 12,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 200,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@116",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@295": {
      "character": 13,
      "content": "const DefinitionsArraySchema = z.array(DefinitionSchema)",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@295",
      "line": 17,
      "modules": [
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 295,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@200",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@32": {
      "character": 6,
      "content": "const PositionSchema = z.object({
  line: z.number(),
  character: z.number(),
})",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@32",
      "line": 2,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 32,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@484": {
      "character": 0,
      "content": "export type DefinitionsArray = z.infer<typeof DefinitionsArraySchema>;",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@484",
      "line": 24,
      "modules": [
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 484,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@295",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@749": {
      "character": 0,
      "content": "export function isDefinitionsArray(data: unknown): data is DefinitionsArray {
  return DefinitionsArraySchema.safeParse(data).success;
}",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@749",
      "line": 34,
      "modules": [],
      "position": 749,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@484",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@295",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@947": {
      "character": 6,
      "content": "const DiagnosticSchema = z.object({
  severity: z.number().optional(),
  message: z.string(),
  range: z.object({
    start: z.object({
      line: z.number(),
      character: z.number(),
    }),
    end: z.object({
      line: z.number(),
      character: z.number(),
    }),
  }),
  source: z.string().optional(),
  code: z.union([z.string(), z.number()]).optional(),
})",
      "fileName": "src/lib/expand-function/tsserver/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/types.ts@947",
      "line": 39,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 947,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@254": {
      "character": 0,
      "content": "export function getFileUri(filePath: string) {
  if (isFileUri(filePath)) {
    return filePath;
  }
  return \`file://\${escapeFilePath(filePath)}\`;
}",
      "fileName": "src/lib/expand-function/tsserver/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@254",
      "line": 8,
      "modules": [],
      "position": 254,
      "references": [
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@602",
        "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@516",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@516": {
      "character": 0,
      "content": "function escapeFilePath(filePath: string) {
  return filePath.replace(/\\\\/g, "/");
}",
      "fileName": "src/lib/expand-function/tsserver/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@516",
      "line": 19,
      "modules": [],
      "position": 516,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@602": {
      "character": 0,
      "content": "function isFileUri(uri: string) {
  return uri.startsWith("file://");
}",
      "fileName": "src/lib/expand-function/tsserver/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/tsserver/utils.ts@602",
      "line": 23,
      "modules": [],
      "position": 602,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/types.ts@138": {
      "character": 0,
      "content": "export type FunctionContextType = "unknown" | "function" | "type" | "variable";",
      "fileName": "src/lib/expand-function/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/types.ts@138",
      "line": 7,
      "modules": [],
      "position": 138,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/expand-function/types.ts@35": {
      "character": 0,
      "content": "export type FunctionNode =
  | ts.FunctionDeclaration
  | ts.ArrowFunction
  | ts.FunctionExpression;",
      "fileName": "src/lib/expand-function/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/expand-function/types.ts@35",
      "line": 2,
      "modules": [
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
        "MODULE_REFERENCE:ts@typescript",
      ],
      "position": 35,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@284": {
      "character": 6,
      "content": "const readFileAsync = promisify(fs.readFile)",
      "fileName": "src/lib/find-source-function/find-source-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@284",
      "line": 11,
      "modules": [
        "MODULE_REFERENCE:promisify@node:util",
        "MODULE_REFERENCE:fs@node:fs",
      ],
      "position": 284,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@325": {
      "character": 0,
      "content": "type FunctionLocation = {
  startLine: number;
  startColumn: number;
  endLine: number;
  endColumn: number;
};",
      "fileName": "src/lib/find-source-function/find-source-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@325",
      "line": 13,
      "modules": [],
      "position": 325,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@4522": {
      "character": 0,
      "content": "async function findOriginalSource(
  sourceMapContent: RawSourceMap | RawIndexMap,
  line: number,
  column: number,
) {
  return await SourceMapConsumer.with(sourceMapContent, null, (consumer) => {
    const pos = consumer.originalPositionFor({
      line, // Line number from JS file
      column, // Column number from JS file
    });

    consumer.destroy();

    // Optional: Display the source code snippet if needed
    const returnNullOnMissing = true;
    const sourceContent = consumer.sourceContentFor(
      pos.source ?? "",
      returnNullOnMissing,
    );

    return { ...pos, sourceContent };
  });
}",
      "fileName": "src/lib/find-source-function/find-source-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@4522",
      "line": 136,
      "modules": [
        "MODULE_REFERENCE:RawSourceMap@source-map",
        "MODULE_REFERENCE:RawIndexMap@source-map",
        "MODULE_REFERENCE:SourceMapConsumer@source-map",
      ],
      "position": 4522,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@5142": {
      "character": 0,
      "content": "export type SourceFunctionResult = {
  /** The (compiled) function text that was used to find the source */
  functionText: string;
  /** The source file */
  sourceFile: string | null;
  /** The source code of the function */
  sourceFunction: string | null;
};",
      "fileName": "src/lib/find-source-function/find-source-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@5142",
      "line": 160,
      "modules": [],
      "position": 5142,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@6246": {
      "character": 0,
      "content": "export async function findSourceFunctions(
  jsFilePath: string,
  compiledFunctionText: string | Array<string>,
  returnNullOnMissing = false,
  hints: {
    sourceMapContent?: RawSourceMap | RawIndexMap;
    jsFileContents?: string;
  } = {},
): Promise<Array<SourceFunctionResult>> {
  const mapFile = \`\${jsFilePath}.map\`;
  // OPTIMIZE - This is a hot path, so we should cache the source map content
  //            Each parse takes about 10ms even on a medium sized codebase
  const sourceMapContent =
    hints.sourceMapContent ??
    JSON.parse(await readFileAsync(mapFile, { encoding: "utf8" }));
  const jsFileContents =
    hints.jsFileContents ??
    (await readFileAsync(jsFilePath, { encoding: "utf8" }));

  const functionDefinitions = Array.isArray(compiledFunctionText)
    ? compiledFunctionText
    : [compiledFunctionText];

  const locations = await findFunctionsByDefinition(
    jsFileContents,
    functionDefinitions,
  );

  const results = await Promise.all(
    Object.entries(locations).map(
      async ([compiledFunctionText, { foundLocation }]) => {
        if (!foundLocation) {
          return {
            functionText: compiledFunctionText,
            sourceFile: null,
            sourceFunction: null,
          };
        }
        const lookupResult = await lookUpLocation(foundLocation);
        return {
          functionText: compiledFunctionText,
          sourceFile: lookupResult?.sourceFile ?? null,
          sourceFunction: lookupResult?.sourceFunction ?? null,
        };
      },
    ),
  );

  return results;

  /**
   * Looks up the original source function based on a function's location in the compiled code.
   *
   * @param {FunctionLocation} loc - The location of the function in the compiled JavaScript file.
   * @returns {Promise<{ sourceFunction: string | null; source: string | null } | null>}
   *          A promise that resolves to the original source function and its source file, or null if not found.
   */
  async function lookUpLocation(loc: FunctionLocation) {
    const functionStartLine = loc?.startLine ?? 0;
    const functionStartColumn = loc?.startColumn ?? 0;
    const functionEndLine = loc?.endLine ?? 0;
    const functionEndColumn = loc?.endColumn ?? 0;

    // NOTE - We want to execute these in parallel, time is of the essence
    const [sourceFunctionStart, sourceFunctionEnd] = await Promise.all([
      findOriginalSource(
        sourceMapContent,
        functionStartLine,
        functionStartColumn,
      ),
      findOriginalSource(sourceMapContent, functionEndLine, functionEndColumn),
    ]);

    const sourceFile = sourceFunctionStart.source;
    const sourceContent = sourceFunctionStart.sourceContent ?? "";
    const startLine = sourceFunctionStart.line;
    const startColumn = sourceFunctionStart.column;
    const endLine = sourceFunctionEnd.line;
    const endColumn = sourceFunctionEnd.column;
    // Check if the start/end line are null and otherwise just return sourceContent as is
    if (startLine === null || endLine === null) {
      // TODO decide what the proper behavior should be when
      // we can't find the correct source content.
      // For now: return the source content as is
      return returnNullOnMissing
        ? null
        : { sourceContent, sourceFile, sourceFunction: null };
    }

    const lines = sourceContent.split("\\n").slice(startLine - 1, endLine);

    const sourceFunction = lines
      .map((line, index) => {
        if (index === 0 && startLine === endLine) {
          return line.slice(startColumn ?? 0, endColumn ?? 0);
        }
        if (index === 0) {
          const sliceFrom = startColumn ?? 0;
          return line.slice(sliceFrom);
        }
        if (index === endLine - startLine) {
          // MEGA HACK - Add 1 to the end column only if it ends in a comma
          // I don't know what was causing this issue, but when we parse the source code,
          // we need to account for the fact that the original source code might have
          // trailing commas in functions that are passed as arguments to other functions.
          // In that case, we need to add 1 to the end column to account for something that gets odd when receiving the location back.
          const endsInComma = line.endsWith(",");
          const sliceTo = (endColumn ?? 0) + (endsInComma ? 1 : 0);
          return line.slice(0, sliceTo);
        }
        return line;
      })
      .join("\\n");

    return { sourceFunction, sourceFile };
  }
}",
      "fileName": "src/lib/find-source-function/find-source-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@6246",
      "line": 180,
      "modules": [
        "MODULE_REFERENCE:RawSourceMap@source-map",
        "MODULE_REFERENCE:RawIndexMap@source-map",
      ],
      "position": 6246,
      "references": [
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@5142",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@284",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@284",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@955",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@325",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@4522",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@4522",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@955": {
      "character": 0,
      "content": "async function findFunctionsByDefinition(
  jsFileContents: string,
  functionDefinitions: Array<string>,
): Promise<
  Record<string, { normalized: string; foundLocation: FunctionLocation | null }>
> {
  try {
    // Create a map of function definitions to their normalized form and foundLocation
    const functionMap = functionDefinitions.reduce(
      (acc, def) => {
        acc[def] = {
          normalized: def.replace(/\\s+/g, " ").trim(),
          foundLocation: null,
        };
        return acc;
      },
      {} as Record<
        string,
        { normalized: string; foundLocation: FunctionLocation | null }
      >,
    );

    const ast = parse(jsFileContents, {
      ecmaVersion: "latest",
      locations: true,
      sourceType: "module",
    });

    walkSimple(ast, {
      FunctionDeclaration(node) {
        for (const key in functionMap) {
          if (functionMap[key].foundLocation) {
            continue;
          }
          const funcSource = jsFileContents.substring(node.start, node.end);
          if (
            node.loc &&
            funcSource.replace(/\\s+/g, " ").trim() ===
              functionMap[key].normalized
          ) {
            functionMap[key].foundLocation = {
              startLine: node.loc.start.line,
              startColumn: node.loc.start.column + 1,
              endLine: node.loc.end.line,
              endColumn: node.loc.end.column + 1,
            };
          }
        }
      },
      FunctionExpression(node) {
        for (const key in functionMap) {
          if (functionMap[key].foundLocation) {
            continue;
          }
          const funcSource = jsFileContents.substring(node.start, node.end);
          if (
            node.loc &&
            funcSource.replace(/\\s+/g, " ").trim() ===
              functionMap[key].normalized
          ) {
            functionMap[key].foundLocation = {
              startLine: node.loc.start.line,
              startColumn: node.loc.start.column + 1,
              endLine: node.loc.end.line,
              endColumn: node.loc.end.column + 1,
            };
          }
        }
      },
      ArrowFunctionExpression(node) {
        for (const key in functionMap) {
          if (functionMap[key].foundLocation) {
            continue;
          }
          const funcSource = jsFileContents.substring(node.start, node.end);
          if (
            node.loc &&
            funcSource.replace(/\\s+/g, " ").trim() ===
              functionMap[key].normalized
          ) {
            functionMap[key].foundLocation = {
              startLine: node.loc.start.line,
              startColumn: node.loc.start.column,
              endLine: node.loc.end.line,
              endColumn: node.loc.end.column,
            };
          }
        }
      },
    });

    return functionMap;
  } catch {
    logger.error("[findFunctionByDefinition] Error parsing js file contents");
    return {};
  }
}",
      "fileName": "src/lib/find-source-function/find-source-function.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@955",
      "line": 28,
      "modules": [
        "MODULE_REFERENCE:parse@acorn",
        "MODULE_REFERENCE:walkSimple@acorn-walk",
      ],
      "position": 955,
      "references": [
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@325",
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@325",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/find-source-function/index.ts@11": {
      "character": 2,
      "content": "export { findSourceFunctions } from "./find-source-function.js"",
      "fileName": "src/lib/find-source-function/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/find-source-function/index.ts@11",
      "line": 1,
      "modules": [],
      "position": 11,
      "references": [
        "SOURCE_REFERENCE:src/lib/find-source-function/find-source-function.ts@6246",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/fp-services/types.ts@107": {
      "character": 34,
      "content": "const TokenPayloadSchema = z.object({
  token: z.string(),
  expiresAt: z.string(),
})",
      "fileName": "src/lib/fp-services/types.ts",
      "id": "SOURCE_REFERENCE:src/lib/fp-services/types.ts@107",
      "line": 3,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 107,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/otel/index.ts@354": {
      "character": 13,
      "content": "const OTEL_TRACE_ID_REGEX = /^[0-9a-f]{32}$/i",
      "fileName": "src/lib/otel/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/otel/index.ts@354",
      "line": 14,
      "modules": [],
      "position": 354,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/otel/index.ts@452": {
      "character": 0,
      "content": "export function isValidOtelTraceId(traceId: string): boolean {
  return OTEL_TRACE_ID_REGEX.test(traceId);
}",
      "fileName": "src/lib/otel/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/otel/index.ts@452",
      "line": 19,
      "modules": [],
      "position": 452,
      "references": [
        "SOURCE_REFERENCE:src/lib/otel/index.ts@354",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/otel/index.ts@720": {
      "character": 0,
      "content": "export function generateOtelTraceId(): string {
  return randomBytes(16).toString("hex");
}",
      "fileName": "src/lib/otel/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/otel/index.ts@720",
      "line": 27,
      "modules": [
        "MODULE_REFERENCE:randomBytes@node:crypto",
      ],
      "position": 720,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@2157": {
      "character": 0,
      "content": "export async function handleFailedRequest(
  db: DbType,
  requestId: RequestIdType,
  traceId: string,
  responseTime: number,
  error: unknown,
) {
  let failureReason = "unknown";
  if (hasMessage(error)) {
    failureReason = error.message;
  }
  let failureDetails: Record<string, string> = {};
  if (error instanceof Error) {
    failureDetails = errorToJson(error);
  }

  await db.insert(appResponses).values([
    {
      isFailure: true,
      responseTime,
      traceId,
      requestId,
      failureReason,
      failureDetails,
    },
  ]);

  return {
    isFailure: true,
    responseTime,
    traceId,
    requestId,
    failureReason,
    failureDetails,
  };
}",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@2157",
      "line": 80,
      "modules": [],
      "position": 2157,
      "references": [
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@392",
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@338",
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@2839",
        "SOURCE_REFERENCE:src/lib/utils.ts@940",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@2839": {
      "character": 0,
      "content": "function hasMessage(error: unknown): error is { message: string } {
  return (
    !!error &&
    typeof error === "object" &&
    "message" in error &&
    typeof error?.message === "string"
  );
}",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@2839",
      "line": 117,
      "modules": [],
      "position": 2839,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@3164": {
      "character": 0,
      "content": "export async function handleSuccessfulRequest(
  db: DbType,
  requestId: RequestIdType,
  duration: number,
  response: Awaited<ReturnType<typeof fetch>>,
  traceId: string,
) {
  const { responseBody, responseTime, responseHeaders, responseStatusCode } =
    await appResponseInsertSchema
      .extend({
        headers: z.instanceof(Headers),
        status: z.number(),
        body: z.instanceof(ReadableStream).nullable(),
        traceId: z.string().optional(),
      })
      .transform(async ({ headers, status }) => {
        const responseHeaders: Record<string, string> = {};
        // NOTE - Order of arguments when you do \`forEach\` on a Headers object is (headerValue, headerName)
        headers.forEach((headerValue, headerName) => {
          responseHeaders[headerName] = headerValue;
        });

        return {
          responseHeaders,
          responseStatusCode: status,
          responseBody: await safeReadTextBody(response),
          responseTime: duration,
        };
      })
      .parseAsync(response);

  await db.insert(appResponses).values([
    {
      isFailure: false,
      responseStatusCode,
      responseTime,
      responseHeaders,
      responseBody,
      traceId,
      requestId,
    },
  ]);

  return {
    isFailure: false,
    responseStatusCode,
    responseTime,
    responseHeaders,
    responseBody,
    traceId,
  };
}",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@3164",
      "line": 130,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 3164,
      "references": [
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@392",
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@338",
        "SOURCE_REFERENCE:src/db/schema.ts@4716",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@338": {
      "character": 0,
      "content": "type RequestIdType = schema.AppResponse["requestId"];",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@338",
      "line": 12,
      "modules": [],
      "position": 338,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@392": {
      "character": 0,
      "content": "type DbType = LibSQLDatabase<typeof schema>;",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@392",
      "line": 13,
      "modules": [
        "MODULE_REFERENCE:LibSQLDatabase@drizzle-orm/libsql",
      ],
      "position": 392,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@535": {
      "character": 0,
      "content": "export async function executeProxyRequest(
  reqOrAppReq: NewAppRequest | Request,
) {
  const proxiedReq =
    reqOrAppReq instanceof Request
      ? reqOrAppReq
      : createProxyRequestFromNewAppRequest(reqOrAppReq);

  try {
    const response = await fetch(proxiedReq);
    return response;
  } catch (err) {
    logger.error("executeProxyRequest fetchError:", err);
    throw err;
  }
}",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@535",
      "line": 18,
      "modules": [],
      "position": 535,
      "references": [
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@930",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@930": {
      "character": 0,
      "content": "function createProxyRequestFromNewAppRequest(
  requestDescription: NewAppRequest,
) {
  const { requestUrl, requestMethod, requestBody } = requestDescription;

  let { requestHeaders } = requestDescription;

  if (!requestHeaders) {
    requestHeaders = {};
  }

  let validBody: BodyInit | null = null;
  if (requestBody != null) {
    if (
      requestBody instanceof Blob ||
      requestBody instanceof ArrayBuffer ||
      requestBody instanceof FormData ||
      requestBody instanceof URLSearchParams ||
      requestBody instanceof ReadableStream ||
      typeof requestBody === "string"
    ) {
      validBody = requestBody;
    } else if (requestBody && typeof requestBody === "object") {
      logger.debug(
        "executeProxyRequest requestBody is an object, stringifying it",
      );
      validBody = JSON.stringify(requestBody);
    } else {
      logger.warn("Invalid requestBody type. Setting to null.");
    }
  }

  const proxiedReq = new Request(requestUrl, {
    method: requestMethod,
    headers: new Headers(requestHeaders),
    body: validBody,
  });

  return proxiedReq;
}",
      "fileName": "src/lib/proxy-request/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@930",
      "line": 35,
      "modules": [],
      "position": 930,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/settings/index.ts@1283": {
      "character": 0,
      "content": "export async function getSetting<T extends SettingsKey>(
  db: LibSQLDatabase<typeof schema>,
  key: T,
): Promise<Settings[T] | undefined> {
  const result = await db.query.settings.findFirst({
    where: eq(settings.key, String(key)),
  });

  if (!result?.value) {
    return;
  }

  return safeParseJson(result.value);
}",
      "fileName": "src/lib/settings/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/settings/index.ts@1283",
      "line": 53,
      "modules": [
        "MODULE_REFERENCE:SettingsKey@@fiberplane/fpx-types",
        "MODULE_REFERENCE:LibSQLDatabase@drizzle-orm/libsql",
        "MODULE_REFERENCE:Settings@@fiberplane/fpx-types",
        "MODULE_REFERENCE:eq@drizzle-orm",
      ],
      "position": 1283,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@6483",
        "SOURCE_REFERENCE:src/lib/utils.ts@3106",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/settings/index.ts@1609": {
      "character": 0,
      "content": "export async function getAllSettings(
  db: LibSQLDatabase<typeof schema>,
): Promise<Settings> {
  const results = await db.query.settings.findMany();

  const mappedToSchema = results.reduce<Record<string, string>>(
    (acc, setting) => {
      acc[setting.key] = setting.value
        ? safeParseJson(setting.value)
        : undefined;
      return acc;
    },
    {},
  );

  return SettingsSchema.parse(mappedToSchema);
}",
      "fileName": "src/lib/settings/index.ts",
      "id": "SOURCE_REFERENCE:src/lib/settings/index.ts@1609",
      "line": 68,
      "modules": [
        "MODULE_REFERENCE:LibSQLDatabase@drizzle-orm/libsql",
        "MODULE_REFERENCE:Settings@@fiberplane/fpx-types",
        "MODULE_REFERENCE:SettingsSchema@@fiberplane/fpx-types",
      ],
      "position": 1609,
      "references": [
        "SOURCE_REFERENCE:src/lib/utils.ts@3106",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/utils.ts@208": {
      "character": 0,
      "content": "export function isJson(str: unknown) {
  if (typeof str !== "string") {
    return false;
  }
  try {
    JSON.parse(str);
    return true;
  } catch {
    return false;
  }
}",
      "fileName": "src/lib/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/utils.ts@208",
      "line": 7,
      "modules": [],
      "position": 208,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/utils.ts@3106": {
      "character": 0,
      "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
      "fileName": "src/lib/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/utils.ts@3106",
      "line": 112,
      "modules": [],
      "position": 3106,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/utils.ts@3358": {
      "character": 0,
      "content": "export function fallback<T extends Schema<any>, U>(
  schema: T,
  valueOrFn: U | (() => U),
): T | Schema<U> {
  return any().transform((val) => {
    const safe = schema.safeParse(val);
    if (safe.success) {
      return safe.data;
    }
    if (typeof valueOrFn === "function") {
      return (valueOrFn as () => U)();
    }
    return valueOrFn;
  });
}",
      "fileName": "src/lib/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/utils.ts@3358",
      "line": 124,
      "modules": [
        "MODULE_REFERENCE:Schema@zod",
        "MODULE_REFERENCE:Schema@zod",
        "MODULE_REFERENCE:any@zod",
      ],
      "position": 3358,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/utils.ts@8155": {
      "character": 0,
      "content": "export function resolveWebhoncUrl() {
  const fallbackUrl = "webhonc.mies.workers.dev";
  if (!process.env.FPX_WEBHONC_BASE_URL) {
    return fallbackUrl;
  }
  const customUrl = new URL(process.env.FPX_WEBHONC_BASE_URL);
  return customUrl.host;
}",
      "fileName": "src/lib/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/utils.ts@8155",
      "line": 285,
      "modules": [],
      "position": 8155,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/utils.ts@940": {
      "character": 0,
      "content": "export function errorToJson(error: Error) {
  return {
    name: error.name, // Includes the name of the error, e.g., 'TypeError'
    message: error.message, // The message string of the error
    stack: error.stack ?? "", // Stack trace of where the error occurred (useful for debugging)
    // Optionally add more properties here if needed
  };
}",
      "fileName": "src/lib/utils.ts",
      "id": "SOURCE_REFERENCE:src/lib/utils.ts@940",
      "line": 42,
      "modules": [],
      "position": 940,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/lib/webhonc/store.ts@338": {
      "character": 0,
      "content": "export async function getWebHoncConnectionId(
  db: LibSQLDatabase<typeof schema>,
) {
  return ((await getSetting(db, "webhoncConnectionId")) ?? false) as string;
}",
      "fileName": "src/lib/webhonc/store.ts",
      "id": "SOURCE_REFERENCE:src/lib/webhonc/store.ts@338",
      "line": 11,
      "modules": [
        "MODULE_REFERENCE:LibSQLDatabase@drizzle-orm/libsql",
      ],
      "position": 338,
      "references": [
        "SOURCE_REFERENCE:src/lib/settings/index.ts@1283",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/probe-routes.ts@3211": {
      "character": 0,
      "content": "export async function routerProbe(target: string) {
  const headers = new Headers();
  headers.append("X-Fpx-Route-Inspector", "enabled");
  return await fetch(target, {
    method: "GET",
    headers,
  });
}",
      "fileName": "src/probe-routes.ts",
      "id": "SOURCE_REFERENCE:src/probe-routes.ts@3211",
      "line": 107,
      "modules": [],
      "position": 3211,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/probe-routes.ts@3988": {
      "character": 0,
      "content": "export function resolveServiceArg(
  serviceArg: string | number | undefined,
  fallback = "http://localhost:8787",
) {
  if (!serviceArg) {
    return fallback;
  }
  if (typeof serviceArg === "string" && serviceArg.startsWith("http")) {
    return serviceArg;
  }
  if (typeof serviceArg === "number") {
    return \`http://localhost:\${serviceArg}\`;
  }
  const targetPort = Number.parseInt(serviceArg, 10);
  if (!targetPort) {
    logger.error(
      \`Invalid service argument \${serviceArg}. Using default \${fallback}.\`,
    );
    return fallback;
  }
  return \`http://localhost:\${targetPort}\`;
}",
      "fileName": "src/probe-routes.ts",
      "id": "SOURCE_REFERENCE:src/probe-routes.ts@3988",
      "line": 127,
      "modules": [],
      "position": 3988,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@10634": {
      "character": 23,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const connectionId = await getWebHoncConnectionId(db);
  const baseUrl = resolveWebhoncUrl();
  const protocol = baseUrl.startsWith("localhost") ? "http" : "https";
  return ctx.json({ webhoncUrl: \`\${protocol}://\${baseUrl}/\${connectionId}\` });
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@10634",
      "line": 354,
      "modules": [],
      "position": 10634,
      "references": [
        "SOURCE_REFERENCE:src/lib/webhonc/store.ts@338",
        "SOURCE_REFERENCE:src/lib/utils.ts@8155",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@11180": {
      "character": 0,
      "content": "function constructProxiedRequestHeaders(
  ctx: Context,
  fpxRequestorUiHeaders: string,
  traceId: string,
) {
  // NOTE - These are the headers that were set in the FPX ui itself
  const requestHeadersFromRequestorUi: Record<string, string> = isJson(
    fpxRequestorUiHeaders,
  )
    ? safeParseJson(fpxRequestorUiHeaders)
    : {};

  // NOTE - These are the headers that will be used in the request to the service
  const requestHeaders: Record<string, string> = {};

  // NOTE - We don't want to copy over the headers that were set by the browser fetch client
  //        This is because the browser fetch client sets some headers that we don't want to pass through
  //        to the service, such as the referer header, and several sec-fetch headers, etc
  //        See: FP-3930
  //
  // ctx.req.raw.headers.forEach((value, key) => {
  //   if (ignoreTheseHeaders.includes(key.toLowerCase())) {
  //     return;
  //   }
  //   requestHeaders[key] = value;
  // });

  for (const [key, value] of Object.entries(requestHeadersFromRequestorUi)) {
    // If a header is in this list, we don't want to pass it through to the service
    if (PROXY_HEADERS_IGNORE.includes(key.toLowerCase())) {
      continue;
    }
    requestHeaders[key] = value;
  }

  const alreadyHasContentType = Object.keys(requestHeaders).some(
    (key) => key.toLowerCase() === "content-type",
  );

  // Give the user's content type preference priority,
  // Otherwise, use the content type from the original request
  // This is important for multipart form data, for which we want to preserve the form boundary
  if (!alreadyHasContentType) {
    const rawContentType = ctx.req.raw.headers.get("content-type");
    if (rawContentType) {
      requestHeaders["Content-Type"] = rawContentType;
    }
  }

  // Ensure the trace id is present
  if (!requestHeaders["x-fpx-trace-id"]) {
    requestHeaders["x-fpx-trace-id"] = traceId;
  }

  return requestHeaders;
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@11180",
      "line": 373,
      "modules": [
        "MODULE_REFERENCE:Context@hono",
      ],
      "position": 11180,
      "references": [
        "SOURCE_REFERENCE:src/lib/utils.ts@208",
        "SOURCE_REFERENCE:src/lib/utils.ts@3106",
        "SOURCE_REFERENCE:src/routes/app-routes.ts@5212",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@1164": {
      "character": 26,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const routes = await db.select().from(appRoutes);
  const baseUrl = resolveServiceArg(
    env(ctx).FPX_SERVICE_TARGET as string,
    "http://localhost:8787",
  );
  return ctx.json({
    baseUrl,
    routes,
  });
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@1164",
      "line": 41,
      "modules": [
        "MODULE_REFERENCE:env@hono/adapter",
      ],
      "position": 1164,
      "references": [
        "SOURCE_REFERENCE:src/probe-routes.ts@3988",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@1529": {
      "character": 35,
      "content": "async (ctx) => {
  const serviceTargetArgument = process.env.FPX_SERVICE_TARGET;
  const serviceUrl = resolveServiceArg(serviceTargetArgument);
  await routerProbe(serviceUrl);
  return ctx.text("OK");
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@1529",
      "line": 57,
      "modules": [],
      "position": 1529,
      "references": [
        "SOURCE_REFERENCE:src/probe-routes.ts@3988",
        "SOURCE_REFERENCE:src/probe-routes.ts@3211",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@1768": {
      "character": 2,
      "content": "zValidator(
    "json",
    z.union([appRoutesInsertSchema, z.array(appRoutesInsertSchema)]),
  )",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@1768",
      "line": 66,
      "modules": [
        "MODULE_REFERENCE:zValidator@@hono/zod-validator",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 1768,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@1544",
        "SOURCE_REFERENCE:src/db/schema.ts@1544",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@1869": {
      "character": 2,
      "content": "async (ctx) => {
    const db = ctx.get("db");
    const submitted = ctx.req.valid("json");
    // NOTE: drizzle should handle this for us, but it doesn't seem to be working...
    if (Array.isArray(submitted)) {
      const createdRoutes = await db
        .insert(appRoutes)
        .values(submitted)
        .returning();
      return ctx.json(createdRoutes);
    }

    const createdRoute = await db
      .insert(appRoutes)
      .values(submitted)
      .returning();
    return ctx.json(createdRoute?.[0]);
  }",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@1869",
      "line": 70,
      "modules": [],
      "position": 1869,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@292",
        "SOURCE_REFERENCE:src/db/schema.ts@292",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@2428": {
      "character": 2,
      "content": "zValidator("json", schemaProbedRoutes)",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@2428",
      "line": 92,
      "modules": [
        "MODULE_REFERENCE:zValidator@@hono/zod-validator",
      ],
      "position": 2428,
      "references": [
        "SOURCE_REFERENCE:src/lib/app-routes.ts@231",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@2470": {
      "character": 2,
      "content": "async (ctx) => {
    const db = ctx.get("db");
    const { routes } = ctx.req.valid("json");

    try {
      if (routes.length > 0) {
        // "Re-register" all current app routes in a database transaction
        await reregisterRoutes(db, { routes });

        // TODO - Detect if anything actually changed before invalidating the query on the frontend
        //        This would be more of an optimization, but is friendlier to the frontend
        const wsConnections = ctx.get("wsConnections");

        if (wsConnections) {
          for (const ws of wsConnections) {
            ws.send(
              JSON.stringify({
                event: "trace_created",
                payload: ["appRoutes"],
              }),
            );
          }
        }
      }

      return ctx.text("OK");
    } catch (err) {
      if (err instanceof Error) {
        logger.error("Error processing probed routes", err);
      }
      return ctx.json({ error: "Error processing probed routes" }, 500);
    }
  }",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@2470",
      "line": 93,
      "modules": [],
      "position": 2470,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@3528": {
      "character": 43,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const { method, path } = ctx.req.param();
  const decodedPath = decodeURIComponent(path);
  const createdRoute = await db
    .delete(appRoutes)
    .where(
      and(
        eq(appRoutes.method, method),
        eq(appRoutes.path, decodedPath),
        eq(appRoutes.handlerType, "route"),
        // Only allow deleting routes that were NOT auto-detected
        eq(appRoutes.currentlyRegistered, false),
      ),
    )
    .returning();
  return ctx.json(createdRoute?.[0]);
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@3528",
      "line": 128,
      "modules": [
        "MODULE_REFERENCE:and@drizzle-orm",
        "MODULE_REFERENCE:eq@drizzle-orm",
        "MODULE_REFERENCE:eq@drizzle-orm",
        "MODULE_REFERENCE:eq@drizzle-orm",
        "MODULE_REFERENCE:eq@drizzle-orm",
      ],
      "position": 3528,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@292",
        "SOURCE_REFERENCE:src/db/schema.ts@292",
        "SOURCE_REFERENCE:src/db/schema.ts@292",
        "SOURCE_REFERENCE:src/db/schema.ts@292",
        "SOURCE_REFERENCE:src/db/schema.ts@292",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@4090": {
      "character": 32,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  await db.delete(appResponses);
  await db.delete(appRequests);
  return ctx.text("OK");
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@4090",
      "line": 147,
      "modules": [],
      "position": 4090,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@2752",
        "SOURCE_REFERENCE:src/db/schema.ts@1731",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@4258": {
      "character": 28,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const requests = await db
    .select()
    .from(appResponses)
    .rightJoin(appRequests, eq(appResponses.requestId, appRequests.id))
    .limit(1000);
  return ctx.json(requests);
}",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@4258",
      "line": 154,
      "modules": [
        "MODULE_REFERENCE:eq@drizzle-orm",
      ],
      "position": 4258,
      "references": [
        "SOURCE_REFERENCE:src/db/schema.ts@2752",
        "SOURCE_REFERENCE:src/db/schema.ts@1731",
        "SOURCE_REFERENCE:src/db/schema.ts@2752",
        "SOURCE_REFERENCE:src/db/schema.ts@1731",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@4506": {
      "character": 13,
      "content": "const ProxyRequestHeadersSchema = z.object({
  "x-fpx-trace-id": fallback(
    z.string().regex(OTEL_TRACE_ID_REGEX),
    generateOtelTraceId,
  ).describe("The otel trace id to use for the request"),
  "x-fpx-headers-json": z
    .string()
    .optional()
    .describe("The headers to use for the request, serialized as JSON"),
  "x-fpx-route": z
    .string()
    .optional()
    .describe("The Hono route pattern associated with the request"),
  "x-fpx-path-params": z
    .string()
    .optional()
    .describe("The path params to use for the request, if any"),
  "x-fpx-proxy-to": z
    .string()
    .describe(
      "The url to proxy to, this is the url we execute a request against",
    ),
})",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@4506",
      "line": 164,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 4506,
      "references": [
        "SOURCE_REFERENCE:src/lib/utils.ts@3358",
        "SOURCE_REFERENCE:src/lib/otel/index.ts@720",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@5212": {
      "character": 6,
      "content": "const PROXY_HEADERS_IGNORE = [
  "x-fpx-route",
  "x-fpx-path-params",
  "x-fpx-proxy-to",
]",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@5212",
      "line": 188,
      "modules": [],
      "position": 5212,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@5869": {
      "character": 2,
      "content": "zValidator("header", ProxyRequestHeadersSchema)",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@5869",
      "line": 207,
      "modules": [
        "MODULE_REFERENCE:zValidator@@hono/zod-validator",
      ],
      "position": 5869,
      "references": [
        "SOURCE_REFERENCE:src/routes/app-routes.ts@4506",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/app-routes.ts@5920": {
      "character": 2,
      "content": "async (ctx) => {
    const {
      "x-fpx-trace-id": traceIdHeader,
      "x-fpx-proxy-to": proxyToHeader,
      "x-fpx-path-params": pathParamsHeader,
      "x-fpx-route": routeHeader,
      "x-fpx-headers-json": headersJsonHeader,
    } = ctx.req.valid("header");
    // Try to extract the trace id from the header, otherwise generate a new one
    const shouldUseHeaderTraceId = isValidOtelTraceId(traceIdHeader ?? "");
    const traceId: string =
      traceIdHeader && shouldUseHeaderTraceId
        ? traceIdHeader
        : generateOtelTraceId();

    if (!shouldUseHeaderTraceId) {
      logger.debug(
        \`Invalid trace id in header: \${traceIdHeader}, generating new trace id: \${traceId}\`,
      );
    }

    const db = ctx.get("db");

    const requestRoute = routeHeader ?? null;
    const requestPathParams = pathParamsHeader
      ? safeParseJson(pathParamsHeader)
      : null;

    const requestMethod = ctx.req.method;
    const requestUrlHeader = proxyToHeader;

    // NOTE - These are the headers that will be used in the request to the service
    const requestHeaders: Record<string, string> =
      constructProxiedRequestHeaders(ctx, headersJsonHeader ?? "", traceId);

    // Construct the url we want to proxy to, using the query params from the original request
    const requestQueryParams = {
      ...ctx.req.query(),
    };
    const requestUrl = resolveUrlQueryParams(
      requestUrlHeader,
      requestQueryParams,
    );
    logger.debug("Proxying request to:", requestUrl);
    logger.debug("Proxying request with headers:", requestHeaders);

    // Create a new request object
    // Clone the incoming request, so we can make a proxy Request object
    const clonedReq = ctx.req.raw.clone();
    const proxiedReq = new Request(requestUrl, {
      method: requestMethod,
      headers: new Headers(requestHeaders),
      body: clonedReq.body ? clonedReq.body.tee()[0] : null,
    });

    // Extract the request body based on content type
    // *The whole point of this is to serialize the request body into the database, for future reference*
    //
    let requestBody:
      | null
      | string
      | {
          [x: string]: string | SerializedFile | (string | SerializedFile)[];
        } = null;
    try {
      requestBody = await serializeRequestBodyForFpxDb(ctx);
    } catch (error) {
      requestBody = "<failed to parse>";
      logger.error("Failed to serialize request body", error);
    }

    // Record request details
    const newRequest: NewAppRequest = {
      // @ts-expect-error - Trust me, the request method is correct, and it's a string
      requestMethod,
      requestUrl,
      requestHeaders,
      requestPathParams,
      requestQueryParams,
      requestBody,
      requestRoute,
      updatedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
    };

    const insertResult = await db
      .insert(appRequests)
      .values(newRequest)
      .returning({ requestId: appRequests.id });

    const requestId = insertResult[0].requestId;

    const startTime = Date.now();
    try {
      // Proxy the request
      const response = await executeProxyRequest(proxiedReq);

      // Clone the response and prepare to return it
      const clonedResponse = response.clone();

      const newHeaders = new Headers(clonedResponse.headers);

      // HACK - Frontend often couldn't parse the body because of encoding mismatch
      newHeaders.delete("content-encoding");
      // HACK - Having an explicit content length could mess up the frontend
      //        when the body is a stream ((this happened when running a hono app on Deno))
      newHeaders.delete("content-length");

      const proxiedResponse = new Response(clonedResponse.body, {
        status: response.status,
        statusText: response.statusText,
        headers: newHeaders,
      });
      const duration = Date.now() - startTime;

      await handleSuccessfulRequest(db, requestId, duration, response, traceId);

      proxiedResponse.headers.set("x-fpx-trace-id", traceId);

      return proxiedResponse;
    } catch (fetchError) {
      logger.debug("Error executing proxied request (fetchError):", fetchError);
      const responseTime = Date.now() - startTime;
      const { failureDetails, failureReason, isFailure } =
        await handleFailedRequest(
          db,
          requestId,
          traceId,
          responseTime,
          fetchError,
        );

      ctx.header("x-fpx-trace-id", traceId);
      ctx.status(500);
      return ctx.json({
        isFailure,
        responseTime,
        failureDetails,
        failureReason,
        traceId,
        requestId,
      });
    }
  }",
      "fileName": "src/routes/app-routes.ts",
      "id": "SOURCE_REFERENCE:src/routes/app-routes.ts@5920",
      "line": 208,
      "modules": [],
      "position": 5920,
      "references": [
        "SOURCE_REFERENCE:src/lib/otel/index.ts@452",
        "SOURCE_REFERENCE:src/lib/otel/index.ts@720",
        "SOURCE_REFERENCE:src/lib/utils.ts@3106",
        "SOURCE_REFERENCE:src/routes/app-routes.ts@11180",
        "SOURCE_REFERENCE:src/db/schema.ts@1731",
        "SOURCE_REFERENCE:src/db/schema.ts@1731",
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@535",
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@3164",
        "SOURCE_REFERENCE:src/lib/proxy-request/index.ts@2157",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@2269": {
      "character": 28,
      "content": "cors()",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@2269",
      "line": 73,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 2269,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@2277": {
      "character": 36,
      "content": "async (ctx) => {
  logger.debug("Deleting user details");
  const db = ctx.get("db");
  await db.delete(schema.tokens);
  // TODO - Make a request to Fiberplane Services to remove user from our D1 db
  return ctx.body(null, 204);
}",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@2277",
      "line": 73,
      "modules": [],
      "position": 2277,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@2567": {
      "character": 28,
      "content": "cors()",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@2567",
      "line": 84,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 2567,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@2575": {
      "character": 36,
      "content": "async (ctx) => {
  const token = ctx.req.header("Authorization")?.split(" ")?.[1];

  if (!token) {
    return ctx.json({ error: "No token provided" }, 400);
  }

  try {
    await verifyToken(token);
    logger.debug("Auth token verification successful");
    return ctx.json(true);
  } catch (error) {
    if (error instanceof TokenExpiredError) {
      return ctx.json({ error: "Token expired", type: error.name }, 401);
    }
    logger.error("Verification failed", error);
    return ctx.json({ error: "Verification failed" }, 401);
  }
}",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@2575",
      "line": 84,
      "modules": [],
      "position": 2575,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@3246": {
      "character": 2,
      "content": "cors()",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@3246",
      "line": 109,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 3246,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@3256": {
      "character": 2,
      "content": "zValidator("json", TokenPayloadSchema)",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@3256",
      "line": 110,
      "modules": [
        "MODULE_REFERENCE:zValidator@@hono/zod-validator",
      ],
      "position": 3256,
      "references": [
        "SOURCE_REFERENCE:src/lib/fp-services/types.ts@107",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@3298": {
      "character": 2,
      "content": "async (ctx) => {
    const { token, expiresAt } = ctx.req.valid("json");

    const db = ctx.get("db");
    const wsConnections = ctx.get("wsConnections");

    try {
      await db.insert(schema.tokens).values({
        value: token,
        expiresAt,
      });

      // Force the UI to refresh user information,
      // effectively logging the user in.
      if (wsConnections) {
        for (const ws of wsConnections) {
          ws.send(
            JSON.stringify({
              event: "login_success",
              payload: ["userInfo"],
            }),
          );
        }
      }

      return ctx.text("OK");
    } catch (error) {
      logger.error("Error handling auth success message:", error);
      return ctx.text("Unknown error", 500);
    }
  }",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@3298",
      "line": 111,
      "modules": [],
      "position": 3298,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@662": {
      "character": 25,
      "content": "cors()",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@662",
      "line": 16,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 662,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/auth.ts@670": {
      "character": 33,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const [token] = await db
    .select()
    .from(schema.tokens)
    .orderBy(desc(schema.tokens.createdAt))
    .limit(1);

  if (!token) {
    return ctx.json(null);
  }

  try {
    const user = await getUser(token.value);

    if (!user) {
      await db
        .delete(schema.tokens)
        .where(eq(schema.tokens.value, token.value))
        .catch((error) => {
          const errorMessage =
            error instanceof Error ? error.message : "Unknown error";
          logger.error(
            "Error deleting token for user that was not found",
            errorMessage,
          );
        });
      return ctx.json(null);
    }

    return ctx.json({
      ...user,
      token: token.value,
      expiresAt: token.expiresAt,
    });
  } catch (error) {
    if (error instanceof TokenExpiredError) {
      logger.debug("Token expired, deleting from database");
      // NOTE - We catch errors so as not to throw if deletion fails
      await db
        .delete(schema.tokens)
        .where(eq(schema.tokens.value, token.value))
        .catch((error) => {
          const errorMessage =
            error instanceof Error ? error.message : "Unknown error";
          logger.error("Error deleting expired token:", errorMessage);
        });
    }
    return ctx.json(null);
  }
}",
      "fileName": "src/routes/auth.ts",
      "id": "SOURCE_REFERENCE:src/routes/auth.ts@670",
      "line": 16,
      "modules": [
        "MODULE_REFERENCE:desc@drizzle-orm",
        "MODULE_REFERENCE:eq@drizzle-orm",
        "MODULE_REFERENCE:eq@drizzle-orm",
      ],
      "position": 670,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/inference/inference.ts@1060": {
      "character": 6,
      "content": "const generateRequestSchema = z.object({
  handler: z.string(),
  method: z.string(),
  path: z.string(),
  history: z.array(z.string()).nullish(),
  persona: z.string(),
  openApiSpec: z.string().nullish(),
  middleware: z
    .array(
      z.object({
        handler: z.string(),
        method: z.string(),
        path: z.string(),
      }),
    )
    .nullish(),
})",
      "fileName": "src/routes/inference/inference.ts",
      "id": "SOURCE_REFERENCE:src/routes/inference/inference.ts@1060",
      "line": 27,
      "modules": [
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 1060,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/inference/inference.ts@1465": {
      "character": 2,
      "content": "cors()",
      "fileName": "src/routes/inference/inference.ts",
      "id": "SOURCE_REFERENCE:src/routes/inference/inference.ts@1465",
      "line": 47,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 1465,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/inference/inference.ts@1475": {
      "character": 2,
      "content": "zValidator("json", generateRequestSchema)",
      "fileName": "src/routes/inference/inference.ts",
      "id": "SOURCE_REFERENCE:src/routes/inference/inference.ts@1475",
      "line": 48,
      "modules": [
        "MODULE_REFERENCE:zValidator@@hono/zod-validator",
      ],
      "position": 1475,
      "references": [
        "SOURCE_REFERENCE:src/routes/inference/inference.ts@1060",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/inference/inference.ts@1520": {
      "character": 2,
      "content": "async (ctx) => {
    const { handler, method, path, history, persona, openApiSpec, middleware } =
      ctx.req.valid("json");

    const db = ctx.get("db");
    const inferenceConfig = await getInferenceConfig(db);

    if (!inferenceConfig) {
      return ctx.json(
        {
          message: "No inference configuration found",
        },
        403,
      );
    }

    const provider = inferenceConfig.aiProvider;

    // Expand out of scope identifiers in the handler function, to add as additional context
    //
    // Uncomment console.time to see how long this takes
    // It should be slow on the first request, but fast-ish on subsequent requests
    //
    // console.time("Handler and Middleware Expansion");
    const [handlerContextPerformant, middlewareContextPerformant] =
      // HACK - Ditch the expand handler for ollama for now, it overwhelms llama 3.1-8b
      provider !== "ollama"
        ? await expandHandler(handler, middleware ?? []).catch((error) => {
            logger.error(\`Error expanding handler and middleware: \${error}\`);
            return [null, null];
          })
        : [null, null];
    // console.timeEnd("Handler and Middleware Expansion");

    // HACK - Get latest token from db
    const [token] = await db
      .select()
      .from(schema.tokens)
      .orderBy(desc(schema.tokens.createdAt))
      .limit(1);

    // Generate the request
    const { data: parsedArgs, error: generateError } =
      await generateRequestWithAiProvider({
        fpApiKey: token?.value,
        inferenceConfig,
        persona,
        method,
        path,
        handler,
        handlerContext: handlerContextPerformant ?? undefined,
        history: history ?? undefined,
        openApiSpec: openApiSpec ?? undefined,
        middleware: middleware ?? undefined,
        middlewareContext: middlewareContextPerformant ?? undefined,
      });

    if (generateError) {
      return ctx.json({ message: generateError.message }, 500);
    }

    return ctx.json({
      request: parsedArgs,
    });
  }",
      "fileName": "src/routes/inference/inference.ts",
      "id": "SOURCE_REFERENCE:src/routes/inference/inference.ts@1520",
      "line": 49,
      "modules": [
        "MODULE_REFERENCE:desc@drizzle-orm",
      ],
      "position": 1520,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/inference/inference.ts@822": {
      "character": 32,
      "content": "cors()",
      "fileName": "src/routes/inference/inference.ts",
      "id": "SOURCE_REFERENCE:src/routes/inference/inference.ts@822",
      "line": 19,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 822,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/inference/inference.ts@830": {
      "character": 40,
      "content": "async (ctx) => {
  const { handler } = await ctx.req.json();
  const projectRoot = USER_PROJECT_ROOT_DIR;

  const expandedFunction = await expandFunction(projectRoot, handler);
  return ctx.json({ expandedFunction });
}",
      "fileName": "src/routes/inference/inference.ts",
      "id": "SOURCE_REFERENCE:src/routes/inference/inference.ts@830",
      "line": 19,
      "modules": [],
      "position": 830,
      "references": [
        "SOURCE_REFERENCE:src/constants.ts@120",
        "SOURCE_REFERENCE:src/lib/expand-function/index.ts@11",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/settings.ts@425": {
      "character": 24,
      "content": "cors()",
      "fileName": "src/routes/settings.ts",
      "id": "SOURCE_REFERENCE:src/routes/settings.ts@425",
      "line": 12,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 425,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/settings.ts@433": {
      "character": 32,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const settingsRecord = await getAllSettings(db);
  return ctx.json(settingsRecord);
}",
      "fileName": "src/routes/settings.ts",
      "id": "SOURCE_REFERENCE:src/routes/settings.ts@433",
      "line": 12,
      "modules": [],
      "position": 433,
      "references": [
        "SOURCE_REFERENCE:src/lib/settings/index.ts@1609",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/settings.ts@723": {
      "character": 25,
      "content": "cors()",
      "fileName": "src/routes/settings.ts",
      "id": "SOURCE_REFERENCE:src/routes/settings.ts@723",
      "line": 23,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 723,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/settings.ts@731": {
      "character": 33,
      "content": "async (ctx) => {
  const currentSettings = await getAllSettings(ctx.get("db"));
  const prevProxyUrlEnabled = currentSettings?.proxyRequestsEnabled;

  const { content } = (await ctx.req.json()) as {
    content: Record<string, string>;
  };

  const parsedContent = SettingsSchema.parse(content);
  // Remove the stored api key if the feature is disabled
  // if (!parsedContent.aiEnabled) {
  //   parsedContent.aiProviderConfigurations?.openai?.apiKey = "";
  //   parsedContent.aiProviderConfigurations?.anthropic?.apiKey = "";
  // }

  logger.debug("Updating settings", { content });

  const db = ctx.get("db");
  const webhonc = ctx.get("webhonc");

  const updatedSettings = await upsertSettings(db, parsedContent);

  logger.debug("Configuration updated...");

  // HACK - We should techincally JSON parse the value here, but whatever.
  const proxyUrlEnabled =
    updatedSettings.find((setting) => setting.key === "proxyRequestsEnabled")
      ?.value === "true";

  const shouldStartWebhonc = !prevProxyUrlEnabled && proxyUrlEnabled;
  if (shouldStartWebhonc) {
    logger.debug("Proxy requests enabled in settings update, starting webhonc");
    await webhonc.start();
  }

  const shouldStopWebhonc = prevProxyUrlEnabled && !proxyUrlEnabled;
  if (shouldStopWebhonc) {
    logger.debug(
      "Proxy requests disabled in settings update, stopping webhonc",
    );
    await webhonc.stop();
  }

  return ctx.json(updatedSettings);
}",
      "fileName": "src/routes/settings.ts",
      "id": "SOURCE_REFERENCE:src/routes/settings.ts@731",
      "line": 23,
      "modules": [
        "MODULE_REFERENCE:SettingsSchema@@fiberplane/fpx-types",
      ],
      "position": 731,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/source.ts@1391": {
      "character": 32,
      "content": "cors()",
      "fileName": "src/routes/source.ts",
      "id": "SOURCE_REFERENCE:src/routes/source.ts@1391",
      "line": 49,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 1391,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/source.ts@1399": {
      "character": 40,
      "content": "async (ctx) => {
  const { handler, source } = ctx.req.query();

  try {
    const result = await findSourceFunctions(source, handler);
    return ctx.json({
      functionText: result?.[0]?.sourceFunction ?? null,
    });
  } catch (err) {
    console.error("Could not find function in source", source);
    const message = getValueFromObject(err, "message", "Unknown error");
    const name = getValueFromObject(err, "name", "");

    return ctx.json(
      {
        error: "Error finding function",
        name,
        message,
      },
      500,
    );
  }
}",
      "fileName": "src/routes/source.ts",
      "id": "SOURCE_REFERENCE:src/routes/source.ts@1399",
      "line": 49,
      "modules": [],
      "position": 1399,
      "references": [
        "SOURCE_REFERENCE:src/lib/find-source-function/index.ts@11",
        "SOURCE_REFERENCE:src/routes/source.ts@1969",
        "SOURCE_REFERENCE:src/routes/source.ts@1969",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/source.ts@1969": {
      "character": 0,
      "content": "function getValueFromObject<T>(
  element: unknown,
  key: string,
  defaultValue: T,
): T {
  if (typeof element === "object" && element !== null && key in element) {
    const value = (element as Record<string, unknown>)[key];
    // Rough check to see if the type of the value is the same as the default value
    if (typeof value === typeof defaultValue || value === defaultValue) {
      return (element as Record<string, unknown>)[key] as T;
    }
  }

  return defaultValue;
}",
      "fileName": "src/routes/source.ts",
      "id": "SOURCE_REFERENCE:src/routes/source.ts@1969",
      "line": 73,
      "modules": [],
      "position": 1969,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/source.ts@462": {
      "character": 2,
      "content": "cors()",
      "fileName": "src/routes/source.ts",
      "id": "SOURCE_REFERENCE:src/routes/source.ts@462",
      "line": 14,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 462,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/source.ts@472": {
      "character": 2,
      "content": "zValidator(
    "query",
    z.object({ source: z.string(), line: z.string(), column: z.string() }),
  )",
      "fileName": "src/routes/source.ts",
      "id": "SOURCE_REFERENCE:src/routes/source.ts@472",
      "line": 15,
      "modules": [
        "MODULE_REFERENCE:zValidator@@hono/zod-validator",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
        "MODULE_REFERENCE:z@zod",
      ],
      "position": 472,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/source.ts@580": {
      "character": 2,
      "content": "async (ctx) => {
    const { source, line, column } = ctx.req.query();

    try {
      const file = JSON.parse(readFileSync(source, "utf8").toString());
      const consumer = await new SourceMapConsumer(file);
      const pos = consumer.originalPositionFor({
        line: Number.parseInt(line, 10),
        column: Number.parseInt(column, 10),
      });
      consumer.destroy();

      return ctx.json(pos);
    } catch (err) {
      const message = getValueFromObject(err, "message", "Unknown error");
      const name = getValueFromObject(err, "name", "");

      console.error("Could not read source file", message);
      return ctx.json(
        {
          error: "Error reading file",
          name,
          message,
        },
        500,
      );
    }
  }",
      "fileName": "src/routes/source.ts",
      "id": "SOURCE_REFERENCE:src/routes/source.ts@580",
      "line": 19,
      "modules": [
        "MODULE_REFERENCE:readFileSync@node:fs",
        "MODULE_REFERENCE:SourceMapConsumer@source-map",
      ],
      "position": 580,
      "references": [
        "SOURCE_REFERENCE:src/routes/source.ts@1969",
        "SOURCE_REFERENCE:src/routes/source.ts@1969",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/traces.ts@2072": {
      "character": 37,
      "content": "async (ctx) => {
  const traceId = ctx.req.param("traceId");

  const db = ctx.get("db");

  const fpxWorker = await getSetting(db, "fpxWorkerProxy");
  if (fpxWorker?.enabled && fpxWorker.baseUrl) {
    const response = await fetch(
      \`\${fpxWorker.baseUrl}/v1/traces/\${traceId}/spans\`,
    );
    const json = await response.json();
    return ctx.json(json);
  }

  const traces = await db
    .select()
    .from(otelSpans)
    .where(
      and(
        sql\`inner->>'scope_name' = 'fpx-tracer'\`,
        sql\`inner->>'trace_id' = \${traceId}\`,
      ),
    );

  const response: TraceDetailSpansResponse = traces.map(({ inner }) =>
    OtelSpanSchema.parse(inner),
  );

  return ctx.json(response);
}",
      "fileName": "src/routes/traces.ts",
      "id": "SOURCE_REFERENCE:src/routes/traces.ts@2072",
      "line": 70,
      "modules": [
        "MODULE_REFERENCE:and@drizzle-orm",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:TraceDetailSpansResponse@@fiberplane/fpx-types",
        "MODULE_REFERENCE:OtelSpanSchema@@fiberplane/fpx-types",
      ],
      "position": 2072,
      "references": [
        "SOURCE_REFERENCE:src/lib/settings/index.ts@1283",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/traces.ts@2822": {
      "character": 39,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  await db.delete(otelSpans);
  return ctx.text("OK");
}",
      "fileName": "src/routes/traces.ts",
      "id": "SOURCE_REFERENCE:src/routes/traces.ts@2822",
      "line": 101,
      "modules": [],
      "position": 2822,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/traces.ts@3005": {
      "character": 23,
      "content": "async (ctx) => {
  const db = ctx.get("db");
  const body: IExportTraceServiceRequest = await ctx.req.json();

  const fpxWorker = await getSetting(db, "fpxWorkerProxy");
  if (fpxWorker?.enabled && fpxWorker.baseUrl) {
    const response = await fetch(\`\${fpxWorker.baseUrl}/v1/traces\`, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "POST",
      body: JSON.stringify(body),
    });
    const json = await response.json();
    return ctx.json(json);
  }

  try {
    const tracesPayload = (await fromCollectorRequest(body)).map(
      (span) =>
        ({
          inner: OtelSpanSchema.parse(span),
          spanId: span.span_id,
          traceId: span.trace_id,
        }) satisfies typeof otelSpans.$inferInsert,
    );

    try {
      await db.insert(otelSpans).values(tracesPayload);
    } catch (error) {
      logger.error("Error inserting trace", error);
      return ctx.text("Error inserting trace", 500);
    }

    const wsConnections = ctx.get("wsConnections");
    if (wsConnections) {
      for (const ws of wsConnections) {
        ws.send(
          JSON.stringify({
            event: "trace_created",
            payload: ["mizuTraces"],
          }),
        );
      }
    }

    return ctx.text("OK");
  } catch (error) {
    logger.error("Error parsing trace data", error);
    return ctx.text("Error parsing trace data", 400);
  }
}",
      "fileName": "src/routes/traces.ts",
      "id": "SOURCE_REFERENCE:src/routes/traces.ts@3005",
      "line": 110,
      "modules": [
        "MODULE_REFERENCE:IExportTraceServiceRequest@@opentelemetry/otlp-transformer",
        "MODULE_REFERENCE:OtelSpanSchema@@fiberplane/fpx-types",
      ],
      "position": 3005,
      "references": [
        "SOURCE_REFERENCE:src/lib/settings/index.ts@1283",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:src/routes/traces.ts@837": {
      "character": 22,
      "content": "async (ctx) => {
  const db = ctx.get("db");

  const fpxWorker = await getSetting(db, "fpxWorkerProxy");
  if (fpxWorker?.enabled && fpxWorker.baseUrl) {
    const response = await fetch(\`\${fpxWorker.baseUrl}/v1/traces\`);
    const json = await response.json();
    return ctx.json(json);
  }

  const spans = await db.query.otelSpans.findMany({
    where: sql\`inner->>'scope_name' = 'fpx-tracer'\`,
    orderBy: desc(sql\`inner->>'end_time'\`),
  });

  const traceMap = new Map<string, Array<(typeof spans)[0]>>();

  for (const span of spans) {
    const traceId = span.inner.trace_id;
    if (!traceId) {
      continue;
    }
    if (!traceMap.has(traceId)) {
      traceMap.set(traceId, []);
    }
    traceMap.get(traceId)?.push(span);
  }

  const traces = Array.from(traceMap.entries()).map(([traceId, spans]) => ({
    traceId,
    spans,
  }));

  const response: TraceListResponse = traces.map(({ traceId, spans }) => ({
    traceId,
    spans: spans.map(({ inner }) => OtelSpanSchema.parse(inner)),
  }));

  return ctx.json(response);
}",
      "fileName": "src/routes/traces.ts",
      "id": "SOURCE_REFERENCE:src/routes/traces.ts@837",
      "line": 24,
      "modules": [
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:desc@drizzle-orm",
        "MODULE_REFERENCE:sql@drizzle-orm",
        "MODULE_REFERENCE:TraceListResponse@@fiberplane/fpx-types",
        "MODULE_REFERENCE:OtelSpanSchema@@fiberplane/fpx-types",
      ],
      "position": 837,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;

exports[`run test 'barrel files' with location './test-case/barrel-files' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "ROUTE_ENTRY:index.ts@407": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@407",
      "method": "get",
      "modules": [],
      "path": "/user/1",
      "position": 407,
      "sources": [
        "SOURCE_REFERENCE:index.ts@426",
        "SOURCE_REFERENCE:index.ts@434",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@531": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@531",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 531,
      "sources": [
        "SOURCE_REFERENCE:index.ts@544",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:index.ts@102": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:index.ts@407",
        "ROUTE_ENTRY:index.ts@531",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@102",
      "name": "app",
      "position": 102,
      "type": "ROUTE_TREE",
    },
    "SOURCE_REFERENCE:db/getUser.ts@128": {
      "character": 6,
      "content": "const DEFAULT_USER_NAME = "John Doe"",
      "fileName": "db/getUser.ts",
      "id": "SOURCE_REFERENCE:db/getUser.ts@128",
      "line": 4,
      "modules": [],
      "position": 128,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:db/getUser.ts@166": {
      "character": 6,
      "content": "const DEFAULT_EMAIL = "john@doe.com"",
      "fileName": "db/getUser.ts",
      "id": "SOURCE_REFERENCE:db/getUser.ts@166",
      "line": 5,
      "modules": [],
      "position": 166,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:db/getUser.ts@222": {
      "character": 23,
      "content": "const getUser = measure("getUser", async () => {
  await sleep(100);
  const value: User = {
    name: DEFAULT_USER_NAME,
    email: DEFAULT_EMAIL,
  };
  return value;
})",
      "fileName": "db/getUser.ts",
      "id": "SOURCE_REFERENCE:db/getUser.ts@222",
      "line": 7,
      "modules": [
        "MODULE_REFERENCE:measure@@fiberplane/hono-otel",
      ],
      "position": 222,
      "references": [
        "SOURCE_REFERENCE:utils.ts@0",
        "SOURCE_REFERENCE:types.ts@29",
        "SOURCE_REFERENCE:db/getUser.ts@128",
        "SOURCE_REFERENCE:db/getUser.ts@166",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:db/index.ts@9": {
      "character": 9,
      "content": "export { getUser } from "./getUser"",
      "fileName": "db/index.ts",
      "id": "SOURCE_REFERENCE:db/index.ts@9",
      "line": 0,
      "modules": [],
      "position": 9,
      "references": [
        "SOURCE_REFERENCE:db/getUser.ts@222",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@426": {
      "character": 19,
      "content": "cors()",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@426",
      "line": 14,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 426,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@434": {
      "character": 27,
      "content": "async (c) => {
  // await getUser();
  const user = await getUser();
  return c.json(user);
}",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@434",
      "line": 14,
      "modules": [],
      "position": 434,
      "references": [
        "SOURCE_REFERENCE:db/index.ts@9",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@544": {
      "character": 13,
      "content": "(c) => c.text("Hello, Hono!")",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@544",
      "line": 20,
      "modules": [],
      "position": 544,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:types.ts@0": {
      "character": 0,
      "content": "export type Email = string;",
      "fileName": "types.ts",
      "id": "SOURCE_REFERENCE:types.ts@0",
      "line": 0,
      "modules": [],
      "position": 0,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:types.ts@29": {
      "character": 0,
      "content": "export type User = {
  name: string;
  email: Email;
};",
      "fileName": "types.ts",
      "id": "SOURCE_REFERENCE:types.ts@29",
      "line": 2,
      "modules": [],
      "position": 29,
      "references": [
        "SOURCE_REFERENCE:types.ts@0",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:utils.ts@0": {
      "character": 0,
      "content": "export async function sleep(duration: number) {
  return new Promise((resolve) => setTimeout(resolve, duration));
}",
      "fileName": "utils.ts",
      "id": "SOURCE_REFERENCE:utils.ts@0",
      "line": 0,
      "modules": [],
      "position": 0,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;

exports[`run test 'empty' with location './test-case/empty' 1`] = `
{
  "errorCount": 0,
  "resources": {},
}
`;

exports[`run test 'hono factory' with location './test-case/hono-factory' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "ROUTE_ENTRY:bye.ts@54": {
      "fileName": "bye.ts",
      "id": "ROUTE_ENTRY:bye.ts@54",
      "method": "get",
      "modules": [],
      "path": "/bye",
      "position": 54,
      "sources": [
        "SOURCE_REFERENCE:bye.ts@70",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:factory.ts@281": {
      "fileName": "factory.ts",
      "id": "ROUTE_ENTRY:factory.ts@281",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 281,
      "sources": [
        "SOURCE_REFERENCE:factory.ts@294",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@124": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@124",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 124,
      "sources": [
        "SOURCE_REFERENCE:index.ts@142",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@173": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@173",
      "method": "get",
      "modules": [],
      "path": "/bye",
      "position": 173,
      "sources": [
        "SOURCE_REFERENCE:index.ts@194",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:panic.ts@54": {
      "fileName": "panic.ts",
      "id": "ROUTE_ENTRY:panic.ts@54",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 54,
      "sources": [
        "SOURCE_REFERENCE:panic.ts@67",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:silence.ts@58": {
      "fileName": "silence.ts",
      "id": "ROUTE_ENTRY:silence.ts@58",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 58,
      "sources": [
        "SOURCE_REFERENCE:silence.ts@75",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:bye.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:bye.ts@54",
      ],
      "fileName": "bye.ts",
      "id": "ROUTE_TREE:bye.ts@36",
      "name": "bye",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:factory.ts@248": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:factory.ts@281",
        "ROUTE_TREE_REFERENCE:bye.ts@36",
        "ROUTE_TREE_REFERENCE:silence.ts@36",
        "ROUTE_TREE_REFERENCE:panic.ts@36",
      ],
      "fileName": "factory.ts",
      "id": "ROUTE_TREE:factory.ts@248",
      "name": "app",
      "position": 248,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:index.ts@101": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:index.ts@124",
        "ROUTE_ENTRY:index.ts@173",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@101",
      "name": "subHello",
      "position": 101,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:index.ts@75": {
      "baseUrl": "",
      "entries": [
        "ROUTE_TREE_REFERENCE:factory.ts@248",
        "ROUTE_TREE_REFERENCE:index.ts@101",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@75",
      "name": "app",
      "position": 75,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:panic.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:panic.ts@54",
      ],
      "fileName": "panic.ts",
      "id": "ROUTE_TREE:panic.ts@36",
      "name": "app",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:silence.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:silence.ts@58",
      ],
      "fileName": "silence.ts",
      "id": "ROUTE_TREE:silence.ts@36",
      "name": "silence",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE_REFERENCE:bye.ts@36": {
      "fileName": "bye.ts",
      "id": "ROUTE_TREE_REFERENCE:bye.ts@36",
      "name": "bye",
      "path": "/bye",
      "position": 36,
      "targetId": "ROUTE_TREE:bye.ts@36",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:factory.ts@248": {
      "fileName": "factory.ts",
      "id": "ROUTE_TREE_REFERENCE:factory.ts@248",
      "name": "app",
      "path": "/",
      "position": 248,
      "targetId": "ROUTE_TREE:factory.ts@248",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:index.ts@101": {
      "fileName": "index.ts",
      "id": "ROUTE_TREE_REFERENCE:index.ts@101",
      "name": "subHello",
      "path": "/sub",
      "position": 101,
      "targetId": "ROUTE_TREE:index.ts@101",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:panic.ts@36": {
      "fileName": "panic.ts",
      "id": "ROUTE_TREE_REFERENCE:panic.ts@36",
      "name": "app",
      "path": "/panic",
      "position": 36,
      "targetId": "ROUTE_TREE:panic.ts@36",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:silence.ts@36": {
      "fileName": "silence.ts",
      "id": "ROUTE_TREE_REFERENCE:silence.ts@36",
      "name": "silence",
      "path": "/silence",
      "position": 36,
      "targetId": "ROUTE_TREE:silence.ts@36",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "SOURCE_REFERENCE:bye.ts@70": {
      "character": 16,
      "content": "(c) => c.text("Bye, sub!")",
      "fileName": "bye.ts",
      "id": "SOURCE_REFERENCE:bye.ts@70",
      "line": 3,
      "modules": [],
      "position": 70,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:factory.ts@294": {
      "character": 15,
      "content": "(c) => c.text("Hello, Hono!")",
      "fileName": "factory.ts",
      "id": "SOURCE_REFERENCE:factory.ts@294",
      "line": 9,
      "modules": [],
      "position": 294,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@142": {
      "character": 18,
      "content": "(c) => c.text("Hello, sub!")",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@142",
      "line": 6,
      "modules": [],
      "position": 142,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@194": {
      "character": 21,
      "content": "(c) => c.text("Bye, sub!")",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@194",
      "line": 7,
      "modules": [],
      "position": 194,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:panic.ts@67": {
      "character": 13,
      "content": "(c) => {
  c.status(500);
  return c.text("Panic!");
}",
      "fileName": "panic.ts",
      "id": "SOURCE_REFERENCE:panic.ts@67",
      "line": 3,
      "modules": [],
      "position": 67,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:silence.ts@75": {
      "character": 17,
      "content": "(c) => c.text("...")",
      "fileName": "silence.ts",
      "id": "SOURCE_REFERENCE:silence.ts@75",
      "line": 3,
      "modules": [],
      "position": 75,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;

exports[`run test 'module imports' with location './test-case/module-imports' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "ROUTE_ENTRY:index.ts@133": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@133",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 133,
      "sources": [
        "SOURCE_REFERENCE:index.ts@207",
        "SOURCE_REFERENCE:index.ts@223",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@456": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@456",
      "method": "get",
      "modules": [],
      "path": "/slow",
      "position": 456,
      "sources": [
        "SOURCE_REFERENCE:index.ts@473",
        "SOURCE_REFERENCE:index.ts@481",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@848": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@848",
      "method": "get",
      "modules": [],
      "path": "user/1",
      "position": 848,
      "sources": [
        "SOURCE_REFERENCE:index.ts@866",
        "SOURCE_REFERENCE:index.ts@874",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:index.ts@114": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:index.ts@133",
        "ROUTE_ENTRY:index.ts@456",
        "ROUTE_ENTRY:index.ts@848",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@114",
      "name": "app",
      "position": 114,
      "type": "ROUTE_TREE",
    },
    "SOURCE_REFERENCE:db.ts@137": {
      "character": 23,
      "content": "const getUser = measure("getUser", async () => {
  await new Promise((resolve) => setTimeout(resolve, 100));
  const value: User = {
    name: "John Doe",
    email: "john@doe.com",
  };
  return value;
})",
      "fileName": "db.ts",
      "id": "SOURCE_REFERENCE:db.ts@137",
      "line": 4,
      "modules": [
        "MODULE_REFERENCE:measure@@fiberplane/hono-otel",
      ],
      "position": 137,
      "references": [
        "SOURCE_REFERENCE:types.ts@29",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@207": {
      "character": 2,
      "content": "() => cors()",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@207",
      "line": 9,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 207,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@223": {
      "character": 2,
      "content": "(c) => c.text("Hello, Hono!")",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@223",
      "line": 10,
      "modules": [],
      "position": 223,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@290": {
      "character": 0,
      "content": "export async function sleep(duration: number) {
  return new Promise((resolve) => setTimeout(resolve, duration));
}",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@290",
      "line": 14,
      "modules": [],
      "position": 290,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@473": {
      "character": 17,
      "content": "cors()",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@473",
      "line": 19,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 473,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@481": {
      "character": 25,
      "content": "async (c) => {
  await sleep(1000);
  return c.text("Hello, Hono (slow)!");
}",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@481",
      "line": 19,
      "modules": [],
      "position": 481,
      "references": [
        "SOURCE_REFERENCE:index.ts@290",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@866": {
      "character": 18,
      "content": "cors()",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@866",
      "line": 32,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 866,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@874": {
      "character": 26,
      "content": "async (c) => {
  // await getUser();
  const user = await getUser();
  return c.json(user);
}",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@874",
      "line": 32,
      "modules": [],
      "position": 874,
      "references": [
        "SOURCE_REFERENCE:db.ts@137",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:types.ts@0": {
      "character": 0,
      "content": "export type Email = string;",
      "fileName": "types.ts",
      "id": "SOURCE_REFERENCE:types.ts@0",
      "line": 0,
      "modules": [],
      "position": 0,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:types.ts@29": {
      "character": 0,
      "content": "export type User = {
  name: string;
  email: Email;
};",
      "fileName": "types.ts",
      "id": "SOURCE_REFERENCE:types.ts@29",
      "line": 2,
      "modules": [],
      "position": 29,
      "references": [
        "SOURCE_REFERENCE:types.ts@0",
      ],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;

exports[`run test 'multiple files' with location './test-case/multiple' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "ROUTE_ENTRY:index.ts@55": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@55",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 55,
      "sources": [
        "SOURCE_REFERENCE:index.ts@68",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:other.ts@102": {
      "fileName": "other.ts",
      "id": "ROUTE_ENTRY:other.ts@102",
      "method": "post",
      "modules": [],
      "path": "/",
      "position": 102,
      "sources": [
        "SOURCE_REFERENCE:other.ts@116",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:other.ts@54": {
      "fileName": "other.ts",
      "id": "ROUTE_ENTRY:other.ts@54",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 54,
      "sources": [
        "SOURCE_REFERENCE:other.ts@67",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:index.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:index.ts@55",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@36",
      "name": "app",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:other.ts@35": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:other.ts@54",
        "ROUTE_ENTRY:other.ts@102",
      ],
      "fileName": "other.ts",
      "id": "ROUTE_TREE:other.ts@35",
      "name": "app",
      "position": 35,
      "type": "ROUTE_TREE",
    },
    "SOURCE_REFERENCE:index.ts@68": {
      "character": 13,
      "content": "(c) => c.text("Hello, Hono!")",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@68",
      "line": 4,
      "modules": [],
      "position": 68,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:other.ts@116": {
      "character": 14,
      "content": "(c) => c.json({ hello: "world" })",
      "fileName": "other.ts",
      "id": "SOURCE_REFERENCE:other.ts@116",
      "line": 7,
      "modules": [],
      "position": 116,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:other.ts@67": {
      "character": 13,
      "content": "(c) => {
  return c.json({});
}",
      "fileName": "other.ts",
      "id": "SOURCE_REFERENCE:other.ts@67",
      "line": 3,
      "modules": [],
      "position": 67,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;

exports[`run test 'single file' with location './test-case/single' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "ROUTE_ENTRY:index.ts@55": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@55",
      "method": "get",
      "modules": [],
      "path": "/",
      "position": 55,
      "sources": [
        "SOURCE_REFERENCE:index.ts@68",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:index.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:index.ts@55",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@36",
      "name": "app",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "SOURCE_REFERENCE:index.ts@68": {
      "character": 13,
      "content": "(c) => c.text("Hello, Hono!")",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@68",
      "line": 4,
      "modules": [],
      "position": 68,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;

exports[`run test 'split routes' with location './test-case/split-routes' 1`] = `
{
  "errorCount": 0,
  "resources": {
    "MIDDLEWARE_ENTRY:index.ts@619": {
      "fileName": "index.ts",
      "id": "MIDDLEWARE_ENTRY:index.ts@619",
      "modules": [],
      "path": "/",
      "position": 619,
      "sources": [
        "SOURCE_REFERENCE:index.ts@627",
      ],
      "type": "MIDDLEWARE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@320": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@320",
      "method": "get",
      "modules": [],
      "path": "/api/v1/projects",
      "position": 320,
      "sources": [
        "SOURCE_REFERENCE:index.ts@353",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:index.ts@394": {
      "fileName": "index.ts",
      "id": "ROUTE_ENTRY:index.ts@394",
      "method": "get",
      "modules": [],
      "path": "/api/v1/projects/:id",
      "position": 394,
      "sources": [
        "SOURCE_REFERENCE:index.ts@431",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:projects.ts@253": {
      "fileName": "projects.ts",
      "id": "ROUTE_ENTRY:projects.ts@253",
      "method": "get",
      "modules": [],
      "path": "/api/v1/projects",
      "position": 253,
      "sources": [
        "SOURCE_REFERENCE:projects.ts@286",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:projects.ts@327": {
      "fileName": "projects.ts",
      "id": "ROUTE_ENTRY:projects.ts@327",
      "method": "get",
      "modules": [],
      "path": "/api/v1/projects/:id",
      "position": 327,
      "sources": [
        "SOURCE_REFERENCE:projects.ts@364",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:users.ts@179": {
      "fileName": "users.ts",
      "id": "ROUTE_ENTRY:users.ts@179",
      "method": "get",
      "modules": [],
      "path": "/api/v1/users",
      "position": 179,
      "sources": [
        "SOURCE_REFERENCE:users.ts@206",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_ENTRY:users.ts@244": {
      "fileName": "users.ts",
      "id": "ROUTE_ENTRY:users.ts@244",
      "method": "get",
      "modules": [],
      "path": "/api/v1/users/:id",
      "position": 244,
      "sources": [
        "SOURCE_REFERENCE:users.ts@275",
      ],
      "type": "ROUTE_ENTRY",
    },
    "ROUTE_TREE:index.ts@103": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:index.ts@320",
        "ROUTE_ENTRY:index.ts@394",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@103",
      "name": "projects",
      "position": 103,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:index.ts@601": {
      "baseUrl": "",
      "entries": [
        "MIDDLEWARE_ENTRY:index.ts@619",
        "ROUTE_TREE_REFERENCE:users.ts@36",
        "ROUTE_TREE_REFERENCE:index.ts@103",
      ],
      "fileName": "index.ts",
      "id": "ROUTE_TREE:index.ts@601",
      "name": "app",
      "position": 601,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:projects.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:projects.ts@253",
        "ROUTE_ENTRY:projects.ts@327",
      ],
      "fileName": "projects.ts",
      "id": "ROUTE_TREE:projects.ts@36",
      "name": "projects",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE:users.ts@36": {
      "baseUrl": "",
      "entries": [
        "ROUTE_ENTRY:users.ts@179",
        "ROUTE_ENTRY:users.ts@244",
      ],
      "fileName": "users.ts",
      "id": "ROUTE_TREE:users.ts@36",
      "name": "users",
      "position": 36,
      "type": "ROUTE_TREE",
    },
    "ROUTE_TREE_REFERENCE:index.ts@103": {
      "fileName": "index.ts",
      "id": "ROUTE_TREE_REFERENCE:index.ts@103",
      "name": "projects",
      "path": "/",
      "position": 103,
      "targetId": "ROUTE_TREE:index.ts@103",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "ROUTE_TREE_REFERENCE:users.ts@36": {
      "fileName": "users.ts",
      "id": "ROUTE_TREE_REFERENCE:users.ts@36",
      "name": "users",
      "path": "/",
      "position": 36,
      "targetId": "ROUTE_TREE:users.ts@36",
      "type": "ROUTE_TREE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@133": {
      "character": 6,
      "content": "const PROJECTS = [
  {
    id: 1,
    name: "Project A",
    description: "Project A description",
  },
  {
    id: 2,
    name: "Project B",
    description: "Project B description",
  },
]",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@133",
      "line": 6,
      "modules": [],
      "position": 133,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@353": {
      "character": 33,
      "content": "(c) => {
  return c.json(PROJECTS);
}",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@353",
      "line": 19,
      "modules": [],
      "position": 353,
      "references": [
        "SOURCE_REFERENCE:index.ts@133",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@431": {
      "character": 37,
      "content": "(c) => {
  const id = Number.parseInt(c.req.param("id"));
  const project = PROJECTS.find((p) => p.id === id);
  return c.json(project);
}",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@431",
      "line": 23,
      "modules": [],
      "position": 431,
      "references": [
        "SOURCE_REFERENCE:index.ts@133",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:index.ts@627": {
      "character": 8,
      "content": "cors()",
      "fileName": "index.ts",
      "id": "SOURCE_REFERENCE:index.ts@627",
      "line": 32,
      "modules": [
        "MODULE_REFERENCE:cors@hono/cors",
      ],
      "position": 627,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:projects.ts@286": {
      "character": 33,
      "content": "(c) => {
  return c.json(PROJECTS);
}",
      "fileName": "projects.ts",
      "id": "SOURCE_REFERENCE:projects.ts@286",
      "line": 17,
      "modules": [],
      "position": 286,
      "references": [
        "SOURCE_REFERENCE:projects.ts@66",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:projects.ts@364": {
      "character": 37,
      "content": "(c) => {
  const id = Number.parseInt(c.req.param("id"));
  const project = PROJECTS.find((p) => p.id === id);
  return c.json(project);
}",
      "fileName": "projects.ts",
      "id": "SOURCE_REFERENCE:projects.ts@364",
      "line": 21,
      "modules": [],
      "position": 364,
      "references": [
        "SOURCE_REFERENCE:projects.ts@66",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:projects.ts@66": {
      "character": 6,
      "content": "const PROJECTS = [
  {
    id: 1,
    name: "Project A",
    description: "Project A description",
  },
  {
    id: 2,
    name: "Project B",
    description: "Project B description",
  },
]",
      "fileName": "projects.ts",
      "id": "SOURCE_REFERENCE:projects.ts@66",
      "line": 4,
      "modules": [],
      "position": 66,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:users.ts@206": {
      "character": 27,
      "content": "(c) => {
  return c.json(USERS);
}",
      "fileName": "users.ts",
      "id": "SOURCE_REFERENCE:users.ts@206",
      "line": 17,
      "modules": [],
      "position": 206,
      "references": [
        "SOURCE_REFERENCE:users.ts@63",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:users.ts@275": {
      "character": 31,
      "content": "(c) => {
  const id = Number.parseInt(c.req.param("id"));
  const user = USERS.find((u) => u.id === id);
  return c.json(user);
}",
      "fileName": "users.ts",
      "id": "SOURCE_REFERENCE:users.ts@275",
      "line": 21,
      "modules": [],
      "position": 275,
      "references": [
        "SOURCE_REFERENCE:users.ts@63",
      ],
      "type": "SOURCE_REFERENCE",
    },
    "SOURCE_REFERENCE:users.ts@63": {
      "character": 6,
      "content": "const USERS = [
  {
    id: 1,
    name: "Alice",
    age: 25,
  },
  {
    id: 2,
    name: "Bob",
    age: 30,
  },
]",
      "fileName": "users.ts",
      "id": "SOURCE_REFERENCE:users.ts@63",
      "line": 4,
      "modules": [],
      "position": 63,
      "references": [],
      "type": "SOURCE_REFERENCE",
    },
  },
}
`;
