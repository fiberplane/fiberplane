// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`run test 'api' with location '/Users/jaccoflenter/dev/fiberplane/fpâ€¦' 1`] = `
{
  "errorCount": 0,
  "results": [
    {
      "entries": [
        {
          "method": "get",
          "path": "/v0/app-routes",
          "sources": [
            {
              "character": 26,
              "content": "async (ctx) => {
  const db = ctx.get("db");
  const routes = await db.select().from(appRoutes);
  const baseUrl = resolveServiceArg(
    env(ctx).FPX_SERVICE_TARGET as string,
    "http://localhost:8787",
  );
  return ctx.json({
    baseUrl,
    routes,
  });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 41,
              "modules": {
                "hono": [
                  {
                    "import": "env",
                    "importPath": "hono/adapter",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "select",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "from",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export function resolveServiceArg(
  serviceArg: string | number | undefined,
  fallback = "http://localhost:8787",
) {
  if (!serviceArg) {
    return fallback;
  }
  if (typeof serviceArg === "string" && serviceArg.startsWith("http")) {
    return serviceArg;
  }
  if (typeof serviceArg === "number") {
    return \`http://localhost:\${serviceArg}\`;
  }
  const targetPort = Number.parseInt(serviceArg, 10);
  if (!targetPort) {
    logger.error(
      \`Invalid service argument \${serviceArg}. Using default \${fallback}.\`,
    );
    return fallback;
  }
  return \`http://localhost:\${targetPort}\`;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/probe-routes.ts",
                  "line": 127,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "startsWith",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Number",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parseInt",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v0/app-routes",
          "sources": [
            {
              "character": 2,
              "content": "zValidator(
    "json",
    z.union([appRoutesInsertSchema, z.array(appRoutesInsertSchema)]),
  )",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 56,
              "modules": {
                "@hono/zod-validator": [
                  {
                    "import": "zValidator",
                    "importPath": "@hono/zod-validator",
                    "name": "@hono/zod-validator",
                    "version": "0.2.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "async (ctx) => {
    const db = ctx.get("db");
    const submitted = ctx.req.valid("json");
    // NOTE: drizzle should handle this for us, but it doesn't seem to be working...
    if (Array.isArray(submitted)) {
      const createdRoutes = await db
        .insert(appRoutes)
        .values(submitted)
        .returning();
      return ctx.json(createdRoutes);
    }

    const createdRoute = await db
      .insert(appRoutes)
      .values(submitted)
      .returning();
    return ctx.json(createdRoute?.[0]);
  }",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 60,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "valid",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Array",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "isArray",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "insert",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "values",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "returning",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "insert",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "values",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "returning",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v0/probed-routes",
          "sources": [
            {
              "character": 2,
              "content": "zValidator("json", schemaProbedRoutes)",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 82,
              "modules": {
                "@hono/zod-validator": [
                  {
                    "import": "zValidator",
                    "importPath": "@hono/zod-validator",
                    "name": "@hono/zod-validator",
                    "version": "0.2.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "async (ctx) => {
    const db = ctx.get("db");
    const { routes } = ctx.req.valid("json");

    try {
      if (routes.length > 0) {
        // "Re-register" all current app routes in a database transaction
        await reregisterRoutes(db, { routes });

        // TODO - Detect if anything actually changed before invalidating the query on the frontend
        //        This would be more of an optimization, but is friendlier to the frontend
        const wsConnections = ctx.get("wsConnections");

        if (wsConnections) {
          for (const ws of wsConnections) {
            ws.send(
              JSON.stringify({
                event: "trace_created",
                payload: ["appRoutes"],
              }),
            );
          }
        }
      }

      return ctx.text("OK");
    } catch (err) {
      if (err instanceof Error) {
        logger.error("Error processing probed routes", err);
      }
      return ctx.json({ error: "Error processing probed routes" }, 500);
    }
  }",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 83,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "valid",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "length",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "send",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "JSON",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "stringify",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "text",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Error",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function reregisterRoutes(
  db: LibSQLDatabase<typeof schema>,
  { routes }: z.infer<typeof schemaProbedRoutes>,
) {
  return db.transaction(async (tx) => {
    // Unregister all routes
    await tx
      .update(appRoutes)
      .set({ currentlyRegistered: false, registrationOrder: -1 });

    // Delete all old middleware
    await tx.delete(appRoutes).where(eq(appRoutes.handlerType, "middleware"));

    const currentDiscoveredRoutes = await tx
      .select()
      .from(appRoutes)
      .where(
        and(
          eq(appRoutes.handlerType, "route"),
          eq(appRoutes.routeOrigin, "discovered"),
        ),
      );

    // HACK - This is an N+1 query, but we should never have too many routes
    // TODO - Investigate "update many" logic: https://orm.drizzle.team/learn/guides/update-many-with-different-value
    // TODO - Could just delete all old routes we're going to update, then do one big insert
    for (const [index, route] of routes.entries()) {
      const routeToUpdate =
        route.handlerType === "route" &&
        currentDiscoveredRoutes.find(
          (r) => r.path === route.path && r.method === route.method,
        );
      if (routeToUpdate) {
        await tx
          .update(appRoutes)
          .set({
            handler: route.handler,
            currentlyRegistered: true,
            registrationOrder: index,
          })
          .where(eq(appRoutes.id, routeToUpdate.id));
      } else {
        await tx.insert(appRoutes).values({
          ...route,
          currentlyRegistered: true,
          registrationOrder: index,
        });
      }
    }
  });
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/app-routes.ts",
                  "line": 33,
                  "modules": {
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "and",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "infer",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "transaction",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "update",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "set",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "delete",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "where",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "handlerType",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "select",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "from",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "where",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "handlerType",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "routeOrigin",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "entries",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "find",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "update",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "set",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "where",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "id",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "insert",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "values",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                    "zod": [
                      {
                        "import": "z",
                        "importPath": "zod",
                        "name": "zod",
                        "version": "3.23.8",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
        {
          "method": "get",
          "path": "/v0/all-requests",
          "sources": [
            {
              "character": 28,
              "content": "async (ctx) => {
  const db = ctx.get("db");
  const requests = await db
    .select()
    .from(appResponses)
    .rightJoin(appRequests, eq(appResponses.requestId, appRequests.id))
    .limit(1000);
  return ctx.json(requests);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 144,
              "modules": {
                "drizzle-orm": [
                  {
                    "import": "eq",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "select",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "from",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "rightJoin",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "requestId",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "id",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "limit",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "all",
          "path": "/v0/proxy-request/*",
          "sources": [
            {
              "character": 2,
              "content": "zValidator("header", ProxyRequestHeadersSchema)",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 197,
              "modules": {
                "@hono/zod-validator": [
                  {
                    "import": "zValidator",
                    "importPath": "@hono/zod-validator",
                    "name": "@hono/zod-validator",
                    "version": "0.2.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "async (ctx) => {
    const {
      "x-fpx-trace-id": traceIdHeader,
      "x-fpx-proxy-to": proxyToHeader,
      "x-fpx-path-params": pathParamsHeader,
      "x-fpx-route": routeHeader,
      "x-fpx-headers-json": headersJsonHeader,
    } = ctx.req.valid("header");
    // Try to extract the trace id from the header, otherwise generate a new one
    const shouldUseHeaderTraceId = isValidOtelTraceId(traceIdHeader ?? "");
    const traceId: string =
      traceIdHeader && shouldUseHeaderTraceId
        ? traceIdHeader
        : generateOtelTraceId();

    if (!shouldUseHeaderTraceId) {
      logger.debug(
        \`Invalid trace id in header: \${traceIdHeader}, generating new trace id: \${traceId}\`,
      );
    }

    const db = ctx.get("db");

    const requestRoute = routeHeader ?? null;
    const requestPathParams = pathParamsHeader
      ? safeParseJson(pathParamsHeader)
      : null;

    const requestMethod = ctx.req.method;
    const requestUrlHeader = proxyToHeader;

    // NOTE - These are the headers that will be used in the request to the service
    const requestHeaders: Record<string, string> =
      constructProxiedRequestHeaders(ctx, headersJsonHeader ?? "", traceId);

    // Construct the url we want to proxy to, using the query params from the original request
    const requestQueryParams = {
      ...ctx.req.query(),
    };
    const requestUrl = resolveUrlQueryParams(
      requestUrlHeader,
      requestQueryParams,
    );
    logger.debug("Proxying request to:", requestUrl);
    logger.debug("Proxying request with headers:", requestHeaders);

    // Create a new request object
    // Clone the incoming request, so we can make a proxy Request object
    const clonedReq = ctx.req.raw.clone();
    const proxiedReq = new Request(requestUrl, {
      method: requestMethod,
      headers: new Headers(requestHeaders),
      body: clonedReq.body ? clonedReq.body.tee()[0] : null,
    });

    // Extract the request body based on content type
    // *The whole point of this is to serialize the request body into the database, for future reference*
    //
    let requestBody:
      | null
      | string
      | {
          [x: string]: string | SerializedFile | (string | SerializedFile)[];
        } = null;
    try {
      requestBody = await serializeRequestBodyForFpxDb(ctx);
    } catch (error) {
      requestBody = "<failed to parse>";
      logger.error("Failed to serialize request body", error);
    }

    // Record request details
    const newRequest: NewAppRequest = {
      // @ts-expect-error - Trust me, the request method is correct, and it's a string
      requestMethod,
      requestUrl,
      requestHeaders,
      requestPathParams,
      requestQueryParams,
      requestBody,
      requestRoute,
      updatedAt: new Date().toISOString(),
      createdAt: new Date().toISOString(),
    };

    const insertResult = await db
      .insert(appRequests)
      .values(newRequest)
      .returning({ requestId: appRequests.id });

    const requestId = insertResult[0].requestId;

    const startTime = Date.now();
    try {
      // Proxy the request
      const response = await executeProxyRequest(proxiedReq);

      // Clone the response and prepare to return it
      const clonedResponse = response.clone();

      const newHeaders = new Headers(clonedResponse.headers);

      // HACK - Frontend often couldn't parse the body because of encoding mismatch
      newHeaders.delete("content-encoding");
      // HACK - Having an explicit content length could mess up the frontend
      //        when the body is a stream ((this happened when running a hono app on Deno))
      newHeaders.delete("content-length");

      const proxiedResponse = new Response(clonedResponse.body, {
        status: response.status,
        statusText: response.statusText,
        headers: newHeaders,
      });
      const duration = Date.now() - startTime;

      await handleSuccessfulRequest(db, requestId, duration, response, traceId);

      proxiedResponse.headers.set("x-fpx-trace-id", traceId);

      return proxiedResponse;
    } catch (fetchError) {
      logger.debug("Error executing proxied request (fetchError):", fetchError);
      const responseTime = Date.now() - startTime;
      const { failureDetails, failureReason, isFailure } =
        await handleFailedRequest(
          db,
          requestId,
          traceId,
          responseTime,
          fetchError,
        );

      ctx.header("x-fpx-trace-id", traceId);
      ctx.status(500);
      return ctx.json({
        isFailure,
        responseTime,
        failureDetails,
        failureReason,
        traceId,
        requestId,
      });
    }
  }",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 198,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "valid",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "method",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Record",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "query",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "raw",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "clone",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Request",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Headers",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "body",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "body",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "tee",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Date",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "toISOString",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Date",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "toISOString",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "insert",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "values",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "returning",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "id",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Date",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "now",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "clone",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Headers",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "headers",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "delete",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "delete",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Response",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "body",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "status",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "statusText",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Date",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "now",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "headers",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "set",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Date",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "now",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "header",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "status",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export function isValidOtelTraceId(traceId: string): boolean {
  return OTEL_TRACE_ID_REGEX.test(traceId);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/otel/index.ts",
                  "line": 19,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "test",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export function generateOtelTraceId(): string {
  return randomBytes(16).toString("hex");
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/otel/index.ts",
                  "line": 27,
                  "modules": {
                    "node:crypto": [
                      {
                        "import": "randomBytes",
                        "importPath": "node:crypto",
                        "name": "node:crypto",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "toString",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                  "line": 112,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "JSON",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export function resolveUrlQueryParams(
  url: string,
  queryParams?: Record<string, string> | null,
) {
  if (!queryParams) {
    return url;
  }

  const urlObject = new URL(url);
  for (const [key, value] of Object.entries(queryParams)) {
    urlObject.searchParams.set(key, value);
  }
  return urlObject.toString();
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                  "line": 264,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "Record",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "URL",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Object",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "entries",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "searchParams",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "set",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "toString",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export async function serializeRequestBodyForFpxDb(ctx: Context) {
  const contentType = ctx.req.header("content-type");
  const requestMethod = ctx.req.method;
  let requestBody:
    | null
    | string
    | {
      [x: string]: string | SerializedFile | (string | SerializedFile)[];
    } = null;
  if (ctx.req.raw.body) {
    if (requestMethod === "GET" || requestMethod === "HEAD") {
      logger.warn(
        "Request method is GET or HEAD, but request body is not null",
      );
      requestBody = null;
    } else if (contentType?.includes("application/json")) {
      // NOTE - This kind of handles the case where the body is note valid json,
      //        but the content type is set to application/json
      const textBody = await ctx.req.text();
      requestBody = safeParseJson(textBody);
    } else if (contentType?.includes("application/x-www-form-urlencoded")) {
      const formData = await ctx.req.formData();
      requestBody = {};
      // @ts-expect-error - MDN says formData does indeed have an entries method :thinking_face:
      for (const [key, value] of formData.entries()) {
        requestBody[key] = value;
      }
    } else if (contentType?.includes("multipart/form-data")) {
      // NOTE - \`File\` will just show up as an empty object in sqllite - could be nice to record metadata?
      //         like the name of the file
      const formData = await ctx.req.parseBody({ all: true });
      requestBody = {};
      for (const [key, value] of Object.entries(formData)) {
        if (Array.isArray(value)) {
          requestBody[key] = value.map(serializeFormDataValue);
        } else {
          requestBody[key] = serializeFormDataValue(value);
        }
      }
    } else if (contentType?.includes("application/octet-stream")) {
      requestBody = "<binary data>";
    } else {
      requestBody = await ctx.req.text();
    }
  }

  return requestBody;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                  "line": 198,
                  "modules": {
                    "hono": [
                      {
                        "import": "Context",
                        "importPath": "hono",
                        "name": "hono",
                        "version": "4.6.2",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "header",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "method",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "raw",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "body",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "includes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "text",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "includes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "formData",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "includes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parseBody",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Object",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "entries",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Array",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "isArray",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "includes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "req",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "text",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export async function executeProxyRequest(
  reqOrAppReq: NewAppRequest | Request,
) {
  const proxiedReq =
    reqOrAppReq instanceof Request
      ? reqOrAppReq
      : createProxyRequestFromNewAppRequest(reqOrAppReq);

  try {
    const response = await fetch(proxiedReq);
    return response;
  } catch (err) {
    logger.error("executeProxyRequest fetchError:", err);
    throw err;
  }
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/proxy-request/index.ts",
                  "line": 18,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "Request",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Request",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "fetch",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export async function handleSuccessfulRequest(
  db: DbType,
  requestId: RequestIdType,
  duration: number,
  response: Awaited<ReturnType<typeof fetch>>,
  traceId: string,
) {
  const { responseBody, responseTime, responseHeaders, responseStatusCode } =
    await appResponseInsertSchema
      .extend({
        headers: z.instanceof(Headers),
        status: z.number(),
        body: z.instanceof(ReadableStream).nullable(),
        traceId: z.string().optional(),
      })
      .transform(async ({ headers, status }) => {
        const responseHeaders: Record<string, string> = {};
        // NOTE - Order of arguments when you do \`forEach\` on a Headers object is (headerValue, headerName)
        headers.forEach((headerValue, headerName) => {
          responseHeaders[headerName] = headerValue;
        });

        return {
          responseHeaders,
          responseStatusCode: status,
          responseBody: await safeReadTextBody(response),
          responseTime: duration,
        };
      })
      .parseAsync(response);

  await db.insert(appResponses).values([
    {
      isFailure: false,
      responseStatusCode,
      responseTime,
      responseHeaders,
      responseBody,
      traceId,
      requestId,
    },
  ]);

  return {
    isFailure: false,
    responseStatusCode,
    responseTime,
    responseHeaders,
    responseBody,
    traceId,
  };
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/proxy-request/index.ts",
                  "line": 130,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "Awaited",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "ReturnType",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "fetch",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "extend",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "instanceof",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Headers",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "number",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "instanceof",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "ReadableStream",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "nullable",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "string",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "optional",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "transform",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Record",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "forEach",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parseAsync",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "insert",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "values",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                    "zod": [
                      {
                        "import": "z",
                        "importPath": "zod",
                        "name": "zod",
                        "version": "3.23.8",
                      },
                      {
                        "import": "z",
                        "importPath": "zod",
                        "name": "zod",
                        "version": "3.23.8",
                      },
                      {
                        "import": "z",
                        "importPath": "zod",
                        "name": "zod",
                        "version": "3.23.8",
                      },
                      {
                        "import": "z",
                        "importPath": "zod",
                        "name": "zod",
                        "version": "3.23.8",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export async function safeReadTextBody(response: Response) {
  return tryGetResponseBodyAsText(response).catch((error) => {
    logger.error("Failed to parse response body", error);
    return null;
  });
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 140,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "Response",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "catch",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
                {
                  "character": 0,
                  "content": "export async function handleFailedRequest(
  db: DbType,
  requestId: RequestIdType,
  traceId: string,
  responseTime: number,
  error: unknown,
) {
  let failureReason = "unknown";
  if (hasMessage(error)) {
    failureReason = error.message;
  }
  let failureDetails: Record<string, string> = {};
  if (error instanceof Error) {
    failureDetails = errorToJson(error);
  }

  await db.insert(appResponses).values([
    {
      isFailure: true,
      responseTime,
      traceId,
      requestId,
      failureReason,
      failureDetails,
    },
  ]);

  return {
    isFailure: true,
    responseTime,
    traceId,
    requestId,
    failureReason,
    failureDetails,
  };
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/proxy-request/index.ts",
                  "line": 80,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "Record",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Error",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "insert",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "values",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export function errorToJson(error: Error) {
  return {
    name: error.name, // Includes the name of the error, e.g., 'TypeError'
    message: error.message, // The message string of the error
    stack: error.stack ?? "", // Stack trace of where the error occurred (useful for debugging)
    // Optionally add more properties here if needed
  };
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 42,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "Error",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "name",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "message",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "stack",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "method": "get",
          "path": "/v0/webhonc",
          "sources": [
            {
              "character": 23,
              "content": "async (ctx) => {
  const db = ctx.get("db");
  const connectionId = await getWebHoncConnectionId(db);
  const baseUrl = resolveWebhoncUrl();
  const protocol = baseUrl.startsWith("localhost") ? "http" : "https";
  return ctx.json({ webhoncUrl: \`\${protocol}://\${baseUrl}/\${connectionId}\` });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
              "line": 344,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "startsWith",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getWebHoncConnectionId(
  db: LibSQLDatabase<typeof schema>,
) {
  return ((await getSetting(db, "webhoncConnectionId")) ?? false) as string;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/webhonc/store.ts",
                  "line": 11,
                  "modules": {
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export async function getSetting<T extends SettingsKey>(
  db: LibSQLDatabase<typeof schema>,
  key: T,
): Promise<Settings[T] | undefined> {
  const result = await db.query.settings.findFirst({
    where: eq(settings.key, String(key)),
  });

  if (!result?.value) {
    return;
  }

  return safeParseJson(result.value);
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                      "line": 53,
                      "modules": {
                        "@fiberplane/fpx-types": [
                          {
                            "import": "SettingsKey",
                            "importPath": "@fiberplane/fpx-types",
                            "name": "@fiberplane/fpx-types",
                            "version": "0.0.6",
                          },
                          {
                            "import": "Settings",
                            "importPath": "@fiberplane/fpx-types",
                            "name": "@fiberplane/fpx-types",
                            "version": "0.0.6",
                          },
                        ],
                        "drizzle-orm": [
                          {
                            "import": "LibSQLDatabase",
                            "importPath": "drizzle-orm/libsql",
                            "name": "drizzle-orm",
                            "version": "0.33.0",
                          },
                          {
                            "import": "eq",
                            "importPath": "drizzle-orm",
                            "name": "drizzle-orm",
                            "version": "0.33.0",
                          },
                        ],
                        "vitest/globals": [
                          {
                            "import": "Promise",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "query",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "settings",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "findFirst",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "key",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "String",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [
                        {
                          "character": 0,
                          "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                          "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                          "line": 112,
                          "modules": {
                            "vitest/globals": [
                              {
                                "import": "JSON",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "parse",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                            ],
                          },
                          "references": [],
                        },
                      ],
                    },
                  ],
                },
                {
                  "character": 0,
                  "content": "export function resolveWebhoncUrl() {
  const fallbackUrl = "webhonc.mies.workers.dev";
  if (!process.env.FPX_WEBHONC_BASE_URL) {
    return fallbackUrl;
  }
  const customUrl = new URL(process.env.FPX_WEBHONC_BASE_URL);
  return customUrl.host;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                  "line": 285,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "process",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "env",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "URL",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "process",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "env",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "host",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/app-routes.ts",
      "name": "app",
    },
    {
      "entries": [
        {
          "method": "post",
          "path": "/v0/expand-function",
          "sources": [
            {
              "character": 32,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 19,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 40,
              "content": "async (ctx) => {
  const { handler } = await ctx.req.json();
  const projectRoot = USER_PROJECT_ROOT_DIR;

  const expandedFunction = await expandFunction(projectRoot, handler);
  return ctx.json({ expandedFunction });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 19,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v0/generate-request",
          "sources": [
            {
              "character": 2,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 47,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "zValidator("json", generateRequestSchema)",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 48,
              "modules": {
                "@hono/zod-validator": [
                  {
                    "import": "zValidator",
                    "importPath": "@hono/zod-validator",
                    "name": "@hono/zod-validator",
                    "version": "0.2.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "async (ctx) => {
    const { handler, method, path, history, persona, openApiSpec, middleware } =
      ctx.req.valid("json");

    const db = ctx.get("db");
    const inferenceConfig = await getInferenceConfig(db);

    if (!inferenceConfig) {
      return ctx.json(
        {
          message: "No inference configuration found",
        },
        403,
      );
    }

    // Expand out of scope identifiers in the handler function, to add as additional context
    //
    // Uncomment console.time to see how long this takes
    // It should be slow on the first request, but fast-ish on subsequent requests
    //
    // console.time("Handler and Middleware Expansion");
    const [handlerContextPerformant, middlewareContextPerformant] =
      await expandHandler(handler, middleware ?? []).catch((error) => {
        logger.error(\`Error expanding handler and middleware: \${error}\`);
        return [null, null];
      });
    // console.timeEnd("Handler and Middleware Expansion");

    // Generate the request
    const { data: parsedArgs, error: generateError } =
      await generateRequestWithAiProvider({
        inferenceConfig,
        persona,
        method,
        path,
        handler,
        handlerContext: handlerContextPerformant ?? undefined,
        history: history ?? undefined,
        openApiSpec: openApiSpec ?? undefined,
        middleware: middleware ?? undefined,
        middlewareContext: middlewareContextPerformant ?? undefined,
      });

    if (generateError) {
      return ctx.json({ message: generateError.message }, 500);
    }

    return ctx.json({
      request: parsedArgs,
    });
  }",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 49,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "valid",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "catch",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "data",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "error",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "message",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getInferenceConfig(db: LibSQLDatabase<typeof schema>) {
  const settingsRecords = await getAllSettings(db);

  if (Object.keys(settingsRecords).length > 0) {
    const { success, data: settings } =
      SettingsSchema.safeParse(settingsRecords);

    if (success) {
      return settings;
    }
  }

  return;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 86,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "SettingsSchema",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Object",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "keys",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "length",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "data",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "safeParse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export async function expandHandler(
  handler: string,
  middleware: Array<{ handler: string }>,
): Promise<[string | null, string | null]> {
  const projectPath = USER_PROJECT_ROOT_DIR;

  // Here we look for the wrangler tmp files containing the compiled js and source map
  // If we can't find a source map, we can't do much here
  const compiledJavascriptPath = findWranglerCompiledJavascriptDir(projectPath);
  if (!compiledJavascriptPath) {
    return [null, null];
  }

  // NOTE - This is an optimization.
  //        We're reading the compiled js file contents into memory, along with the source map,
  //        before passing them to findSourceFunction.
  //        This allows us to avoid multiple reads of these files in findSourceFunction.
  //        (Parsing a mid-sized source map into JSON takes ~10ms)
  const jsFilePath = path.join(compiledJavascriptPath, "index.js");
  const { jsFileContents, sourceMapContent } = await getSourceFiles(jsFilePath);

  // HACK - We filter out certian third-party middleware in this function, to reduce the amount of work done in source map lookups
  const filteredMiddleware = filterHonoMiddleware(middleware);

  const functionDefinitions = [
    handler,
    ...filteredMiddleware.map(({ handler }) => handler),
  ];

  const sourceFunctions = await findSourceFunctions(
    jsFileContents,
    functionDefinitions,
    true,
    {
      sourceMapContent,
      jsFileContents,
    },
  );

  // TODO - Handle case where no source functions are found, fall back to inefficient search?

  const handlerSourceFunction =
    sourceFunctions.find(
      (sourceFunction) => sourceFunction.functionText === handler,
    ) ?? null;

  const middlewareSourceFunctions = sourceFunctions.filter((sourceFunction) => {
    const isMiddleware = filteredMiddleware.some(
      (middleware) => middleware.handler === sourceFunction.functionText,
    );
    return isMiddleware;
  });

  const handlerContextPromise = handlerSourceFunction
    ? buildHandlerContext(handlerSourceFunction)
    : Promise.resolve(null);

  const middlewareContextPromise =
    middlewareSourceFunctions?.length > 0
      ? buildMiddlewareContext(middlewareSourceFunctions)
      : Promise.resolve(null);

  return Promise.all([handlerContextPromise, middlewareContextPromise]);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/expand-handler.ts",
                  "line": 16,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "Array",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "join",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "find",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "functionText",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "filter",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "some",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "functionText",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "resolve",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "length",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "resolve",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "all",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export async function generateRequestWithAiProvider({
  inferenceConfig,
  persona,
  method,
  path,
  handler,
  handlerContext,
  history,
  openApiSpec,
  middleware,
  middlewareContext,
}: {
  inferenceConfig: Settings;
  persona: string;
  method: string;
  path: string;
  handler: string;
  handlerContext?: string;
  history?: string[];
  openApiSpec?: string;
  middleware?: {
    handler: string;
    method: string;
    path: string;
  }[];
  middlewareContext?: string;
}) {
  const {
    openaiApiKey,
    openaiModel,
    openaiBaseUrl,
    anthropicApiKey,
    anthropicModel,
    anthropicBaseUrl,
    aiProviderType,
  } = inferenceConfig;
  if (aiProviderType === "openai") {
    return generateRequestWithOpenAI({
      apiKey: openaiApiKey ?? "",
      model: openaiModel ?? "",
      baseUrl: openaiBaseUrl,
      persona,
      method,
      path,
      handler,
      handlerContext,
      history,
      openApiSpec,
      middleware,
      middlewareContext,
    }).then(
      (parsedArgs) => {
        return { data: parsedArgs, error: null };
      },
      (error) => {
        if (error instanceof Error) {
          return { data: null, error: { message: error.message } };
        }
        return { data: null, error: { message: "Unknown error" } };
      },
    );
  }
  if (aiProviderType === "anthropic") {
    return generateRequestWithAnthropic({
      apiKey: anthropicApiKey ?? "",
      baseUrl: anthropicBaseUrl,
      model: anthropicModel ?? "",
      persona,
      method,
      path,
      handler,
      handlerContext,
      history,
      openApiSpec,
      middleware,
      middlewareContext,
    }).then(
      (parsedArgs) => {
        return { data: parsedArgs, error: null };
      },
      (error) => {
        if (error instanceof Error) {
          return { data: null, error: { message: error.message } };
        }
        return { data: null, error: { message: "Unknown error" } };
      },
    );
  }

  return { data: null, error: { message: "Unknown AI provider" } };
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/index.ts",
                  "line": 4,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "then",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Error",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "message",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "then",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Error",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "message",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export async function generateRequestWithOpenAI({
  apiKey,
  baseUrl,
  model,
  persona,
  method,
  path,
  handler,
  handlerContext,
  history,
  openApiSpec,
  middleware,
  middlewareContext,
}: GenerateRequestOptions) {
  logger.debug(
    "Generating request data with OpenAI",
    \`model: \${model}\`,
    \`baseUrl: \${baseUrl}\`,
    \`persona: \${persona}\`,
    \`method: \${method}\`,
    \`path: \${path}\`,
    // \`handler: \${handler}\`,
    // \`handlerContext: \${handlerContext}\`,
    // \`openApiSpec: \${openApiSpec}\`,
    // \`middleware: \${middleware}\`,
    // \`middlewareContext: \${middlewareContext}\`,
  );
  const openaiClient = new OpenAI({ apiKey, baseURL: baseUrl });
  const userPrompt = await invokeRequestGenerationPrompt({
    persona,
    method,
    path,
    handler,
    handlerContext,
    history,
    openApiSpec,
    middleware,
    middlewareContext,
  });

  const response = await openaiClient.chat.completions.create({
    // NOTE - Later models (gpt-4o, gpt-4-turbo) should guarantee function calling to have json output
    model,
    // NOTE - We can restrict the response to be from this single tool call
    tool_choice: {
      type: "function",
      function: { name: makeRequestTool.function.name },
    },
    // Define the make_request tool
    tools: [makeRequestTool],
    messages: [
      {
        role: "system",
        content: getSystemPrompt(persona),
      },
      {
        role: "user",
        content: userPrompt,
      },
    ],
    temperature: 0.12,
    max_tokens: 2048,
  });

  const {
    choices: [{ message }],
  } = response;

  const makeRequestCall = message.tool_calls?.[0];
  const toolArgs = makeRequestCall?.function?.arguments;

  try {
    const parsedArgs = toolArgs ? JSON.parse(toolArgs) : null;
    return parsedArgs;
  } catch (error) {
    logger.error("Parsing tool-call response from OpenAI failed:", error);
    throw new Error("Could not parse response from OpenAI");
  }
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/openai.ts",
                      "line": 31,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "chat",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "completions",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "create",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "function",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "name",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "choices",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "tool_calls",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "function",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "arguments",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "parse",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "Error",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [
                        {
                          "character": 45,
                          "content": "async ({
  persona,
  method,
  path,
  handler,
  handlerContext,
  history,
  openApiSpec,
  middleware,
  middlewareContext,
}: {
  persona: string;
  method: string;
  path: string;
  handler: string;
  handlerContext?: string;
  history?: Array<string>;
  openApiSpec?: string;
  middleware?: {
    handler: string;
    method: string;
    path: string;
  }[];
  middlewareContext?: string;
}) => {
  const promptTemplate =
    persona === "QA" ? qaTesterPrompt : friendlyTesterPrompt;
  const userPromptInterface = await promptTemplate.invoke({
    method,
    path,
    handler,
    handlerContext: handlerContext ?? "NO HANDLER CONTEXT",
    history: history?.join("\\n") ?? "NO HISTORY",
    openApiSpec: openApiSpec ?? "NO OPENAPI SPEC",
    middleware: formatMiddleware(middleware),
    middlewareContext: middlewareContext ?? "NO MIDDLEWARE CONTEXT",
  });
  const userPrompt = userPromptInterface.value;
  return userPrompt;
}",
                          "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/prompts.ts",
                          "line": 29,
                          "modules": {
                            "vitest/globals": [
                              {
                                "import": "Array",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "invoke",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "join",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "value",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                            ],
                          },
                          "references": [],
                        },
                        {
                          "character": 31,
                          "content": "(persona: string) => {
  return persona === "QA"
    ? QA_PARAMETER_GENERATION_SYSTEM_PROMPT
    : FRIENDLY_PARAMETER_GENERATION_SYSTEM_PROMPT;
}",
                          "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/prompts.ts",
                          "line": 2,
                          "modules": {},
                          "references": [],
                        },
                      ],
                    },
                    {
                      "character": 0,
                      "content": "export async function generateRequestWithAnthropic({
  apiKey,
  baseUrl,
  model,
  persona,
  method,
  path,
  handler,
  handlerContext,
  history,
  openApiSpec,
  middleware,
  middlewareContext,
}: GenerateRequestOptions) {
  logger.debug(
    "Generating request data with Anthropic",
    \`model: \${model}\`,
    \`baseUrl: \${baseUrl}\`,
    \`persona: \${persona}\`,
    \`method: \${method}\`,
    \`path: \${path}\`,
    \`handler: \${handler}\`,
    // \`handlerContext: \${handlerContext}\`,
    // \`openApiSpec: \${openApiSpec}\`,
    // \`middleware: \${middleware}\`,
    // \`middlewareContext: \${middlewareContext}\`,
  );
  const anthropicClient = new Anthropic({ apiKey, baseURL: baseUrl });
  const userPrompt = await invokeRequestGenerationPrompt({
    persona,
    method,
    path,
    handler,
    handlerContext,
    history,
    openApiSpec,
    middleware,
    middlewareContext,
  });

  const toolChoice: Anthropic.Messages.MessageCreateParams.ToolChoiceTool = {
    type: "tool",
    name: makeRequestTool.name,
  };

  const response = await anthropicClient.messages.create({
    model,
    tool_choice: toolChoice,
    tools: [makeRequestTool],
    system: getSystemPrompt(persona),
    messages: [
      {
        role: "user",
        content: userPrompt,
      },
    ],
    temperature: 0.06,
    max_tokens: 2048,
  });

  const { content } = response;

  let toolArgs: Anthropic.Messages.ToolUseBlock["input"];
  for (const message of content) {
    if (message.type === "tool_use") {
      logger.debug(
        "Anthropic tool use response:",
        JSON.stringify(message, null, 2),
      );
      toolArgs = message.input;
      return toolArgs;
    }
  }

  logger.error(
    "Parsing tool-call response from Anthropic failed. Response content:",
    JSON.stringify(content, null, 2),
  );
  throw new Error("Could not parse response from Anthropic");
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/anthropic.ts",
                      "line": 38,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "Messages",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "MessageCreateParams",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "ToolChoiceTool",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "messages",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "create",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "Messages",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "ToolUseBlock",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "type",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "stringify",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "input",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "stringify",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "Error",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [
                        {
                          "character": 45,
                          "content": "async ({
  persona,
  method,
  path,
  handler,
  handlerContext,
  history,
  openApiSpec,
  middleware,
  middlewareContext,
}: {
  persona: string;
  method: string;
  path: string;
  handler: string;
  handlerContext?: string;
  history?: Array<string>;
  openApiSpec?: string;
  middleware?: {
    handler: string;
    method: string;
    path: string;
  }[];
  middlewareContext?: string;
}) => {
  const promptTemplate =
    persona === "QA" ? qaTesterPrompt : friendlyTesterPrompt;
  const userPromptInterface = await promptTemplate.invoke({
    method,
    path,
    handler,
    handlerContext: handlerContext ?? "NO HANDLER CONTEXT",
    history: history?.join("\\n") ?? "NO HISTORY",
    openApiSpec: openApiSpec ?? "NO OPENAPI SPEC",
    middleware: formatMiddleware(middleware),
    middlewareContext: middlewareContext ?? "NO MIDDLEWARE CONTEXT",
  });
  const userPrompt = userPromptInterface.value;
  return userPrompt;
}",
                          "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/prompts.ts",
                          "line": 29,
                          "modules": {
                            "vitest/globals": [
                              {
                                "import": "Array",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "invoke",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "join",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                              {
                                "import": "value",
                                "importPath": "vitest/globals",
                                "name": "vitest/globals",
                                "version": "1.6.0",
                              },
                            ],
                          },
                          "references": [],
                        },
                        {
                          "character": 31,
                          "content": "(persona: string) => {
  return persona === "QA"
    ? QA_PARAMETER_GENERATION_SYSTEM_PROMPT
    : FRIENDLY_PARAMETER_GENERATION_SYSTEM_PROMPT;
}",
                          "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/prompts.ts",
                          "line": 2,
                          "modules": {},
                          "references": [],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v0/analyze-error",
          "sources": [
            {
              "character": 2,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 105,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "zValidator(
    "json",
    z.object({ errorMessage: z.string(), handlerSourceCode: z.string() }),
  )",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 106,
              "modules": {
                "@hono/zod-validator": [
                  {
                    "import": "zValidator",
                    "importPath": "@hono/zod-validator",
                    "name": "@hono/zod-validator",
                    "version": "0.2.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "async (ctx) => {
    const { handlerSourceCode, errorMessage } = ctx.req.valid("json");

    const db = ctx.get("db");
    const inferenceConfig = await getInferenceConfig(db);
    if (!inferenceConfig) {
      return ctx.json(
        {
          error: "No OpenAI configuration found",
        },
        403,
      );
    }
    const { openaiApiKey, openaiModel } = inferenceConfig;
    const openaiClient = new OpenAI({
      apiKey: openaiApiKey,
    });
    const response = await openaiClient.chat.completions.create({
      model: openaiModel ?? "gpt-4o", // TODO - Update this to use correct model and provider (later problem)
      messages: [
        {
          role: "system",
          content: cleanPrompt(\`
            You are a code debugging assistant for apps that use Hono (web framework),
            Neon (serverless postgres), Drizzle (ORM), and run on Cloudflare workers.
            You are given a function and an error message.
            Provide a succinct suggestion to fix the error, or say "I need more context to help fix this".
          \`),
        },
        {
          role: "user",
          content: cleanPrompt(\`
            I hit the following error:
            \${errorMessage}
            This error originated in the following route handler for my Hono application:
            \${handlerSourceCode}
          \`),
        },
      ],
      temperature: 0,
      max_tokens: 2048,
    });

    const {
      choices: [{ message }],
    } = response;

    return ctx.json({
      suggestion: message.content,
    });
  }",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
              "line": 110,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "valid",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "chat",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "completions",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "create",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "choices",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "content",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getInferenceConfig(db: LibSQLDatabase<typeof schema>) {
  const settingsRecords = await getAllSettings(db);

  if (Object.keys(settingsRecords).length > 0) {
    const { success, data: settings } =
      SettingsSchema.safeParse(settingsRecords);

    if (success) {
      return settings;
    }
  }

  return;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 86,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "SettingsSchema",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Object",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "keys",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "length",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "data",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "safeParse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export function cleanPrompt(prompt: string) {
  return prompt
    .trim()
    .split("\\n")
    .map((l) => l.trim())
    .join("\\n");
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/prompts.ts",
                  "line": 307,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "trim",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "split",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "trim",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "join",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
                {
                  "character": 0,
                  "content": "export function cleanPrompt(prompt: string) {
  return prompt
    .trim()
    .split("\\n")
    .map((l) => l.trim())
    .join("\\n");
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/ai/prompts.ts",
                  "line": 307,
                  "modules": {
                    "vitest/globals": [
                      {
                        "import": "trim",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "split",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "trim",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "join",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/inference/inference.ts",
      "name": "app",
    },
    {
      "entries": [
        {
          "method": "get",
          "path": "/v0/settings",
          "sources": [
            {
              "character": 24,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/settings.ts",
              "line": 12,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 32,
              "content": "async (ctx) => {
  const db = ctx.get("db");
  const settingsRecord = await getAllSettings(db);
  return ctx.json(settingsRecord);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/settings.ts",
              "line": 12,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getAllSettings(
  db: LibSQLDatabase<typeof schema>,
): Promise<Settings> {
  const results = await db.query.settings.findMany();

  const mappedToSchema = results.reduce<Record<string, string>>(
    (acc, setting) => {
      acc[setting.key] = setting.value
        ? safeParseJson(setting.value)
        : undefined;
      return acc;
    },
    {},
  );

  return SettingsSchema.parse(mappedToSchema);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 68,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "SettingsSchema",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "query",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "settings",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "findMany",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "reduce",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Record",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 112,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "parse",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v0/settings",
          "sources": [
            {
              "character": 25,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/settings.ts",
              "line": 23,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 33,
              "content": "async (ctx) => {
  const currentSettings = await getAllSettings(ctx.get("db"));
  const prevProxyUrlEnabled = currentSettings?.proxyRequestsEnabled;

  const { content } = (await ctx.req.json()) as {
    content: Record<string, string>;
  };

  const parsedContent = SettingsSchema.parse(content);
  // Remove the stored api key if the feature is disabled
  if (!parsedContent.aiEnabled) {
    parsedContent.openaiApiKey = undefined;
    parsedContent.anthropicApiKey = undefined;
  }

  logger.debug("Updating settings", { content });

  const db = ctx.get("db");
  const webhonc = ctx.get("webhonc");

  const updatedSettings = await upsertSettings(db, parsedContent);

  logger.debug("Configuration updated...");

  // HACK - We should techincally JSON parse the value here, but whatever.
  const proxyUrlEnabled =
    updatedSettings.find((setting) => setting.key === "proxyRequestsEnabled")
      ?.value === "true";

  const shouldStartWebhonc = !prevProxyUrlEnabled && proxyUrlEnabled;
  if (shouldStartWebhonc) {
    logger.debug("Proxy requests enabled in settings update, starting webhonc");
    await webhonc.start();
  }

  const shouldStopWebhonc = prevProxyUrlEnabled && !proxyUrlEnabled;
  if (shouldStopWebhonc) {
    logger.debug(
      "Proxy requests disabled in settings update, stopping webhonc",
    );
    await webhonc.stop();
  }

  return ctx.json(updatedSettings);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/settings.ts",
              "line": 23,
              "modules": {
                "@fiberplane/fpx-types": [
                  {
                    "import": "SettingsSchema",
                    "importPath": "@fiberplane/fpx-types",
                    "name": "@fiberplane/fpx-types",
                    "version": "0.0.6",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "proxyRequestsEnabled",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Record",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parse",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "aiEnabled",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "openaiApiKey",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "anthropicApiKey",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "find",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "start",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "stop",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getAllSettings(
  db: LibSQLDatabase<typeof schema>,
): Promise<Settings> {
  const results = await db.query.settings.findMany();

  const mappedToSchema = results.reduce<Record<string, string>>(
    (acc, setting) => {
      acc[setting.key] = setting.value
        ? safeParseJson(setting.value)
        : undefined;
      return acc;
    },
    {},
  );

  return SettingsSchema.parse(mappedToSchema);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 68,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "SettingsSchema",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "query",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "settings",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "findMany",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "reduce",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Record",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 112,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "parse",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
                {
                  "character": 0,
                  "content": "export async function upsertSettings(
  db: LibSQLDatabase<typeof schema>,
  content: Settings,
) {
  const parsedSettings = SettingsSchema.parse(content);

  const rows = Object.entries(parsedSettings).map(([key, value]) => ({
    key,
    value: JSON.stringify(value),
  }));

  return await db
    .insert(settings)
    .values(rows)
    .onConflictDoUpdate({
      target: [settings.key],
      set: { value: sql\`excluded.value\` },
    })
    .returning();
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 11,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "SettingsSchema",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "sql",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "parse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Object",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "entries",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "JSON",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "stringify",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "insert",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "values",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "onConflictDoUpdate",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "key",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "returning",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/settings.ts",
      "name": "app",
    },
    {
      "entries": [
        {
          "method": "get",
          "path": "/v0/source",
          "sources": [
            {
              "character": 2,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/source.ts",
              "line": 14,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "zValidator(
    "query",
    z.object({ source: z.string(), line: z.string(), column: z.string() }),
  )",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/source.ts",
              "line": 15,
              "modules": {
                "@hono/zod-validator": [
                  {
                    "import": "zValidator",
                    "importPath": "@hono/zod-validator",
                    "name": "@hono/zod-validator",
                    "version": "0.2.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "async (ctx) => {
    const { source, line, column } = ctx.req.query();

    try {
      const file = JSON.parse(readFileSync(source, "utf8").toString());
      const consumer = await new SourceMapConsumer(file);
      const pos = consumer.originalPositionFor({
        line: Number.parseInt(line, 10),
        column: Number.parseInt(column, 10),
      });
      consumer.destroy();

      return ctx.json(pos);
    } catch (err) {
      const message = getValueFromObject(err, "message", "Unknown error");
      const name = getValueFromObject(err, "name", "");

      console.error("Could not read source file", message);
      return ctx.json(
        {
          error: "Error reading file",
          name,
          message,
        },
        500,
      );
    }
  }",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/source.ts",
              "line": 19,
              "modules": {
                "node:fs": [
                  {
                    "import": "readFileSync",
                    "importPath": "node:fs",
                    "name": "node:fs",
                  },
                ],
                "source-map": [
                  {
                    "import": "SourceMapConsumer",
                    "importPath": "source-map",
                    "name": "source-map",
                    "version": "0.7.4",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "query",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "JSON",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parse",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "toString",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "originalPositionFor",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Number",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parseInt",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Number",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parseInt",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "destroy",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "console",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "error",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v0/source-function",
          "sources": [
            {
              "character": 32,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/source.ts",
              "line": 49,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.2",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 40,
              "content": "async (ctx) => {
  const { handler, source } = ctx.req.query();

  try {
    const result = await findSourceFunctions(source, handler);
    return ctx.json({
      functionText: result?.[0]?.sourceFunction ?? null,
    });
  } catch (err) {
    console.error("Could not find function in source", source);
    const message = getValueFromObject(err, "message", "Unknown error");
    const name = getValueFromObject(err, "name", "");

    return ctx.json(
      {
        error: "Error finding function",
        name,
        message,
      },
      500,
    );
  }
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/source.ts",
              "line": 49,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "query",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "sourceFunction",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "console",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "error",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/source.ts",
      "name": "app",
    },
    {
      "entries": [
        {
          "method": "get",
          "path": "/v1/traces",
          "sources": [
            {
              "character": 22,
              "content": "async (ctx) => {
  const db = ctx.get("db");

  const fpxWorker = await getSetting(db, "fpxWorkerProxy");
  if (fpxWorker?.enabled && fpxWorker.baseUrl) {
    const response = await fetch(\`\${fpxWorker.baseUrl}/v1/traces\`);
    const json = await response.json();
    return ctx.json(json);
  }

  const spans = await db.query.otelSpans.findMany({
    where: sql\`inner->>'scope_name' = 'fpx-tracer'\`,
    orderBy: desc(sql\`inner->>'end_time'\`),
  });

  const traceMap = new Map<string, Array<(typeof spans)[0]>>();

  for (const span of spans) {
    const traceId = span.inner.trace_id;
    if (!traceId) {
      continue;
    }
    if (!traceMap.has(traceId)) {
      traceMap.set(traceId, []);
    }
    traceMap.get(traceId)?.push(span);
  }

  const traces = Array.from(traceMap.entries()).map(([traceId, spans]) => ({
    traceId,
    spans,
  }));

  const response: TraceListResponse = traces.map(({ traceId, spans }) => ({
    traceId,
    spans: spans.map(({ inner }) => OtelSpanSchema.parse(inner)),
  }));

  return ctx.json(response);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/traces.ts",
              "line": 24,
              "modules": {
                "@fiberplane/fpx-types": [
                  {
                    "import": "TraceListResponse",
                    "importPath": "@fiberplane/fpx-types",
                    "name": "@fiberplane/fpx-types",
                    "version": "0.0.6",
                  },
                  {
                    "import": "OtelSpanSchema",
                    "importPath": "@fiberplane/fpx-types",
                    "name": "@fiberplane/fpx-types",
                    "version": "0.0.6",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "sql",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                  {
                    "import": "desc",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                  {
                    "import": "sql",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "enabled",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "baseUrl",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "fetch",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "baseUrl",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "query",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "otelSpans",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "findMany",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Map",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Array",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "trace_id",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "has",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "set",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "push",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "Array",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "from",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "entries",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "map",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "map",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "map",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parse",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getSetting<T extends SettingsKey>(
  db: LibSQLDatabase<typeof schema>,
  key: T,
): Promise<Settings[T] | undefined> {
  const result = await db.query.settings.findFirst({
    where: eq(settings.key, String(key)),
  });

  if (!result?.value) {
    return;
  }

  return safeParseJson(result.value);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 53,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "SettingsKey",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "query",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "settings",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "findFirst",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "key",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "String",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 112,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "parse",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "method": "get",
          "path": "/v1/traces/:traceId/spans",
          "sources": [
            {
              "character": 37,
              "content": "async (ctx) => {
  const traceId = ctx.req.param("traceId");

  const db = ctx.get("db");

  const fpxWorker = await getSetting(db, "fpxWorkerProxy");
  if (fpxWorker?.enabled && fpxWorker.baseUrl) {
    const response = await fetch(
      \`\${fpxWorker.baseUrl}/v1/traces/\${traceId}/spans\`,
    );
    const json = await response.json();
    return ctx.json(json);
  }

  const traces = await db
    .select()
    .from(otelSpans)
    .where(
      and(
        sql\`inner->>'scope_name' = 'fpx-tracer'\`,
        sql\`inner->>'trace_id' = \${traceId}\`,
      ),
    );

  const response: TraceDetailSpansResponse = traces.map(({ inner }) =>
    OtelSpanSchema.parse(inner),
  );

  return ctx.json(response);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/traces.ts",
              "line": 70,
              "modules": {
                "@fiberplane/fpx-types": [
                  {
                    "import": "TraceDetailSpansResponse",
                    "importPath": "@fiberplane/fpx-types",
                    "name": "@fiberplane/fpx-types",
                    "version": "0.0.6",
                  },
                  {
                    "import": "OtelSpanSchema",
                    "importPath": "@fiberplane/fpx-types",
                    "name": "@fiberplane/fpx-types",
                    "version": "0.0.6",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "and",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                  {
                    "import": "sql",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                  {
                    "import": "sql",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.33.0",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "param",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "enabled",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "baseUrl",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "fetch",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "baseUrl",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "select",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "from",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "where",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "map",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parse",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getSetting<T extends SettingsKey>(
  db: LibSQLDatabase<typeof schema>,
  key: T,
): Promise<Settings[T] | undefined> {
  const result = await db.query.settings.findFirst({
    where: eq(settings.key, String(key)),
  });

  if (!result?.value) {
    return;
  }

  return safeParseJson(result.value);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 53,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "SettingsKey",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "query",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "settings",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "findFirst",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "key",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "String",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 112,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "parse",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v1/traces/delete-all-hack",
          "sources": [
            {
              "character": 39,
              "content": "async (ctx) => {
  const db = ctx.get("db");
  await db.delete(otelSpans);
  return ctx.text("OK");
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/traces.ts",
              "line": 101,
              "modules": {
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "delete",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "text",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/v1/traces",
          "sources": [
            {
              "character": 23,
              "content": "async (ctx) => {
  const db = ctx.get("db");
  const body: IExportTraceServiceRequest = await ctx.req.json();

  const fpxWorker = await getSetting(db, "fpxWorkerProxy");
  if (fpxWorker?.enabled && fpxWorker.baseUrl) {
    const response = await fetch(\`\${fpxWorker.baseUrl}/v1/traces\`, {
      headers: {
        "Content-Type": "application/json",
      },
      method: "POST",
      body: JSON.stringify(body),
    });
    const json = await response.json();
    return ctx.json(json);
  }

  try {
    const tracesPayload = (await fromCollectorRequest(body)).map(
      (span) =>
        ({
          inner: OtelSpanSchema.parse(span),
          spanId: span.span_id,
          traceId: span.trace_id,
        }) satisfies typeof otelSpans.$inferInsert,
    );

    try {
      await db.insert(otelSpans).values(tracesPayload);
    } catch (error) {
      logger.error("Error inserting trace", error);
      return ctx.text("Error inserting trace", 500);
    }

    const wsConnections = ctx.get("wsConnections");
    if (wsConnections) {
      for (const ws of wsConnections) {
        ws.send(
          JSON.stringify({
            event: "trace_created",
            payload: ["mizuTraces"],
          }),
        );
      }
    }

    return ctx.text("OK");
  } catch (error) {
    logger.error("Error parsing trace data", error);
    return ctx.text("Error parsing trace data", 400);
  }
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/traces.ts",
              "line": 110,
              "modules": {
                "@fiberplane/fpx-types": [
                  {
                    "import": "OtelSpanSchema",
                    "importPath": "@fiberplane/fpx-types",
                    "name": "@fiberplane/fpx-types",
                    "version": "0.0.6",
                  },
                ],
                "@opentelemetry/otlp-transformer": [
                  {
                    "import": "IExportTraceServiceRequest",
                    "importPath": "@opentelemetry/otlp-transformer",
                    "name": "@opentelemetry/otlp-transformer",
                    "version": "0.52.1",
                  },
                ],
                "vitest/globals": [
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "req",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "enabled",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "baseUrl",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "fetch",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "baseUrl",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "JSON",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "stringify",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "json",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "map",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "parse",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "span_id",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "trace_id",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "$inferInsert",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "insert",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "values",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "text",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "get",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "send",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "JSON",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "stringify",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "text",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                  {
                    "import": "text",
                    "importPath": "vitest/globals",
                    "name": "vitest/globals",
                    "version": "1.6.0",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export async function getSetting<T extends SettingsKey>(
  db: LibSQLDatabase<typeof schema>,
  key: T,
): Promise<Settings[T] | undefined> {
  const result = await db.query.settings.findFirst({
    where: eq(settings.key, String(key)),
  });

  if (!result?.value) {
    return;
  }

  return safeParseJson(result.value);
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/settings/index.ts",
                  "line": 53,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "SettingsKey",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "Settings",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "drizzle-orm": [
                      {
                        "import": "LibSQLDatabase",
                        "importPath": "drizzle-orm/libsql",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                      {
                        "import": "eq",
                        "importPath": "drizzle-orm",
                        "name": "drizzle-orm",
                        "version": "0.33.0",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "query",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "settings",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "findFirst",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "key",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "String",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [
                    {
                      "character": 0,
                      "content": "export function safeParseJson(str: string | null | undefined) {
  if (!str) {
    return null;
  }
  try {
    return JSON.parse(str);
  } catch {
    return str;
  }
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/utils.ts",
                      "line": 112,
                      "modules": {
                        "vitest/globals": [
                          {
                            "import": "JSON",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                          {
                            "import": "parse",
                            "importPath": "vitest/globals",
                            "name": "vitest/globals",
                            "version": "1.6.0",
                          },
                        ],
                      },
                      "references": [],
                    },
                  ],
                },
                {
                  "character": 0,
                  "content": "export async function fromCollectorRequest(
  tracesData: IExportTraceServiceRequest,
): Promise<Array<OtelSpan>> {
  const result: Array<OtelSpan> = [];

  for (const resourceSpan of tracesData.resourceSpans ?? []) {
    const resourceAttributes = resourceSpan.resource
      ? await mapAttributes(resourceSpan.resource.attributes)
      : null;

    for (const scopeSpan of resourceSpan.scopeSpans ?? []) {
      let scopeName: string | null = null;
      let scopeVersion: string | null = null;

      if (scopeSpan.scope) {
        scopeName = scopeSpan.scope.name ?? null;
        scopeVersion = scopeSpan.scope.version ?? null;
      }

      const scopeAttributes = scopeSpan.scope
        ? await mapAttributes(scopeSpan.scope.attributes ?? [])
        : null;

      for (const span of scopeSpan.spans ?? []) {
        const kind = convertToSpanKind(span.kind);

        const attributes = await mapAttributes(span.attributes);

        const startTime = new Date(Number(span.startTimeUnixNano) / 1e6);
        const endTime = new Date(Number(span.endTimeUnixNano) / 1e6);

        const parentSpanId = span.parentSpanId
          ? stringOrUintToString(span.parentSpanId)
          : null;

        const events = await Promise.all(
          span.events.map((event) => mapEvent(event)),
        );
        const links = await Promise.all(
          span.links.map((link) => mapLink(link)),
        );

        const traceId = stringOrUintToString(span.traceId);
        const spanId = stringOrUintToString(span.spanId);

        const name = span.name;
        const traceState = span.traceState;

        const spanInstance = OtelSpanSchema.parse({
          trace_id: traceId,
          span_id: spanId,
          parent_span_id: parentSpanId,
          name,
          trace_state: traceState,
          kind,
          scope_name: scopeName,
          scope_version: scopeVersion,
          start_time: startTime,
          end_time: endTime,
          attributes,
          scope_attributes: scopeAttributes,
          resource_attributes: resourceAttributes,
          status: span.status ? mapStatus(span.status) : undefined,
          events,
          links,
        } satisfies MizuSpan);

        result.push(spanInstance);
      }
    }
  }

  return result;
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/lib/otel/index.ts",
                  "line": 88,
                  "modules": {
                    "@fiberplane/fpx-types": [
                      {
                        "import": "OtelSpan",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "OtelSpan",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                      {
                        "import": "OtelSpanSchema",
                        "importPath": "@fiberplane/fpx-types",
                        "name": "@fiberplane/fpx-types",
                        "version": "0.0.6",
                      },
                    ],
                    "@opentelemetry/otlp-transformer": [
                      {
                        "import": "IExportTraceServiceRequest",
                        "importPath": "@opentelemetry/otlp-transformer",
                        "name": "@opentelemetry/otlp-transformer",
                        "version": "0.52.1",
                      },
                    ],
                    "vitest/globals": [
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Array",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Array",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "resourceSpans",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "resource",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "resource",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "attributes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "scopeSpans",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "scope",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "scope",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "name",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "scope",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "version",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "scope",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "scope",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "attributes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "spans",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "kind",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "attributes",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Date",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Number",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "startTimeUnixNano",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Date",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Number",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "endTimeUnixNano",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parentSpanId",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parentSpanId",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "all",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "events",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "Promise",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "all",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "links",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "map",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "traceId",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "spanId",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "name",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "traceState",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "parse",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "status",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "status",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                      {
                        "import": "push",
                        "importPath": "vitest/globals",
                        "name": "vitest/globals",
                        "version": "1.6.0",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/routes/traces.ts",
      "name": "app",
    },
    {
      "entries": [],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/app.ts",
      "name": "app",
    },
    {
      "entries": [
        {
          "method": "get",
          "path": "*",
          "sources": [],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/api/src/index.node.ts",
      "name": "app",
    },
  ],
}
`;

exports[`run test 'bindings' with location '/Users/jaccoflenter/dev/fiberplane/fpâ€¦' 1`] = `
{
  "errorCount": 0,
  "results": [
    {
      "entries": [
        {
          "method": "get",
          "path": "/",
          "sources": [
            {
              "character": 13,
              "content": "(c) => {
  const headers = new Headers();
  c.env.GOOSE_AVATARS.put("test", new ReadableStream(), {
    httpMetadata: { contentType: "application/json" },
  });
  console.log("headers", headers);
  return c.text("Hello, Hono!");
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/bindings/index.ts",
              "line": 10,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "Headers",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                  {
                    "import": "put",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                  {
                    "import": "ReadableStream",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                  {
                    "import": "text",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20241011.0",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/bindings/index.ts",
      "name": "app",
    },
  ],
}
`;

exports[`run test 'goose-quotes' with location '/Users/jaccoflenter/dev/fiberplane/fpâ€¦' 1`] = `
{
  "errorCount": 0,
  "results": [
    {
      "entries": [
        {
          "method": "get",
          "path": "/",
          "sources": [
            {
              "character": 13,
              "content": "(c) => {
  const honk = shouldHonk(c.req) ? "Honk honk!" : "";
  console.log(\`Home page accessed. Honk: \${honk}\`);
  return c.text(\`Hello Goose Quotes! \${honk}\`.trim());
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 33,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "text",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "trim",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
              },
              "references": [
                {
                  "character": 0,
                  "content": "export function shouldHonk(r: HonoRequest) {
  const { shouldHonk } = r.query();
  return typeof shouldHonk !== "undefined";
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/utils.ts",
                  "line": 2,
                  "modules": {
                    "@cloudflare/workers-types": [
                      {
                        "import": "query",
                        "importPath": "@cloudflare/workers-types",
                        "name": "@cloudflare/workers-types",
                        "version": "4.20240821.1",
                      },
                    ],
                    "hono": [
                      {
                        "import": "HonoRequest",
                        "importPath": "hono",
                        "name": "hono",
                        "version": "4.5.9",
                      },
                    ],
                  },
                  "references": [],
                },
              ],
            },
          ],
        },
        {
          "method": "get",
          "path": "/api/geese",
          "sources": [
            {
              "character": 22,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const name = c.req.query("name");
  console.log({ action: "search_geese", name });

  if (!name) {
    const allGeese = await measure("getAllGeese", () => getAllGeese(db))();
    console.log({ action: "get_all_geese", count: allGeese.length });
    return c.json(allGeese);
  }

  const searchResults = await measure("searchGeese", () =>
    db
      .select()
      .from(geese)
      .where(ilike(geese.name, \`%\${name}%\`))
      .orderBy(asc(geese.name)),
  )();

  console.log({
    action: "search_geese_results",
    count: searchResults.length,
    name,
  });

  return c.json(searchResults);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 44,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "query",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "select",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "from",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "where",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "name",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "orderBy",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "name",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                  {
                    "import": "ilike",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                  {
                    "import": "asc",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/api/geese-with-avatar",
          "sources": [
            {
              "character": 34,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  console.log("Fetching geese with avatars");

  const geeseWithAvatars = await measure("getGeeseWithAvatars", () =>
    db
      .select()
      .from(geese)
      .where(not(isNull(geese.avatar)))
      .orderBy(asc(geese.id)),
  )();

  console.log(\`Found \${geeseWithAvatars.length} geese with avatars\`);
  return c.json(geeseWithAvatars.map((g) => g.id));
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 77,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "select",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "from",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "where",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "avatar",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "orderBy",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "id",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "map",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                  {
                    "import": "not",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                  {
                    "import": "isNull",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                  {
                    "import": "asc",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/api/geese",
          "sources": [
            {
              "character": 23,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const { name, isFlockLeader, programmingLanguage, motivations, location } =
    await c.req.json();
  const description = \`A person named \${name} who talks like a Goose\`;

  console.log(\`Creating new goose: \${name}\`);

  const created = await measure("createGoose", () =>
    createGoose(db, {
      name,
      description,
      isFlockLeader,
      programmingLanguage,
      motivations,
      location,
    }),
  )();
  console.log({ action: "create_goose", id: created[0].id, name });
  return c.json(created);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 100,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/api/geese/:id/generate",
          "sources": [
            {
              "character": 36,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const { name: gooseName } = goose;

  const openaiClient = new OpenAI({
    apiKey: c.env.OPENAI_API_KEY,
    // HACK - OpenAI freezes fetch when it is imported, so our monkey-patched version needs to be passed here
    fetch: globalThis.fetch,
  });

  console.log(\`Generating quotes for goose: \${gooseName}\`);

  const response = await measure("generateQuotes", () =>
    openaiClient.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: trimPrompt(\`
              You are a goose. You are a very smart goose. You are part goose, part AI. You are a GooseAI.
              You are also influenced heavily by the work of \${gooseName}.

              Always respond without preamble. If I ask for a list, give me a newline-separated list. That's it.
              Don't number it. Don't bullet it. Just newline it.

              Never forget to Honk. A lot.
          \`),
        },
        {
          role: "user",
          content: trimPrompt(\`
              Reimagine five famous quotes by \${gooseName}, except with significant goose influence.
          \`),
        },
      ],
      temperature: 0.7,
      max_tokens: 2048,
    }),
  )();

  const quotes = response.choices[0].message.content
    ?.split("\\n")
    .filter((quote) => quote.length > 0);
  console.log({
    action: "generate_quotes",
    gooseName,
    quoteCount: quotes?.length,
  });
  return c.json({ name: goose.name, quotes });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 127,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "fetch",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "chat",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "completions",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "create",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "choices",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "message",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "content",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "split",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "filter",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
                "openai": [
                  {
                    "import": "OpenAI",
                    "importPath": "openai",
                    "name": "openai",
                    "version": "4.55.4",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/api/geese/flock-leaders",
          "sources": [
            {
              "character": 36,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  console.log("Fetching flock leaders");

  const flockLeaders = await measure("getFlockLeaders", () =>
    db.select().from(geese).where(eq(geese.isFlockLeader, true)),
  )();

  console.log(\`Found \${flockLeaders.length} flock leaders\`);

  return c.json(flockLeaders);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 193,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "select",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "from",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "where",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "isFlockLeader",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                  {
                    "import": "eq",
                    "importPath": "drizzle-orm",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/api/geese/:id",
          "sources": [
            {
              "character": 26,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  console.log(\`Fetching goose with id: \${id}\`);

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  console.log(\`Found goose: \${goose.name}\`);
  return c.json(goose);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 211,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/api/geese/:id/bio",
          "sources": [
            {
              "character": 31,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const {
    name: gooseName,
    description,
    programmingLanguage,
    motivations,
    location,
  } = goose;

  console.log(\`Generating bio for goose: \${gooseName}\`);

  const openaiClient = new OpenAI({
    apiKey: c.env.OPENAI_API_KEY,
    fetch: globalThis.fetch,
  });

  const response = await measure("generateBio", () =>
    openaiClient.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: trimPrompt(\`
              You are a professional bio writer. Your task is to generate a compelling and engaging bio for a goose.
          \`),
        },
        {
          role: "user",
          content: trimPrompt(\`
              Generate a bio for a goose named \${gooseName} with the following details:
              Description: \${description}
              Programming Language: \${programmingLanguage}
              Motivations: \${motivations}
              Location: \${location}
          \`),
        },
      ],
      temperature: 0.7,
      max_tokens: 2048,
    }),
  )();

  const bio = response.choices[0].message.content;

  // Update the goose with the generated bio
  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { bio }),
  )();

  console.log(\`Bio generated and updated for goose: \${gooseName}\`);
  return c.json(updatedGoose);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 233,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "fetch",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "chat",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "completions",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "create",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "choices",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "message",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "content",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
                "openai": [
                  {
                    "import": "OpenAI",
                    "importPath": "openai",
                    "name": "openai",
                    "version": "4.55.4",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/api/geese/:id/honk",
          "sources": [
            {
              "character": 32,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");
  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const currentHonks = goose.honks || 0;

  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { honks: currentHonks + 1 }),
  )();

  console.log(
    \`Honk received for goose: \${goose.name}. New honk count: \${updatedGoose.honks}\`,
  );
  return c.json({
    message: \`Honk honk! \${goose.name} honks back at you!\`,
    honks: updatedGoose.honks,
  });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 301,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/api/geese/language/:language",
          "sources": [
            {
              "character": 41,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const language = c.req.param("language");

  console.log(\`Fetching geese with programming language: \${language}\`);

  const geeseByLanguage = await measure("getGeeseByLanguage", () =>
    getGeeseByLanguage(db, language),
  )();

  console.log(
    \`Found \${geeseByLanguage.length} geese for language: \${language}\`,
  );
  return c.json(geeseByLanguage);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 370,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "length",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/api/geese/:id/change-name-url-form",
          "sources": [
            {
              "character": 48,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");
  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const form = await c.req.formData() as FormData;
  const name = form.get("name");

  if (!name) {
    console.error("Name is required for changing goose name");
    return c.json({ message: "Name is required" }, 400);
  }

  console.log(\`Changing name of goose \${id} to \${name}\`);
  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { name }),
  )();

  console.log(\`Name changed for goose \${id}\`);
  return c.json(updatedGoose, 200);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 413,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "formData",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "FormData",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "get",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "error",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "post",
          "path": "/api/geese/:id/avatar",
          "sources": [
            {
              "character": 34,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const { avatar, avatarName } = await c.req.parseBody();
  console.log({ action: "update_avatar", gooseId: id, avatarName });
  // Validate the avatar is a file
  if (!(avatar instanceof File)) {
    console.error(\`Invalid avatar type for goose \${id}: \${typeof avatar}\`);
    return c.json(
      { message: "Avatar must be a file", actualType: typeof avatar },
      422,
    );
  }

  // Validate the avatar is a JPEG, PNG, or GIF
  const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
  if (!allowedTypes.includes(avatar.type)) {
    console.error(\`Invalid avatar file type for goose \${id}: \${avatar.type}\`);
    return c.json({ message: "Avatar must be a JPEG, PNG, or GIF image" }, 422);
  }

  // Get the file extension from the avatar's type
  const fileExtension = avatar.type.split("/")[1];

  // Save the avatar to the bucket
  const bucketKey = \`goose-\${id}-avatar-\${Date.now()}.\${fileExtension}\`;
  await measure("uploadAvatar", () =>
    c.env.GOOSE_AVATARS.put(bucketKey, avatar.stream(), {
      httpMetadata: { contentType: avatar.type },
    }),
  )();

  console.log(\`Avatar uploaded for goose \${id}: \${bucketKey}\`);

  const updatedGoose = await measure("updateGoose", () =>
    updateGoose(db, +id, { avatar: bucketKey }),
  )();

  console.log(\`Avatar updated for goose \${id}\`);
  return c.json(updatedGoose);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 445,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "parseBody",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "File",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "error",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "includes",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "type",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "error",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "type",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "type",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "split",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "Date",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "now",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "put",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "stream",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "type",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/api/geese/:id/avatar",
          "sources": [
            {
              "character": 33,
              "content": "async (c) => {
  const sql = neon(c.env.DATABASE_URL);
  const db = drizzle(sql);

  const id = c.req.param("id");

  const goose = await measure("getGooseById", () => getGooseById(db, +id))();

  if (!goose) {
    console.warn(\`Goose not found: \${id}\`);
    return c.json({ message: "Goose not found" }, 404);
  }

  const avatarKey = goose.avatar;

  if (!avatarKey) {
    console.warn(\`Goose \${id} has no avatar\`);
    return c.json({ message: "Goose has no avatar" }, 404);
  }

  console.log(\`Fetching avatar for goose \${id}: \${avatarKey}\`);

  const avatar = await measure("getAvatar", () =>
    c.env.GOOSE_AVATARS.get(avatarKey),
  )();

  if (!avatar) {
    console.error(\`Avatar not found for goose \${id}: \${avatarKey}\`);
    return c.json({ message: "Goose avatar not found" }, 404);
  }

  console.log(\`Avatar retrieved for goose \${id}\`);
  const responseHeaders = mapR2HttpMetadataToHeaders(avatar.httpMetadata);
  return new Response(avatar.body, {
    headers: responseHeaders,
  });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 500,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "warn",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "env",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "get",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "error",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "json",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "httpMetadata",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "Response",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "body",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
                "@fiberplane/hono-otel": [
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                  {
                    "import": "measure",
                    "importPath": "@fiberplane/hono-otel",
                    "name": "@fiberplane/hono-otel",
                    "version": "0.3.1-beta.2",
                  },
                ],
                "@neondatabase/serverless": [
                  {
                    "import": "neon",
                    "importPath": "@neondatabase/serverless",
                    "name": "@neondatabase/serverless",
                    "version": "0.9.4",
                  },
                ],
                "drizzle-orm": [
                  {
                    "import": "drizzle",
                    "importPath": "drizzle-orm/neon-http",
                    "name": "drizzle-orm",
                    "version": "0.32.2",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "all",
          "path": "/always-honk/:echo?",
          "sources": [
            {
              "character": 31,
              "content": "(c) => {
  const echo = c.req.param("echo");
  console.log(\`Always honk endpoint called with echo: \${echo}\`);
  return c.text(\`Honk honk! \${echo ?? ""}\`);
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 543,
              "modules": {
                "@cloudflare/workers-types": [
                  {
                    "import": "req",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "param",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "console",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "log",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                  {
                    "import": "text",
                    "importPath": "@cloudflare/workers-types",
                    "name": "@cloudflare/workers-types",
                    "version": "4.20240821.1",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/ws",
          "sources": [
            {
              "character": 2,
              "content": "upgradeWebSocket((c) => {
    return {
      onMessage(event, ws) {
        const { type, payload } = JSON.parse(event.data);
        const sql = neon(c.env.DATABASE_URL);
        const db = drizzle(sql);

        console.log(\`WebSocket message received: \${type}\`);

        switch (type) {
          case "GET_GEESE":
            measure("getAllGeese", () => getAllGeese(db))().then((geese) => {
              console.log(\`Sending \${geese.length} geese over WebSocket\`);
              ws.send(JSON.stringify({ type: "GEESE", payload: geese }));
            });
            break;
          case "CREATE_GOOSE": {
            const {
              name,
              isFlockLeader,
              programmingLanguage,
              motivations,
              location,
            } = payload;
            const description = \`A person named \${name} who talks like a Goose\`;

            console.log(\`Creating new goose via WebSocket: \${name}\`);
            measure("createGoose", () =>
              createGoose(db, {
                name,
                description,
                isFlockLeader,
                programmingLanguage,
                motivations,
                location,
              }),
            )().then((newGoose) => {
              console.log(\`New goose created via WebSocket: \${newGoose[0].id}\`);
              ws.send(JSON.stringify({ type: "NEW_GOOSE", payload: newGoose }));
            });
            break;
          }
          // ... (handle other message types)
          default:
            console.warn(\`Unknown WebSocket message type: \${type}\`);
            break;
        }
      },
      onClose: () => {
        console.log("WebSocket connection closed");
      },
    };
  })",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
              "line": 551,
              "modules": {
                "hono": [
                  {
                    "import": "upgradeWebSocket",
                    "importPath": "hono/cloudflare-workers",
                    "name": "hono",
                    "version": "4.5.9",
                  },
                ],
              },
              "references": [],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/examples/goose-quotes/src/index.ts",
      "name": "app",
    },
  ],
}
`;

exports[`run test 'module imports' with location '/Users/jaccoflenter/dev/fiberplane/fpâ€¦' 1`] = `
{
  "errorCount": 0,
  "results": [
    {
      "entries": [
        {
          "method": "get",
          "path": "/",
          "sources": [
            {
              "character": 2,
              "content": "() => cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
              "line": 9,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.6",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 2,
              "content": "(c) => c.text("Hello, Hono!")",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
              "line": 10,
              "modules": {},
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "/slow",
          "sources": [
            {
              "character": 17,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
              "line": 19,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.6",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 25,
              "content": "async (c) => {
  await sleep(1000);
  return c.text("Hello, Hono (slow)!");
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
              "line": 19,
              "modules": {},
              "references": [],
            },
          ],
        },
        {
          "method": "get",
          "path": "user/1",
          "sources": [
            {
              "character": 18,
              "content": "cors()",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
              "line": 25,
              "modules": {
                "hono": [
                  {
                    "import": "cors",
                    "importPath": "hono/cors",
                    "name": "hono",
                    "version": "4.6.6",
                  },
                ],
              },
              "references": [],
            },
            {
              "character": 26,
              "content": "async (c) => {
  // await getUser();
  const userDetails = await getProfile();
  return c.json({
    userDetails
  });
}",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
              "line": 25,
              "modules": {},
              "references": [
                {
                  "character": 0,
                  "content": "export async function getProfile() {
  const user = await getUser();
  await sleep(10);
  return {
    ...user,
    image: "https://xsgames.co/randomusers/avatar.php?g=pixel",
  };
}",
                  "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/db.ts",
                  "line": 10,
                  "modules": {},
                  "references": [
                    {
                      "character": 0,
                      "content": "export async function sleep(duration: number) {
  return new Promise((resolve) => setTimeout(resolve, duration));
}",
                      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
                      "line": 14,
                      "modules": {},
                      "references": [],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/module-imports/index.ts",
      "name": "app",
    },
  ],
}
`;

exports[`run test 'multiple files' with location '/Users/jaccoflenter/dev/fiberplane/fpâ€¦' 1`] = `
{
  "errorCount": 0,
  "results": [
    {
      "entries": [
        {
          "method": "get",
          "path": "/",
          "sources": [
            {
              "character": 13,
              "content": "(c) => c.text("Hello, Hono!")",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/single/index.ts",
              "line": 4,
              "modules": {},
              "references": [],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/single/index.ts",
      "name": "app",
    },
  ],
}
`;

exports[`run test 'single file' with location '/Users/jaccoflenter/dev/fiberplane/fpâ€¦' 1`] = `
{
  "errorCount": 0,
  "results": [
    {
      "entries": [
        {
          "method": "get",
          "path": "/",
          "sources": [
            {
              "character": 13,
              "content": "(c) => c.text("Hello, Hono!")",
              "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/single/index.ts",
              "line": 4,
              "modules": {},
              "references": [],
            },
          ],
        },
      ],
      "fileName": "/Users/jaccoflenter/dev/fiberplane/fpx/lsp-analysis/test/test-case/single/index.ts",
      "name": "app",
    },
  ],
}
`;
