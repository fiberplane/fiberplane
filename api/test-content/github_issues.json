[{"id":1080166469,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1","title":"Create LICENSE","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1080166469},{"id":1080178441,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2","title":"TODO","body":"- [x] Support wrangler2\r\n- [x] expressjs like req/res handling\r\n- [x] Benchmark\r\n- [x] Try on Fastly Compute@Edge\r\n- [x] ~~Template project of Cloudflare Workers~~ **Later**\r\n- [x] npmignore\r\n- [x] ~~mime-type~~\r\n- [x] ~~`any`~~ `all`\r\n- [x] ~~Try on Deno deploy~~\r\n- [x] Example for JSX <https://nanojsx.github.io> #30 \r\n- [x] Chainable route\r\n- [x] ~~Return method not allowed~~\r\n- [x] ~~base path~~\r\n- [x] Support middleware\r\n- [x] ~~TypeScript~~ ~~make`d.ts`~~ JSDoc\r\n- [x] TypeScript #21 \r\n- [x] Try on TypeScript **It works!**\r\n- [x] ~~mimify~~ **Later**\r\n- [x] ~~SSR with assetKV~~\r\n- [x] Error handling\r\n- [x] Error log\r\n- [x] Custom Error message\r\n- [x] Error handling - Middleware should be async function\r\n- [x] ~~redirect~~\r\n- [x] ~~c.respond~~\r\n- [x] ~~``app.use(router.routes());`~~\r\n- [x] multi middleware\r\n- [x] Test with `edge-mock`  #18 \r\n- [x] Contribution Guide\r\n- [x] Add keywords to package.json\r\n- [x] Documentation\r\n- [x] ~~Config~~\r\n- [x] return JSON `c.json()`\r\n- [x] `files` field in package.json \r\n- [x] Cloudflare Durable Objects\r\n- [x] Cloudflare KV #60 \r\n- [x] ~~Render HTML with template engine~~ Use JSX SSR\r\n- [x] Content-Length\r\n- [x] Lint #27 \r\n- [ ] Promotion\r\n- [x] ~~More practical example~~\r\n- [x] example serving static #61 \r\n- [x] Try test with [miniflare2](https://miniflare.dev/testing/jest)\r\n- [x] `c.redirect` #36 \r\n- [x] Support [Module Workers](https://blog.cloudflare.com/workers-javascript-modules/)?\r\n- [x] ~~`c.notFound`~~ use `c.text('not found', 404)`\r\n- [x] `c.json({}, 200, {'x-custom-header': 'value'})` #34 \r\n- [ ] Development / Production... mode?\r\n- [x] `FetchEvent` instance as `c.req.event`\r\n- [ ] How to test app [example](https://github.com/yusukebe/hono/blob/master/examples/blog/src/controller.test.ts)\r\n- [ ] Try esbuild\r\n- [x] ~~`c.notFound()` ?~~\r\n- [ ] websockets\r\n- [x] `const res = c.text('a'); res.headers.set()` is good way? #62 \r\n\r\n---\r\n\r\nMiddleware\r\n\r\n- [x] Logger #11 \r\n- [x] Basic Auth #28 \r\n- [x] CORS #53 \r\n- [x] body-parse #38 \r\n- [x] ~~X-Response-Time~~\r\n- [x] Cookie #64 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1080178441},{"id":1082944187,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/3","title":"Update document","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1082944187},{"id":1084236678,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/4","title":"Fixed tests","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1084236678},{"id":1084255210,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/5","title":"Support query and param method on Request","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1084255210},{"id":1084286044,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/6","title":"Develop","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1084286044},{"id":1089332530,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/7","title":"Feature/performance","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1089332530},{"id":1090538113,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/8","title":"feat(doc): add a simple readme to help new user get start","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1090538113},{"id":1090565193,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/9","title":"feat(ci): setup github action to enable ci","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1090565193},{"id":1091754788,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/10","title":"New API","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1091754788},{"id":1091763078,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/11","title":"\"Logger\" builtin middleware","body":"We want to have \"Logger\" middleware as a *builtin* middleware. We have to write middleware with no dependency on any other npm modules. To know how to write middleware, see `Powered By` middleware: \r\n\r\n```js\r\nconst poweredBy = async (c, next) => {\r\n await next()\r\n await c.res.headers.append('X-Powered-By', 'Hono')\r\n}\r\n```\r\n\r\n* <https://github.com/yusukebe/hono/blob/master/src/middleware/poweredBy.js>\r\n\r\nAfter we wrote middleware, add the method to `Middleware` object:\r\n\r\n```js\r\nMiddleware.poweredBy = poweredBy\r\n```\r\n\r\n* <https://github.com/yusukebe/hono/blob/master/src/middleware.js>\r\n\r\nAnd then, we can use middleware like this:\r\n\r\n```js\r\nconst { Hono, Middleware } = require('hono')\r\n...\r\napp.use('*', Middleware.poweredBy)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1091763078},{"id":1091827980,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/12","title":"Create CODE_OF_CONDUCT.md","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1091827980},{"id":1092015959,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/13","title":"Add keywords to package.json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092015959},{"id":1092023744,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/14","title":"Update README, Add instruction","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092023744},{"id":1092065300,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/15","title":"Update d.ts","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092065300},{"id":1092339992,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/16","title":"Can use async on handler","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092339992},{"id":1092583991,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/17","title":"Logger middleware","body":"This PR is to close #11 by  implementing the logger middleware without any dependencies (heavily inspired by https://github.com/koajs/logger).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092583991},{"id":1092849858,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/18","title":"In test, use edge-mock instead of node-fetch","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092849858},{"id":1092871945,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/19","title":"Use test directory","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1092871945},{"id":1093749262,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/20","title":"Migrate JavaScript to TypeScript","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1093749262},{"id":1094159829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/21","title":"Migrate to TypeScript","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094159829},{"id":1094351566,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/22","title":"Remove methods.ts","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094351566},{"id":1094627796,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/23","title":"json method in Context","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094627796},{"id":1094705569,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/24","title":"Documentation","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094705569},{"id":1094856472,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/25","title":"Fix chained route","body":"Enable `app.get('/foo', ()=>{}).post(() => {})`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094856472},{"id":1094980822,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/26","title":"Basic Auth","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094980822},{"id":1094995577,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/27","title":"Setup lint to enable code styles check","body":"Hi, @yusukebe  this PR is to setup lint script for consistent code styles, but if you don't want it, feel free to close it.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1094995577},{"id":1095907808,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/28","title":"feat(basic-auth): basic-auth middleware","body":"Close #26 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1095907808},{"id":1096089581,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/29","title":"Chained route without route method","body":"fixed #25\r\n\r\nYou can write `app.get('/foo', ()=>{}).post(() => {})` ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1096089581},{"id":1096830968,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/30","title":"Add SSR with Nono-JSX example","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1096830968},{"id":1096833137,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/31","title":"Feature/html method","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1096833137},{"id":1097029600,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/32","title":"Refactor","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097029600},{"id":1097036093,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/33","title":"Add worktop benchmark","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097036093},{"id":1097043823,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/34","title":"status and headers args on context text/json/html method","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097043823},{"id":1097179185,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/35","title":"Refactor","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097179185},{"id":1097186820,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/36","title":"Feature/redirect","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097186820},{"id":1097219003,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/37","title":"Fix redirect method","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097219003},{"id":1097392500,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/38","title":"feat(body-parse): a body parse middleware","body":"Hi @yusukebe , not sure it's good idea or not if *Hono* provides a built-in `body-parse` middleware to handle the `json`, `xml` and `form` payload for `POST` method.  \r\nThis is just a simple PR to explain what it maybe like,  which is not ready for review, just for a better discussion. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097392500},{"id":1097968064,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/39","title":"Feature/example blog","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1097968064},{"id":1098584292,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/40","title":"@types/service-worker-mock out of date and no longer maintained.","body":"Currently, `hono` depends on `@types/service-worker-mock` to run unit test, there're some interfaces missing and I think it would not be fixed since it's  no longer maintained. https://github.com/zackargyle/service-workers \r\n\r\nFor example the `reqest.formData()` is [not supported](https://github.com/zackargyle/service-workers/blob/master/packages/service-worker-mock/models/Body.js) currently, which block some unit test for `hono`. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1098584292},{"id":1099130727,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/41","title":"feat(miniflare): repalce service-worker-mock with miniflare","body":"Close https://github.com/yusukebe/hono/issues/40","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1099130727},{"id":1099208694,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/42","title":"Support Module Workers","body":"Support Module Workers for Cloudflare Workers: [Migrating to module Workers · Cloudflare Workers docs](https://developers.cloudflare.com/workers/learning/migrating-to-module-workers)\r\n\r\nSuch like this, we should modify `Context` object.\r\n\r\n```js\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  // c.waitUntil()\r\n  // c.env => Env\r\n  return c.text('From hono!')\r\n})\r\n\r\nexport default {\r\n  fetch: (req, env, ctx) => app.fetch(req, env, ctx),\r\n}\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1099208694},{"id":1099740599,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/43","title":"Support module workers syntax for Cloudflare Workers","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1099740599},{"id":1100394631,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/44","title":"fix: correct typo for change directory","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1100394631},{"id":1100603221,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/45","title":"docs: fixed readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1100603221},{"id":1100673602,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/46","title":"fix: durable objects example","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1100673602},{"id":1102889757,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/47","title":"Can basic-auth middleware support Fastly Compute@Edge?","body":"Most features of Hono work on Fastly Compute@Edge. Here is example:\r\nhttps://github.com/yusukebe/hono/tree/master/example/compute-at-edge\r\n\r\nThat's great Hono supports both Cloudflare Workers and Compute@Edge. But, basic-auth middleware does not work on Compute@Edge because it does not provides `crypto`.\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/149447029-74e0319b-49b5-4bd1-a9e6-54aceecee94f.png)\r\n\r\nThe code I tried is here:\r\n\r\n```js\r\napp.use('/auth', Middleware.basicAuth({ username: 'user', password: 'pass' }))\r\n```\r\n\r\nCan basic-auth middleware support Fastly Compute@Edge? We can do it with `polyfill`? Using ` digest.hash_sha256` in C@E? If it is difficult to support C@E without dependencies, let us give up. Because, **Hono must not depends any modules**.\r\n\r\nIf anyone knows, let me know.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1102889757},{"id":1105040060,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/48","title":"feat: Error handling","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1105040060},{"id":1105043960,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/49","title":"Add content-length","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1105043960},{"id":1106712234,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/50","title":"default or wildcard route","body":"Is there any way to create a default or wildcard route? For example, if I want to build a custom 404 handler, I can't seem to be able to do it.\r\n\r\nExample I ***thought*** would work:\r\n\r\n\r\n```\r\napp.get(\"/api/abc\", handleAbcRoute);\r\napp.get(\"/api/*\", handleCustom404);\r\n```\r\n\r\nHowever, the last wildcard route always takes precedence. There seems to be no way for the first route to be handled appropriately and all other routes use the `handleCustom404` function.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1106712234},{"id":1107118959,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/51","title":"feat: default route with wildcard","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1107118959},{"id":1107130975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/52","title":"feat: default route with wildcard","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1107130975},{"id":1107502282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/53","title":"feat: CORS  middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1107502282},{"id":1107751806,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/54","title":"Add example with Miniflare/Wrangler2","body":"I'd love to see an official example with Miniflare with live reloading for development mode.\r\n\r\nI've put together my own project that was working with Miniflare 2.0.0 and Hono 0.0.13. However, if I update Miniflare to 2.2.0, it no longer works. Miniflare shows this on the durable object example:\r\n\r\n```sh\r\n[mf:err] GET /api/: TypeError: Failed to parse URL from [object Object]\r\n    at new Request (/Users/jn/Apps/project-api/node_modules/undici/lib/fetch/request.js:83:23)\r\n    at new Request (/Users/jn/Apps/project-api/node_modules/miniflare/node_modules/@miniflare/core/src/standards/http.ts:398:13)\r\n    at EventTarget.dispatchFetch (/Users/jn/Apps/project-api/node_modules/miniflare/node_modules/@miniflare/core/src/index.ts:999:51)\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at Server.<anonymous> (/Users/jn/Apps/project-api/node_modules/@miniflare/http-server/src/index.ts:167:20)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1107751806},{"id":1107849410,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/55","title":"fix: `Content-Length` middleware not as default","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1107849410},{"id":1107885642,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/56","title":"Content-Length could be part of logger output","body":"Just like what `koa` logger does https://github.com/koajs/logger/blob/master/index.js#L135","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1107885642},{"id":1108041654,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/57","title":"feat: add content-length header","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1108041654},{"id":1109348823,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/58","title":"feat(content-length): add Content-Length in log output","body":"Close https://github.com/yusukebe/hono/issues/56","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1109348823},{"id":1110053282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/59","title":"refactor(utils): better management for utils modules to avoid kitchen sink issue","body":"Refactor `utils` with better naming.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1110053282},{"id":1110443165,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/60","title":"feat: Use KV for blog example","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1110443165},{"id":1110476151,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/61","title":"chore: Add serve static example","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1110476151},{"id":1112737128,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/62","title":"feat: Add new shortcuts for request/response","body":"Add new shortcuts for Requests:\r\n\r\n```js\r\nc.req.header('Header-Name')\r\nc.req.param('q') // instead of c.req.params\r\n```\r\n\r\nAdd new shortcuts for Response:\r\n\r\n```js\r\nc.header('Header-Name', 'Header-Value')\r\nc.status(201)\r\nc.statusText('This status text')\r\nreturn c.text('This is Body text')\r\n/*\r\nnew Response('This is Body text', {\r\n  status: 201,\r\n  statusText: 'This status text',\r\n  headers: { 'Header-Name': 'Header-Value', 'Content-Type': 'plain/text' },\r\n})\r\n*/\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1112737128},{"id":1113327561,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/63","title":"refactor(equal): user Expect.toStrictEqual to simplify value comparison","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1113327561},{"id":1114977081,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/64","title":"feat: Cookie middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1114977081},{"id":1115001665,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/65","title":"refactor: refactor something","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1115001665},{"id":1115617975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/66","title":"perf: content length","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1115617975},{"id":1115624429,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/67","title":"perf: content length","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1115624429},{"id":1115634039,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/68","title":"TODO 2","body":"## Routing\r\n\r\n- [x] Deprecate chained route? #105 \r\n- [x] Support nested(like) routing? #105 \r\n- [x] One handler\r\n- [x] noMatch\r\n- [ ] `RegExpRouter` as default?\r\n\r\n---\r\n\r\n- [ ] Web sites?\r\n- [x] Stacktrace #158 \r\n- [x] Fix API\r\n- [ ] Promotion\r\n- [ ] How to test app / [example](https://github.com/yusukebe/hono/blob/master/examples/blog/src/controller.test.ts)\r\n- [x] Add project template to [Cloudflare QuickStart](https://developers.cloudflare.com/workers/get-started/quickstarts)\r\n- [x] ~~Web Sockets~~\r\n- [x] ~~Determine Cloudflare or Compute@Edge or not~~\r\n- [x] Dynamic import / lazy load third party modules if really want to use some Middleware\r\n- [x] Image logo #153 \r\n- [ ] Documentation #71 \r\n- [ ] README\r\n- [x] Document in Japanese #131 \r\n- [x] Badges on README 68baca09492ba5b4fef057b247c3285887a99626\r\n- [x] View\r\n- [x] slurp content from files in KV #72 \r\n- [x] ~~source map~~\r\n- [x] ~~uglify~~\r\n- [x] custom error object #111 \r\n- [x] app.onError #111 \r\n- [x] Customize error message #111 \r\n- [x] ~~DEBUG flag?~~\r\n- [x] Error handling: => `app.get('/', (c) => 'Hello Hono!')` \r\n- [x] ~~Debugging`~~\r\n- [x] ~~Redirect trailing slash?~~\r\n- [x] ~~Return method not allowed~~\r\n- [x] ~~`c.stash` ?~~\r\n- [x] ~~`405 method not allowed`~~\r\n- [x] ~~`c.render` with other middleware~~\r\n- [x] ~~Obsolete `chained route` and `c.route` ??~~\r\n- [x] `TypeError: c.req.header is not a function`\r\n- [x] ~~Cache-Control for serve-static~~\r\n- [x] set HTTP statusText automatically\r\n- [x] Fix examples #101 \r\n- [x] Durable Objects example\r\n- [x] ~~Benchmark for Compute@Edge~~\r\n- [x] ~~Rewrite test for blog. Using [jest-miniflare](https://miniflare.dev/testing/jest)~~\r\n- [x] ~~Do not include tests into NPM package?~~\r\n- [x] `pretty` option on `c.json` #150 \r\n- [x] About TypeScript in Japanese README\r\n- [x] ~~`types.ts`~~\r\n- [x] Directory structure\r\n\r\n## Middleware\r\n\r\n- [x] Serve Static for Cloudflare ~~`cf-static`~~ `serve-static` #76 \r\n- [x] Basic Auth support Compute@Edge? #86 \r\n- [x] Basic auth support multiple users #112 \r\n- [x] throw error if basic auth user/pass is not set #112 \r\n- [x] ~~Favicon ?~~\r\n- [x] ~~compress~~\r\n- [x] Etag #119 \r\n- [x] GraphQL\r\n- [x] View with `mustache` #72 \r\n- [x] ~~View with `React`~~\r\n- [x] ~~Stack trace~~\r\n- [x] ~~logger use `waituntil`?~~\r\n- [x] ~~`parsedBody` as any?~~\r\n- [x] stack trace in `graphql`\r\n\r\n## Not sure\r\n\r\n- [x] ~~Development / Production mode?~~\r\n- [x] ~~Try esbuild~~","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1115634039},{"id":1115642930,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/69","title":"fix: Fixed context headers","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1115642930},{"id":1115648093,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/70","title":"fix: change `c.body()` api","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1115648093},{"id":1116147126,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/71","title":"Write documents in better English","body":"My english is poor 😥 please write documents in better English. For examples:\r\n\r\n* README\r\n  * What is Hono\r\n  * Features\r\n  * Usage\r\n  * API\r\n  * Demo\r\n  * With Cloudflare Workers\r\n  * With Fastly Compute@Edge\r\n* Usage of middleware ` src/middleware/powered-by/README.md`\r\n* How to run example `examples/basic/README.md`","state":"closed","labels":"[\"document\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1116147126},{"id":1116962243,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/72","title":"feat: Mustache Middleware","body":"~~Dirty code.~~\r\n~~Big problem, tests for Workers Site KV does not work well...~~","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1116962243},{"id":1117970509,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/73","title":"fix: diable mustache middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1117970509},{"id":1117990361,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/74","title":"fix: mustache middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1117990361},{"id":1118386930,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/75","title":"chore: tweak","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1118386930},{"id":1118460579,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/76","title":"feat: serve static middleware (Cloudflare only)","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1118460579},{"id":1118463196,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/77","title":"fix: mustache template encoding","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1118463196},{"id":1119926213,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/78","title":"fix: about parsedBody on Request","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1119926213},{"id":1119969880,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/79","title":"example: fix blog example","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1119969880},{"id":1120140395,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/80","title":"Detach middleware from main package.","body":"Hono package became too fat because including builtin middleware. So, we should detach middleware from Hone main package. We can use [exports](https://nodejs.org/api/packages.html#subpath-exports) in `package.json`. For example :\r\n\r\n```json\r\n  \"exports\": {\r\n    \".\": \"./dist/index.js\",\r\n    \"./powered-by\": \"./dist/middleware/powered-by/powered-by.js\"\r\n  }\r\n```\r\n\r\n```js\r\nimport { Hono } from 'hono'\r\nimport { poweredBy } from 'hono/poweredBy'\r\n\r\n...\r\n\r\napp.use('*', poweredBy())\r\n```\r\n\r\nI don't know it will be well. We should try it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1120140395},{"id":1120474420,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/81","title":"feat: builtin middleware as sub module","body":"# BREAKING CHANGES!!\r\n\r\nNow, builtin middleware are not in main package. You can't use `Middleware.logger()` method. Call sub modules if needed:\r\n\r\n```js\r\nimport { Hono } from 'hono'\r\nimport { poweredBy } from 'hono/powered-by'\r\nimport { logger } from 'hono/logger'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', poweredBy())\r\napp.use('*', logger())\r\n```\r\n\r\nCloses: #80","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1120474420},{"id":1121143055,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/82","title":"Webpack 5 polyfills are not included for node.js","body":"Webpack 4 that is used in current version wrangler has polyfills for Node.js like `Buffer` or `crypto`. But, Webpack 5 polyfill are not included. Then, `basic-auth` middleware is not working in other environments such as wrangler 2.0 default settings.\r\n\r\nOne of the ways is `basic-auth` middleware imports `Buffer` and `crypto`. In mustache middleware, it imports `mustache` dynamically like this: https://github.com/yusukebe/hono/blob/d3a6f2cdf79deeff6e147d14353971425e74ecbf/src/middleware/mustache/mustache.ts#L11\r\n\r\nIf users want to use `basic-auth` middleware, they should install `Buffer` and `crypto`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1121143055},{"id":1121313246,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/83","title":"fix: basic auth","body":"Installing `buffer` and `crypto` packages enables basic auth, if `buffer` of `crypto` is not in pollyfills such as webpack 5 environment.\r\n\r\nClose #82","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1121313246},{"id":1121344857,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/84","title":"fix: use `atob` for basic auth","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1121344857},{"id":1121658461,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/85","title":"fix: Unicode problem about atob/btoa","body":"https://github.com/yusukebe/hono/pull/84#pullrequestreview-870144435\r\n\r\nThank you @danielweck","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1121658461},{"id":1122467022,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/86","title":"feat: Basic-auth with polyfill","body":"Basic auth support Fastly Compute@Edge with polyfills.\r\n\r\nWebpack example:\r\n\r\n```js\r\nconst path = require('path')\r\n\r\nmodule.exports = {\r\n  entry: './index.js',\r\n  target: ['webworker'],\r\n  output: {\r\n    filename: 'index.js',\r\n    path: path.resolve(__dirname, 'bin'),\r\n    libraryTarget: 'this',\r\n  },\r\n  resolve: {\r\n    fallback: {\r\n      buffer: require.resolve('buffer/'),\r\n      crypto: require.resolve('crypto-browserify'),\r\n      stream: require.resolve('stream-browserify'),\r\n      process: require.resolve('process/browser'),\r\n    },\r\n  }\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1122467022},{"id":1123068803,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/87","title":"fix: use require","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1123068803},{"id":1123574545,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/88","title":"fix: default content-type","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1123574545},{"id":1123639303,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/89","title":"feat: add root option on mustache middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1123639303},{"id":1124272242,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/90","title":"test: add default middleware test","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1124272242},{"id":1124326726,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/91","title":"refactor: remove default middleware","body":"Fixed some bugs about handling req/res object on middleware.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1124326726},{"id":1124924834,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/92","title":"refactor: context","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1124924834},{"id":1124929255,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/93","title":"feat: auto set `statusText`","body":"# BREAKING CHANGES!!!\r\n\r\n`c.statusText()` is obsoleted. Status text is set automatically.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1124929255},{"id":1124944256,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/94","title":"feat: check response type","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1124944256},{"id":1125602714,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/95","title":"Flamework to Framework","body":"Feel free to close this PR if you did it intentionally.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1125602714},{"id":1126485044,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/96","title":"feat: exports buffer util","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1126485044},{"id":1127293815,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/97","title":"chore: update nano-jsx example","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1127293815},{"id":1128569063,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/98","title":"refactor: remove not used files","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1128569063},{"id":1128590088,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/99","title":"docs: update readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1128590088},{"id":1129274027,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/100","title":"chore: fix hono-example-blog","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1129274027},{"id":1133626844,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/101","title":"chore: update examples","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1133626844},{"id":1136712211,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/102","title":"Added type to c.req.param key.","body":"Hi,\r\n\r\nThank you for publishing such a good product.\r\n\r\nThis PR adds the ability to complete the type of `c.req.param`.\r\n\r\nI think this is a nice feature, but it also makes type definitions more complex, so I think it is reasonable to decide not to adopt it.\r\n\r\n## Pros\r\n\r\nWe can get support from the editor for the type of c.req.param. Also, if there is no possibility of a value being returned from c.req.param, the parameter type will be set to `never` and cannot be specified.\r\n\r\nhttps://user-images.githubusercontent.com/30598/153787066-92e7f97b-32e9-4387-add5-166b2cf302c9.mov\r\n\r\n\r\n<img width=\"816\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/153786609-74ecf20f-9bf9-4615-b251-9140b27b9f61.png\">\r\n\r\n<img width=\"856\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/153786684-b8e45d7b-2843-4665-b3a2-59529a92665c.png\">\r\n\r\n<img width=\"818\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/153786740-78bb99e4-c03b-42c8-9a79-d5d4b186a25d.png\">\r\n\r\n<img width=\"986\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/153786761-2233e5da-ba4b-4e21-89fd-c4140a144b4a.png\">\r\n\r\n\r\n\r\n### Cons\r\n\r\nThe simplicity of the type display will be lost.\r\nThe following image is before the PR was applied. For those who are not used to reading conditional type specifications, this may be easier to read.\r\n\r\n<img width=\"733\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/153787263-9cba0364-51d9-4a49-a716-fa640c456c2e.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1136712211},{"id":1138312108,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/103","title":"feat: add option for `no` strict routing","body":"default is `true/strict`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1138312108},{"id":1139307100,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/104","title":"refactor: do some refactoring","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1139307100},{"id":1139426115,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/105","title":"feat: nested route","body":"# BREAKING CHANGES!!!\r\n\r\n`app.route` is changed:\r\n\r\n**Chained route** is obsolete:\r\n\r\n```\r\napp.route('/')\r\n  .get((c) => c.text('get /'))\r\n// ^^^ Not working now!!\r\n```\r\n\r\nNow, `app.route` enables **nested route**:\r\n\r\n```\r\nconst book = app.route('/book')\r\nbook.get('/', (c) => c.text('List books')) // => GET /book\r\nbook.get('/:id', (c) => {\r\n  return c.text('Get Book: ' + c.req.param('id'))) // => GET /book/:id\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1139426115},{"id":1141260101,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/106","title":"chore: set up prettier","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1141260101},{"id":1141288827,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/107","title":"refactor: router must have only one hander","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1141288827},{"id":1142060660,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/108","title":"Optimize router","body":"Hi, \r\n\r\nThis PR attempts to optimize the router by pre-compiling pattern.\r\n\r\n### What did I do?\r\n\r\n* Call `getPattern` at `insert` phase. And cache them.\r\n* Do loop only for patterns.\r\n* Skip regexp capturing. I think the pattern for path meaning \"accept current component or not\".\r\n\r\n### Breaking change\r\n\r\nI think `/users/:id{[0-9]+}` used to match `/users/abc123xyz`, but with this change, it will match `/^[0-9]+$/` strictly.\r\n\r\n### Benchmark\r\n\r\nWith this PR, I got the following results.\r\n\r\n```\r\nhono x 413,513 ops/sec ±4.13% (71 runs sampled)\r\nitty-router x 70,685 ops/sec ±3.19% (86 runs sampled)\r\nsunder x 124,893 ops/sec ±3.05% (85 runs sampled)\r\nworktop x 76,740 ops/sec ±4.47% (77 runs sampled)\r\nFastest is hono\r\n```\r\n\r\n### More\r\n\r\nI have another idea about improving the performance of the router, and I hope to make another PR about it in the few days.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1142060660},{"id":1144928389,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/109","title":"Introduce RegExpRouter","body":"Hi,\r\n\r\nI tried to improve the performance of the router using a different strategy.\r\n\r\n### Strategy\r\n\r\nAll the routes into one RegExp object.\r\n\r\n* /help\r\n* /:user_id/followees\r\n* /:user_id/followers\r\n* /:user_id/posts\r\n* /:user_id/posts/:post_id\r\n* /:user_id/posts/:post_id/likes\r\n\r\ninto `^/(?:help$()|([^/]+)/(?:followe(?:es$()|rs$())|posts(?:/([^/]+)(?:/likes$()|$())|$())))`\r\n\r\nIt will be a large regular expression, but since common prefixes can be grouped together by trie, I think it will grow slowly in the general case.\r\nAlso, the return value of `match` will be larger in proportion to the number of routes, but it will be an array where most of the elements are `undefined`, so I think it is still an acceptable size in the general case.\r\n\r\n#### Existing modules adopting the same strategy\r\n\r\nThe following Perl modules use large regular expression objects for high performance.\r\n\r\n* [Router::Boom](https://github.com/tokuhirom/Router-Boom)\r\n* [Router::Assemble](https://github.com/sixapart/Router-Assemble)\r\n\r\n\r\n### Benchmark\r\n\r\n```\r\nhono x 410,442 ops/sec ±5.62% (72 runs sampled)\r\nhono with RegExpRouter x 460,937 ops/sec ±6.52% (65 runs sampled)\r\nitty-router x 73,523 ops/sec ±3.63% (81 runs sampled)\r\nsunder x 131,994 ops/sec ±0.80% (84 runs sampled)\r\nworktop x 81,120 ops/sec ±4.16% (82 runs sampled)\r\nFastest is hono with RegExpRouter\r\n```\r\n\r\n### Compatibility\r\n\r\nI ran a test by changing it to use RegExpRouter by default and got green, so I believe it is compatible enough.\r\nhttps://github.com/usualoma/hono/compare/regexp-router..regexp-router-as-default\r\n\r\n#### Known differences\r\n\r\n* The current router can include capture in `{}` notation (e.g. `/:action{(update|delete)}`), but RegExpRouter can't.  We need to use `(?:...)` instead of `(...)`.\r\n* The current router can `add` route after call `match`, but RegExpRouter can't.\r\n* The current router can not handle multiple capture in same position (e.g. `/path/to/:decimal{[0-9]+}`, `/path/to/:hexadecimal{0x[0-9A-F]+}`), but RegExpRouter can.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1144928389},{"id":1144986272,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/110","title":"feat: `app.notFound` for setting default 404 not found","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1144986272},{"id":1145023239,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/111","title":"feat: `app.onError` for handling error","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1145023239},{"id":1145867633,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/112","title":"feat: basic auth middleware supports multiple users","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1145867633},{"id":1146845135,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/113","title":"Make ParamMap Array<[key, value]>.","body":"In this PR, I will add a very small optimization to RegExpRouter.\r\n\r\nIt turns out that iterating through the results of Object.keys is little bit expensive, so I change ParamMap to a list of keys and values (a.k.a Association List).\r\n\r\nhttps://gist.github.com/usualoma/6d22fdb1b64e7ae8f4d6fe2d204b9208\r\n\r\nI don't think this optimization will make any visible difference to the router benchmarks.\r\n\r\n### FYI\r\n\r\nI also tried optimize by using lastIndexOf() instead of indexOf(), but failed. Because lastIndexOf() is slow.\r\nhttps://blog.taaas.jp/tips/v8lastindexof/\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1146845135},{"id":1147504209,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/114","title":"refactor: directory structure","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1147504209},{"id":1147519362,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/115","title":"feat: exports `RegExpRouter`","body":"It might be default router.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1147519362},{"id":1149929625,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/116","title":"refactor: compose","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1149929625},{"id":1150967337,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/117","title":"feat: `app.notFound()` and `app.onError()`","body":"# BREAKING CHANGES\r\n\r\n`app.notFound` and `app.onError` are changed:\r\n\r\n```js\r\n// Custom Not Found Response\r\napp.notFound((c) => c.text('404', 404))\r\n\r\n// Handle Error and return custom Error Response\r\napp.onError((err, c) => {\r\n  console.error(`${err}`)\r\n  return c.text('500', 500)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1150967337},{"id":1151472072,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/118","title":"refactor: create `utils/crypto.ts`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1151472072},{"id":1151796087,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/119","title":"feat: etag middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1151796087},{"id":1154056720,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/120","title":"chore: update benchmark script","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1154056720},{"id":1154303804,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/121","title":"refactor: compose","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1154303804},{"id":1155703082,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/122","title":"fix: mime-type bug","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1155703082},{"id":1159340264,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/123","title":"chore: update examples","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1159340264},{"id":1159703038,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/124","title":"Build error when import builtin middlewares","body":"It seems like the builtin middlewares not included correctly in release package (version 0.5.1) \r\n\r\n```javascript\r\nimport { Hono } from 'hono'\r\nimport { basicAuth } from 'hono/basicAuth'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('/api/talks', basicAuth())\r\napp.get('/', (c) => {c.json({})}) \r\n\r\n```\r\n\r\n\r\n\r\n```\r\n./index.js\r\nModule not found: Error: Can't resolve 'hono/basicAuth' in '/Users/minhuang/Development/Projects/giki.api/services/talks/create'\r\nresolve 'hono/basicAuth' in '/Users/minhuang/Development/Projects/giki.api/services/talks/create'\r\n  Parsed request is a module\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1159703038},{"id":1160160120,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/125","title":"docs: write instructions","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1160160120},{"id":1160180049,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/126","title":"Document in Chinese","body":"I think I can help on this you think it's ok.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1160180049},{"id":1160369311,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/127","title":"English grammar changes","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1160369311},{"id":1162460400,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/128","title":"feat: basic auth middleware supports overriding `hashFunction`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1162460400},{"id":1163370157,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/129","title":"Best way to set CORS","body":"Is there a best way to set Cors in Hono?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1163370157},{"id":1163485469,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/130","title":"chore: update example for fastly compute@edge","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1163485469},{"id":1163565336,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/131","title":"docs: create Japanese readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1163565336},{"id":1164818311,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/132","title":"feat: add `request` method","body":"Add `request` method. It's useful for testing.\r\n\r\n```js\r\ntest('GET /hello is ok', async () => {\r\n  const res = await app.request('http://localhost/hello')\r\n  expect(res.status).toBe(200)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1164818311},{"id":1165207737,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/133","title":"Argument of type \"Handler<string>\" is not assignable to parameter of type \"Handler<never>\" ","body":"TS tells the following error:\r\n\r\nArgument of type \"Handler<string>\" is not assignable to parameter of type \"Handler<never>\" \r\nTypes of parameters 'string' and 'never' are incompatible. ts(2345)\r\n\r\nin \r\nexamples/blog/src/index.ts \r\n\r\nfor all routes (get,post,,put,delete) like:\r\napp.get('/', Controller.root)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1165207737},{"id":1165811046,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/134","title":"fix(types): add `Handler<string>`","body":"Fix #133","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1165811046},{"id":1166941121,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/135","title":"Optimize RegExpRouter","body":"Hi,\r\n\r\nI tried to optimize RegExpRouter.\r\n\r\n### Summary\r\n\r\nI think most middleware is applied to paths like '\\*' or '/path/to/\\*' that take no parameters.\r\nIn that case, parameter handling is not needed, so `match` can be optimized as follows.\r\nhttps://github.com/yusukebe/hono/compare/master...usualoma:optimize-reg-exp-router?expand=1#diff-06f981941f95eecd6e249629fd9d5d4badaf8dfbe96ade6219e67691359df679R35-R38\r\n\r\nAnd by optimizing the '\\*' commonly used in middleware separately as described above, we can make it simpler for normal routing as well.\r\nhttps://github.com/yusukebe/hono/compare/master...usualoma:optimize-reg-exp-router?expand=1#diff-06f981941f95eecd6e249629fd9d5d4badaf8dfbe96ade6219e67691359df679R43\r\n\r\n### Benchmark\r\n\r\nSince TrieRouter and RegExpRouter are already fast enough, the ranking may not be stable due to minute environmental influences, but the following results were obtained in my environment.\r\n\r\n```\r\nhono x 413,307 ops/sec ±3.71% (78 runs sampled)\r\nhono with RegExpRouter x 445,681 ops/sec ±6.82% (66 runs sampled)\r\nhono with RegExpRouter in this PR x 479,019 ops/sec ±6.31% (66 runs sampled)\r\nitty-router x 67,901 ops/sec ±3.32% (88 runs sampled)\r\nsunder x 115,183 ops/sec ±2.73% (80 runs sampled)\r\nworktop x 72,526 ops/sec ±4.84% (80 runs sampled)\r\nFastest is hono with RegExpRouter in this PR\r\n```\r\n\r\nHowever, this is more than just a speedup on this benchmark.\r\n* Speeds up middleware routing.\r\n* Hopefully, even the following cases may be faster than TrieRouter 😛\r\n    * https://twitter.com/yusukebe/status/1502069834712219650","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1166941121},{"id":1166961772,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/136","title":"Fix typo.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1166961772},{"id":1168303531,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/137","title":"chore: update examples","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1168303531},{"id":1170764607,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/138","title":"chore: export `trie-router` in package.json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1170764607},{"id":1170768222,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/139","title":"chore: export etag middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1170768222},{"id":1174263306,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/140","title":"feat: `notFound` support await/async","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1174263306},{"id":1174684282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/141","title":"typo : exaple/example","body":"https://github.com/yusukebe/hono/blob/master/examples/mustache/src/index.js#L11","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1174684282},{"id":1182490201,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/142","title":"feat: add GraphQL Server middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1182490201},{"id":1182500065,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/143","title":"fix: `exports` path on package.json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1182500065},{"id":1182500663,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/144","title":"fix: `exports` path on package.json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1182500663},{"id":1182533844,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/145","title":"docs: add middleware README documents","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1182533844},{"id":1184337379,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/146","title":"feat: exports utility methods","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1184337379},{"id":1185666387,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/147","title":"feat: exports crypto util in package.json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1185666387},{"id":1189535315,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/148","title":"fix: throwing error messages on GraphQL middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1189535315},{"id":1190506278,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/149","title":"feat: add JSON pretty option","body":"You can set a JSON pretty option with `c.pretty(true)`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1190506278},{"id":1190519704,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/150","title":"feat: add JSON pretty-print middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1190519704},{"id":1199052575,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/151","title":"docs: add a line for TypeScript support","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1199052575},{"id":1204031181,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/152","title":"Refactoring","body":"- [x] typeRoots <https://memo.yammer.jp/posts/my-type-of-typescript>\r\n- [x] `Next` type\r\n- [x] Absolute Imports\r\n- [x] Throw errors <https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Error>\r\n- [x] `types.ts`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1204031181},{"id":1204050461,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/153","title":"Project Logo","body":"I want a project logo image! A cool image for Hono! Is there anyone who can design and draw it?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1204050461},{"id":1204624284,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/154","title":"Throw error if the arg of decodeBase64 is null.","body":"https://github.com/yusukebe/hono/blob/master/src/utils/crypto.ts#L66","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1204624284},{"id":1208972317,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/155","title":"fix: `encodeBase64/decodeBase64` throw Error if the argument is null","body":"Fix #154 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1208972317},{"id":1209165987,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/156","title":"refactor: refine directory structure","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1209165987},{"id":1209173858,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/157","title":"refactor: automate `import` sorting","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1209173858},{"id":1209329880,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/158","title":"feat: show stack-trace in default error handler","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1209329880},{"id":1209379480,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/159","title":"fix: typo `SameSaite`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1209379480},{"id":1209401260,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/160","title":"refactor: define `Next` type","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1209401260},{"id":1209431864,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/161","title":"feat: show stack-trace at graphql-server middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1209431864},{"id":1210063474,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/162","title":"refactor: shorten `hono.ts`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1210063474},{"id":1210103939,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/163","title":"feat: add types for HTTP status code","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1210103939},{"id":1210995643,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/164","title":"feat: update visibility","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1210995643},{"id":1211649143,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/165","title":"docs: add logo images","body":"Close #153 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1211649143},{"id":1211666712,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/166","title":"TODO 3","body":"- [x] docs: about testing\r\n- [x] docs: `reg-exp-router`\r\n- [x] Build a website for Hono?? #359 \r\n- [x] docs: about Module Worker for Cloudflare Workers\r\n- [x] docs: In README, more detail about middleware\r\n\r\n## Not Sure\r\n\r\n- [x] ~~Request => `HonoRequest` / Response => `HonoResponse`~~\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1211666712},{"id":1212413100,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/167","title":"refactor: refine code","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1212413100},{"id":1213299392,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/168","title":"JWT middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1213299392},{"id":1213613429,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/169","title":"feat(jwt): jwt middleware","body":"This MR is to add JWT middleware to hono.\r\n\r\nClose #168 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1213613429},{"id":1213675774,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/170","title":"RFC: use('/path', middleware_1, middleware_2, ...)","body":"It's would be great if we can apply middlewares like,\r\n```js\r\napp.use('/path', m1, m2, ...)\r\n```\r\nor \r\n```js\r\napp.use('/path', m1)\r\n       .use(m2)\r\n       .use(m3)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1213675774},{"id":1214466142,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/171","title":"refactor(loop): simplify the for loop","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1214466142},{"id":1214481372,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/172","title":"Update Jest","body":"v28.0.0 has been released!\r\n\r\n<https://github.com/facebook/jest/releases/tag/v28.0.0>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1214481372},{"id":1214515480,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/173","title":"feat: chained routing","body":"Now, you can write:\r\n\r\n```js\r\napp\r\n  .get('/endpoint', (c) => {\r\n    return c.text('GET /endpoint')\r\n  })\r\n  .post((c) => {\r\n    return c.text('POST /endpoint')\r\n  })\r\n  .delete((c) => {\r\n    return c.text('DELETE /endpoint')\r\n  })\r\n```\r\n\r\nWith middleware:\r\n\r\n```js\r\napp.use('*', poweredBy()).use(logger())\r\n```\r\n\r\nClose #170","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1214515480},{"id":1214754843,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/174","title":"Develop under the organization?","body":"Now Hono is developed in `yusukebe/hono`. But: \r\n\r\n* Project is getting bigger.\r\n* There are some related projects such as \"starter template\", \"for the website\", and \"examples\"...\r\n\r\nSo, It is a good idea to make the organization for Hono. And transfer this project under the organization.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1214754843},{"id":1215133046,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/175","title":"Measure coverage","body":null,"state":"closed","labels":"[\"test\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1215133046},{"id":1215525896,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/176","title":"`benchmarks` as one repository under `honojs` organization","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1215525896},{"id":1215526171,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/177","title":"`examples` as one repository under `honojs` organization","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1215526171},{"id":1215577185,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/178","title":"chore: move repo under `honojs` organization","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1215577185},{"id":1216383857,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/179","title":"Do not calculate `Content-Length`","body":"I notice that calculating `Content-Length` makes returning a response slowly.\r\n\r\n[This section](https://github.com/honojs/hono/blob/ac713c065924d30b0943ec28a107541057eb363c/src/context.ts#L70):\r\n\r\n```js\r\n    let length = 0\r\n    if (data) {\r\n      if (data instanceof ArrayBuffer) {\r\n        length = data.byteLength\r\n      } else if (typeof data == 'string') {\r\n        const Encoder = new TextEncoder()\r\n        length = Encoder.encode(data).byteLength || 0\r\n      }\r\n    }\r\n```\r\n\r\nWrangler, Miniflare, or Cloudflare calculate `Content-Length` and add to a header automatically. So, we do not have to do it by ourselves. So, how about removing this section?\r\n\r\nIf we remove it, `logger` middleware can not show `Content-Length`.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1216383857},{"id":1216675716,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/180","title":"fix(jwt): the alg option should be same as the one in options","body":"This PR is to,\r\n* fix the algorithm not used in Jwt middleware when it's defined.\r\n* add more unit tests.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1216675716},{"id":1216843887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/181","title":"chore: move examples to github.com/honojs/examples","body":"Close #177 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1216843887},{"id":1216872429,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/182","title":"chore: update npm modules","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1216872429},{"id":1216895476,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/183","title":"feat: [BREAKING] `Content-Length` is not added automatically","body":"Calculating Content-Length makes returning a response slowly. But Wrangler, Miniflare, or Cloudflare calculate Content-Length and add to a header automatically. So, we do not have to do it by ourselves.\r\n\r\nClose #179 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1216895476},{"id":1218366807,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/184","title":"Deno support??","body":"I'm trying to see Hono works on *Deno*. Even if I can, the project files, etc. will maybe get more complicated. So finding a better way. I will give up if it is not found.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1218366807},{"id":1218730461,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/185","title":"Deploy Hono app in GitHub Action ","body":"Since hono is using wrangler@beta, so we can not use the official action [wrangler-action](https://github.com/cloudflare/wrangler-action) since it is still in version 1.x.x.\r\n\r\nAnd I tried with script, \r\n```yml\r\nname: workers\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - production\r\njobs:\r\n  deploy:\r\n    runs-on: ubuntu-latest\r\n    name: Deploy\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - uses: actions/setup-node@v3\r\n        with:\r\n          node-version: 16.7.0\r\n      - name: publish\r\n        run: |\r\n          cd api;\r\n          npx wrangler@beta publish index.js;\r\n        env:\r\n          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}\r\n```\r\n\r\nIt complains with error log,\r\n```\r\ncd api;\r\n  npx wrangler@beta publish index.js;\r\n  shell: /usr/bin/bash -e {0}\r\n  env:\r\n    CF_API_TOKEN: ***\r\nnpm WARN exec The following package was not found and will be installed: wrangler@beta\r\nUsing \"CF_API_TOKEN\" environment variable. This is deprecated. Please use \"CLOUDFLARE_API_TOKEN\", instead.\r\n ⛅️ wrangler 0.0.2[7](https://github.com/gikiapp/giki.api/runs/6211614457?check_suite_focus=true#step:4:7) \r\n--------------------\r\nNo account id found, quitting...\r\n\r\nIf you think this is a bug then please create an issue at https://github.com/cloudflare/wrangler2/issues/new.\r\nError: Process completed with exit code 1.\r\n```\r\n\r\nAny idea to solve this?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1218730461},{"id":1220040099,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/186","title":"Env is not available in ctx in Service Worker mode","body":"In Cloudflare Worker, we can set environment variables in wrangler.toml, but I found that it's not accessible when we use Hono in Service Worker mode (`app.fire()`).\r\n\r\nModule Worker mode like following works well.\r\n```javascript\r\nexport default {\r\n  fetch(request, env, event) {\r\n    return app.fetch(request, env, event)\r\n  },\r\n}\r\n```\r\n\r\nI am thinking if we can make environment variables works in `app.fire()` , it'd be great.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1220040099},{"id":1221729392,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/187","title":"feat(jwt): exports jwt utils","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1221729392},{"id":1221792321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/188","title":"feat(middleware): enable middleware on http method","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1221792321},{"id":1222021719,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/189","title":"Discussion: hono.use ","body":"The current handler and middleware design of Hono is great, and I am thinking the possibility to make it a little simpler and cleaner.\r\n\r\n* **Make the handler and middleware one the same thing, and both apply by `hono.use`**\r\n\r\n```ts\r\n\r\nconst middleware = async (ctx, next) => {\r\n   // middleware functionality code\r\n   await  next()\r\n}\r\n\r\nconst handler = async (ctx) => {\r\n   ctx.body = 'hello world'\r\n}\r\n\r\n```\r\nThen we can apply them  with chained style,\r\n\r\n```ts\r\n\r\nnew Hono().use(middleware).use(handler)\r\n```\r\nor compose style, \r\n\r\n```ts\r\nnew Hono().use(middleware, handler)\r\n```\r\n\r\n* **Router acts routing responsibility**\r\n\r\nHono's routers (TrieRouter and RegExpRouter) are so cool with high performance as we see in Hono currently, to better support `hono.use` mentioned above, we can extend it a little bit to be like,\r\n\r\n```ts\r\nconst router = new TrieRouter()\r\nrouter\r\n    .get('/', (ctx) => ctx.body = 'ok')\r\n    .post('/', (ctx) => ctx.body = {'status': 'created'})\r\n    ...\r\n\r\n```\r\n\r\nThen Hono can just apply it likem\r\n\r\n```ts\r\nhono.use(router.routes())\r\n```\r\n\r\nDoes this sound like an idea worth discussing?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1222021719},{"id":1222102929,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/190","title":"fix(env): Property 'xxx' does not exist on type 'Env'.","body":"make the Env interface [string:string], to fix the issue `Property 'xxx' does not exist on type 'Env'.` when we're trying to get the env 'xxx' from `ctx.env` with `ctx.env.xxx`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1222102929},{"id":1222120293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/191","title":"feat: enable adding types for Env variables","body":"Enable adding types for Env variables using generics in Module Worker mode.\r\n\r\n```ts\r\ninterface Env {\r\n  API_KEY: string\r\n  API_SECRET: string\r\n  MY_KV: KVNamespace\r\n}\r\n\r\nconst app = new Hono<Env>()\r\n\r\napp.get('/', (c) => {\r\n  const key = c.env.API_KEY\r\n  const secret = c.env.API_SECRET\r\n  const message = getMessage({ key, secret })\r\n  return c.text(`Hono! ${message}`)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n<img width=\"678\" alt=\"スクリーンショット 2022-05-01 20 01 48\" src=\"https://user-images.githubusercontent.com/10682/166143430-a3b57db5-e558-4c7d-a6bf-85391a0fb209.png\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1222120293},{"id":1222451652,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/192","title":"test: add tests for builtin middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1222451652},{"id":1222796788,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/193","title":"feat: make everything(including Middleware) as `Handler`","body":"I have made middleware as `Handler`. So, **every handler is a `Handler`**. We can use middleware with app.**HTTP_METHOD**.\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.all('*', logger())\r\n\r\napp.post('/posts', bodyParse(), basicAuth(), (c) => {\r\n  const body = c.req.parsedBody\r\n  const post = createPost(body)\r\n  return c.text(`${post.id} is created!`, 201)\r\n})\r\n```\r\n\r\nAlso chained routes are available.\r\n\r\n```ts\r\napp.get('/posts', (c) => {\r\n  return c.text('POST LIST')\r\n}).post(bodyParse(), basicAuth(), (c) => {\r\n  //...\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1222796788},{"id":1222822448,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/194","title":"Document for `Env` variables","body":"Write a document on how to handle Environment variables for Cloudflare Workers. Like this:\r\n\r\n```ts\r\napp.post('/posts', async (c, next) => {\r\n  const auth = basicAuth({ username: c.env.NAME, password: c.env.PASS })\r\n  await auth(c, next)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1222822448},{"id":1223685764,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/195","title":"feat(compose): compose both the ordinary middlewares and response middlewares","body":"This PR is to make compose function to do composition for both ordinary middlewares and response middlewares, then we can make #189 a little more easier. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1223685764},{"id":1226037339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/196","title":"feat: multiple matching routes for `TrieRouter`","body":"The current router matches a single route. However, in this PR, the router `TrieRouter` matches multiple routes.\r\n\r\nSet up router:\r\n\r\n```ts\r\nrouter.add('ALL', '*', 'middleware a')\r\nrouter.add('GET', '*', 'middleware b')\r\nrouter.add('GET', '/entry', 'get entries')\r\n```\r\n\r\nAccess this path:\r\n\r\n```\r\nrouter.match('/entry')\r\n```\r\n\r\nThen matches these:\r\n\r\n* `middleware a`\r\n* `middleware b`\r\n* `get entries`\r\n\r\nUsing this router, we can use a normal handler and middleware handlers as the same handler. \r\n\r\n```ts\r\napp.post('/posts', cors(), (c) => c.text('Created!'))\r\n```\r\n\r\n## Performance\r\n\r\nThe performance has been degraded.\r\n\r\n**Current Router  TrieRouter**\r\n\r\n```\r\nhono x 883,006 ops/sec ±7.97% (66 runs sampled)\r\nitty-router x 165,710 ops/sec ±4.62% (92 runs sampled)\r\nsunder x 314,507 ops/sec ±3.17% (87 runs sampled)\r\nworktop x 213,234 ops/sec ±3.29% (85 runs sampled)\r\nFastest is hono\r\n✨  Done in 61.96s.\r\n```\r\n\r\n<img width=\"682\" alt=\"18b2dc5ec2eafe96099fb84baa7d1011\" src=\"https://user-images.githubusercontent.com/10682/166838292-f7b08de1-f355-46e4-9484-fa397c49d9ca.png\">\r\n\r\n**This Router TrieRouter**\r\n\r\n```\r\nhono x 666,840 ops/sec ±8.33% (68 runs sampled)\r\nitty-router x 160,915 ops/sec ±5.07% (86 runs sampled)\r\nsunder x 312,998 ops/sec ±4.79% (88 runs sampled)\r\nworktop x 216,689 ops/sec ±3.44% (86 runs sampled)\r\nFastest is hono\r\n✨  Done in 54.98s.\r\n```\r\n\r\n<img width=\"615\" alt=\"608d8034b30b64668e0dd01fd8ba282d\" src=\"https://user-images.githubusercontent.com/10682/166838346-2a83bc01-94dd-4762-84fb-7dc22ebc8ef9.png\">\r\n\r\n##  Advantages\r\n\r\nBut, this router has the advantages:\r\n\r\n1. Routing with this the router doesn't slow down so much if we added middleware handlers compared to using the current routers. Currently, it must have handlers for each middleware. It slow down proportionately.\r\n2. Make routing more simple. We don't have to use `use` for middleware. We can use `get`, `post`, `put`, or `delete` as same as a normal handler. Discuss in #189 \r\n\r\n## Concern\r\n\r\nIt's only `TrieRouter`. `RegExpRouter` is not yet implemeted multiple match routing.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1226037339},{"id":1226093201,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/197","title":"ci: ci any PR","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1226093201},{"id":1226269731,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/198","title":"test(compose): a move comprehensive test cases","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1226269731},{"id":1226444539,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/199","title":"Enable RegExpRouter","body":"RegExpRouter is disabled in the build for a feature development, will enable it before merge `develop` to `master` \r\nhttps://github.com/honojs/hono/pull/198/files#diff-3ae20d611c1c7263a9c1bce0449291ebfea1c5d578b3fcdbb596353ad885db25R8","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1226444539},{"id":1226807101,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/200","title":"How to structure large apis using hono?","body":"Traditionally using express I would have this file structure:\r\n\r\n```\r\n── routes\r\n    ├── index.js\r\n    ├── users.route.js\r\n── index.js  \r\n\r\n```\r\n\r\nAnd then in `users.route.js` I would define all my routes relating to users e.g.\r\n\r\n```\r\nconst router = express.Router();\r\n\r\nrouter\r\n  .route('/')\r\n  .post(auth('manageUsers'), validate(userValidation.createUser), userController.createUser)\r\n  .get(auth('getUsers'), validate(userValidation.getUsers), userController.getUsers);\r\n\r\nrouter\r\n  .route('/:userId')\r\n  .get(auth('getUsers'), validate(userValidation.getUser), userController.getUser)\r\n  .patch(auth('manageUsers'), validate(userValidation.updateUser), userController.updateUser)\r\n  .delete(auth('manageUsers'), validate(userValidation.deleteUser), userController.deleteUser);\r\n\r\nmodule.exports = router;\r\n```\r\n\r\nIn `routes/index.js` I would apply the base urls to all my defined routes and then in the top level `index.js` I would import and enable them:\r\n\r\n```\r\n// v1 api routes\r\napp.use('/v1', routes);\r\n```\r\n\r\nWhat is the recommended way of doing this in Hono?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1226807101},{"id":1227300189,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/201","title":"Proposal: Stacked routes as middleware","body":"I've noticed that we don't have a smart API for the application with a large structure. It's related to #200 \r\nSo, I propose yet another way for routing. That is stacking routes and using these as middleware.\r\n\r\n```ts\r\nimport { Hono, Route } from 'hono'\r\n\r\nconst app = new Hono()\r\nconst route = new Route()\r\n\r\nroute.get('/entry', handler, handler).post(handler, handler)\r\n\r\napp.use('/v1', route)\r\napp.fire()\r\n```\r\n\r\nThe routers `TrieRouter` and `RegExpRouter` do not have routes like a *stack* but *tree*. So, we can't use the ways directly, and we have to make the object to stack routes. `Route` object is for stacking in the above code.\r\n\r\n**It's just the idea**. If you have comments, please tell me.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1227300189},{"id":1227331017,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/202","title":"fix: handle not found response","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1227331017},{"id":1227506527,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/203","title":"feat: `app.route(path, Route)`","body":"Using `Route` object with `app.route` method, we can make the large structured applications more easily.\r\n\r\nFor example:\r\n\r\n```ts\r\n// route.ts\r\nimport { Route } from 'hono'\r\nimport { cors } from 'hono/cors'\r\nimport { poweredBy } from 'hono/powered-by'\r\n\r\nexport const route = new Route()\r\n\r\nroute\r\n  .get('/', (c) => c.text('List posts'))\r\n  .post(cors(), poweredBy(), (c) => {\r\n    return c.text('Create post')\r\n  })\r\n  .get('/:id{[0-9]+}', (c) => {\r\n    const id = c.req.param('id')\r\n    return c.text(`Your id is ${id}`)\r\n  })\r\n```\r\n\r\n```ts\r\n// index.ts\r\nimport { route } from './route'\r\n\r\nimport { Hono } from 'hono'\r\nconst app = new Hono()\r\n\r\napp.route('/v1', route)\r\n\r\napp.fire()\r\n```\r\n\r\nRelated #200 \r\nClose #201 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1227506527},{"id":1227779824,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/204","title":"fix: handling not found in `compose.ts`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1227779824},{"id":1228585245,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/205","title":"`Context.get` `Context.set` ","body":"For data sharing.\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.use('*', async (c, next) => {\r\n  c.set('name', 'foo')\r\n  await next()\r\n})\r\n\r\napp.get('/', (c) => {\r\n  const foo = c.get('name')\r\n  return c.text(`Hello ${foo}!`)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1228585245},{"id":1228737452,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/206","title":"[POC] multiple matching routes for RegExpRouter","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1228737452},{"id":1229581035,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/207","title":"How do you create middleware for a specific route and method?","body":"Say I wanted to validate the parameters for a post request using middleware but not affect the other methods like get etc, I would like to be able to do:\r\n\r\n```\r\nconst route = app.route('/users')\r\nroute.post('/', validate(userValidation.createUser), userController.createUser)\r\n```\r\n\r\nBut that isn't possible, the only way I can see to do it currently is:\r\n\r\n```\r\nconst route = app.route('/users')\r\napp.user('/users', validate(userValidation.createUser))\r\nroute.post('/', userController.createUser)\r\n```\r\n\r\nBut this does it for all methods in the `/users` route, I could check in the middleware for the route method but this isn't ideal. Is there a way to do this that I am missing?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1229581035},{"id":1229662581,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/208","title":"fix(router): fix `trie-router` bugs","body":"There were bugs in `trie-router`. I got the error with this code. Fixed it in this PR.\r\n\r\n```ts\r\napp.get('/:id/:action', async (c, next) => {\r\n  const id = c.req.param('id')\r\n  console.log(`Middleware  A: id is ${id}`)\r\n  await next()\r\n})\r\napp.get('/posts/:id', (c) => {\r\n  const id = c.req.param('id')\r\n  return c.text(`Route B: id is ${id}`)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1229662581},{"id":1230516417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/209","title":"docs: update readme wrangler2 no longer in beta","body":"Wrangler 2 is no longer in beta (https://github.com/cloudflare/wrangler2/releases/tag/wrangler%402.0.0) and can now be used directly as just `npx wrangler`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1230516417},{"id":1230759056,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/210","title":"Add template to Cloudflare repository","body":"Add Hono's starter template to `cloudflare/templates` <https://github.com/cloudflare/templates>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1230759056},{"id":1230767742,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/211","title":"Fix instruction for starter template","body":"`wrangler init` has been removed.  Use this command:\r\n\r\n```\r\nnpm init cloudflare my-app https://github.com/honojs/hono-minimal\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1230767742},{"id":1231006793,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/212","title":"Any concern adding contributors into the honojs org?","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1231006793},{"id":1231267991,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/213","title":"`HonoRequest`","body":"To make that Response supports the shortcuts such as `c.req.param`, `c.req.query`, and `c.req.header`, we use `declare global`.\r\n\r\n```ts\r\ndeclare global {\r\n  interface Request<ParamKeyType = string> {\r\n    param: (key: ParamKeyType) => string\r\n    query: (key: string) => string\r\n    header: (name: string) => string\r\n  }\r\n}\r\n```\r\n\r\nThis is good, but not better. We can use these methods in the Hono app, but in other environments, a `Request` object does not have `params`, `query`, and `header`, naturally. \r\n\r\nSo, I'm planning to make `HonoRequest` extending `Request` object. It is not necessary to make `HonoResponse`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1231267991},{"id":1231861842,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/214","title":"Tests are failed on Node v18.x","body":"Throw the errros about `crypto` on Node v18.x\r\n\r\n```\r\n FAIL  src/utils/jwt/jwt.test.ts\r\n  ● JWT › HS256 sign & verify & decode\r\n\r\n    TypeError: Value of \"this\" must be of type SubtleCrypto\r\n\r\n      73 |   alg: AlgorithmTypes = AlgorithmTypes.HS256\r\n      74 | ): Promise<ArrayBuffer> => {\r\n    > 75 |   const cryptoKey = await crypto.subtle.importKey(\r\n         |                                         ^\r\n      76 |     CryptoKeyFormat.RAW,\r\n      77 |     utf8ToUint8Array(secret),\r\n      78 |     param(alg),\r\n\r\n      at signing (src/utils/jwt/jwt.ts:75:41)\r\n      at Object.sign (src/utils/jwt/jwt.ts:95:64)\r\n      at Object.<anonymous> (src/utils/jwt/jwt.test.ts:74:17)\r\n...\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1231861842},{"id":1231903340,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/215","title":"feat(trie-router): error handling for duplicate param name","body":"apply the patch by @usualoma  https://github.com/honojs/hono/issues/189#issuecomment-1121773536","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1231903340},{"id":1231909412,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/216","title":"Readmap to v1.2.0","body":"- [x] Handler and middlewares are treated as the same things #193 \r\n- [x] `app.route(path, Route)` #203 \r\n- [x] Multi match `trie-router` #196 \r\n- [x] Multi match `reg-exp-router` #220 \r\n- [x] Write document","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1231909412},{"id":1231912082,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/217","title":"Roadmap to v1.3.0","body":"I don't know if we will do all things. These are just ideas.\r\n\r\n- [x] ~~Support Deno~~ #184 **Later**\r\n- [x] `Context.get` `Context.set` #205 \r\n- [x] ~~`HonoRequest`~~ #213  **Later**\r\n- [x] deprecate Route #237 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1231912082},{"id":1232497214,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/218","title":"Anyway to access an object for query parameters and url parameters?","body":"I know you can access all the parameters in a url, `www.url.com/?param1=hey&param2=three`, by doing:\r\n\r\n```\r\nc.req.query('param1')\r\nc.req.query('param2')\r\n```\r\n\r\nBut is there anyway of just accessing an object for all the available parameters without having to know their names in advance?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1232497214},{"id":1232658192,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/219","title":"perf: make it faster","body":"Make it faster. I've done below:\r\n\r\n* Do not use `#` for defining property. Rewrite `#property` => `private _property`\r\n* Improve `URL_REGEXP`.\r\n* Improve evaluation for values.\r\n\r\nBenchmark:\r\n\r\n```\r\nhono - new x 740,166 ops/sec ±2.66% (78 runs sampled)\r\nhono - original x 635,008 ops/sec ±6.56% (68 runs sampled)\r\nitty-router x 166,317 ops/sec ±2.88% (93 runs sampled)\r\nsunder x 333,249 ops/sec ±1.70% (96 runs sampled)\r\nworktop x 216,762 ops/sec ±2.85% (89 runs sampled)\r\nFastest is hono - new\r\n✨  Done in 77.53s.\r\n```\r\n<img width=\"570\" alt=\"スクリーンショット 2022-05-11 22 30 09\" src=\"https://user-images.githubusercontent.com/10682/167862891-0abc20ea-74c9-40f1-bd22-bfb1f4ea7ceb.png\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1232658192},{"id":1233287182,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/220","title":"feat: multiple matching routes for RegExpRouter","body":"### Architecture\r\n\r\n#### Middleware pre-bundling\r\n\r\n```\r\nrouter.add('ALL', '*', 'middleware a')\r\nrouter.add('GET', '*', 'middleware b')\r\nrouter.add('GET', '/entry/*', 'middleware c')\r\nrouter.add('GET', '/entry', 'get entries')\r\nrouter.add('GET', '/entry/:id', 'get entry')\r\n```\r\n\r\nPre-bundle these routings as follows ( for GET request)\r\n\r\n| path | bundled targets |\r\n| ------------- | ------------- |\r\n| `*`  | `['middleware a', 'middleware b']`  |\r\n| `/entry/*`  | `['middleware a', 'middleware b', 'middleware c']`  |\r\n| `/entry`  | `['middleware a', 'middleware b', 'middleware c', 'get entries']`  |\r\n| `/entry/:id`  | `['middleware a', 'middleware b', 'middleware c', 'get entry']`  |\r\n\r\nThis way, all middleware and handlers can be executed with a single regular expression matching.\r\n\r\n#### Primary matchers and secondary matchers\r\n\r\nAlso in this case, the final match is likely to be the one that does not end up with a `*` and does not have routing lower than itself.\r\n\r\n* Target for first match (in primaryMatchers)\r\n    * `/entry`\r\n    * `/entry/:id`\r\n* Fall back on failure (in secondaryMatchers)\r\n    * `*`\r\n    * `/entry/*`\r\n\r\nThis allows for faster discovery of more likely routes.\r\n\r\n#### Ambiguous routes\r\n\r\nThe following cases cannot be completely determined in advance, so when this case is detected, the matching routine is changed to a multiple matching. When switched to this one, the speed is slower. (Still faster than a typical router, but slower than a TrieRouter.)\r\n\r\nHowever, I do not believe that most real-world routing will be determined to be \"ambiguous\".\r\n\r\n```\r\nrouter.add('GET', '/:user/entries', 'get user entries')\r\nrouter.add('GET', '/entry/:name', 'get entry')\r\n```\r\n\r\n### TODO\r\n\r\nThe test passes (although some test data needs to be modified) even after replacing the default with RegExpRouter. Thus, I think it works fine in the general case. However, RegExpRouter is quite complex now and we will need to add more tests in the future.\r\n\r\n### Benchmark\r\n\r\nThe following results were obtained in my environment.\r\n\r\n```\r\nhono x 359,641 ops/sec ±4.01% (75 runs sampled)\r\nhono with RegExpRouter x 691,034 ops/sec ±5.07% (65 runs sampled)\r\nitty-router x 73,662 ops/sec ±3.07% (81 runs sampled)\r\nsunder x 133,993 ops/sec ±1.66% (90 runs sampled)\r\nworktop x 80,886 ops/sec ±2.40% (81 runs sampled)\r\nFastest is hono with RegExpRouter\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1233287182},{"id":1233494457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/221","title":"for v1.2.0","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1233494457},{"id":1233785935,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/222","title":"fix: Some RegExpRouter bugs","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1233785935},{"id":1234482668,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/223","title":"feat(reg-exp-router): error handling for duplicate param name","body":"The actual check feature was added by bd42c418100a28bba2cd584ad43424e48325baf5;  f969924a144705663d6be42294e77af40135b01a and 2baa25302d63250af7155212471d98a844eb86d7 are optional.\r\n\r\nI made one PR because it has to do with the timing of the check. If we cannot agree on the implementation of an optional part, I will reconsider.\r\n\r\n\r\n### Check for duplicate parameter names bd42c418100a28bba2cd5\r\n\r\nI think it's OK because it's implemented honestly.\r\n\r\n\r\n### Add router.prepare and invoke #router.prepare() in hono.fire f969924a144705663d6be42294e77af40135b01a and 2baa25302d63250af7155212471d98a844eb86d7\r\n\r\nThe RegExpRouter architecture makes it difficult to perform detailed routing checks during the `add()` phase, so we would like to perform the checks later, when all routing information is available. This would be a different behavior than the TrieRouter, but I think that the different timing of detection would be permissible with respect to this issue.\r\n\r\nWhile this check can do on the \"initial request\" as it has been in the current master branch, I think it would be better if it could do on prior phase.\r\n\r\nAs such, I hope to have an API that allows the router to know that `hono.fire()` has been executed.\r\n\r\nThis API also allows control over when to `delete this.routeData`, so that RegExpRouter, like TrieRouter, can call `match()` and then `add()`. This makes it easier to write tests.\r\n\r\n```typescript\r\nrouter.add('GET', '/:type/:action', 'foo')\r\nconst res = router.match('GET', '/posts/123')\r\nexpect(res).not.toBeNull()\r\nrouter.add('GET', '/posts/:id', 'bar') // error on the current branch. API would allow us to do this.\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1234482668},{"id":1234601599,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/224","title":"feat(reg-exp-router): error handling for duplicate param name","body":"Removed unnecessary features from #223.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1234601599},{"id":1234700771,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/225","title":"docs: remove Japanese README","body":"It’s a bother we have to rewrite the Japanese README if the English reamde is changed. I've decided not to write Japanse README.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1234700771},{"id":1235314681,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/226","title":"feat(ctx): enable set and get in ctx, to hold values","body":"Resolve https://github.com/honojs/hono/issues/205","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1235314681},{"id":1235816663,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/227","title":"fix: fix basic auth middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1235816663},{"id":1235858396,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/228","title":"chore: absolute import to relative import","body":"Disable absolute import. Use relative import. To support Deno, must be *relative import*.\r\nAnd, it was not so convenient.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1235858396},{"id":1235889047,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/229","title":"fix(typo): update readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1235889047},{"id":1236034457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/230","title":"TypeError: Cannot read properties of undefined (reading 'set')","body":"Hey guys,\r\n\r\nafter updating hono from v1.1.1 to 1.2.1, I'm getting the following error:\r\n\r\n<img width=\"468\" alt=\"Screen Shot 2022-05-14 at 10 44 40 PM\" src=\"https://user-images.githubusercontent.com/3104587/168439051-1b63957d-7ecb-4e92-80c4-4e14b347dacf.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236034457},{"id":1236145342,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/231","title":"Fiendly error messages","body":"Some error messages are not clear. For example:\r\n\r\nCode:\r\n```ts\r\napp.get('/', poweredBy(), (c) => {\r\n  c.text('Hello! Hono!') // <--- forgot`return`\r\n})\r\n```\r\n\r\nError message:\r\n```\r\nTypeError: Cannot read properties of undefined (reading 'headers')\r\n    at worker.js:608:11\r\n    at async _Hono.dispatch (worker.js:574:17)\r\n8:51:41 GET / 500\r\n```\r\n\r\nUser can't understand the reason for throwing the error. It has to throw a friendly message such as`Forget return Response!`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236145342},{"id":1236172455,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/232","title":"Freshly generated typescript project gives typescript warnings","body":"I'm seeing some typescript warnings/errors when using middlewares and default typescript setup generated by wrangler:\r\n\r\n```\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(path: string, ...middleware: Handler<string, Env>[]): Hono<Env, \"\">', gave the following error.\r\n    Argument of type '(c: Context<string, Env>, next: Next) => Promise<void>' is not assignable to parameter of type 'Handler<string, Env>'.\r\n      Types of parameters 'next' and 'next' are incompatible.\r\n        Type 'Next | undefined' is not assignable to type 'Next'.\r\n          Type 'undefined' is not assignable to type 'Next'.\r\n  Overload 2 of 2, '(...middleware: Handler<string, Env>[]): Hono<Env, \"\">', gave the following error.\r\n    Argument of type 'string' is not assignable to parameter of type 'Handler<string, Env>'.\r\n```\r\n\r\n```\r\nCannot invoke an object which is possibly 'undefined'.\r\n```\r\n\r\n<img width=\"375\" alt=\"Screen Shot 2022-05-15 at 10 00 29 AM\" src=\"https://user-images.githubusercontent.com/3104587/168455214-a14955ef-8b31-4588-a682-b24306deee12.png\">\r\n\r\nPlease see full code at https://github.com/patotoma/hono-example","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236172455},{"id":1236206094,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/233","title":"fix: fix type check warnings","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236206094},{"id":1236404296,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/234","title":"Tweaks return values of functions for request parameters.","body":"If no arguments are specified, returns an object containing all parameters.\r\nThis is just an idea, but what about being able to write the following.\r\n\r\n```typescript\r\napp.get('/posts/:id', (c) => {\r\n  const { id } = c.req.param()\r\n  const { q, lang } = c.req.query()\r\n  const {\r\n    'Content-Type': contentType,\r\n    'X-Custom': custom,\r\n   } = c.req.header()\r\n}))\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236404296},{"id":1236467804,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/235","title":"fix(url): fix about merging path","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236467804},{"id":1236612913,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/236","title":"[BREAKING] Remove `Route`, use `Hono` for `app.route(path, app)`","body":"On second thought, we don't need the `Route` object.\r\n\r\nCurrently, we can write like this for grouping routes:\r\n\r\n```ts\r\nconst api = new Route()\r\n\r\napi.get('/posts', (c) => c.text('list'))\r\napi.post('/posts', (c) => c.text('create'))\r\n\r\napp.route('/v1', api)\r\n```\r\n\r\nBut, it's not necessary it is a `Route` object. We can use the `Hono` object instead of `Route`.\r\n\r\n```ts\r\nconst api = new Hono()\r\n\r\napi.get('/posts', (c) => c.text('list'))\r\napi.post('/posts', (c) => c.text('create'))\r\n\r\napp.route('/v1', api)\r\n```\r\n\r\nIf it comes true, we make `Route` obsolete and simplify the code.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236612913},{"id":1236741254,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/237","title":"feat: [BREAKING] deprecate `Route`, use `Hono` instead","body":"`Route` will be ***obsolete***! in this PR.\r\nFor grouping routes, use `Hono` instead.\r\n\r\n```ts\r\n// const api = new Route() <--- obsolete\r\nconst api = new Hono()\r\n\r\napi.get('/posts', (c) => c.text('list'))\r\napi.post('/posts', (c) => c.text('create'))\r\n\r\napp.route('/v1', api)\r\n```\r\n\r\n\r\nClose #236 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1236741254},{"id":1237142021,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/238","title":"docs: update readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1237142021},{"id":1237145399,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/239","title":"for v1.3.0","body":"Close #236  #217 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1237145399},{"id":1237186595,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/240","title":"Type annotation for named parameters","body":"I'm now building my first Cloudflare Workers app, and the experience with Hono has been great so far!\r\n\r\nDuring the development, I wish I could annotate types for named parameters. For example, if a named parameter is in the form of `:param@number`, `c.req.param(\"param\")` evaluates to a value of type `number`. If no type is annotated (i.e., `:param`), its type should fall back to `string`. This is inspired by a similar feature of [aspida](https://github.com/aspida/aspida).\r\n\r\nWith this syntax, users don't need to validate or convert number parameter on their own, so the code becomes simpler and less. Would it be possible to add this feature?\r\n\r\nBelow is a type-level PoC of my proposal ([TS Playground link](https://www.typescriptlang.org/play?#code/C4TwDgpgBAogHgQwLZgDYQEoHsCuxoC8UARAPQJgCWpAXAngBZYBOtwlw6AAgM7DOUAdgHNaYAQGMIXQTiQAjCKxpgEzZFyEA3BKkoATYgG4AUPogTUa6BKyC+UYRGD5mASRSoaUADwmoUNh40BBw+IL6PFB8AiIANP5QAApqyFCh4ZGwskgp6kg8PkH4AHwmJQAUiar53nnIJgCUUAQlUG6CAGZK9UgAKuAQAGLMWEjFEEW4+HHJqUglprb2wI7Ori2+velhEBFRMDm9hfDIaJjTECWVNch1882tiU4uSh5oPqeeF8GzvTcPUwmZYOejAJjMTYvVwVYhgiHERqmUikAIBAB6AH5gXYHOxOIQ1q9mLD8ehEcjUWisTiVlBxJQpFD1kpYQypBSTCi0VAaSDVrckMziWz5pzudTsdyuMAeABaUKQCTABXMUbMWkOQR2eCUPh7VZEaGs4jawQKuB68LATkmUCQdpdHrzAaQEZjCZ+AITHaZKIxITCBIBbYZPZZQ5yY5TYJlNpEADizldw1GSAA8vIAFYWYAAVUElDsnyOLsGhQAymgOJ6Jtc-vNFiYuajI7l5oUyDROlgsLR5GoZHJFMxiG05XK2sQe1hiFAAD4kAeju2DbJRjsx-C+8P+-iB+Pr9v5FOFRJVvTAWuXOM7-ZQITdSF9RKYqB9O9ZF88t8AawgIBYJ076JAE3iCBAWhKIk4GQUoQLckmwApu6GbZrmBZFoIPgAN5QDO3gBiIUAAL4LlAeHLuBw5KKRszEMuY5QBObQ5COq4OkhKFppmObKphxZ9LMADSn57rEwiHh+Yb3t+UBvqJMlZP+gHAXJARvn0ADawkALqgVAsFQRqYFQBBxkIa2pYnuWPhacQ3a9sQ9E0MuQ4KEoxC6eOk4UfhvaEfuxFkYulFqNRHmQiRHHQG2vSnj4xxidEQXCFp3mbDhiRaW4D6CFAKlAXM+Q8Lp9wlTlunJQABjQAAkOGPrRAByyAQCRXANU1z6DCR1UGW+GAWCw+g+K1SAQLMKbjRAfRYEkAhIBwlBQT4KbXAZ5XIDwlU1fVjVOpCM19QNgTDcwo0zbMRGSZtZlwcwpgkVpbFKLpQL2tA01tXNC2UEt7CrdJuz3jdUnJcQN3EK+KUSTB74Q69K4aWZNEmYZ90Wc2n1QBeNaXEUyVg5sGA1aQXWHVAAASEAIPoJHkwdT5nXwJ0o1pNN07MAB0vN41eBPVYzQ2s9VJT6aZpNKVEQsU8z2BYMAbPyVAWkK8AEsY+lphAA)). I'm not familiar with the internal of Hono yet, so not sure about how easy/difficult it is to integrate this into your codebase.\r\n\r\n```ts\r\ntype ExampleRoute = \"/api/:author/:title@string/:price@number/:param@invalid\";\r\ndeclare const getterImpl: <\r\n  Route extends string,\r\n  Param extends EnumParams<Route>\r\n>(\r\n  param: Param\r\n) => InferParamTypeFromRoute<Route, Param>;\r\nconst getter = <Param extends EnumParams<ExampleRoute>>(param: Param) =>\r\n  getterImpl<ExampleRoute, Param>(param);\r\n\r\nconst author = getter(\"author\"); // string\r\nconst title = getter(\"title\"); // string\r\nconst price = getter(\"price\"); // number\r\nconst param = getter(\"param\"); // never\r\n// @ts-expect-error\r\nconst nonExistent = getter(\"non-existent\");\r\n\r\ntype InferParamTypeFromRoute<\r\n  Route extends string,\r\n  Param extends EnumParams<Route>\r\n> = GetTypeFromObjectUnion<EnumParamTypes<SplitRoute<Route>>, Param>;\r\n\r\n// EnumParams<\"/:foo/:bar@number\"> --> \"foo\" | \"bar\"\r\ntype EnumParams<Route extends string> = EnumParamTypes<\r\n  SplitRoute<Route>\r\n> extends infer T\r\n  ? T extends T\r\n    ? keyof T\r\n    : never\r\n  : never;\r\n\r\n// GetTypeFromObjectUnion<{ foo: string } | { bar: number }, \"bar\"> --> number\r\ntype GetTypeFromObjectUnion<T, K extends string> = T extends T\r\n  ? K extends keyof T\r\n    ? T[K]\r\n    : never\r\n  : never;\r\n\r\n// EnumParamTypes<[\":foo\", \":bar@number\"]> --> { foo: string } | { bar: number }\r\ntype EnumParamTypes<Params extends string[]> = {\r\n  [I in keyof Params]: Params[I] extends `:${infer Name}@${infer Type}`\r\n    ? Record<Name, TypeNameToPrimitive<Type>>\r\n    : Params[I] extends `:${infer Name}`\r\n    ? Record<Name, string>\r\n    : never;\r\n}[number];\r\n\r\ntype TypeNameToPrimitive<T extends string> = T extends \"string\"\r\n  ? string\r\n  : T extends \"number\"\r\n  ? number\r\n  : never;\r\n\r\ntype SplitRoute<R extends string> = R extends `/${infer Head}/${infer Rest}`\r\n  ? [Head, ...SplitRoute<`/${Rest}`>]\r\n  : R extends `/${infer Root}`\r\n  ? [Root]\r\n  : [];\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1237186595},{"id":1237843925,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/241","title":"fix: do not include test files in npm packages","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1237843925},{"id":1238896138,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/242","title":"`c.body` accept `null` for 204 response","body":"```ts\r\nreturn c.text('no content', 204) // <--- Error! - 204 response must not have body\r\n```\r\n\r\nBut now, `c.body` not accept `null`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1238896138},{"id":1239100487,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/243","title":"Serve static site with a proxy","body":"Im trying to serve a static site as well as use a proxy of the same domain.\r\n\r\n```\r\nhono.use('/*', serveStatic({ root: './' }))\r\nhono.use(\r\n  '/proxy/*',\r\n  cors({\r\n    origin: 'http://exampleapi.com,\r\n    allowHeaders: ['X-Custom-Header', 'Upgrade-Insecure-Requests'],\r\n    allowMethods: ['POST', 'GET', 'OPTIONS'],\r\n    exposeHeaders: ['Content-Length', 'X-Kuma-Revision'],\r\n    maxAge: 600,\r\n    credentials: true,\r\n  })\r\n)\r\n```\r\n\r\nHowever the requests to `proxy` are trying to serve the static files, is there a way i can do this?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239100487},{"id":1239276681,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/244","title":"fix(serve-static): enable with other middleware","body":"Close #243","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239276681},{"id":1239282836,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/245","title":"fix(Context): `c.body()` accept null for 204 response","body":"Fix #242","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239282836},{"id":1239298767,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/246","title":"fix(route): fix `app.route()` matter","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239298767},{"id":1239378595,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/247","title":"serveStatic not working (ReferenceError: __STATIC_CONTENT_MANIFEST is not defined)","body":"### Info\r\n\r\n- hono : 1.3.3\r\n- wrangler : v2\r\n\r\n\r\n### Wrangler configuration - \r\n\r\n```toml\r\nname = \"test\"\r\nmain = \"src/index.ts\"\r\ncompatibility_date = \"2022-05-13\"\r\n\r\nkv_namespaces = [\r\n  { binding = \"ARNAB\", preview_id = \"\", id=\"\" }\r\n]\r\n\r\n[site]\r\nbucket =  \"./public\"\r\n```\r\n\r\n### Code - \r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { serveStatic } from \"hono/serve-static\";\r\nimport { renderSSR } from \"nano-jsx\";\r\nimport Home from \"./pages/Home\";\r\n\r\nconst app = new Hono();\r\n\r\napp.use(\"/img/*\", serveStatic({ root: \"./\" }));\r\napp.get(\"/\", async (ctx) => ctx.html(renderSSR(Home)));\r\n\r\nexport default app;\r\n```\r\n\r\n### Assets : \r\n\r\n```\r\n./public\r\n└── img\r\n    ├── cf.png\r\n```\r\n\r\n# Error : \r\n\r\n`GET /img/cf.png`  crashes with an internal server error.\r\n\r\n```\r\n8:46:17 AM GET /img/cf.png 500\r\nReferenceError: __STATIC_CONTENT_MANIFEST is not defined             \r\n[1]     at getContentFromKVAsset (index.js:718:9)\r\n[1]     at index.js:869:70\r\n[1]     at dispatch (index.js:301:34)\r\n[1]     at index.js:286:16\r\n[1]     at Hono2.dispatch (index.js:660:27)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239378595},{"id":1239454016,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/248","title":"utils/encode exception in latest release","body":"Create a issue in case someone found this issue too, I'm trying to find the root-cause. \r\n```sh\r\n✘ [ERROR] [plugin checkForNodeBuiltins] Detected a Node builtin module import while Node compatibility is disabled.\r\nAdd node_compat = true to your wrangler.toml file to enable Node compatibility.\r\n\r\n    node_modules/hono/dist/utils/encode.js:42:35:\r\n      42 │         const { Buffer } = require('buffer');\r\n         ╵                                    ~~~~~~~~\r\n\r\n  This error came from the \"onResolve\" callback registered here:\r\n\r\n    ../../../../.npm/_npx/dce38835dbc726fc/node_modules/wrangler/wrangler-dist/cli.js:109002:11:\r\n      109002 │     build6.onResolve({\r\n             ╵            ~~~~~~~~~\r\n\r\n    at setup (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/wrangler/wrangler-dist/cli.js:109002:12)\r\n    at handlePlugins (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/esbuild/lib/main.js:843:23)\r\n    at Object.buildOrServe (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/esbuild/lib/main.js:1137:7)\r\n    at /Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/esbuild/lib/main.js:2079:17\r\n    at new Promise (<anonymous>)\r\n    at Object.build (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/esbuild/lib/main.js:2078:14)\r\n    at Object.build (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/esbuild/lib/main.js:1927:51)\r\n    at bundleWorker (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/wrangler/wrangler-dist/cli.js:109030:33)\r\n    at build6 (/Users/minhuang/.npm/_npx/dce38835dbc726fc/node_modules/wrangler/wrangler-dist/cli.js:109124:75)\r\n\r\n\r\n✘ [ERROR] Build failed with 1 error:\r\n\r\n  node_modules/hono/dist/utils/encode.js:42:35: ERROR: [plugin: checkForNodeBuiltins] Detected a\r\n  Node builtin module import while Node compatibility is disabled.\r\n  Add node_compat = true to your wrangler.toml file to enable Node compatibility.\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239454016},{"id":1239594964,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/249","title":"`serve-static` middleware for ES Module mode","body":"Now, the `serve-static` middleware is enabled only in Service Worker mode. #247 \r\nWe have to make the `serve-static` supports ES module mode.\r\nBut, in ES module mode, `__STATIC_CONTENT_MANIFEST` is not global variable. We have to `import`:\r\n\r\n```ts\r\nimport manifest from '__STATIC_CONTENT_MANIFEST'\r\n```\r\n\r\nSo, we want to do\r\n\r\n```\r\nService Workers mode --> get variables from `__STATIC_CONTENT_MANIFEST`\r\nES module mode --> do import `__STATIC_CONTENT_MANIFEST`\r\n```\r\n\r\nBut, it's difficult to switch the behavior, because dynamic import is not supported Cloudflare Workers.\r\n\r\nI have the strategy. Emit two pattern js file: `js` and `mjs`. And write like this to `package.json`\r\n\r\n```json\r\n    \"./serve-static\": {\r\n      \"require\": \"./dist/middleware/serve-static/index.js\",\r\n      \"import\": \"./dist/middleware/serve-static/index.mjs\"\r\n    },\r\n```\r\n\r\nThen...\r\n\r\n```\r\n`js` ---> will be loaded Service Worker mode,\r\n`mjs` --->  will be loaded ES module mode\r\n```\r\n\r\nI think we can make it depending on the TS settings.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1239594964},{"id":1240817512,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/250","title":"feat: serve-static middleware supports Module Worker mode","body":"Close #247 #249 \r\n\r\n`serve-static` did not work in Module Worker mode.\r\nThis PR enables `serve-static` middleware In Module Worker mode, import `hono/serve-static.module` instead of `hono/serve-static`.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { serveStatic } from 'hono/serve-static.module' // <---\r\n\r\nconst app = new Hono()\r\napp.use('/static/*', serveStatic({ root: './' }))\r\n\r\nexport default app\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1240817512},{"id":1240819813,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/251","title":"`mustache` middleware for Module Worker mode","body":"It does not work well in Module Worker mode.\r\nSimilar to #249 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1240819813},{"id":1241004294,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/252","title":"feat: mustache middleware supports Module Worker mode","body":"Close #251 \r\n\r\n`mustache` middleware did not work in Module Worker mode.\r\nThis PR enables `mustache` middleware In Module Worker mode, import `hono/mustache.module` instead of `hono/mustache`.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { mustache } from 'hono/mustache.module' // <---\r\n\r\nconst app = new Hono()\r\napp.use('*', mustache())\r\n// ...\r\n\r\nexport default app\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1241004294},{"id":1242456536,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/253","title":"feat: Deno support!!","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1242456536},{"id":1242823140,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/254","title":"fix: throwing errors in Wrangler 2.0.6","body":"Fix throwing errors in Wrangler **2.0.6**. Don't use `dynamic import`.\r\n\r\nClose #248","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1242823140},{"id":1243958039,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/255","title":"refactor(context): `c.res` is not optional","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1243958039},{"id":1243965616,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/256","title":"perf: do not set `statusText` by default","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1243965616},{"id":1243994263,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/257","title":"req.query does not support multiple values for same key","body":"👋 If I make a request that uses the same query param key more than once, it doesn't seem like Hono has a way to handle that?\r\n\r\nSay I make a request with `?test=1&test=2&test=3`, then `req.query('test')` will be `1` and `req.query().test` will be `3`.\r\n\r\nI believe there should be a way to get all values associated with a key, similar to how `getAll` works for `URLSearchParams`. (`new URLSearchParams('test=1&test=2&test=3').getAll('test')` returns an array of `['1', '2', '3']`).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1243994263},{"id":1244046954,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/258","title":"Colliding async routes don't work as expected","body":"👋 If you have two synchronous routes that overlap as I'd expect:\r\n\r\n```js\r\napp.get('/a', c => c.text('a'));\r\napp.get('/:slug', c.text('slug'));\r\n```\r\n\r\nRequesting `/a` returns `a`, and requesting `/b` returns `slug`.\r\n\r\nHowever, if these routes are asynchronous, then things don't behave correctly:\r\n\r\n```js\r\napp.get('/a', async c => {\r\n    await new Promise(resolve => setTimeout(resolve, 10));\r\n    return c.text('a');\r\n});\r\napp.get('/:slug', async c => {\r\n    await new Promise(resolve => setTimeout(resolve, 10));\r\n    return c.text('slug');\r\n});\r\n```\r\n\r\nRequesting either `/a` or `/b` results in `slug` being returned. Would be great to see this fixed so that there is a deterministic priority for route matching that is consistent.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244046954},{"id":1244092039,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/259","title":"fix(compose): fix a bug for colliding async routes","body":"Fix #258 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244092039},{"id":1244097297,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/260","title":"feat: multiple query values `c.req.queries`","body":"Close #257 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244097297},{"id":1244120989,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/261","title":"fix(context): initialize status and header values after `newResponse`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244120989},{"id":1244148682,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/262","title":"Processed handler should be only one","body":"In the Iusse #189 , we decided to treat handlers and middleware as the same. We can write like these:\r\n\r\n```ts\r\napp.post('/a', basicAuth(), bodyParse(), (c) => c.text('a)')\r\n```\r\n\r\nThis is good.\r\n\r\nHow about **Handler + Handler** pattern.\r\n\r\n```ts\r\napp.get('/a', (c) => {\r\n  console.log('a')\r\n  return c.text('a')\r\n})\r\n\r\napp.get('/:slug', (c) => {\r\n  console.log('slug')\r\n  return c.text('slug')\r\n})\r\n```\r\n\r\nThis Response body will be `a`. This is expected.\r\n\r\n**BUT**, in #258  I notice that every handler is processed. `console.log` emits `slug`, `a`.\r\n\r\nThe reason:\r\n\r\n* All routes including middleware are treated as the same.\r\n* A path will match multiple routes = handlers or middleware.\r\n* If multiple handlers are matched, every handler will be invoked.\r\n* Route returning Response object is determined as the handler.\r\n* We don't know whether the route is a handler or Middleware until dispatching  😕 \r\n\r\nI think this design is not so good. Only one handler should be invoked. In this case, `console.log` should emit only `a`. So, we have to:\r\n\r\n* Determine handler or middleware.\r\n* Make only one handler invoked.\r\n\r\nHow can we do that?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244148682},{"id":1244506063,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/263","title":"Prometheus middleware","body":"It'd be great to have a prometheus middleware to help collect the metrics of hono service data.","state":"closed","labels":"[\"middleware\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244506063},{"id":1244531951,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/264","title":"Next is called multiple times","body":"Hello, I've had a lot of fun with this framework!\r\n\r\nOne issue I ran into was when I tried to make a dynamic handler, here is an example\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\ninterface Environment {}\r\nconst app = new Hono<Environment>();\r\n\r\napp.get('/:id', async (c, next) => {\r\n  let id = c.req.param('id');\r\n  if (id == 'hello') {\r\n    return c.text('Hi!');\r\n  } else {\r\n    return await next();\r\n  }\r\n});\r\napp.notFound((c) => {\r\n  console.log(`${c.req.url} not found`)\r\n  return c.text('NOT FOUND', 404)\r\n});\r\nexport default app;\r\n```\r\n\r\nThere are two issues\r\n1. Typescript does not like a handler with type `Promise<Response | void>`\r\n2. Next is called multiple times\r\n\r\n```\r\nError: next() called multiple times\r\n    at dispatch (index.js:245:35)\r\n    at index.js:262:21\r\n    at async Hono2.dispatch (index.js:625:21)\r\n```\r\n\r\nI would expect that it continues and runs the not found handler.\r\n\r\nWhen it matches, this handler works\r\n<img width=\"298\" alt=\"image\" src=\"https://user-images.githubusercontent.com/83187359/169738908-7ae3aaf5-9801-4503-9773-f3d08818bc81.png\">\r\n\r\nBut otherwise it responds with Internal Server Error","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1244531951},{"id":1245791765,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/265","title":"Update README","body":"- [ ] `ENV`\r\n- [ ] File size, bundle size","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1245791765},{"id":1246628926,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/266","title":"fix(jwt): ensure the request does not continue if the jwt token is invalid or expired","body":"The current JWT middleware checks the token only after the request has run (because `await next()` is run first). I think this means that whatever code is in your handler is called, _even if_ the JWT token is invalid or expired. \r\n\r\nThis PR changes the behaviour to bail out of the request if the token validation fails.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1246628926},{"id":1247051815,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/267","title":"feat: adoption of a new sort order for routing in RegExpRouter","body":"Implementation of the following specifications.\r\n\r\n* https://github.com/honojs/hono/issues/262#issuecomment-1134747110\r\n* https://github.com/honojs/hono/issues/262#issuecomment-1135232294","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1247051815},{"id":1247114417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/268","title":"refactor(router): Make Router an interface, not a class","body":"This PR includes BREAKING changes.\r\n\r\nCurrently, there is one router per hono instance. With this specification, I think it would be more convenient to simply pass the object rather than the class.\r\n\r\nI would hope to be able to write the following\r\n\r\n```typescript\r\nconst app1 = new Hono({ router: new MyCustomRouter() })\r\nconst app2 = new Hono({ router: new MyCustomRouter(initOptions) })\r\n\r\nfunction newStaticRouter<T>() {\r\n  const routes = {}\r\n  return {\r\n    add(method: string, path: string, handler: T) {\r\n      routes[`${method}:${path}`] = { handlers: [handler], params: {} }\r\n    }\r\n    match(method: string, path: string) {\r\n      return routes[`${method}:${path}`] || null\r\n    }\r\n  }\r\n}\r\nconst app3 = new Hono({ router: newStaticRouter() })\r\n```\r\n\r\nOn the other hand, however, I think there are advantages to being a class, and I would agree with you even if you choose not to adopt this PR.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1247114417},{"id":1247277522,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/269","title":"feat(trie-router) : Routing with order specification","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1247277522},{"id":1247803609,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/270","title":"env vars with miniflare","body":"Hi. I need help making hono's environment variables work with miniflare.\r\n Here is a snippet of my code :\r\n\r\n**wrnagler.toml**\r\n```toml\r\n...\r\n[[rules]]\r\ntype = \"ESModule\"\r\nglobs = [\"**/*.ts\"]\r\n\r\n[build]\r\ncommand = \"yarn build\"\r\n\r\n[vars]\r\n# The `cache-control` header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control. Optional, the `cache-control` header is omitted if unset.\r\nCACHE_CONTROL = \"max-age=86400\"\r\nAPI_URL = \"***https://api.paystack.co***\"\r\nENABLE_AUTH_CHECKER = false\r\n\r\n[env.production.vars]\r\nENABLE_AUTH_CHECKER = true\r\n\r\n[miniflare]\r\nlive_reload = true\r\nwatch = true\r\n# https = true\r\n...\r\n```\r\n\r\n**package.json**\r\n```json\r\n...\r\n \"scripts\": {\r\n    \"build\": \"esbuild --bundle --sourcemap --minify --outdir=dist ./src/index.ts\",\r\n    \"test\": \"jest --verbose\",\r\n    \"validate\": \"jest ./validation/* --verbose\",\r\n    \"dev\": \"miniflare\",\r\n    \"deploy\": \"wrangler publish src/index.ts\",\r\n    \"mf\": \"miniflare\"\r\n  },\r\n...\r\n```\r\n\r\nTypescript code\r\n```ts\r\n// src/types.ts\r\nexport interface Env {\r\n  ENABLE_AUTH_CHECKER: boolean;\r\n  API_URL: string;\r\n  CACHE_CONTROL: string;\r\n  API_KEY: string;\r\n  SECRET_KEY: string;\r\n}\r\n\r\n// src/index.ts\r\n...\r\nimport {Env} from \"./types\";\r\n\r\nexport const app = new Hono<Env>();\r\n...\r\n\r\n// auth middleware\r\napp.use(\"/api/*\", async (ctx, next) => {\r\n  console.log(\"vars\", { env: ctx.env });\r\n\r\n  if (ctx.env.ENABLE_AUTH_CHECKER) {\r\n    // code inspired by https://github.com/cloudflare/templates/blob/0f62f56ba31389def65343c99d091222d4e7a0af/worker-worktop/src/utils/token.ts#L18\r\n    const auth = ctx.req.headers.get(\"Authorization\");\r\n    if (!auth) {\r\n      ctx.text('Missing \"Authorization\" header', 401);\r\n      return;\r\n    }\r\n\r\n    const [scheme, key] = auth.split(/\\s+/g);\r\n    if (!scheme || !key) {\r\n      ctx.text('Invalid \"Authorization\" header', 400);\r\n      return;\r\n    }\r\n\r\n    if (ctx.env.API_KEY !== key) {\r\n      ctx.text('Invalid \"Authorization\" token', 401);\r\n      return;\r\n    }\r\n  }\r\n\r\n  await next();\r\n});\r\n```\r\n\r\nNow when I run `yarn dev` and goto `http://localhost:8787/api/some/path`,  get the following errors:\r\n```sh\r\n --> GET /api/some/path 500 6ms\r\nGET /api/some/path 500 Internal Server Error (12.81ms)\r\n  <-- GET /api/some/path\r\nvars { env: undefined }\r\nTypeError: Cannot read properties of undefined (reading 'ENABLE_AUTH_CHECKER')\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1247803609},{"id":1248278911,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/271","title":"fix(router): fixed trie-router bugs","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1248278911},{"id":1248927829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/272","title":"feat: `c.res` is available before dispatching","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1248927829},{"id":1249034038,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/273","title":"Specification of `*` and '/*' in routing","body":"I think the top-level `*` and `/*` behave a little differently than the documentation.\r\n\r\nhttps://github.com/honojs/hono/releases/tag/v1.4.0\r\n```typescript\r\napp.get('/', (c) => {\r\n  return c.text('foo')\r\n}) // <--- stop process\r\n\r\napp.use('*', middleware()) // <--- not dispached!!\r\n```\r\n\r\nCurrently, in both TrieRouter and RegExpRouter, `*` and `/*` have higher precedence than `/`.\r\n( On TrieRouter, `*` has the highest priority, `/*` the next highest; on RegExpRouter, `*` and `/*` have the same priority. )\r\n\r\n```typescript\r\ndescribe('star', () => {\r\n  const router = new TrieRouter<string>()\r\n\r\n  router.add('GET', '/', '/')\r\n  router.add('GET', '/*', '/*')\r\n  router.add('GET', '*', '*')\r\n\r\n  router.add('GET', '/x', '/x')\r\n  router.add('GET', '/x/*', '/x/*')\r\n\r\n  it.only('top', async () => {\r\n    const res = router.match('GET', '/')\r\n    expect(res).not.toBeNull()\r\n    expect(res.handlers).toEqual(['*', '/*', '/'])\r\n  })\r\n\r\n  it.only('Under a certain path', async () => {\r\n    const res = router.match('GET', '/x')\r\n    expect(res).not.toBeNull()\r\n    expect(res.handlers).toEqual(['*', '/*', '/x', '/x/*'])\r\n  })\r\n})\r\n```\r\n\r\n```typescript\r\ndescribe('star', () => {\r\n  const router = new RegExpRouter<string>()\r\n\r\n  router.add('GET', '/', '/')\r\n  router.add('GET', '/*', '/*')\r\n  router.add('GET', '*', '*')\r\n\r\n  router.add('GET', '/x', '/x')\r\n  router.add('GET', '/x/*', '/x/*')\r\n\r\n  it.only('top', async () => {\r\n    const res = router.match('GET', '/')\r\n    expect(res).not.toBeNull()\r\n    expect(res.handlers).toEqual(['*', '/*', '/']) // => failed ['/*', '*', '/']\r\n  })\r\n\r\n  it.only('Under a certain path', async () => {\r\n    const res = router.match('GET', '/x')\r\n    expect(res).not.toBeNull()\r\n    expect(res.handlers).toEqual(['*', '/*', '/x', '/x/*'])\r\n  })\r\n})\r\n```\r\n\r\nThe scores appear to be as follows.\r\n\r\nat TrieRouter\r\n\r\n```typescript\r\nrouter.add('GET', '/', '/')  // score: 1.1\r\nrouter.add('GET', '/*', '/*') // score: 0.2\r\nrouter.add('GET', '*', '*') // score: 0.3 - 1 => Approx. -0.7\r\n```\r\n\r\nat RegExpRouter\r\n\r\n```typescript\r\nrouter.add('GET', '/', '/')  // score: 1.1\r\nrouter.add('GET', '/*', '/*') // score: 0.2 in RegExpRouter \"/*\" is an alias to \"*\".\r\nrouter.add('GET', '*', '*') // score: 0.3\r\n```\r\n\r\nI think the current specification for TrieRouter is acceptable to us as users, so I can make it the official specification and adapt RegExpRouter to it.\r\nAlternatively, we can treat '/*' as an alias to '*', which would be the same as the RegExpRouter implementation.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249034038},{"id":1249080632,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/274","title":"refactor(trie-router): make `*` and `/*` have same priority","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249080632},{"id":1249204464,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/275","title":"refactor(reg-exp-router): Update scoring rules in RegExpRouter.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249204464},{"id":1249212831,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/276","title":"refactor(trie-router): fixed routing priority for `*`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249212831},{"id":1249265863,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/277","title":"refactor: make GraphQL Server middleware as handler","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249265863},{"id":1249431619,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/278","title":"env vars with GraphQL","body":"Hi,\r\n\r\nUsing module workers I don't have access to global environment variables. I can access them using `c.env`\r\n\r\nI use env vars in a resolver for GraphQL How should I access `c.env` in module format using your GraphQL middleware?\r\n\r\n```javascript\r\n\r\nconst schema = buildSchema(fileTypeDefs);\r\n\r\nconst viewResolver = ()=>{\r\n  console.log(ENV_VAR_URL)\r\n}\r\n\r\nconst rootValue = {\r\n  view: viewResolver,\r\n};\r\n\r\napp.use(\r\n  \"/\",\r\n  graphqlServer({\r\n    schema,\r\n    rootValue,\r\n  }),\r\n);\r\n\r\nexport default app;\r\n```\r\n\r\nHow would I get the value of ENV_VAR_URL in a module worker?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249431619},{"id":1249854179,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/279","title":"Feature Request: Bearer auth","body":"Hey! Bearer auth (eg. `Authorization: Bearer SOME_API_KEY`) is the most commonly used type of authorization header if i'm not wrong. \r\nIt would be great to have a bearer auth middleware like [BasicAuth](https://github.com/honojs/hono/blob/master/src/middleware/basic-auth/index.ts).\r\n\r\nI'm currently using a hardcoded version myself, so having a built-in one will help save a lot time.\r\n\r\nThanks","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1249854179},{"id":1250473283,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/280","title":"refactor(TypeScript): enable strict null check","body":"Added these lines to `tsconfig.json`\r\n\r\n```json\r\n    \"strictNullChecks\": true,\r\n     \"noUnusedLocals\": true,\r\n     \"noUnusedParameters\": true,\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1250473283},{"id":1251455321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/281","title":"perf(context): add HonoResponse for better performance","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1251455321},{"id":1252161200,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/282","title":"Is not Hono fastest...?","body":"Shame on me, the benchmark scores may not be correct.\r\n\r\nFirst, I say Hono is the fastest compared to other routers. The score of [the benchmark](https://github.com/honojs/hono/blob/16967676a303bf79a9e7bcd45a963dec60ad0c8b/benchmarks/handle-event/index.js) is below:\r\n\r\n```\r\nhono - trie-router(default) x 724,143 ops/sec ±3.63% (80 runs sampled)\r\nhono - regexp-router x 1,236,810 ops/sec ±6.77% (72 runs sampled)\r\nitty-router x 161,786 ops/sec ±2.28% (97 runs sampled)\r\nsunder x 312,262 ops/sec ±2.59% (85 runs sampled)\r\nworktop x 224,979 ops/sec ±1.13% (96 runs sampled)\r\nFastest is hono - regexp-router\r\n✨  Done in 95.05s.\r\n```\r\n\r\nBut, isn't it too fast? I wrote the minimal handler to compare it. It should be the fastest.\r\n\r\n```ts\r\nconst minimalHandler = async () => {\r\n  return new Response('foo')\r\n}\r\n```\r\n\r\nThe score is below:\r\n\r\n```\r\nminimal handler x 392,854 ops/sec ±3.23% (90 runs sampled)\r\nhono - trie-router(default) x 720,882 ops/sec ±3.23% (84 runs sampled)\r\nhono - regexp-router x 1,195,783 ops/sec ±6.53% (70 runs sampled)\r\nitty-router x 160,515 ops/sec ±2.68% (91 runs sampled)\r\nsunder x 303,981 ops/sec ±3.09% (86 runs sampled)\r\nworktop x 211,622 ops/sec ±3.71% (83 runs sampled)\r\nFastest is hono - regexp-router\r\n✨  Done in 101.34s.\r\n```\r\n\r\nIn this benchmark, the score of *minimal handler* is not the fastest, and `hono - regexp-router` is still the fastest. Why??\r\n\r\nAs an experiment, I remove `async/await` for `matchRoute` in `hono.ts`.\r\n\r\n```diff\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex f3bc3d8..41a0ba7 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -173,10 +173,7 @@ export class Hono<E = Env, P extends string = '/'> extends defineDynamicClass()<\r\n     this.routes.push(r)\r\n   }\r\n\r\n-  private async matchRoute(\r\n-    method: string,\r\n-    path: string\r\n-  ): Promise<Result<Handler<string, E>> | null> {\r\n+  private matchRoute(method: string, path: string): Result<Handler<string, E>> | null {\r\n     return this.router.match(method, path)\r\n   }\r\n\r\n@@ -184,7 +181,7 @@ export class Hono<E = Env, P extends string = '/'> extends defineDynamicClass()<\r\n     const path = getPathFromURL(request.url, { strict: this.strict })\r\n     const method = request.method\r\n\r\n-    const result = await this.matchRoute(method, path)\r\n+    const result = this.matchRoute(method, path)\r\n\r\n     request.param = ((key?: string): string | Record<string, string> | null => {\r\n       if (result) {\r\n```\r\n\r\nAnd, run the benchmark again, the score is below:\r\n\r\n```\r\nminimal handler x 399,400 ops/sec ±2.98% (90 runs sampled)\r\nhono - trie-router(default) x 215,606 ops/sec ±3.56% (85 runs sampled)\r\nhono - regexp-router x 257,114 ops/sec ±2.81% (85 runs sampled)\r\nitty-router x 157,411 ops/sec ±3.81% (87 runs sampled)\r\nsunder x 327,332 ops/sec ±1.24% (97 runs sampled)\r\nworktop x 220,831 ops/sec ±1.92% (92 runs sampled)\r\nFastest is minimal handler\r\n✨  Done in 47.57s.\r\n```\r\n\r\n*minimal handler* has been the fastest. It seems to be correct. But, unfortunately, *hono regexp-router*  loses to *Sunder*.  For sure, our Hono's routers are smart, but the functions of `compose` and `context` are a little bit complex.\r\n\r\nDoes anyone know this benchmark is correct or not? If Hono is not fastest, I believe we have chance to make it fast by refactoring, and we have some functional advantage to other routers.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1252161200},{"id":1252386770,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/283","title":"perf(conmpose): remove `bind`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1252386770},{"id":1252650564,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/284","title":"perf(util): cache regex result for URL path(s)","body":"Made it faster!\r\n\r\n```\r\nhono - org x 708,830 ops/sec ±3.48% (83 runs sampled)\r\nhono - trie-router(default) x 800,532 ops/sec ±4.11% (65 runs sampled)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1252650564},{"id":1252705380,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/285","title":"chore(tsconfig): update `es2017` to `es2020`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1252705380},{"id":1253150580,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/286","title":"minor typo fixes in readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1253150580},{"id":1253678390,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/287","title":"chore(benchmark): polyfill `Request` and `Response`","body":"In this #282 , I've brought up the issue about the benchmark. Both benchmark scores seem to be not correct. So, I tried to *polyfill* `Request` and `Response` objects by `node-fetch`. Then, scores are changed. *minimal handler* has become faster and *hono - regexp-router* is a second faster than *sunder*.\r\n\r\n```\r\nminimal handler x 790,920 ops/sec ±4.97% (78 runs sampled)\r\nhono - trie-router(default) x 332,451 ops/sec ±2.66% (88 runs sampled)\r\nhono - regexp-router x 370,257 ops/sec ±2.94% (83 runs sampled)\r\nitty-router x 206,874 ops/sec ±3.60% (86 runs sampled)\r\nsunder x 290,147 ops/sec ±4.99% (84 runs sampled)\r\nworktop x 165,212 ops/sec ±4.87% (77 runs sampled)\r\nFastest is minimal handler\r\n✨  Done in 45.34s.\r\n```\r\n\r\nIt's good news for Hono. Sure Sunder is fast, but I inspected it by performance tools, there's a little overhead in that. I was thinking Hono is faster than Sunder. The score proved it. Now, let us believe this score.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1253678390},{"id":1253835599,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/288","title":"[POC] Performance tuning","body":"`cd benchmarks/handle-event && npm run start` in my environment with this PR.\r\n\r\n```\r\nhono - trie-router(default) x 102,452 ops/sec ±5.76% (85 runs sampled)\r\nhono - regexp-router x 145,484 ops/sec ±2.92% (85 runs sampled)\r\nitty-router x 72,637 ops/sec ±3.09% (85 runs sampled)\r\nsunder x 134,340 ops/sec ±2.42% (87 runs sampled)\r\nworktop x 81,620 ops/sec ±4.09% (84 runs sampled)\r\nFastest is hono - regexp-router\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1253835599},{"id":1254400432,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/289","title":"micro-template.js middleware","body":"We want to have template engines for server-side rendering. But, almost all are using `eval` or depending on node `fs`, so it does not work in Cloudflare Workers. *Mustache* is the only one to work. Another way, **micro-temple.js** may work. I'll try to make *micro-template middleware*.\r\n\r\nref: <https://github.com/cho45/micro-template.js>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1254400432},{"id":1255372466,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/290","title":"Update screencast","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1255372466},{"id":1256365121,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/291","title":"JWT Middleware seems to expose secret","body":"The JWT middleware validates the token against the secret, but if the token is not present or there's an error, the secret is exposed to the client in the WWW-Authenticate header.\r\n\r\nFor example:\r\n```\r\n    if (parts.length !== 2) {\r\n      ctx.res = new Response('Unauthorized', {\r\n        status: 401,\r\n        headers: {\r\n          'WWW-Authenticate': 'Basic ${options.secret}',\r\n        },\r\n      })\r\n      return\r\n    }\r\n```\r\n\r\nThere's a bit more info about what WWW-Authenticate should include: https://www.rfc-editor.org/rfc/rfc6750#section-3\r\nNote the error fields.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1256365121},{"id":1257027921,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/292","title":"perf: Various performance tuning","body":"From #288, I cherry-picked only the ones that were not controversial and did not change the test significantly.\r\n\r\n### When should the Request object be extended?\r\n\r\nSince there is no Request object in node, we are currently calling extendRequestPrototype when we create an instance of Hono (assuming it will have been added to globalThis by then if we are testing).\r\n\r\nIf we \"tweak benchmarks/handle-event/index.js\", etc., and decide that globalThis.Request should be initialized before \"hono.ts\" is imported, then it could be done on import.\r\n\r\n### What I did not cherry-pick.\r\n\r\nThese will be discussed in another PR.\r\n\r\n* 2e2d443\r\n* ca92ca9f69a60028ac22316\r\n\r\n```\r\nminimal handler x 348,756 ops/sec ±6.81% (70 runs sampled)\r\nhono - trie-router(default) x 155,222 ops/sec ±3.98% (82 runs sampled)\r\nhono - regexp-router x 182,453 ops/sec ±5.75% (79 runs sampled)\r\nitty-router x 85,700 ops/sec ±3.59% (86 runs sampled)\r\nsunder x 122,709 ops/sec ±1.57% (90 runs sampled)\r\nworktop x 64,828 ops/sec ±5.27% (78 runs sampled)\r\nFastest is minimal handler\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1257027921},{"id":1257227860,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/293","title":"perf(util): use indexOf instead of RegExp.match for extracting URL.","body":"In addition to #292, I think this will improve performance somewhat.\r\n\r\n### Strategy\r\n\r\nI don't think that requests to this framework will pass broken URLs or URLs containing `#`.\r\nBased on that assumption, it is faster to use indexOf and substring to cut out than to capture with a regular expression.\r\n\r\n### Benchmark\r\n\r\n```typescript\r\ntype Params = {\r\n  strict: boolean\r\n}\r\n\r\nexport const getPathFromURL = (url: string, params: Params = { strict: true }): string => {\r\n  // if strict routing is false => `/hello/hey/` and `/hello/hey` are treated the same\r\n  // default is true\r\n  if (params.strict === false && url.endsWith('/')) {\r\n    url = url.slice(0, -1)\r\n  }\r\n\r\n  const match = url.match(URL_REGEXP)\r\n  if (match) {\r\n    return match[1]\r\n  }\r\n  return ''\r\n}\r\n\r\nexport const getPathFromURLAlt = (url: string, strict: boolean = true): string => {\r\n  const queryIndex = url.indexOf('?')\r\n  const result = url.substring(url.indexOf('/', 8), queryIndex === -1 ? url.length : queryIndex)\r\n\r\n  // if strict routing is false => `/hello/hey/` and `/hello/hey` are treated the same\r\n  // default is true\r\n  if (strict === false && result.endsWith('/')) {\r\n    return result.slice(0, -1)\r\n  }\r\n\r\n  return result\r\n}\r\n```\r\n\r\n```typescript\r\nimport Benchmark from 'benchmark'\r\nimport { getPathFromURL, getPathFromURLAlt } from '../../dist/utils/url'\r\n\r\nconst suite = new Benchmark.Suite()\r\n\r\nconsole.log(getPathFromURL('http://www.example.com/aaa/bbb/ccc?q=1'))\r\nconsole.log(getPathFromURLAlt('http://www.example.com/aaa/bbb/ccc?q=1'))\r\n\r\nsuite\r\n  .add('getPathFromURL', async () => {\r\n    getPathFromURL('http://www.example.com/aaa/bbb/ccc?q=1', {strict: true})\r\n  })\r\n  .add('getPathFromURLAlt', async () => {\r\n    getPathFromURLAlt('http://www.example.com/aaa/bbb/ccc?q=1', true)\r\n  })\r\n  .on('cycle', (event) => {\r\n    console.log(String(event.target))\r\n  })\r\n  .on('complete', function () {\r\n    console.log(`Fastest is ${this.filter('fastest').map('name')}`)\r\n  })\r\n  .run({ async: true })\r\n```\r\n\r\n```\r\n/aaa/bbb/ccc\r\n/aaa/bbb/ccc\r\ngetPathFromURL x 8,931,512 ops/sec ±1.22% (86 runs sampled)\r\ngetPathFromURLAlt x 28,083,758 ops/sec ±1.63% (88 runs sampled)\r\nFastest is getPathFromURLAlt\r\n```\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1257227860},{"id":1257456139,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/294","title":"fix(token): correct 'WWW-Authenticate' header in response","body":"This PR is to fix https://github.com/honojs/hono/issues/291\r\n\r\nFYI: https://www.rfc-editor.org/rfc/rfc2617#page-8","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1257456139},{"id":1257483079,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/295","title":"fix(test): upgrade the miniflare to consume the fix on node18","body":"This PR is to close https://github.com/honojs/hono/issues/214 by upgrading to latest release of miniflare https://github.com/cloudflare/miniflare/releases/tag/v2.5.0","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1257483079},{"id":1259144483,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/296","title":"fix(status): make the status 401 for the invalid authorization info","body":"This PR is correct the status code for no or invalid authorization data provided,   thanks @sdarnell 's reminder.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1259144483},{"id":1260539495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/297","title":"typescript definition for `context.req` is broken, defaulting to `any`","body":"TS v4.7.2\r\n\r\nHere's a small example of how the typescript definition for `context.req` is not correct:\r\n\r\n```\r\nconst router = new Hono<Environment>();\r\nrouter.get('/transfer/:token', (c) => {\r\n  const token = c.req.param('token');\r\n  return new Response(token);\r\n})\r\n```\r\n\r\nVSCode autocomplete does not work because `.req` is defaulting to `any`.\r\n\r\n\r\nhttps://user-images.githubusercontent.com/440299/171968643-bc5f903a-0e87-46a5-91c0-cbd2bdff06d4.mov\r\n\r\n\r\n<img width=\"520\" alt=\"Screen Shot 2022-06-03 at 5 04 20 PM\" src=\"https://user-images.githubusercontent.com/440299/171968333-b3b9bc19-d316-45e8-89f3-2fe9da1f8748.png\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1260539495},{"id":1260689999,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/298","title":"fix: Import \"declare global\" for the Request interface explicitly.","body":"Fixes #297\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1260689999},{"id":1260740374,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/299","title":"feat(middleware): add bearer auth middleware","body":"Close #279","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1260740374},{"id":1260972884,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/300","title":"JSX middleware","body":"We want to have ***JSX middleware***. This was discussed in this issue #289 .\r\n\r\nI want to make the following:\r\n\r\n* Just support for Sever-Side Rendering. Don't support the browser side. Render it as strings, not virtual DOM\r\n* Make it as middleware\r\n* Zero-dependencies\r\n* Use `c.render` method\r\n* Support `props.children`\r\n\r\nCode example:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { jsx } from 'hono/jsx'\r\nimport { Header, Footer } from './component'\r\n\r\nconst app = new Hono()\r\n\r\nconst Layout = (props) => {\r\n  <html>\r\n    <body>{props.children}</body>\r\n  </html>\r\n}\r\n\r\ntype Props = {\r\n  message: string\r\n}\r\n\r\nconst Top = <Props>(props) => {\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n        <h1>{ props.message }</h1>\r\n      <Footer />\r\n    </Layout>\r\n  )\r\n}\r\n\r\napp.get('/', (c) => {\r\n  const message = 'Hello Hono!'\r\n  return c.render(<Top message={message} />)\r\n})\r\n\r\napp.fire()\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1260972884},{"id":1261255820,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/301","title":"feat: throw error if context is not finalized","body":"Close #231 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1261255820},{"id":1261443101,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/302","title":"`notFound` supports async/await","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1261443101},{"id":1262644178,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/303","title":"feat: `notFound` support asyc/await","body":"Close #302","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1262644178},{"id":1263012492,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/304","title":"Update README.md","body":"Adding some clarity on how to access bindings like secrets","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1263012492},{"id":1265195748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/305","title":"Export `md5` function in src/utils/crypto.ts","body":"Export an additional `md5` function in the crypto utility.\r\n\r\nUseful when working with R2 and providing a MD5 hash for verification.\r\n\r\n```\r\nimport { md5 } from \"hono/utils/crypto\";\r\n\r\n...\r\nconst md5Digest = md5(body);\r\nconst object = await bucket.put(key, body, {md5: md5Digest});\r\n```\r\n\r\nIt is worth noting, however, that \"MD5 is not part of the WebCrypto standard but is supported in Cloudflare Workers for interacting with legacy systems that require MD5.\" <sup>[1]</sup>\r\n\r\n[1]: https://developers.cloudflare.com/workers/runtime-apis/web-crypto/","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1265195748},{"id":1265762797,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/306","title":"feat: jsx middleware","body":"Close #300","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1265762797},{"id":1266616373,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/307","title":"perf(utils/html): Improve performance `escape()`","body":"* Replace all in one `replace()` call.\r\n* We do not need to escape \"'\".","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1266616373},{"id":1266806849,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/308","title":"feat(middleware/jsx): Support dangerouslySetInnerHTML and some special spec","body":"I have implemented the basic JSX specification using the following as a reference.\r\n\r\nhttps://en.reactjs.org/docs/jsx-in-depth.html","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1266806849},{"id":1266909070,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/309","title":"feat(middleware/jsx): Introduce memo.","body":"This PR provide a memo that can be used in much the same way as React.memo.\r\n\r\nI think the React.memo is \"do not recalculate the Virtual DOM unless there are changes in the props\".\r\nThere is no Virtual DOM in hono's jsx engine, but I think we can give a meaning to memo that says \"return a calculated EscapedString if there are no changes in props\".\r\n\r\nThis can be used to avoid recalculating the following JSX on every render\r\nhttps://github.com/yusukebe/iekei/blob/nano-jsx/src/components/footer.tsx","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1266909070},{"id":1267395714,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/310","title":"feat(middleware/jsx): We need Fragment.","body":"I think we also need Fragment.\r\n\r\n### Why accept key?\r\n\r\nAlthough `key` is not used in hono, it would be useful to be able to bring the template with React as is, so this was added for compatibility.\r\n\r\n> key is the only attribute that can be passed to Fragment. \r\nhttps://reactjs.org/docs/fragments.html#keyed-fragments","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1267395714},{"id":1267469906,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/311","title":"`event` undefined in durable object","body":"Hello, I don't know if this is normal, but when following this pattern for handling Durable objects fetch w/ Hono:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\nexport class FooBar {\r\n  state: DurableObjectState\r\n  app: Hono = new Hono()\r\n\r\n  constructor(state: DurableObjectState) {\r\n    this.state = state\r\n    this.app.get('/', async (c) => {\r\n      //...\r\n      c.event?.waitUntil(\r\n        this.state.storage?.put('foo', bar),\r\n      )\r\n    } \r\n  }\r\n\r\n  async fetch(request: Request) {\r\n    return this.app.fetch(request)\r\n  }\r\n}\r\n```\r\n\r\nIt seems that `event?` is undefined because it is never written to storage.\r\n\r\nBy using `!` instead of `?` i get the confirmation via this error.\r\n\r\n```\r\n  (error) TypeError: Cannot read properties of undefined (reading 'waitUntil')\r\n    at index.js:844:15\r\n    at dispatch2 (index.js:219:34)\r\n    at index.js:204:16\r\n    at Hono3.dispatch (index.js:618:27)\r\n    at Hono3.fetch (index.js:634:21)\r\n    at Quota.fetch (index.js:961:21)\r\n```\r\n\r\nIs there a way to make the fetch event propagated there?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1267469906},{"id":1268026854,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/312","title":"feat: Introduce html template literals tag.","body":"This PR is a small addition but one that I believe has great potential.\r\nWhat we will be able to do is explained below.\r\n\r\n## Advance information\r\n\r\nThere is a precedent for a library that handles HTML template literals with a tag named \"html\", and I refer to this as an idea.\r\n\r\n* https://github.com/lit/lit/tree/main/packages/lit-html\r\n* https://github.com/developit/htm\r\n\r\nThanks to these libraries, VisualStudioCode and vim also interprets template literals as HTML, allowing syntax highlighting and formatting to be applied.\r\n\r\n* https://marketplace.visualstudio.com/items?itemName=bierner.lit-html\r\n* https://github.com/MaxMEllon/vim-jsx-pretty\r\n\r\n## What we will be able to do\r\n\r\n### Render HTML\r\n\r\n```typescript\r\napp.get('/:username', (c) => {\r\n  const { username } = c.req.param()\r\n  return c.html(\r\n    html`<!DOCTYPE html>\r\n      <h1>Hello! ${username}!</h1>`\r\n  )\r\n})\r\n```\r\n\r\n### Insert snippet into JSX\r\n\r\n```typescript\r\nconst snippet = html`\r\n  <script async src=\"https://www.googletagmanager.com/gtag/js?id=MEASUREMENT_ID\"></script>\r\n  <script>\r\n    window.dataLayer = window.dataLayer || []\r\n    function gtag() {\r\n      dataLayer.push(arguments)\r\n    }\r\n    gtag('js', new Date())\r\n\r\n    gtag('config', 'MEASUREMENT_ID')\r\n  </script>\r\n`\r\n\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <html>\r\n      <head>\r\n        <title>Test Site</title>\r\n        {snippet}\r\n      </head>\r\n      <body>Hello!</body>\r\n    </html>\r\n  )\r\n})\r\n```\r\n\r\n### Insert inline script into JSX\r\n\r\n```typescript\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <html>\r\n      <head>\r\n        <title>Test Site</title>\r\n        {html`\r\n          <script>\r\n            // No need to use dangerouslySetInnerHTML. If you write it here, it will not be escaped.\r\n          </script>\r\n        `}\r\n      </head>\r\n      <body>Hello!</body>\r\n    </html>\r\n  )\r\n})\r\n```\r\n\r\n### Act as functional component\r\n\r\nSince `html` returns an HtmlEscapedString, it can act as a fully functional component without using JSX.\r\n\r\n#### Use `html` to speed up the process instead of `memo`\r\n\r\n```typescript\r\nconst Footer = () => html`\r\n  <footer>\r\n    <address>My Address...</address>\r\n  </footer>\r\n`\r\n```\r\n\r\n#### Receives props and embeds values\r\n\r\n```typescript\r\ninterface SiteData {\r\n  title: string\r\n  description: string\r\n  image: string\r\n  children?: any\r\n}\r\nconst Layout = (props: SiteData) => html`\r\n<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>${props.title}</title>\r\n  <meta name=\"description\" content=\"${props.description}\">\r\n  <head prefix=\"og: http://ogp.me/ns#\">\r\n  <meta property=\"og:type\" content=\"article\">\r\n  <!-- More elements slow down JSX, but not template literals. -->\r\n  <meta property=\"og:title\" content=\"${props.title}\">\r\n  <meta property=\"og:image\" content=\"${props.image}\">\r\n</head>\r\n<body>\r\n  ${props.children}\r\n</body>\r\n</html>\r\n`\r\n\r\nconst Content = (props: { siteData: SiteData; name: string }) => (\r\n  <Layout {...props.siteData}>\r\n    <h1>Hello {props.name}</h1>\r\n  </Layout>\r\n)\r\n\r\napp.get('/', (c) => {\r\n  const props = {\r\n    name: 'World',\r\n    siteData: {\r\n      title: 'Hello <> World',\r\n      description: 'This is a description',\r\n      image: 'https://example.com/image.png',\r\n    },\r\n  }\r\n  return c.render(<Content {...props} />)\r\n})\r\n```\r\n\r\n<img width=\"567\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/173151579-d497c73a-f454-4876-ae90-405c8f26b914.png\">\r\n\r\nI understand that using multiple template engines within a single project is generally a bad option.\r\nNevertheless, it doesn't look too bad, and I think it is possible to both improve execution speed and the developer experience by using it differently as follows.\r\n\r\n* Layout-like component with many HTML elements, simply filling in values => template literals with `html` tag\r\n* Call other components or perform repetitive processing => JSX","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268026854},{"id":1268411552,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/313","title":"[BREAKING] Make JSX middleware `import` more simple","body":"Currently, to use JSX middleware, we have to do:\r\n\r\n* import `h` and `jsx`\r\n* `app.use` with `jsx()`\r\n* `c.render` to return HTML.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { h, jsx } from 'hono/jsx'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', jsx())\r\n\r\napp.get('/', (c) => {\r\n  const Layout = (props) => (\r\n    <html>\r\n      <body>{props.children}</body>\r\n    </html>\r\n  )\r\n\r\n  return c.render(\r\n    <Layout>\r\n      <p>foo</p>\r\n    </Layout>\r\n  ) // Add <!doctype html>  automatically\r\n})\r\n```\r\n\r\nI think it's not so simple.\r\n\r\n* We don't need to use `app.use`. When `h` is imported, JSX will be enabled.\r\n* We don't need to use `c.render`. We can use `c.html` with writing `<!doctype html>` instead of it. It's not a bad idea to explicitly declare `<!doctype html>`.\r\n* `h` may be the initial character of a `hyperscript`. I think it's not suitable for SSR.\r\n\r\nHow about writing like below with `html` template literal tag #312 \r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { jsx, html } from 'hono/jsx' // `html` is alias of `utils/html`\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const Layout = (props) =>\r\n    html`<!DOCTYPE html>\r\n      <html>\r\n        <body>\r\n          ${props.children}\r\n        </body>\r\n      </html>`\r\n\r\n  return c.html(\r\n    <Layout>\r\n      <p>foo</p>\r\n    </Layout>\r\n  )\r\n})\r\n```\r\n\r\nThese are breaking changes. But, JSX middleware has only just been released, so not many people are using it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268411552},{"id":1268413677,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/314","title":"Function to generate HtmlEscapedString","body":"From: https://github.com/honojs/hono/pull/312#issuecomment-1153038921\r\n\r\nI am wondering if we should prepare something like `mark_raw`.\r\n\r\nhttps://metacpan.org/pod/Text::Xslate#mark_raw($str-:Str)-:RawStr\r\n\r\nRarely, it may be necessary.\r\n\r\n### When to implement\r\n\r\n#### Overload `html`\r\n\r\n```\r\nconst name = 'John &quot;Johnny&quot; Smith' // already escaped\r\nhtml`I am ${html(name)}`\r\n```\r\n\r\n#### Introduce `markRaw` ( or a better name such as `raw` or `escaped`. )\r\n\r\n```\r\nconst name = 'John &quot;Johnny&quot; Smith' // already escaped\r\nhtml`I am ${markRaw(name)}`\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268413677},{"id":1268417579,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/315","title":"[BREAKING] `html` as  middleware","body":"It's about `html` in PR #314 . I'm thinking how about making`html` as **middleware**. It seems that the `html` is not just utility, it's a more important feature. How about writing like a below as a middleware:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { jsx } from 'hono/jsx'\r\nimport { html, raw } from 'hono/html'\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268417579},{"id":1268422848,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/316","title":"feat(utils/html): Introduce a function `raw`.","body":"Fixes #314\r\n\r\nAlthough `raw` could be used in the following locations, I did not apply it to these locations to avoid the overhead of function calls, since they are very frequently executed.\r\n\r\nhttps://github.com/honojs/hono/blob/master/src/middleware/jsx/index.ts#L75-L76","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268422848},{"id":1268427377,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/317","title":"[BREAKING]Simplify mustache middleware functions","body":"Currenty, for using `mustache` middleware, we have to write these:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { mustache } from 'hono/mustache'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', mustache())\r\n\r\napp.get('/', (c) => {\r\n  return c.render('index')\r\n})\r\n\r\napp.fire()\r\n```\r\n\r\nBut, it's not necessary wrting `app.use('*', mustache())`. We need just `render` method.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { render } from 'hono/mustache'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.html(render('index'))\r\n})\r\n\r\napp.fire()\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268427377},{"id":1268744615,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/318","title":"[BREAKING] refactor(jsx): `h` to `jsx`, remove `h`","body":"This PR includes BREAKING CHANGES.\r\n\r\n* `h` is obsolete, removed. Use `jsx` instead.\r\n* Don't write `app.use('*', jsx())`. It's not needed.\r\n* If you want to return HTML, use `c.html()`\r\n\r\nYou can write as a below:\r\n\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { jsx } from 'hono/jsx'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.html(\r\n    '<!doctype html>' +\r\n    (\r\n      <html>\r\n        <body>\r\n          <p>Hono!</p>\r\n        </body>\r\n      </html>\r\n    )\r\n  )\r\n})\r\n\r\napp.fire()\r\n```\r\n\r\nClose #313","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268744615},{"id":1268761330,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/319","title":"refactor(html): make `html` as middleware","body":"Fix #315 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1268761330},{"id":1272622733,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/320","title":"bearerAuth always giving \"Unauthorized\"","body":"I have been spending some time playing around with the `bearerAuth` middleware and it only worked on the first try out of many trials.\r\nI don't know how it worked on first the first try.\r\n\r\nHere are some snippets from the worker source code:\r\n- portion of wrangler file\r\n```toml\r\n# workers/product/wrangler.toml\r\n\r\n[vars]\r\nCACHE_CONTROL = \"max-age=86400\"\r\nAPI_KEY = \"abcdefg12345-._~+/=\"\r\n\r\n```\r\n- another portion belonging to the typescript codebase\r\n```ts\r\n\r\n// workers/product/bindings.d.ts\r\nexport interface Bindings {\r\n  API_URL: string;\r\n  CACHE_CONTROL: string;\r\n  API_KEY: string;\r\n  SECRET_KEY: string;\r\n  CACHE: KVNamespace;\r\n}\r\n\r\ndeclare global {\r\n  function getMiniflareBindings(): Bindings;\r\n  interface Crypto {\r\n    randomUUID(): string;\r\n    randomBytes(num?: number): Buffer;\r\n  }\r\n}\r\n\r\n\r\n// workers/product/src/api/index.ts\r\n.....\r\n\r\nconst apiRoute = new Hono<Bindings>();\r\nlet token = \" \";\r\n\r\nconst TOKEN_STRINGS = \"[A-Za-z0-9._~+/-]+=*\";\r\nconst PREFIX = \"Bearer\";\r\n\r\napiRoute.use(\r\n  \"*\",\r\n  async (ctx, next) => {\r\n    if (ctx.env.API_KEY) {\r\n      // update token with secrets value\r\n      token = ctx.env.API_KEY;\r\n    }\r\n\r\n    // below(copied from https://github.com/honojs/hono/blob/master/src/middleware/bearer-auth/index.ts) is to see if the conditions pass\r\n    const headerToken = ctx.req.headers.get(\"Authorization\");\r\n    const regexp = new RegExp(\"^\" + PREFIX + \" +(\" + TOKEN_STRINGS + \") *$\");\r\n    const match = regexp.exec(headerToken!)!;\r\n    const equal = await timingSafeEqual(token, match[1]);\r\n\r\n    console.log({ token, headerToken, regexp, match, equal }); // see output in screenshot 1\r\n\r\n    await next();\r\n  },\r\n  cors(),\r\n  bodyParse(),\r\n  prettyJSON(),\r\n  bearerAuth({ token })\r\n);\r\n\r\n....\r\n```\r\n\r\nNow, some snippets from my frontend where I'm using the worker's API:\r\n- I created a utility function to call the api\r\n```ts\r\n// utils/api.ts\r\n....\r\nimport * as fetch from \"./fetch-wrapper\"; //@see https://github.com/calcom/cal.com/blob/855aa56e7766e37773c07e8e77924fe144c171f5/apps/web/lib/core/http/fetch-wrapper.ts\r\nimport { BanksApiResponse } from \"./types\";\r\n\r\nexport async function getBanks(type: \"wallets\" | \"banks\" = \"wallets\") {\r\n  const token = \"abcdefg12345-._~+/=\";\r\n  // const token = process.env.WORKERS_PAYSTACK_API_KEY;\r\n  const apiUrl = \"http://localhost:8787/api\"; //\r\n  // const apiUrl = PAYSTACK_WORKER_API;\r\n  const res = await fetch.get(`${apiUrl}/banks/gh/${type}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  console.log({ res });\r\n\r\n  const json = res as BanksApiResponse;\r\n\r\n  return json;\r\n}\r\n```\r\n\r\n- Now using the utility function in a nextjs page:\r\n```tsx\r\n// pages/testing.tsx\r\n...\r\nimport { getBanks } from \"@lib/apis\";\r\n\r\nexport async function getStaticProps() {\r\n  const banks = await getBanks(\"banks\");\r\n  return { props: { banks } };\r\n}\r\n\r\n\r\nfunction Home({  banks }: { banks: any }) {\r\n  console.log({ banks });\r\n\r\n  return (\r\n    <div className=\"max-w-xl mx-auto py-8\">\r\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">Next.js Example</h1>\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n\r\n```\r\n\r\nScreenshots\r\n![error in cli for worker](https://user-images.githubusercontent.com/1687551/173902465-1391fc31-490a-42b3-b86e-49c201291d42.png)\r\n![error from nextjs page](https://user-images.githubusercontent.com/1687551/173904840-e6342eb3-6ded-46f6-a3db-606b1685f677.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1272622733},{"id":1272656889,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/321","title":"Support for Cloudflare Pages?","body":"https://developers.cloudflare.com/pages/platform/functions/","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1272656889},{"id":1273264994,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/322","title":"Re-think route order","body":"Hmm... I got in trouble.\r\n\r\nI was writing an application using Hono, and I realized I couldn't do what I wanted to do. I wrote like that:\r\n\r\n```ts\r\napp.get('/foo/bar', (c) => {\r\n  return c.text('/foo/bar')\r\n})\r\n\r\napp.get('*', (c) => {\r\n  return c.text('*')\r\n})\r\n```\r\n\r\nAnd access `/foo/bar`.\r\n\r\n```http\r\nGET /foo/bar\r\n```\r\n\r\nI got `*`, but I want `/foo/bar`!! However, this is a natural part of the specification. **It's expected**. Because we scored as a following:\r\n\r\n```ts\r\napp.get('/foo/bar', a()) // 2.1\r\napp.get('*', b()) // 0.2\r\n```\r\n\r\nI found this is not friendly to use. If `b()` is a *middleware*, this behavior is good, but if *both are handlers*, it's not good that the `b()` is executed. Should we re-think the route order? ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1273264994},{"id":1273476436,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/323","title":"HTMLRewriter with serveStatic","body":"Im busy playing around to get HTMLRewriter working with serveStatic\r\n\r\nBasically I want to check if the asset is the index.html, and if so use the HTMLRewriter to replace some elements.\r\n\r\nIf anyone has a solution already, please share. Otherwise I'll post back once I have something working.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1273476436},{"id":1274492302,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/324","title":"refactor(reg-exp-router): Routes are returned in the registration order.","body":"Fixes #322","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1274492302},{"id":1274569249,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/325","title":"refactor(trie-router): routes are returned in the registration order","body":"Fix #322 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1274569249},{"id":1275254013,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/326","title":"feat(context): add executionCtx to Context","body":"When using Module syntax, there is no FetchEvent, only ExecutionContext (FetchEvent implements ExecutionContext's functions as well, `waitUntil` and `passThroughUntilException`).\r\n\r\nThis PR adds `c.executionCtx`, which is set on both Service Worker syntax and Module syntax. `c.event` is only used on Service Worker syntax.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1275254013},{"id":1276429045,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/327","title":"Typo in  JSX Middleware README","body":"I found typo JSX Middleware README.\r\n```diff\r\n- return c.htm(<Top messages={messages} />) \r\n+ return c.html(<Top messages={messages} />) \r\n```\r\n\r\nApplicable PR #328 \r\n\r\n\r\n\r\nhttps://github.com/honojs/hono/blob/1de0305f3ceb990088e7900edf008fff4edcc630/src/middleware/jsx/README.md?plain=1#L52-L55","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1276429045},{"id":1276429783,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/328","title":"fix(typo) JSX README","body":"Applicable issue #327","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1276429783},{"id":1282889490,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/329","title":"Any way to do `return context.file(\"some/static.file\")`","body":"As the title asks. I'd like to be able to return a file from a route handler. To be fair my primary use case would ALSO be covered by something like this: https://github.com/cloudflare/kv-asset-handler#servesinglepageapp","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1282889490},{"id":1284381784,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/330","title":"refactor: make `HonoRequest`","body":"Instead of extending `Request`, I created `HonoRequest`. APIs such as `c.req.param()` are not changed.\r\n\r\nClose #213","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1284381784},{"id":1284391212,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/331","title":"feat(serve-static): add `path` option","body":"Close #329 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1284391212},{"id":1286619562,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/332","title":"OAuth2 client reccomendations","body":"This is more of a question than an issue, i'm trying to use Hono + Cloudflare workers to implement a OAuth2 Authorization Code Flow for the backend of a Web UI.\r\n\r\nIs there an OAuth2 client you'd recommend for Hono?\r\n\r\n the only one I've found that seems to work is https://github.com/panva/oauth4webapi, but it seems like I would have to wrap it in a Middleware to make it work \"nicely\" with Hono. Just wanted to check and see if anyone knew of a better one before i went down the rabbit hole of making it work nicely.\r\n\r\nThanks!\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1286619562},{"id":1290658080,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/333","title":"refactor: enable `strictPropertyInitialization`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1290658080},{"id":1290897478,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/334","title":"Generic over `object` in `Context.prototype.json`","body":"Currently, the `json` method of the context is like\r\n\r\nhttps://github.com/honojs/hono/blob/1282473f85e2a0648331b94507c3ae019beed4a4/src/context.ts#L104-L110\r\n\r\nHowever, the `JSON.stringify` can, actually, stringify primitives. The `object` type used here represents anything else other than [primitives](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) in JS, which makes the code like `c.json(1)` a compile-time error.\r\n\r\n---\r\n\r\nWhat we could do is to have something like\r\n\r\n```ts\r\ntype JsonRecord = {\r\n  readonly [key: string]: Json\r\n}\r\n\r\ntype JsonArray = ReadonlyArray<Json>\r\n\r\ntype Json = boolean | number | string | null | JsonArray | JsonRecord\r\n```\r\n\r\nAnd I'm suggesting typing the `json` method like\r\n\r\n```ts\r\n json<O extends Json>(object: O, status: StatusCode = this._status, headers: Headers = {}): Response { \r\n   const body = this._pretty \r\n     ? JSON.stringify(object, null, this._prettySpace) \r\n     : JSON.stringify(object) \r\n   headers['Content-Type'] ||= 'application/json; charset=UTF-8' \r\n   return this.body(body, status, headers) \r\n } \r\n```\r\n\r\nwhich improves the developing experience.\r\n\r\nP.S., great work, glad to help","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1290897478},{"id":1291323829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/335","title":"feat(context): type JSON object as generic var `T`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1291323829},{"id":1291978554,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/336","title":"feat: support Deno!","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1291978554},{"id":1292006394,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/337","title":"chore: add benchmark scripts for deno","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1292006394},{"id":1292056554,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/338","title":"chore: rm `*.ts.test` from deno_dist","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1292056554},{"id":1292065442,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/339","title":"feat: add `serve-static` middlware for deno","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1292065442},{"id":1292328776,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/340","title":"Clarification on KV usage","body":"Heya, i'm getting the following error when trying to use KV in Cloudflare workers. I took a look at the [example blog project](https://github.com/honojs/examples/tree/f056eb1838339f339118f31700d0d5f977df244b/blog) which uses them. Seems like the below should be working?\r\n\r\n```typescript\r\nexport const auth = new Hono()\r\nauth.get('/login', async(c) => {\r\n    await c.env.OAUTH_STATES.put(state, code_verifier, {expirationTtl: 600})\r\n}\r\n```\r\n\r\nHowever, i get the following error:\r\n```\r\nTypeError: Cannot read properties of undefined (reading 'OAUTH_STATES')\r\n```\r\n\r\nMy `wrangler.toml`:\r\n\r\n```toml\r\nname = \"api-dev\"\r\nmain = \"src/index.ts\"\r\ncompatibility_date = \"2022-06-25\"\r\nworkers_dev = true\r\nnode_compat = true\r\nkv_namespaces = [\r\n    { binding = \"OAUTH_STATES\", preview_id = \"<ID>\", id = \"<ID>\" }\r\n]\r\n\r\nvars = { ENVIRONMENT = \"dev\" }\r\n\r\n[env.production]\r\nname = \"api\"\r\nvars = { ENVIRONMENT = \"production\" }\r\n\r\n[env.staging]\r\nname = \"api-staging\"\r\nvars = { ENVIRONMENT = \"staging\" }\r\n```\r\n\r\n\r\nCheers!\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1292328776},{"id":1292378874,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/341","title":"Types for req.parsedBody","body":"Is it possible to add the ability to pass a generic type to bodyParse?\r\nhttps://github.com/honojs/hono/blob/master/src/middleware/body-parse/index.ts#L7\r\n\r\nExample:\r\n```ts\r\napp.post('/api/post/:id', bodyParse(), async c => {\r\n  const body = c.req.parsedBody;\r\n});\r\n```\r\n\r\n<img width=\"613\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1948935/177051271-2c5212a1-c814-4f86-85e3-12942437426b.png\">","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1292378874},{"id":1293615545,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/342","title":"Some type error wit basicAUth and bearerAuth","body":"I have a route like so `app.put(\"/:key\", c =>{...})` and i want have to make it have an authorization token per request basis. So I setup that part at the top, I'm using bearerAuth:\r\n```ts\r\nstorageRoute.put(\"/:key\", async (c, next) => {\r\n  console.log(\"put.middleware\", { env: c.env });\r\n\r\n\r\n  const auth = bearerAuth({ token: c.env.TOKEN });\r\n  await auth(c, next);\r\n});\r\n```\r\n\r\nBut then, I'm getting an error from typescript in vscode as seen in the pic below. I even tried using `basicAuth` and the error still persist but it goes away when iremove `:key`\r\n![image](https://user-images.githubusercontent.com/1687551/177222918-479c4e1f-b66f-4e8d-8bf4-a68cab942c63.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1293615545},{"id":1295002363,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/343","title":"refactor(deno): [BREAKING] obsolete `app.fire()`","body":"Obsolete `app.fire()` for Deno. Instead of that, write this:\r\n\r\n```ts\r\nserve((req) => app.fetch(req))\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1295002363},{"id":1295149877,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/344","title":"Bunjs support","body":"Is there any plan for Bunjs support https://bun.sh/\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1295149877},{"id":1295883375,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/345","title":"Roadmap to v2.0.0","body":"Now, Hono has become a great framework. It has much built-in middleware, fine DX, flexible routings, and high-performance routers. Then, the basic API design is fixed. But I think we have a lot of things to do with Hono yet.\r\n\r\nWe can support Deno and Bun. It's still just experimental. We can make it complete.\r\n\r\nHow about making third-party middleware. The coupling of [firebase-auth-cloudflare-workers](https://github.com/Code-Hex/firebase-auth-cloudflare-workers) seems good. Organizing current middleware, I'm planning separate the middleware that does not depend on other libraries and middleware that depends on other libraries such as *graphql-server* or *mustache*. To make it clean, how about making the `github.com/honojs/graphql-server` repository, and moving current code into that. Additionally, how about using `@honojs/graphql-server` namespace in the npm repository. I've already got the `honojs` org in npm repo.\r\n\r\nAnd, I want to make `validator` middleware. That is what I want.\r\n\r\nIn this way, we have many things to do. So, I decided to implement almost things and release them as **v2.0.0**. Is it good? Listed what I want to do roughly below. If you have a feature request. Please write it in the comments.\r\n\r\n---\r\n\r\n- [x] Support *Deno* #351 \r\n- [x] Test well on *Deno* #351 \r\n- [x] CI for Deno #364 \r\n- [x] Support *Bun* #344 \r\n- [x] `serve-static` middleware for Bun\r\n- [x] Test on Bun\r\n- [x] ~~Make repository for middleware using third party libraries~~ #350 \r\n- [x] ~~Move the middleware using third party libs in current repository to new repository~~ later #350\r\n- [x] ~~Use `honojs` org on npm repository~~ later #350\r\n- [x] ~~Make `@honojs/xxx` namespace~~ later  #350 \r\n- [x] ~~`github.com/honojs/xxx` repository~~ later #350 \r\n- [x] ~~Make `validator` middleware as builtin~~ later\r\n- [x] ~~`firebase-auth` middleware as third party~~ later\r\n- [x] ~~`prometheus` middleware as third party~~ later #263 \r\n- [x] Remove `graphql-server` middleware from this repo #357 \r\n- [x] Remove `mustache` middleware from this repo #354 \r\n- [x] ~~Access privileges for github repo~~ later\r\n- [x] ~~Access privileges for npm repos~~ later\r\n- [x] Make `body-parse` into `Context`? #362 \r\n- [x] Make `cookie` into Request/Reponse #353 \r\n- [x] ~~Integrate `app.fetch` and `app.request`?~~\r\n- [x] New middleware structure #350 \r\n- [x] Documenation\r\n- [x] Website\r\n- [x] Migration guide\r\n- [x] And, others\r\n\r\nBy the way, we don't have to implement all things.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1295883375},{"id":1296700480,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/346","title":"Rate-limiting middleware & Helmet","body":"Rate-limiting and helmet middlewares would really be the cherries on top in terms of the built-in middleware. It would also be interesting if the rate-limiting middleware could natively support Redis stores for the storage of IP addresses.","state":"closed","labels":"[\"enhancement\",\"middleware\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1296700480},{"id":1296880746,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/347","title":"Exporting everything at `mod.ts`","body":"Thank you for the exiting project!\r\n\r\nI am using this with deno. As you might know, we mainly call almost APIs from `mod.ts`.\r\nI found some lack of API compared to Node.js. Please consider to exports ALL functions as follows.\r\n\r\nBest regards,\r\n\r\n```js\r\ndeclare global {\r\n  interface FetchEvent extends Event {\r\n    readonly request: Request\r\n    respondWith(response: Promise<Response> | Response): Promise<Response>\r\n  }\r\n  interface ExecutionContext {\r\n    waitUntil(promise: Promise<any>): void\r\n    passThroughOnException(): void\r\n  }\r\n}\r\n\r\nexport * from './context'\r\nexport * from './hono'\r\n\r\n// Router\r\nexport * from './router/reg-exp-router'\r\nexport * from './router/trie-router'\r\n\r\n// Middleware\r\nexport * from './middleware/basic-auth'\r\nexport * from './middleware/bearer-auth'\r\nexport * from './middleware/body-parse'\r\nexport * from './middleware/cookie'\r\nexport * from './middleware/cors'\r\nexport * from './middleware/etag'\r\nexport * from './middleware/html'\r\nexport * from './middleware/jsx'\r\nexport * from './middleware/jwt'\r\nexport * from './middleware/logger'\r\nexport * from './middleware/powered-by'\r\nexport * from './middleware/pretty-json'\r\nexport * from './deno/serve-static'\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1296880746},{"id":1298275403,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/348","title":"refactor: use arrow func for `app.fetch`","body":"On Deno, you can write like below:\r\n\r\n```ts\r\nimport { serve } from 'https://deno.land/std/http/server.ts'\r\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\r\n\r\nconst app = new Hono()\r\n// ...\r\nserve(app.fetch) // <---\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1298275403},{"id":1298287048,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/349","title":"feat(deno): export everythings from middlewares","body":"You can import `memo` or `Fragment` defined in `jsx` on Deno app.\r\n\r\nClose #347 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1298287048},{"id":1298763985,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/350","title":"New middleware structures, and how we manage","body":"I want to renew middleware structures for v2.0.0. I'll tell you my plan roughly.\r\n\r\nThere are two types of middleware:\r\n\r\n## 1. Built-in middleware\r\n\r\nBasic. It does not depend on other libraries. Such as `basic-auth`, `cors`, `etag`, `jsx`, and so on. Included in `hono` packages. So, we can use `hono/{name}` syntax like this:\r\n\r\n```ts\r\nconst { cors } from 'hono/cors'\r\n```\r\n\r\n## 2. Third-party middleware\r\n\r\nExtended. It depends on other libraries. Such as `graphql-server`, `mustache`, or `firebase-auth`. These are not included in `hono` package but distributed by `@honojs/{name}` package. like this:\r\n\r\n```\r\n// Install\r\nnpm i graphql\r\nnpm i @honojs/graphql-server\r\n```\r\n\r\n```ts\r\n// Code\r\nconst { graphqlServer } from '@honojs/graphql-server'\r\n```\r\n\r\nAnd, these middleware are managed in under `honojs` org on GitHub. Each middleware has its own repository. Such \r\n\r\n```\r\nhttps://github.com/honojs/graphql-server\r\n```\r\n\r\n## `honojs` org in npm\r\n\r\nAlready, I've got `honojs` org in the npm repository.\r\n\r\n<https://www.npmjs.com/org/honojs>\r\n\r\nWe can use `@honojs/{name}` namespace.\r\n\r\n## Privileges\r\n\r\nWe have to think about the privileges of managing third-party middleware. \r\n\r\nBasically, I keep managing `github.com/honojs/hono` for `hono` package including built-in middleware. \r\n\r\nAnd, the GitHub repository and npm package of third-party middleware is managed by the author of it. To do it I'll give privileges to access GitHub and npm repo to the author of the middleware. \r\n\r\nFor example. If @Code-Hex wants to make `firebase-auth` middleware, I will give the privileges to manage GitHub `github.com/honojs/firebase-auth` and npm `@honojs/firebase-auth`. The author is free to use the repository for development and release it to npm freely.\r\n\r\n## How to\r\n\r\nFor example:\r\n\r\n1. Remove `graphqh-server` middleware from `honojs/hono` repository. And move it to `honojs/graphql-server`.\r\n2. Publish as `@honojs/graphql-server` on the npm repository.\r\n3. Make `honojs/firebase-auth` repository.\r\n4. Add @Code-Hex to GitHub `honojs` org and add privileges to manage `honojs/firebase-auth` repository.\r\n5. Make `@honojs/firebase-auth`\r\n6. Add @Code-Hex to the npm repository `honojs` and add privileges to release and manage`@honojs/firebase-auth`.\r\n\r\n---\r\n\r\nIt's just an idea. We have to consider it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1298763985},{"id":1299529009,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/351","title":"Test Deno modules","body":"Test the modules for Deno. I think we don't have to test all modules for Deno in `deno_dist`. Maybe have to test the files made only for Deno such as [src/deno/serve-statice.ts](https://github.com/honojs/hono/blob/master/src/deno/serve-static.ts).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299529009},{"id":1299876365,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/352","title":"refactor(context): do not use exported `Env`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299876365},{"id":1299934248,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/353","title":"Implement `cookie` into Context/Request","body":"Currently, there is the *cookie* middleware. But, It need not be middleware. We can make it as the default function of Context/Response. It does not affect performance.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299934248},{"id":1299935251,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/354","title":"Remove mustache middleware from builtin","body":"*mustache* middleware should be third-party middleware. We'll remove it from this project.\r\n\r\nAfter releasing v2.0.0, we may make it as `@honojs/mustache`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299935251},{"id":1299936130,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/355","title":"[Deno] Do not export middleware from `mod.ts`","body":"To eliminate dependencies, we should not export all middleware from `mod.ts`. Instead, create `middleware.ts` and export all middleware from it.\r\n\r\n```ts\r\n// src/middleware.ts\r\nexport * from './middleware/basic-auth'\r\nexport * from './middleware/bearer-auth'\r\nexport * from './middleware/body-parse'\r\nexport * from './middleware/cookie'\r\nexport * from './middleware/cors'\r\nexport * from './middleware/etag'\r\nexport * from './middleware/html'\r\nexport * from './middleware/jsx'\r\nexport * from './middleware/jwt'\r\nexport * from './middleware/logger'\r\nexport * from './middleware/powered-by'\r\nexport * from './middleware/pretty-json'\r\nexport * from './deno/serve-static'\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299936130},{"id":1299936401,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/356","title":"Write migration guide","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299936401},{"id":1299937653,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/357","title":"Remove graphql-server middleware from builtin","body":"It will be third-party middleware. Remove from this project until releasing v2.0.0.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299937653},{"id":1299938849,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/358","title":"feat: new structure for support Deno and third-party middleware","body":"Close #357 #355 #354 #353 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1299938849},{"id":1300718910,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/359","title":"Website","body":"I'm building a website for Hono! Coming soon!\r\n\r\n- [x] \"Getting Started\"\r\n- [x] \"API\"\r\n- [x] \"Built-in Middleware\"\r\n- [x] \"Third-party Middleware\"\r\n- [x] \"Examples\"\r\n- [x] \"Tips\"\r\n- [x] Create GitHub repository\r\n- [x] Deploy on Cloudflare Pages\r\n- [x] Get the domain!\r\n- [x] Setup OGP\r\n- [x] Link from README in this repository\r\n- [x] ~~Setup release flow (GitHub Actions)~~\r\n- [x] Google Analytics?\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/178275586-ff7e7146-49bd-4839-ae32-59d09ab41caf.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1300718910},{"id":1300768496,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/360","title":"Route Patterns: Inconsistency between `/a/*` and `/a/*/z` ","body":"When routing with a trailing wildcard it is effectively matching against the leading pattern (`/a`). When routing with a nested wildcard it is matching against the leading pattern (`/a`) a single inner segment (`/*`) and a trailing segment (`/z`).\r\n\r\nIn the first case the wildcard can match any number of segments, in the second case it will only match a single segment. I'd suggest this is very confusing and limiting if intentional. These will both match the same things: `/a/:wild/z` and `/a/*/z` yet there is no way to match agains the trail end of the pattern. Perhaps I want to handle specific file types in a very particular way no matter what folder they are in.\r\n\r\nMy proposal would be to make `*` explicitly `0 or more segments` but using RegExp non-greedy semantics (`/(?:\\/(.+?))?/`) and use that everywhere it could appear. So in my examples here it would look like `/^\\/a(?:\\/(.+?))?\\/z$/`.\r\n\r\nBonus: Named wildcard patterns `\"/a/*:path/z\"`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1300768496},{"id":1301351501,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/361","title":"Template project for third-party middleware","body":"Make a template project for third-party middleware.\r\n\r\nIt will be here:\r\n<https://github.com/honojs/middleware-template>\r\n\r\n## TODO\r\n\r\n- [x] ~~GitHub Acitons for releasing~~","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1301351501},{"id":1301396342,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/362","title":"`c.req.parseBody` instead of body-parse middleware","body":"There is [\"body-parse\" middleware](https://github.com/honojs/hono/tree/master/src/middleware/body-parse). It's useful to handle Request body. But, it's not necessary to be *middleware*. We can make the same function as `parseBody()` method in Request object:\r\n\r\n```ts\r\nconst data = await c.req.parseBody()\r\n```\r\n\r\nThis is cleaner and does not affect performance in this way. \"body-parse\" middleware will be obsolete.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1301396342},{"id":1302134808,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/363","title":"feat(request): add `parseBody()` method. body-parse middleware is obsolete","body":"Add `parseBody()` method into Request object and make the \"body-parse\" middleware obsolete.\r\n\r\n```ts\r\n// parse Request body\r\nconst body = c.req.parseBody()\r\n```\r\n\r\nClose #362","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302134808},{"id":1302148342,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/364","title":"CI for Deno","body":"Related #351 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302148342},{"id":1302676355,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/365","title":"test: add tests for Deno","body":"Test just only minimal patterns.\r\nBecause others are already tested well in Cloudflare Workers environment.\r\n\r\nClose #351","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302676355},{"id":1302680943,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/366","title":"[BREAKING] feat: remove \"graphql-server\" middleware, will be obsolete","body":"It might be *third-party middleware*.\r\n\r\nClose #357","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302680943},{"id":1302717526,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/367","title":"ci: setup CI for Deno","body":"Close #364","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302717526},{"id":1302720111,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/368","title":"Test on Bun","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302720111},{"id":1302764703,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/369","title":"\"serve-static\" middleware for Bun","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302764703},{"id":1302765391,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/370","title":"feat(bun): add \"serve-static\" middleware","body":"Close ##369 #368","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302765391},{"id":1302767027,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/371","title":"CI for Bun","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302767027},{"id":1302767208,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/372","title":"Test \"jwt\" middleware on Deno","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302767208},{"id":1302785439,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/373","title":"Add 'bun' keyword in package.json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302785439},{"id":1302962097,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/374","title":"Requests getting stuck in pending","body":"I'm trying to use Hono together with Bun as a local dev server. I want to serve my resources through the server. \r\nCurrently when I run the app, it is trying to serve the resources, but requests are getting stuck in pending.\r\nIt seems to random which requests freezes in pending.\r\n![image](https://user-images.githubusercontent.com/8186370/178664840-5d49acc6-8a9e-4a3a-ae74-be698c213365.png)\r\n\r\nAny suggestions?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1302962097},{"id":1303316476,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/375","title":"test(deno): add test for jwt middleware","body":"Close #372 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1303316476},{"id":1303355073,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/376","title":"ci: add CI for Bun","body":"Close #371","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1303355073},{"id":1304076572,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/377","title":"Remove `markdown-nocjsp` parser from prettier settings","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1304076572},{"id":1304170357,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/378","title":"Skip closing tag if it is an empty element","body":"Hi. According to the web standard,\nwe should skip to render the closing tag if it is an empty tag. This pull request adds the validation for the empty element. Cheers.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1304170357},{"id":1305225814,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/379","title":"how to get connectinfo(remoteAddress)","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1305225814},{"id":1305468174,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/380","title":"Support \"basic-auth\" middleware for Bun","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1305468174},{"id":1305469023,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/381","title":"Throw error when using \"jwt\" middleware on Bun","body":"` crypto.subtle.importKey` is not implemented yet on Bun.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1305469023},{"id":1305503360,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/382","title":"try adding jest coverage action","body":"Sorry, I meant to open this on the fork 😄 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1305503360},{"id":1305509058,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/383","title":"Add Jest coverage GitHub action to show Coverage Report in Pull Requests","body":"This PR partially addresses #175. I'm not sure how you'd like to make the badge, but this will show coverage for new PRs.\r\n\r\nPS: Your project is awesome! 🤓 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1305509058},{"id":1305987858,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/384","title":"Fix documentation : Add proper casting to `Post` object using `json()` method","body":"### Problem\r\n\r\nUsing the code is causing build error as below.\r\n<img width=\"1243\" alt=\"image\" src=\"https://user-images.githubusercontent.com/497812/179224141-b5687eab-6c31-48d0-8acc-b6bbf4fa357d.png\">\r\n\r\n\r\n\r\n### Reason\r\nIn the definition, we can see the `.json` method don't take any type nor any parameter. Instead it is needed to cast the response object manually.\r\n\r\n<img width=\"1587\" alt=\"image\" src=\"https://user-images.githubusercontent.com/497812/179223053-3202f4d9-ea20-42ba-a2c4-112541473315.png\">\r\n\r\n`json(): Promise<JSON>;`\r\n\r\n### Solution \r\n\r\nManually cast the response object as `Post` like below\r\n\r\n`const post = await c.req.json() as Post`\r\n\r\nIt will solve the build error.\r\n\r\n### Special note\r\n\r\nWe also need to create the `model` file and implement methods to properly solve the other build errors. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1305987858},{"id":1306206903,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/385","title":"How to modify the definition of executionCtx in Context interface?","body":"<img width=\"844\" alt=\"CleanShot 2022-07-16 at 00 01 27@2x\" src=\"https://user-images.githubusercontent.com/13938334/179262070-c0b51d52-9a3e-4224-aa2a-9ac90b87e966.png\">\r\n\r\nI'm using the js module syntax, but the tsc tell me that executionCtx maybe undefined. so how can I resolve this problem?\r\n\r\nI know I can use `c.executionCtx!.waitUntil`, is there has another solutions ?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306206903},{"id":1306585137,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/386","title":"Add compress middleware","body":"`compress` middleware solves the performance related to the transferring speed on the internet.\r\nThis pull request depends on the `CompressStream` [^1]. It might not work on the Bun because Safari cannot use no such a class. However, we can run it on Node and Deno. Please consider to employ this middleware in your project. Cheers.\r\n\r\n[^1]: https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream/CompressionStream","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306585137},{"id":1306648082,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/387","title":"feat(bun): support `basic-auth` middleware","body":"For supporting Basic Auth middleware for Bun, do not check types.\r\n\r\nClose #380 \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306648082},{"id":1306654444,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/388","title":"refactor(bun): throw error when using `jwt` middleware","body":"`jwt` middleware is not supported on Bun, yet.\r\n\r\nClose #381","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306654444},{"id":1306751097,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/389","title":"docs: update readme and create migration guide","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306751097},{"id":1306751521,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/390","title":"update to v2.0.0","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306751521},{"id":1306759365,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/391","title":"Fix `honojs/examples` for v2.0.0","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306759365},{"id":1306797217,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/392","title":"Add compress middleware","body":"Hi, I forgot to add compress middleware to middleware.ts . This pull request solves my mistake. Thanks.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306797217},{"id":1306805007,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/393","title":"chore: fix typo in error class name","body":"Noticed a small typo in error class name.\r\n\r\nExported original name for backward-compat.\r\n\r\nLet me know what you think.\r\nI'll update usages of the class everywhere else in the code if you are accepting this PR.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306805007},{"id":1306835331,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/394","title":"refactor: the log middleware and its tests","body":"Features to a better and eficient code\r\n- add **enum** to acess message types\r\n- it's not good to use mutations in code and i fix this\r\n- will define the variables with precious names\r\n- fix the time function that not calculate correctly\r\n- achieving coverage 100% :)\r\n\r\nThank you, guys!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306835331},{"id":1306852100,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/395","title":"Example using `bun:test`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306852100},{"id":1306938855,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/396","title":"fix(compress): add type for enconding name","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306938855},{"id":1306940922,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/397","title":"refactor: remove useless `async` for a better performance on Bun","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306940922},{"id":1306951510,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/398","title":"test(bun): use `bun:test`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306951510},{"id":1306975051,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/399","title":"refactor(context): executionCtx always returns ExecutionContext.","body":"This PR fixes #385.\r\n\r\n### Summary\r\n\r\nThis PR will replace executionCtx() with a getter method to check the type to runtime.\r\n\r\n### Matters for consideration\r\n\r\n#### May executionCtx() return a FetchEvent?\r\n\r\nSince the FetchEvent object satisfies the ExecutionContext interface, how about returning a FetchEvent from executionCtx() even if we have a FetchEvent? I think users will be able to use executionCtx().waitUntil() without being aware of whether it is Service Worker syntax or new Module Worker format.\r\n\r\n#### Checking the type with instanceof\r\n\r\nIn this PR, I am checking the type in `this._executionCtx instanceof FetchEvent`.\r\nI am not familiar with the performance differences, but is there anything that makes it less desirable than `'respondWith' in this._executionCtx`?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1306975051},{"id":1307052634,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/400","title":"Pass path to serve-static middleware when using cloudflare module workers","body":"I had a problem using the `{path: \"...\"}` option with the serve-static middleware when using cloudflare module workers. This should hopefully fix it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307052634},{"id":1307232001,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/401","title":"fix(logger): specify `console.log` for default print fn","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307232001},{"id":1307232986,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/402","title":"Update context.ts","body":"Allow typecast in context.get(), e.g.\r\n\r\n```ts\r\nconst user = context.get<User>('user');\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307232986},{"id":1307240193,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/403","title":"Rename `mater` to `main` for default branch","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307240193},{"id":1307247221,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/404","title":"chore: add conf file to categorize the PRs on release note","body":"Inspired by\r\nhttps://github.com/r7kamura/github-label-presets","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307247221},{"id":1307257114,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/405","title":"docs: rename `master` to `main` and remove README from middlewre directories","body":"If you want to read the document about the middleware,\r\nplease refer to the website <https://honojs.dev/>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307257114},{"id":1307384682,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/406","title":"GraphQL Server middleware as third-party","body":"Create GraphQL Server middleware as third-party middleware.\r\n\r\nThat was provided in this main repository. But from v2.0.0, we'll make the middleware that depends on other libraries as third-party middleware. It will be hosted on the `gitthub.com/honojs/grahql-server` repository and published as `@honojs/graphql-server`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307384682},{"id":1307407437,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/407","title":"Prepare to building third-party middleware","body":"We've released v2.0.x with pleasure. Then, let's go to the next step.\r\n\r\nWith v2.0.x, it became that we make the third-party middleware more easily. For Deno, separating main `mod.ts` and `middleware.ts` is good. And removed the `graphql-server` and `mustache` middleware. It's time to make third-party middleware.\r\n\r\nI'm making the template project [github.com/honojs/middleware-template](https://github.com/honojs/middleware-template) and planning to make `graphql-server` middleware after the template repository is completed.\r\n\r\nIf you ( @Code-Hex or @metrue or others? )  want to make other third-party middleware, please wait a minute until they are built. And after that, let you make the middleware by yourself or with my help.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307407437},{"id":1307493462,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/408","title":"Hono Future Plans","body":"First of: congrats for developing such a lovely project! It's exciting to see server-side JavaScript evolving.\r\n\r\nI'm curious about how you see the future of Hono.\r\n\r\nI think there is great potential and @cyco130 and myself are dabbling around with a new server framework called [HatTip](https://github.com/hattipjs/hattip). (The project was mostly done by Fatih (@cyco130) &mdash; I just co-thaught HatTip's design a little.)\r\n\r\nHono and HatTip are similar in that they both enable the user to write server code that runs on all kinds of deploy platforms.\r\n\r\nHatTip also focuses on:\r\n - https://github.com/hattipjs/hattip/issues/13\r\n - https://github.com/hattipjs/hattip/issues/18.\r\n - Deep integration With [Vite](https://vitejs.dev/)'s development server. (Enabling a deeper zero config DX for Vite users.)\r\n\r\nI wonder what your thoughs about these are?\r\n\r\nIf we could, somehow, collaborate I think that would be great, and I think I can speak for Fatih as well :-).\r\n\r\nFor example, I think we can share code about runtime adapters. Maybe we could even merge the projects altogether (more difficult though as we'd need to align about the future).\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307493462},{"id":1307959728,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/409","title":"fix(package.json): export compress middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1307959728},{"id":1309736282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/410","title":"Adding to context via middleware","body":"Howdy! I'd like to add support to hono for https://github.com/RichiCoder1/opentelemetry-sdk-workers. As part of that, I'd like to make some context variables available like `log` and `trace`.\r\n\r\nIt looks like the current shape of hono is fixed so I'd have to make a new type. Is there plans to allow middleware to extend context in the future?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1309736282},{"id":1309739102,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/411","title":"Middleware Support for fetch results","body":"Heya folks,\r\n\r\nCurrently in the process of swapping from `itty-router` and finding hono much easier to use. One hyper minor inconvenience is how fetch requests are (not) handled by middleware.\r\n\r\nWith itty, we use some simple code like:\r\n```javascript\r\nif(url.pathname === '/favicon.ico'){\r\n  return fetch('https://mainsite/favicon.ico');\r\n}\r\n```\r\n\r\nwhich now has to look something like\r\n```javascript\r\nif(url.pathname === '/favicon.ico'){\r\n  const icon = await fetch('https://mainsite/favicon.ico');\r\n  const blog = await results.blob();\r\n  return context.text(blob);\r\n}\r\n```\r\n\r\nThis is a part of our middleware to handle assets where we just proxy the favicon to avoid asset duplication as a very basic example of this usage. Would this be a reasonable expectation to be able to return the `fetch` call?\r\n\r\nThanks ✌️","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1309739102},{"id":1309960376,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/412","title":"Dynamic Import","body":"I'm trying to import a file,\r\n```js\r\nconst file = await import(\"./pages/\" + article)\r\n```\r\nBut the import doesn't seem to work and I get back this error,\r\n```\r\nError: Not supported                                                                                                                                                                                                                                      \r\n    at index.js:2936:46                                                                                                                                                                                                                                   \r\n    at async Hono2.dispatch (index.js:633:21) \r\n```\r\nNow I've tried importing the file like this,\r\n```js\r\nconst file = await import(\"./pages/test\")\r\n```\r\nand it works perfectly. So why wouldn't I be able to make it dynamic?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1309960376},{"id":1310212358,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/413","title":"`Context.platform`","body":"I want to know which platform the application works on. Is it on Cloudflare? Fastly? Bun? Deno?\r\n\r\nIf we can get the name of the platform by `Context.platform`, it's useful to make middleware or something.\r\n\r\n```ts\r\nconst name = c.platform\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1310212358},{"id":1310216708,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/414","title":"Extending Context","body":"There is a request to extend Context. Discussed at #410 and https://github.com/honojs/honojs.dev/pull/1\r\nThe possibility of adding `c.afunction()` by the middleware is a good feature, I think.\r\n\r\nBut I don't have any idea to implement it. One idea is using `declare module`:\r\n\r\n```\r\ndeclare module 'hono' {\r\n   interface Context {\r\n     afunction()\r\n   }\r\n }\r\n```\r\n\r\nIt seems to be not smart. Is there someone have other ideas?","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1310216708},{"id":1315496553,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/415","title":"docs: make a contribution guide","body":"[skip ci]\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315496553},{"id":1315524181,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/416","title":"Cache middleware","body":"Cache middleware that uses Cache API: <https://developer.mozilla.org/en-US/docs/Web/API/Cache>\r\n\r\nMinimal implementation is here:\r\n\r\n```ts\r\napp.get('*', async (c, next) => {\r\n  const key = c.req.url\r\n  const cache = caches.default\r\n  const response = await cache.match(key)\r\n  if (!response) {\r\n    await next()\r\n    c.executionCtx.waitUntil(cache.put(key, c.res.clone()))\r\n  } else {\r\n    return response\r\n  }\r\n})\r\n```\r\n\r\nIt will be \"built-in middleware\" because it's only using Web Standard API.\r\n\r\nCache API is supported only on Cloudflare Workers deployed on the custom domain. But, Deno will support in the future: <https://deno.com/deploy/docs/runtime-api>","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315524181},{"id":1315571272,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/417","title":"feat(middleware): implement Cache Middleware","body":"Cache middleware that uses Cache API: <https://developer.mozilla.org/en-US/docs/Web/API/Cache>\r\n\r\nUsage:\r\n\r\n```ts\r\napp.get('*', cache({ cacheName: 'my-app', cacheControl: 'max-age=3600' }))\r\n```\r\n\r\nCache API is supported only on Cloudflare Workers deployed on the custom domain. But, Deno will support it in the future: <https://deno.com/deploy/docs/runtime-api>\r\n\r\nClose #416 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315571272},{"id":1315768519,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/418","title":"Named Parameters applying to routes differently with TrieRouter than RegExpRouter","body":"Hey, thank you for the work on the library.\r\n\r\nI was following some of the instructions in the docs and changed one of the examples and noticed some unexpected behavior.\r\n\r\n```\r\n// Snippet changed slightly from the docs here.\r\n// https://honojs.dev/docs/api/routing/#routing-priority\r\n\r\napp.get(\"/book/a\", (c) =>\r\n  c.text(c.req.param(\"slug\") || \"no-slug\"))\r\n)\r\napp.get(\"/book/:slug\", (c) =>\r\n  c.text(c.req.param(\"slug\") || \"no-slug-at-slug-endpoint\")\r\n)\r\n```\r\n\r\nHitting the endpoints, I get the following results.\r\n\r\n```\r\n$ curl http://localhost:8787/book/a\r\na\r\n$ curl http://localhost:8787/book/foo\r\nfoo\r\n```\r\n\r\nThe TrieRouter unexpectedly seems to be applying the Named Parameter parsing rule from the second route to the first.\r\n\r\nIf I use the `RegExpRouter` instead, I get the results I expect.\r\n\r\n```\r\n$ curl http://localhost:8787/book/a\r\nno-slug\r\n$ curl http://localhost:8787/book/foo\r\nfoo\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315768519},{"id":1315785991,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/419","title":"fix(trie-router): fix the rule for capturing named parameters","body":"It should work:\r\n\r\n```ts\r\napp.get('/book/a', (c) => {\r\n  return c.text(c.req.param('slug') || 'no-slug')\r\n})\r\n\r\napp.get('/book/:slug', (c) => {\r\n  return c.text(c.req.param('slug') || 'no-slug-at-slug-endpoint')\r\n})\r\n```\r\n\r\n```\r\n$ curl http://localhost:8787/book/a\r\nno-slug\r\n$ curl http://localhost:8787/book/foo\r\nfoo\r\n```\r\n\r\nClose #418","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315785991},{"id":1315815006,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/420","title":"feat(jsx): support `jsxImportSource`","body":"Support `jsxImportSource`.\r\nYou can use this option on Bun and Deno (Wrangler does not support it).\r\nif you write tsconfig as below, JSX middleware will be enabled without `import { jsx } from 'hono/jsx'`.\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  }\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315815006},{"id":1315852278,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/421","title":"fix(package.json): fix path for exporting `jsx/jsx-runtime` types","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315852278},{"id":1315883001,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/422","title":"fix(jsx/bun): do not escape children","body":"For JSX middleware on Bun.\r\nFix bug that JSX `children` will force escaped.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1315883001},{"id":1317555659,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/423","title":"Sentry Middleware","body":"We can make \"Sentry Middleware\" using \"Toucan\". It will be as a third-party middleware.\r\n\r\n<https://github.com/robertcepa/toucan-js>\r\n\r\nIf we decide to make it, the repository and package name will be:\r\n\r\n```\r\ngithub.com/honojs/sentry\r\n@honojs/sentry\r\n```\r\n\r\nBelow is the description of how to make third-party middleware:\r\n\r\n<https://github.com/honojs/hono/blob/main/docs/CONTRIBUTING.md#third-party-middleware>","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1317555659},{"id":1319294036,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/424","title":"Create middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1319294036},{"id":1320874248,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/425","title":"Validator Middleware","body":"I have an idea, \"*Validator Middleware*\".\r\n\r\nI plan that I'll make it with [validator.js](https://github.com/validatorjs/validator.js), which is used in [express-validator](https://express-validator.github.io/docs/). So, it will depend on the external library, which will be a \"third-party\" middleware.\r\n\r\nThe express middleware is helpful, but it's a bit fat, and it seems not too easy to implement. And \"just do porting\" is not like Hono. I want to make the \"*Validator Middleware*\" simpler than the express middleware. Below is the synopsis that on my head now:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.use(\r\n  '/',\r\n  validator((v) => [\r\n    {\r\n      rule: v.isAlpha,\r\n      field: 'query',\r\n      name: 'q',\r\n    },\r\n  ])\r\n)\r\n\r\napp.get('/', (c) => {\r\n  const res = validatorResult(c)\r\n  return c.json(res)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nI'll try to build it on `github.com/honojs/validator` repository. So if it's ready, please take a look!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1320874248},{"id":1320898843,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/426","title":"bun example does not render correctly","body":"Following the bun [example docs](https://honojs.dev/docs/getting-started/bun/)\r\n\r\nI get the following output 🤔 \r\n\r\n![image](https://user-images.githubusercontent.com/8753040/181505295-5a13ab58-b8f1-41ee-b1f3-03dfc29fc0c8.png)\r\n\r\n**src/index.tsx**\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport * as React from 'react'\r\nimport { renderToString } from 'react-dom/server'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const hello = (\r\n    <html>\r\n      <body>\r\n        <h1>Hello! React!</h1>\r\n      </body>\r\n    </html>\r\n  )\r\n  return c.html(renderToString(hello))\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n**tsconfig.json**\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"lib\": [\r\n      \"dom\",\r\n      \"dom.iterable\",\r\n      \"esnext\"\r\n    ],\r\n    \"module\": \"esnext\",\r\n    \"target\": \"esnext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\",\r\n    \"types\": [\r\n      \"bun-types\"\r\n    ],\r\n  }\r\n}\r\n```\r\n\r\n# versions\r\nbun 0.1.5\r\nhono 2.0.5","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1320898843},{"id":1320959919,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/427","title":"`checked` in JSX middleware","body":"When I want to set the value of attributes according to the condition which is true or false, it is to be:\r\n\r\n```tsx\r\n<input value={true ? 'foo' : 'bar'} />\r\n```\r\n\r\nBut how can I make the checkbox to be unchecked?\r\nCan I render `checked` if it is true, or **do not** render the `checked` if it is false:\r\n\r\nI want to make the below tag:\r\n\r\n```tsx\r\n<input type='checkbox' checked /> <!-- If true -->\r\n<input type='checkbox' /> <!-- If false -->\r\n```\r\n\r\nBut, I can't:\r\n\r\n```tsx\r\n<input type='checkbox' checked={false}/> <!-- NG: It will be checked -->\r\n<input type='checkbox' {true ? 'checked' : ''}/> <!-- NG: Syntax error, and it will be checked -->\r\n```\r\n\r\nHow can I remove `checked` if it is false? I think we should implement it.\r\n\r\nRef: [html - What values for checked and selected are false? - Stack Overflow](https://stackoverflow.com/questions/4228658/what-values-for-checked-and-selected-are-false)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1320959919},{"id":1321207284,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/428","title":"await c.req.parseBody, 500 internal server error","body":"Calling\r\n\r\n`const body = await c.req.parseBody()`\r\n\r\nresults in a 500 internal server error if no body is submit. c.req.bodyUsed can be used to bypass this, but imo this should be checked inside parseBody()","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1321207284},{"id":1321517793,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/429","title":"feat(context): Introduce ContextVariableMap.","body":"Allows the user to type the value of `ctx.set('variable', var)` or `ctx.get('variable')`.\r\n\r\nThis is one of the ideas to solve the #414 problem, but even if this were not used to solve #414, I think this would still be a useful feature.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1321517793},{"id":1321553524,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/430","title":"fix(jsx): Fix for JSX checked and selected props","body":"Fixes #427:\r\n- `checked` and `selected` will not be rendered when set to false\r\n- `checked=\"checked\"` and `selected=\"selected\"` will be rendered when no value set or set to `true`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1321553524},{"id":1321562916,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/431","title":"GitHub Sponsorship","body":"[Drivly](https://github.com/drivly) would like to sponsor Hono.  @yusukebe would you be open to that?\r\n\r\nWe offer simple unified APIs to buy and sell cars online, and we're funded by some of the [biggest names](https://twitter.com/TurnerNovak) in [automotive](https://fontinalis.com/team/#bill-ford) and [finance & insurance](https://www.detroit.vc)\r\n\r\nOur entire infrastructure is also built on Cloudflare Workers, and we're using Hono extensively.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1321562916},{"id":1322400418,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/432","title":"parseBody not working in Middleware?","body":"`await c.req.parseBody()` seems not to be defined if used inside `app.use('*', async (c, next) => {`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1322400418},{"id":1322986675,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/433","title":"fix(`parseBody`): return blank object when JSON body is nothing","body":"If incomming request content-header is `application/json`, but the body is nothing, it was throwing 500 internal server error. It's better to return bank object `{}` if this situation.\r\n\r\nFix #428","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1322986675},{"id":1323005501,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/434","title":"Apollo Server Middleware","body":"How about building [Apollo Server](https://www.apollographql.com/docs/apollo-server/) Middleware as third-party middleware?\r\n\r\nGraphQL middleware is available, but Apollo Sever middleware would be nice to have. Repository and npm repository name will be:\r\n\r\n* `github.com/honojs/apollo-server`\r\n* `@honojs/apollo-server`\r\n\r\nWe can use this issue https://github.com/apollographql/apollo-server/issues/6034#issuecomment-1198712473 as a reference. ","state":"open","labels":"[\"enhancement\",\"middleware\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323005501},{"id":1323305559,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/435","title":"perf(jsx): Performance Tuning for JSX","body":"### Benchmark script\r\n\r\nI have added a benchmark script, albeit a simplified one, to provide a clue for discussion.\r\n\r\n### Result\r\n\r\n#### before\r\n\r\n```\r\nrender x 55,038 ops/sec ±4.28% (94 runs sampled)\r\n```\r\n\r\n#### after\r\n\r\n```\r\nrender x 66,330 ops/sec ±3.28% (96 runs sampled)\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323305559},{"id":1323433104,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/436","title":"How can I customize the response if Basic Authentication is not correct?","body":"How can I customize the response if Basic Authentication is not correct?\r\nif not, Is there any plan to implement this?\r\n\r\nI would like to return the response in json.\r\n```\r\n{\"message\":\"Unauthorized.\"}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323433104},{"id":1323467849,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/437","title":"JWT Middleware to Support Cookies?","body":"Today the JWT middleware only works with authorization headers and not cookies\r\n```\r\nconst credentials = ctx.req.headers.get('Authorization')\r\n```\r\n\r\nWhat if an optional param to the options:\r\n```\r\nexport const jwt = (options: { secret: string; alg?: string; cookie?: string }) => {\r\n```\r\n\r\nThen the above code could be modified to something like:\r\n```\r\nconst credentials = ctx.req.headers.get('Authorization') ?? ctx.req.cookie[cookie]\r\n```\r\n\r\nWhat do you think?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323467849},{"id":1323486367,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/438","title":"#Hono & #Bun Post Form Data","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323486367},{"id":1323641702,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/439","title":"JSX performance improvement","body":"In #435, we found that JSX in hono is not that fast, so we will improve performance.\r\n\r\n### Key points for improvement\r\n\r\n#### Make `escape` faster\r\n\r\nWe can make `escape` faster by avoiding using `String.prototype.replace`, as we do in react.\r\n\r\nhttps://github.com/facebook/react/blob/3f3b46c845333be5d8efcd9acb06e3ff57358189/packages/react-dom/src/server/escapeTextForBrowser.js#L51-L94\r\n\r\n#### Reduce generation of string objects\r\n\r\nAdding strings to the buffer reduces the generation of string objects.\r\n\r\n#### Avoid `Array.prototype.flat(Infinity)`\r\n\r\n`Array.prototype.flat(Infinity)` is very useful, but it is slow and should not be used.\r\n\r\n\r\n### POC\r\n\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:poc-pref-jsx\r\n\r\n#### Benchmark\r\n\r\n```\r\nHono x 246,570 ops/sec ±1.04% (88 runs sampled)\r\nReact x 132,325 ops/sec ±9.23% (82 runs sampled)\r\nPreact x 100,303 ops/sec ±4.16% (83 runs sampled)\r\nNano x 24,140 ops/sec ±6.48% (82 runs sampled)\r\nFastest is Hono\r\n```\r\n\r\nI think we ought to get this done!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323641702},{"id":1323721616,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/440","title":"Honojs shows 404 Not Found in Postman on app.delete() route with sqlite db","body":"I have used the url in Postman is http://localhost:3000/user/1 on my local bun server.\r\nIn case id 1 already exists in database.\r\nMy Code: \r\napp.delete(\"/user/:id\", async (c)=> {\r\n  const id  = await c.req.param('id');\r\n  console.log(id);\r\n  db.run(\"DELETE FROM users WHERE id=?\",id);\r\n  return c.json({message: 'Deleted'});\r\n});\r\n\r\nbut other routes are working well.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323721616},{"id":1323856713,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/441","title":"feat(jwt): enable token in cookie","body":"Close https://github.com/honojs/hono/issues/437","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1323856713},{"id":1324348443,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/442","title":"Write about third-party MW on `honojs.dev`","body":"We have to write about third-party middleware on `honojs.dev`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1324348443},{"id":1324852685,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/443","title":"[New Standard] Middlewares that work with any framework (Hono, HatTip, ...)","body":"Both [Hono](https://honojs.dev/) and [HatTip](https://github.com/hattipjs/hattip) enable third-party libraries (auth libraries, GraphQL libraries, ...) to provide server middlewares for automatic integration: for example, a GraphQL library providing a Hono middleware enables the user to use that middleware to easily integrate the GraphQL library to the user's Hono app.\r\n\r\nHono and HatTip support a wide range of server-side JavaScript environments (Node.js, Cloudflare Workers, Deno, ...), which means that these middlewares work in any of these environments.\r\n\r\nBut, as a library author, I wouldn't want to have to write one middleware per framework (a Hono middleware + a HatTip middleware + ...).\r\n\r\nInstead I'd want to define a single universal middleware that works with any framework:\r\n\r\n```js\r\n// node_modules/some-library/dist/universal-middleware.js\r\n\r\nexport default myMiddleware({ url }) {\r\n  if (url === '/hello') {\r\n    return new Response(\"Hello from a universal middleware!\");\r\n  }\r\n}\r\n```\r\n\r\n```json5\r\n// node_modules/some-library/package.json\r\n{\r\n  \"name\": \"some-library\",\r\n  \"exports\": {\r\n    \"./universal-middleware\": \"./dist/universal-middleware.js\"\r\n  }\r\n}\r\n```\r\n\r\nThis means that `import middleware from 'some-library/universal-middleware'` would work with Hono as well as with HatTip.\r\n\r\nA couple of thoughts:\r\n - Since the [Fetch API is part of WinterCG](https://github.com/wintercg/fetch), it's likely going to end up being the lowest common denominator of all JavaScript environments. It's probably a good start for defining the standard of such universal middleware.\r\n - I don't think we need any routing mechanism (AFAICT): when you think about it, the server middleware of most third-party libraries have simple routing schemes (e.g. GraphQL is a single endpoint). Routing really only is a end-user thing.\r\n - If we define some kind of context object then it should be basic so that frameworks (Hono/HatTip/...) can easily integrate these universal middlewares.\r\n - It's much more appealing to knock at the door of third-party libraries and ask them to implement one universal middleware, instead of asking them to implement one middleware per framework (Hono/HatTip/...).\r\n\r\nIdeally this standard would be part of [WinterCG](https://wintercg.org/) (CC @crowlKats @legendecas @littledivy @lucacasonato @MylesBorins @panva @RaisinTen @ryzokuken @surma @targos @tniessen). (Sorry for the mass pinging; I'm not sure who I should ping.)\r\n\r\nCC @cyco130 (HatTip author).\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1324852685},{"id":1325073551,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/444","title":"perf(jsx): JSX performance improvement","body":"This PR fixes #439.\r\n\r\n### Changes\r\n\r\nThere are no changes to the external specification in this PR, and we can continue to stringify templates with `(<p>text</p>).toString()`. However, there are some changes in the internal structure.\r\n\r\n#### `jsx` returns `JSXNode` instead of `HtmlEscapedString`\r\n\r\nPreviously, upon calling `jsx`, basic stringification was completed and an `HtmlEscapedString` object was returned, but with this PR, a data-wrapped `JSXNode` is returned upon calling `jsx`. The stringification is done at `toString()` call.\r\n\r\n### Discussion\r\n\r\nWith this PR, `escape` defined in utils/html is no longer used inside the hono repository. (Only `escapeToBuffer` is used.)\r\n\r\nThe `escape` function is fast enough and convenient for hono users to use in their applications, but depending on policy, it could be removed as unnecessary.\r\n\r\n### Benchmark\r\n\r\n```\r\nHono x 173,197 ops/sec ±2.16% (93 runs sampled)\r\nReact x 84,569 ops/sec ±2.81% (91 runs sampled)\r\nPreact x 61,307 ops/sec ±3.21% (86 runs sampled)\r\nNano x 16,871 ops/sec ±5.46% (78 runs sampled)\r\nFastest is Hono\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1325073551},{"id":1325092219,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/445","title":"Remove `escape` function in `utils/html`","body":"It's not been used in any modules since I merged PR #444.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1325092219},{"id":1325108761,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/446","title":"refactor(jsx): Support all the boolean attributes.","body":"I think it is better to support all boolean attirbutes listed in the table below.\r\nhttps://html.spec.whatwg.org/#attributes-3\r\n\r\nAnd, supporting all of them will not affect performance.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1325108761},{"id":1325216787,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/447","title":"Suggestion: use `unknown` instead of `any` for parseBody","body":"Unknown is safer and avoids this typescript-eslint error.\r\n\r\n<img width=\"637\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1948935/182282205-e48f9cfe-8d9c-4cf0-94fc-61e3f01d64a6.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1325216787},{"id":1326582816,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/448","title":"refactor: make `parsedBody` type as `Body`","body":"Close #447","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1326582816},{"id":1326594163,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/449","title":"refactor(`utils/html`): rename `Buffer` to `StringBuffer`","body":"Ranamed `Buffer` to `StringBuffer` in `utils/html`.\r\n\r\nFixed namespace conflicts. denoify force polyfill the type named `Buffer` for [Buffer](https://nodejs.org/api/buffer.html) module.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1326594163},{"id":1326597587,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/450","title":"refactor(`utils/html`): remove `escape` function","body":"Close #445","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1326597587},{"id":1327711898,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/451","title":"Crypto createHash function is not type safe, breaking eTag middleware & timingSafeEqual","body":"The [createHash](https://github.com/honojs/hono/blob/main/src/utils/crypto.ts#L26) function in the provided utils is not typesafe for any non-string based data. Any Object that does not natively cast itself to a string, such as JSON, will result in a hash of `[object Object]` which is `c1d44ff03aff1372856c281854f454e2e1d15b7c`. This value is found on one of the [Etag Tests](https://github.com/honojs/hono/blob/main/src/middleware/etag/index.test.ts#L27) as well.\r\n\r\nYou can replicate this with a basic eTag example where the content always changes:\r\n\r\n```javascript\r\nimport {Hono} from 'hono';\r\nimport {etag} from 'hono/etag';\r\n\r\nconst app = new Hono();\r\n\r\napp.use('*', etag());\r\n// will never respond with a 304, as expected\r\napp.get('/text', async context => context.text(JSON.stringify({random: crypto.randomUUID()})));\r\n// will unexpectedly respond with a 304 on subsequent, despite content changing\r\napp.get('/json', async context => context.json({random: crypto.randomUUID()}));\r\n\r\nexport default app;\r\n```\r\n\r\nThis affects:\r\n - eTag Middleware\r\n - Buffer util: `timingSafeEqual` comparison","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1327711898},{"id":1327895393,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/452","title":"fix(`utils/crypto`): stringify the parameter which is object in `createHash`","body":"If an object type was passed as a parameter, the values would all be the same.\r\n\r\nI've fixed it by making the object a different value by JSON.stringiy.\r\n\r\nIf the output values from the \"object\" and the \"string\" value are the same, the hash value will be the same. This is a specification.\r\n\r\nFix #451","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1327895393},{"id":1329201773,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/453","title":"refactor: add `Json` type for JSON object","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1329201773},{"id":1329286047,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/454","title":"fix(utils/crypto): make Binary and JSON object crypto correct","body":"JSON object and Binary such ArrayBuffer or Uint8Array are not cryptos correctly.\r\nIn this PR, make a crypto hash according to the type of parameters.\r\n\r\nFix #451","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1329286047},{"id":1330815545,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/455","title":"v2.0.6 npm package does not contains committed source code","body":"`src/middleware/jwt/index.ts` in v2.0.6 Release is older version\r\n\r\nnew version contains  JWT Middleware to Support Cookies \r\n\r\nhono is great ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1330815545},{"id":1330888377,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/456","title":"Documentation on Types?","body":"There doesn't seem to be documentation for Types, but several types are unclear, specifically\r\n\r\nThis is what a handler looks like:\r\n```js\r\n(c: Context<string>) => ...\r\n```\r\nexcept I don't really understand what the Type passed to Context actually is doing, especially since it's defined as `RequestParamKeyType extends string`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1330888377},{"id":1331929276,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/457","title":"Event in c.event is undefined when testing","body":"Here is my jest config:\r\n\r\n```\r\nimport dotenv from 'dotenv'\r\n\r\ndotenv.config({\r\n\tpath: '.env.test'\r\n})\r\n\r\nexport default {\r\n  testEnvironment: 'miniflare',\r\n  moduleFileExtensions: ['js', 'jsx', 'mjs'],\r\n  coverageThreshold: {\r\n    global: {\r\n        branches: 70,\r\n        functions: 70,\r\n        lines: 70,\r\n        statements: 70,\r\n    },\r\n  },\r\n  coverageReporters: ['json-summary', 'html'],\r\n  testTimeout: 10000,\r\n  testRegex: '(\\/tests\\/.*|(.|\\/))test.(mjs?|jsx?|js?|tsx?|ts?)$',\r\n  testEnvironmentOptions: {\r\n    kvNamespaces: ['PRESALE_API']\r\n  }\r\n}\r\n```\r\n\r\nThe test is pretty basic I call an endpoint that calls event.waituntil and it inputs something into cloudflare kv cache. Here is the context.event when running locally using miniflare which works fine locally and in cloudflare:\r\n\r\n```\r\n  event: FetchEvent {\r\n    type: 'fetch',\r\n    defaultPrevented: false,\r\n    cancelable: false,\r\n    timeStamp: 4124.764995008707\r\n  }\r\n```\r\n\r\nBut when I run it using jest:\r\n\r\n```\r\nContext {\r\n      _status: 200,\r\n      _pretty: false,\r\n      _prettySpace: 2,\r\n      req: Request {\r\n        [Symbol(realm)]: { settingsObject: {} },\r\n        [Symbol(state)]: {\r\n          method: 'GET',\r\n          localURLsOnly: false,\r\n          unsafeRequest: false,\r\n          body: null,\r\n          client: {},\r\n          reservedClient: null,\r\n          replacesClientId: '',\r\n          window: 'client',\r\n          keepalive: false,\r\n          serviceWorkers: 'all',\r\n          initiator: '',\r\n          destination: '',\r\n          priority: null,\r\n          origin: 'client',\r\n          policyContainer: 'client',\r\n          referrer: 'client',\r\n          referrerPolicy: '',\r\n          mode: 'cors',\r\n          useCORSPreflightFlag: false,\r\n          credentials: 'same-origin',\r\n          useCredentials: false,\r\n          cache: 'default',\r\n          redirect: 'follow',\r\n          integrity: '',\r\n          cryptoGraphicsNonceMetadata: '',\r\n          parserMetadata: '',\r\n          reloadNavigation: false,\r\n          historyNavigation: false,\r\n          userActivation: false,\r\n          taintedOrigin: false,\r\n          redirectCount: 0,\r\n          responseTainting: 'basic',\r\n          preventNoCacheCacheControlHeaderModification: false,\r\n          done: false,\r\n          timingAllowFailed: false,\r\n          headersList: [HeadersList],\r\n          urlList: [Array],\r\n          url: [URL]\r\n        },\r\n        [Symbol(signal)]: AbortSignal { aborted: false },\r\n        [Symbol(headers)]: HeadersList {\r\n          [Symbol(headers map)]: [Map],\r\n          [Symbol(headers map sorted)]: null\r\n        }\r\n      },\r\n      env: {},\r\n      executionCtx: undefined,\r\n      notFoundHandler: [Function (anonymous)],\r\n      finalized: false,\r\n      _map: {\r\n        projectId: 'dev',\r\n        payload: {\r\n          user: '12345678',\r\n          role: 'user',\r\n          exp: 1659969502,\r\n          projectId: 'dev',\r\n          signupDate: 1659967702,\r\n          purchased: false,\r\n          type: 'access',\r\n          iat: 1659967702\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\nEvent isn't defined anywhere.\r\n\r\nWhat am I doing wrong? I am using Hono 1.6.4, I can upgrade if it would help.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1331929276},{"id":1331978432,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/458","title":"Cannot download/stream file greater than 128mb using hono","body":"My team and I have been using hono in many services and loving it a lot.\r\nHowever recently we made a worker to download our files from an r2 bucket, but whenever we tried, it gave errors.\r\n\r\nWhenever I try to download a large file:\r\n```\r\nGET https://mybucket.mydomain.com/get/test200m - Ok @ 08/08/2022, 20:06:00\r\n  (log)   <-- GET /get/test200m\r\n  (error) TypeError: Memory limit would be exceeded before EOF.\r\n    at parseBody (index.js:334:35)\r\n    at index.js:970:49\r\n    at async index.js:884:9\r\n    at async index.js:793:9\r\n    at async index.js:902:9\r\n    at async Hono2.dispatch (index.js:733:21)\r\n  (log)   --> GET /get/test200m 500 155ms\r\n``` \r\n\r\nThe URL `/get/test200m` gives me `Internal Server Error`.\r\n\r\nI tried working around it and found that normal module workers were able to easily perform this operation.\r\n\r\nHono code to download file, which *does not work*:\r\nhttps://github.com/divideprojects/cdn/blob/6f1c5178ea33b2f19e7cdd72bbdc9873e538aafc/src/_fileOperations.ts#L6...L32\r\nhono routes:\r\nhttps://github.com/divideprojects/cdn/blob/6f1c5178ea33b2f19e7cdd72bbdc9873e538aafc/src/index.ts#L21\r\n\r\n\r\nWithout hono, which *works*:\r\nhttps://github.com/divideprojects/cdn/blob/21550bb848fc016c3a83338236fe4700681e8df9/src/index.ts#L36..L75\r\n\r\nI was able to download the file without hono but with hono I'm running into issues.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1331978432},{"id":1332492332,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/459","title":"`ico` extension file should be `image/x-icon`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1332492332},{"id":1332583720,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/460","title":"refactor(compose): cache length","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1332583720},{"id":1332589301,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/461","title":"fix(ETag): fixed an error when the file size is too large.","body":"Made `utils/crypto` supports `ReadbleStream`.\r\n\r\nFix #458","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1332589301},{"id":1332596563,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/462","title":"refactor(mime): made `.ico` file's extension to `image/x-icon`","body":"Close #459","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1332596563},{"id":1334535254,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/463","title":"fix(context): fix header values shifting","body":"Header values in Context may sometimes be \"shifting\" This PR does:\r\n\r\n* Handle header values as lowercase.\r\n* Fix the order of setting headers.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1334535254},{"id":1335347506,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/464","title":"Setup twitter account `@honojs`","body":"I've already got twitter account `@honojs`. This account will be helpful in promoting Hono.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1335347506},{"id":1336675790,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/465","title":"fix(context): fixed `ContextVariableMap` is not enabled in built code","body":"`ContextVariableMap` was not available on the built code for the npm library. We have to write the lines in this PR.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1336675790},{"id":1338118247,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/466","title":"perf(compose): optimize `await`","body":"Do not `await` if the handler is not Promise in `compose`.\r\n\r\n## Benchmark Results\r\n\r\nAlthough all routes are \"sync\", I could see a large improvement in performance.\r\n\r\n```\r\nhono - trie-router(default) x 393,919 ops/sec ±4.52% (86 runs sampled)\r\nhono - regexp-router x 478,140 ops/sec ±2.85% (83 runs sampled)\r\nhono optimized - trie-router(default) x 427,940 ops/sec ±4.32% (81 runs sampled)\r\nhono optimized - regexp-router x 512,488 ops/sec ±5.28% (75 runs sampled)\r\nFastest is hono optimized - regexp-router\r\n✨  Done in 28.36s.\r\n```\r\n\r\n## Deno\r\n\r\nNot so different on Deno.\r\n\r\n```\r\nBefore: Requests/sec: 50226.7374\r\nAfter: Requests/sec: 50296.9231\r\n```\r\n\r\n## Bun\r\n\r\nOn Bun, will be 15% faster.\r\n\r\n```\r\nBefore: Requests/sec: 57043.0018\r\nAfter:  Requests/sec: 65658.9860\r\n```\r\n\r\n## Note\r\n\r\nThe test on the bottom in `hono.test.ts` was wrong. So, I've rewritten, and all tests are passed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1338118247},{"id":1338380926,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/467","title":"docs(readme): update benchmark results","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1338380926},{"id":1338381729,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/468","title":"chore: add `FUNDING.yml`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1338381729},{"id":1338418440,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/469","title":"fix(compose): Support a handler that non-async and returning a promise.","body":"#466 is awesome!\r\n\r\nHowever, we should also support asynchronous functions that are not 'AsyncFunction'.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1338418440},{"id":1343022207,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/470","title":"Can  hono run on  multiple cores?","body":"I run benchmark, but there is only one deno process.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1343022207},{"id":1343291227,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/471","title":"Akamai EdgeWorkers support","body":"I'd love to see support for Akamai EdgeWorkers. I think it might be a stretch considering the difference in supported APIs, but it would be great to have a tool like this for building with. Maybe we can keep this issue as a future feature, or feel free to close it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1343291227},{"id":1343815915,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/472","title":"Types for `c.set` and `c.get`","body":"By #429, we can set the Type for `c.set` and `c.get` functions. This is a fine way to set/get the specific property used in the Middleware.\r\n\r\n```ts\r\ntype WebClient = {\r\n  user: string\r\n  pass: string\r\n}\r\n\r\ndeclare module 'hono' {\r\n  interface ContextVariableMap {\r\n    client: WebClient\r\n  }\r\n}\r\n\r\n//...\r\n\r\napp.use('*', async (c, next) => {\r\n  const client: WebClient = { user: 'foo', pass: 'bar' }\r\n  c.set('client', client)\r\n  await next()\r\n})\r\n\r\napp.get('/foo', (c) => {\r\n  const client = c.get('client') // client is `WebClient`\r\n  return c.text('foo')\r\n})\r\n```\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/185519526-5700022b-ca41-49a2-aaa4-14dac5f4bfe4.png)\r\n\r\nIt's a great feature, thanks to @usualoma .\r\n\r\nNow I want that this could be made more portable and easy to use for users, not the library author. Specifically, it's good if the following code is all needed to complete the project. The point is \"without `declare module`\".\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  const client: WebClient = { user: 'foo', pass: 'bar' }\r\n  c.set('client', client)\r\n  // OR\r\n  c.set<WebClient>('client', client)\r\n\r\n  await next()\r\n})\r\n\r\napp.get('/foo', (c) => {\r\n  // show the \"type hint\" like above in VSCode\r\n  const client = c.get('client') // client is `WebClient`\r\n  return c.text('foo')\r\n})\r\n```\r\n\r\nThis is very short, and every user can use `set/get` with Types.\r\n\r\n**BUT**\r\n\r\nI think this is too difficult to implement, or **no way** to implement it exists. We can't treat \"Type\" this way. I know this is an optimistic thought. But I want to do that. Does anyone know how to make it come true, or do you know other similar API designs to ?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1343815915},{"id":1344683988,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/473","title":"perf(trie-router): fine tuning, 9~10% faster","body":"I did some minor tweaking of the TrieRouter and made it 9-10% faster.\r\n\r\n```\r\nhono - trie-router(default) x 434,571 ops/sec ±4.82% (81 runs sampled)\r\nhono - [Optimized] trie-router(default) x 465,051 ops/sec ±3.45% (87 runs sampled)\r\nhono - regexp-router x 528,354 ops/sec ±4.34% (84 runs sampled)\r\nitty-router x 201,821 ops/sec ±4.02% (88 runs sampled)\r\nsunder x 320,189 ops/sec ±2.17% (88 runs sampled)\r\nworktop x 191,326 ops/sec ±2.88% (83 runs sampled)\r\nFastest is hono - regexp-router\r\n✨  Done in 44.36s.\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1344683988},{"id":1345367433,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/474","title":"can you give sample request Bearer and JWT with curl","body":"i use Bearer auth in hono\r\nmy code :\r\napp.use(\r\n  '/*',\r\n  bearerAuth({\r\n    token: 'redss', // Required\r\n    realm: 'redss.com',\r\n    prefix: 'Bot',\r\n    hashFunction: (d: string) => SHA256(d).toString() // For Fastly Compute@Edge\r\n  })\r\n)\r\napp.get('/', (c) => c.text('Hello! 123!'))\r\nCurl Command  = ????\r\n\r\n\r\nand JWT\r\nmy code :\r\napp.use(\r\n  '/*',\r\n    jwt({\r\n    secret: 'tolol123'\r\n  })\r\n)\r\napp.get('/', (c) => c.text('Hello! 123!'))\r\nCURL command = ?????\r\n\r\n\r\nsorry noob","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1345367433},{"id":1345384285,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/475","title":"Deno: serveStatic streams","body":"Would be great to have an option for the Deno serveStatic middleware to use streams as the response.\r\n\r\nhttps://deno.land/std@0.152.0/streams/mod.ts?s=readableStreamFromReader","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1345384285},{"id":1347252408,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/476","title":"fix(context): export `ContextVariableMap` correctly","body":"`ContextVariableMap` is not working in the npm package because it's not exported from 'dist/hono/index`. In this PR, I've made that export correctly.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1347252408},{"id":1347373135,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/477","title":"[Proposal] Middleware hosting and CI/CD automation","body":"Hi, I've just briefly talked with @yusukebe about the way to host 3rd party middleware under `honojs` GitHub organization and publish them to npm and deno registries. I recently went through Jenkins plugin development processes and was really impressed how they manage such a huge ecosystem by using the similar concept. I believe we can get some insights from them and build a smart solution. Here is my rough proposal. Thank you for reading this proposal in advance!\r\n\r\n## Summary\r\n**We can create a dedicated GitHub and npmjs team for each 3rd party middleware and manage fine-grained access control for the hosted repository and the published package. We can start from whole manual workflow and gradually automate them by implementing several bots.**\r\n\r\n## Source code hosting\r\nWe'd like to host all middleware as a GitHub repository under `honojs` GitHub organization to give more credibility to our users comparing with the ones hosted under arbitrary user/organization. The issue here is how to manage membership because the authors of 3rd party middleware shouldn't have write access to other `honojs` repository. Jenkins ([`jenkinsci` organization](https://github.com/jenkinsci)) hosts all 3rd party plugins by following the procedure below:\r\n\r\n1. A contribute creates a public GitHub repository for the plugin under any GitHub user/organization.\r\n2. Once they finish the initial implementation, they cut an GitHub issue for \"Hosting request\" like https://github.com/jenkins-infra/repository-permissions-updater/issues/2708\r\n3.  Some automated processes evaluate the request. Also, a few community members review it, then approve/reject.\r\n4. Then, the automated process generally does:\r\n    1. Fork the original repository under `jenkinsci` organization. Ask the requester to delete their original repository.\r\n    2. Creates a dedicated GitHub team like [this](https://github.com/orgs/jenkinsci/teams/autify-plugin-developers) and add the requested author(s). The list is managed by their infra repository like [this](https://github.com/jenkins-infra/repository-permissions-updater/blob/master/permissions/plugin-autify.yml)\r\n    3. Give Admin permission of the repository to the new GitHub team\r\n\r\nAfter these steps, the author(s) have the full permission of the hosted repository like they had before beautifully. I believe we can mimic the way Jenkins does, manually first and automatically once we implement the bots.\r\n\r\n## Package publishing\r\nWe'd like to publish all middleware under `@honojs` scope for the same reason as the source code hosting. The issue here is how to give fine-grained permission to the authors of 3rd party middleware. Let's look into the Jenkins example again:\r\n\r\n1. In the \"Hosting request\", they also give release permissions to the requested members which allows them to manipulate Maven artifacts hosted by Jenkins team. This is done by giving the package release permission on the hosted repository website via bot.\r\n2. They also allow the authors to fully automate the release process by giving some credentials to the GitHub repository via GitHub Actions Secrets. \r\n\r\nAs you can see above, the concept is similar to the source code hosting and we can apply this idea to our package publishing as well. npmjs supports teams under organizations and we can assign selected packages and members to the team like GitHub's team.\r\nTo automate the publishing, we should create a machine user per repository on npmjs, invite it to the npmjs's team and generate an automation token (allowed to bypass 2FA), and give the token to the repository via GitHub Actions Secrets.\r\n\r\nNote: We also want to do the similar thing for Deno but https://deno.land/x doesn't support scope or namespace as far as I know. So, we might need to consider to use other hosting like https://esm.sh/. We don't discuss Deno now in this issue but will do later.\r\n\r\n## Other opinions\r\nThis is my preference but I would recommend you to name all middleware repositories prefixed or suffixed by `middleware` or something e.g. `honojs/middleware-sentry` or `honojs/sentry-middleware`. This enables us to identify which repositories are for middleware very easily. Jenkins requests all new plugins to name suffixed by `-plugin`. This also can avoid unnecessary future name conflicts.\r\n\r\n## References\r\nOriginal discussion: https://github.com/honojs/hono/issues/350\r\n\r\n----\r\n\r\nFeel free to comment any feedback! I'm really interested in the implementation of these processes if you like.\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1347373135},{"id":1347640360,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/478","title":"feat(types): enable adding Types for variables used in `c.set`/`c.get`","body":"This PR is for enabling adding Types for variables used in `c.set` and `c.get`. Related to #472 \r\n\r\n`c.set()` and `c.get()` are useful to store variables for middleware and handlers. For example, you can set the \"client\" object in middleware and use it later in a handler. But, these key-value do not have Types.\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/186123114-1e8793cd-fcd8-4cef-8c68-40b18cf74d06.png)\r\n\r\nIn this PR, Types will be available for `c.set` and `c.get` by passing the Types as generics into Hono class.\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/186121412-46ee880f-f6a4-4d00-b581-5d6de81c9af2.png)\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/186123398-25f9e035-30e6-4e48-b542-4b7b9ea1bd2a.png)\r\n\r\nBefore this PR, the generics is used for \"bindings\" on Cloudflare Workers.\r\n\r\n```ts\r\ntype Bindings = {\r\n  KV: KVNamespace\r\n  Storage: R2Bucket\r\n}\r\n\r\nconst app = new Hono<Bindings>()\r\n```\r\n\r\nAfter this PR, the generics will be used for \"bindings\" and \"variables\":\r\n\r\n```ts\r\ntype Bindings = {\r\n  KV: KVNamespace\r\n  Storage: R2Bucket\r\n}\r\n\r\ntype WebClient = {\r\n  user: string\r\n  pass: string\r\n}\r\n\r\ntype Variables = {\r\n  client: WebClient\r\n}\r\n\r\nconst app = new Hono<{ Variables: Variables; Bindings: Bindings }>()\r\n\r\napp.get('/foo', (c) => {\r\n  const client = c.get('client') // client is WebClient\r\n  const kv = c.env.KV // kv is KVNamespace\r\n  //...\r\n})\r\n```\r\n\r\nI think this is a cool feature for fine DX, but it has a small breaking change that is should be told the user well.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1347640360},{"id":1347896536,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/479","title":"Parsebody return type","body":"Apparently, if you'd like to type the request body you type the request which is currently a string. Meanwhile, parseBody is a Body type which doesn't have generic.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1347896536},{"id":1349006284,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/480","title":"Question/Proposal Multipart form data","body":"Hello, \r\n\r\nThis is such an awesome project, really good work.\r\nI do have one question. Are there any plans to add a middleware for parsing multipart form data, something like [busboy](https://www.npmjs.com/package/busboy) or [express-fileupload](https://www.npmjs.com/package/express-fileupload) ?\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1349006284},{"id":1349061222,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/481","title":"fix: enable passing Generics to c.req.parseBody, default is any","body":"Fix #479 #341 \r\n\r\nIn this PR, we can pass the Generics to `c.req.parseBody()`. If we do not it, type will be `any`.\r\n\r\n```ts\r\nconst body = await c.req.parseBody() // body is any\r\n\r\ntype Post = { message: string }\r\nconst postBody = await c.req.parseBody<Post>() // postBody is Post\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1349061222},{"id":1350156343,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/482","title":"[Discussion] What middleware do you want?","body":"From v2.0.0, we can create 3rd party middleware. So far, the following 3rd-party middleware has been created.\r\n\r\n* GraphQL Middleware\r\n* Firebase Auth Middleware\r\n* Validator Middleware\r\n* Sentry Middleware\r\n\r\nGraphQL Middleware was originally provided as Built-in Middleware, which I also use. Firebase Auth make more authentication options for Cloudflare Workers. Validator Middleware is my creation, and I like it. Sentry Middleware will be very helpful in catching errors at the edge.\r\n\r\nNext, What middleware do you want?\r\n\r\nIf there is any Middleware you want, please comment here, even if you don't make it yourself. Someone may make it. You may also get other ideas by seeing the ideas here.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1350156343},{"id":1350867951,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/483","title":"Discord/chat channel for the community","body":"Hi\r\n\r\nis there a discord channel or equivalent for the Honojs community to hang about and ask questions?\r\nRight now, there doesn't seems to be anywhere we can discuss things which are not strictly library issues.\r\n\r\nHaving a Discord channel will also help grow the community.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1350867951},{"id":1351745939,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/484","title":"Should `parseBody` only parse FormData?","body":"Currently, `req.parseBody()` parses any objects according to content type.\r\n\r\n<https://github.com/honojs/hono/blob/main/src/utils/body.ts>\r\n\r\nBut, I think it would be better just to restrict it to FormData / `req.formData()`.\r\n\r\nThe first reason, the type we receive will be obscured; thus, it will be `any`. `parseBody` definition is below:\r\n\r\n```ts\r\nparseBody<T = any>(r: Request | Response): Promise<T>\r\n```\r\n\r\nIf it only parses FormData, it will be restricted:\r\n\r\n```ts\r\nRecord<string, string | File>\r\n```\r\n\r\nThe second reason, it has the possibility of opening Security Vulnerability because we receive unexpected values. \"*Plack*\" rejected the PR for the same reason: <https://github.com/plack/Plack/pull/678>.\r\n\r\nConsider the following code referred from the PR comment:\r\n\r\n```ts\r\napp.post('/foo', async (c) => {\r\n  const body = await c.req.parseBody()\r\n  const id = body.itemId\r\n  const item = shopQuery(id)\r\n  // ~> ['SELECT * FROM shop_item WHERE item_id = ?', id]\r\n  // ...\r\n```\r\n\r\nIn this case, `body.itemId` is expected `string` but, if receive Request that the body is JSON like below:\r\n\r\n```ts\r\nnew Request(JSON.stringify({\r\n  itemId: [1, 2, 3],\r\n}), {\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n```\r\n\r\n`body.itemId` will be `[1, 2, 3]`. If `shopQuery` behaves differently when it receives a string than when it receives an array, this could be a problem.\r\n\r\n```ts\r\n// ~> ['SELECT * FROM shop_item WHERE item_id IN (?,?,?)', id ]\r\n```\r\n\r\nThis would not happen if `shopQuery` does the type check on the input value, but it would be better to reduce the possibility of this happening. Fortunately, the Request object has a `req.json()`, `req.text()`,  and an `req.arrayBuffer()` method in addition to the `req.formData`. Users can explicitly body parse using those methods. So, `parseBody` should support only FormData. This fix includes breaking changes, but I think we should do it.\r\n\r\n---\r\n\r\n@metrue @usualoma \r\nI want to know your opinion.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1351745939},{"id":1352217074,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/485","title":"docs(readme): add discord and twitter links","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1352217074},{"id":1352219463,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/486","title":"Added Discord badge to the Readme","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1352219463},{"id":1352917971,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/487","title":"[BREAKING] fix: make that `c.req.parseBody` parses only `FormData`","body":"Make that `c.req.parseBody` parses only FormData and does not parse JSON, text, and arrayBuffer. This fix includes breaking changes.\r\n\r\nBefore this PR, this function returns the parsed body according to Content-Type, despite the type of body. And, it will be `any`:\r\n\r\n```ts\r\nparseBody<T = any>(r: Request | Response): Promise<T>\r\n```\r\n\r\nEven though the user was expecting a `Record<string, string>`, this may return `Object`. This behavior could potentially cause a security vulnerability. See #484 \r\n\r\nIn this PR, `c.req.parseBody` only parse `FormData`. If the user wants to parse others than FormData, then the user should explicitly use `json()`, `text()`, and `arrayBuffer()`.\r\n\r\n```ts\r\nconst data = c.req.json()\r\n```\r\n\r\n`parseBody` will only return `Record<string, string | File>`.\r\n\r\n```ts\r\nparseBody(r: Request | Response): Promise<Record<string, string | File>>\r\n```\r\n\r\nFix #484 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1352917971},{"id":1353065878,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/488","title":"fix(type): fix type errors for Bindings and Variables","body":"`c.get('bar')`  and `c.env.Foo` types were not correct. Fixed it.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1353065878},{"id":1353294784,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/489","title":"fix(context): fix type error","body":"Fixed the type error below:\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/187066768-9a0cc67c-e601-46bd-b5dc-5ab129f8b81a.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1353294784},{"id":1353916859,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/490","title":"fix app.HTTP_METHOD type","body":"Hi, Thank you for publishing such a good product!\r\n\r\nThis PR improve type of app.HTTP_METHOD.\r\n\r\nIf the return type of the handler function is wrong, as in the example below, an error is reported for \"path\".\r\n\r\n![スクリーンショット 2022-08-29 17 34 04](https://user-images.githubusercontent.com/59350345/187159717-6762f2a7-6bef-45ff-a972-cb71733b4ee9.png)\r\n\r\nThis is not ideal. Because it should be the handler function that should report the error like below.\r\n\r\n![スクリーンショット 2022-08-29 17 36 39](https://user-images.githubusercontent.com/59350345/187160251-673e04ad-b762-4fd6-82a0-b517df6523ce.png)\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1353916859},{"id":1356988330,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/491","title":"fix(compose): do not handle the error in `compose`","body":"This is fixing and refactoring things.\r\n\r\nWe refactored `compose` in v2.0.9. Since this version, it does not throw the Error in `compose`, just adding the 500 error response into `c.res`. But it should throw the error as it should. Otherwise, middleware can't catch the error. We want to do like below:\r\n\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  try {\r\n    await next()\r\n  } catch (err) {\r\n    return c.text('Catch the Error in middleware!!', 500)\r\n  }\r\n})\r\n```\r\n\r\nSo we don't have to do error handling in `compose`, just handling in the outer `dispatch` method.\r\n\r\nhttps://github.com/honojs/hono/blob/543fdbaaa6cd489c671157641d3b49e25287eee3/src/hono.ts#L219-L222\r\n\r\nAnd this fix will make the code simpler and less.\r\n\r\nThis fix related to https://github.com/honojs/sentry/issues/3","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1356988330},{"id":1357482102,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/492","title":"Is scheduled support planned?","body":"https://developers.cloudflare.com/workers/runtime-apis/scheduled-event/#syntax-module-worker","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1357482102},{"id":1358846759,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/493","title":"perf: do not `compose` if it has only one handler","body":"Made it does not `compose` if it has only one handler. `await composed` is slow and could be speed up by avoiding `compose`. If you don't use the middleware, it will be faster.\r\n\r\n## Benchmark\r\n\r\n### handle-event\r\n\r\n17%  Faster!!\r\n\r\n```\r\nhono - trie-router(default) x 421,632 ops/sec ±4.36% (79 runs sampled)\r\nhono - regexp-router x 452,187 ops/sec ±5.90% (69 runs sampled)\r\nhono - trie-router(default) - New x 506,280 ops/sec ±3.92% (85 runs sampled)\r\nhono - regexp-router - New x 610,975 ops/sec ±4.52% (83 runs sampled)\r\n```\r\n\r\n### Deno - flash\r\n\r\nNot much has changed.\r\n\r\n```\r\nv2.1.3\r\nRequests/sec: 185881.3210\r\nNew\r\nRequests/sec: 188679.7531\r\n```\r\n\r\n### Bun\r\n\r\nWill be faster if it returns only \"Hello World\".\r\n\r\n11% Faster!!\r\n\r\n```\r\nv2.1.3\r\nRequests/sec: 133396.6236\r\nNew\r\nRequests/sec: 149045.7514\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1358846759},{"id":1359545963,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/494","title":"fix: fixed the issue logger called twice","body":"By this PR #493 , the logger is called twice if it's not found. And the first log shows \"200\". The following case:\r\n\r\n```ts\r\napp.use('*', logger())\r\napp.get('/', (c) => c.text('Hono!!'))\r\n```\r\n\r\n```\r\nGET /not-found\r\n```\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/188030412-b8158620-e3a4-48a8-91e6-590b366bcb56.png)\r\n\r\nThis problem is caused by two reasons.\r\n\r\n1. It did not return 404 response immediately If the response is undefined. \r\n2. Default `c.res` is 200 response. It should be 404 response.\r\n\r\nThis PR fixed this problem.\r\n\r\nThis is the issue pointed out in the comments of this PR.\r\nhttps://github.com/honojs/hono/pull/493#issuecomment-1234769263\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1359545963},{"id":1360139369,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/495","title":"perf(compose): Remove `await composed()` from hono.ts.","body":"### What is included?\r\n\r\n* Reduced use of `await`\r\n* Reduced use of `context instanceof HonoContext`\r\n    * I think this code did not limit the type of `context` for abstraction, but since it will always be `HonoContext` in production environment, we have limited the type of `context` so that we do not have to compare.\r\n\r\nThere are many changes to the test code, but no changes to Hono's API.\r\n\r\n### Benchmark\r\n\r\nThese are the results in my environment.\r\n#493 reflects the results of optimization.\r\n```\r\nhono - trie-router(default) x 220,343 ops/sec ±5.68% (83 runs sampled)\r\nhono - regexp-router x 261,953 ops/sec ±5.37% (82 runs sampled)\r\nitty-router x 82,331 ops/sec ±3.38% (85 runs sampled)\r\nsunder x 114,834 ops/sec ±2.25% (83 runs sampled)\r\nworktop x 66,525 ops/sec ±3.41% (87 runs sampled)\r\nFastest is hono - regexp-router\r\n```\r\n\r\nApply the following changes to this PR.\r\n\r\n```diff\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex c4c0810..4a2da5e 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -203,24 +203,6 @@ export class Hono<\r\n \r\n     const c = new HonoContext<string, E>(request, env, eventOrExecutionCtx, this.notFoundHandler)\r\n \r\n-    // Do not `compose` if it has only one handler\r\n-    if (result && result.handlers.length === 1) {\r\n-      const handler = result.handlers[0]\r\n-      try {\r\n-        const res = handler(c, async () => {})\r\n-        if (res) {\r\n-          const awaited = res instanceof Promise ? await res : res\r\n-          if (awaited) return awaited\r\n-        }\r\n-        return this.notFoundHandler(c as Context)\r\n-      } catch (err) {\r\n-        if (err instanceof Error) {\r\n-          return this.errorHandler(err, c as Context)\r\n-        }\r\n-        throw err\r\n-      }\r\n-    }\r\n-\r\n     const handlers = result ? result.handlers : [this.notFoundHandler]\r\n \r\n     const composed = compose<HonoContext<string, E>>(handlers, this.notFoundHandler)\r\n```\r\n\r\nThis version is a bit slower, but this is doing quite well, too.\r\n\r\n```\r\nhono - trie-router(default) x 218,861 ops/sec ±6.06% (79 runs sampled)\r\nhono - regexp-router x 265,468 ops/sec ±6.16% (79 runs sampled)\r\nitty-router x 83,826 ops/sec ±3.77% (86 runs sampled)\r\nsunder x 120,162 ops/sec ±2.26% (85 runs sampled)\r\nworktop x 66,387 ops/sec ±5.05% (84 runs sampled)\r\nFastest is hono - regexp-router\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1360139369},{"id":1360977047,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/496","title":"perf(compose): Always return a Promise without async.","body":"This PR will improve the poor performance noted in the following comment.\r\nhttps://github.com/honojs/hono/pull/495#issuecomment-1236125012\r\n\r\nThis branch is the fastest in my environment.\r\n\r\n#### perf-reduce-async-compose branch\r\n\r\n```\r\n% bombardier -c 200 -d 20s http://127.0.0.1:3000/with-middleware\r\nBombarding http://127.0.0.1:3000/with-middleware for 20s using 200 connection(s)\r\n[==========================================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     28673.49    2688.43   35743.89\r\n  Latency        6.97ms   306.34us    24.17ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 573631, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:     4.87MB/s\r\n```\r\n\r\n#### main branch\r\n\r\n```\r\n% bombardier -c 200 -d 20s http://127.0.0.1:3000/with-middleware\r\nBombarding http://127.0.0.1:3000/with-middleware for 20s using 200 connection(s)\r\n[==========================================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     27164.11    2934.39   32670.21\r\n  Latency        7.36ms   339.90us    22.79ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 543455, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:     4.61MB/s\r\n```\r\n\r\n#### v2.1.3\r\n\r\n```\r\n% bombardier -c 200 -d 20s http://127.0.0.1:3000/with-middleware\r\nBombarding http://127.0.0.1:3000/with-middleware for 20s using 200 connection(s)\r\n[==========================================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     27380.01    2801.29   32083.21\r\n  Latency        7.30ms   457.61us    28.43ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 547572, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:     4.65MB/s\r\n```\r\n\r\n\r\n#### Less middleware\r\n\r\nThe comparison of the following conditions also showed little difference between v2.1.3 and v2.1.3, but still not worse than v2.1.3.\r\n\r\n```ts\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\nimport { Hono } from '../../src/index'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\nfor (let i = 0; i < 1; i++) {\r\n  app.use('/with-middleware', async (c, next) => {\r\n    c.set('count', i)\r\n    await next()\r\n    c.get('foo')\r\n  })\r\n}\r\napp.get('/with-middleware', (c) => c.text('GET(/with-middleware)'))\r\nexport default app\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1360977047},{"id":1361092674,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/497","title":"[Bug] returns 404 using RegExpRouter","body":"The following code using RegExpRouter, `POST /posts` will return \"404 Not Found\" response, the Hono version is `v2.1.3`. And it wIll be \"Internal Server Error\" In the current tree https://github.com/honojs/hono/tree/e174b7085821164877e46b62cc3f56dcf81b4b77.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\napp.get('/posts', (c) => c.text('foo'))\r\napp.post('/posts', (c) => c.text('foo'))\r\napp.get('/posts/page/:page', (c) => c.text('foo'))\r\napp.get('/posts/:id/comments', (c) => c.text('foo'))\r\n```\r\n\r\n```\r\n$ curl -X POST http://localhost:8787/posts\r\n404 Not Found%\r\n```\r\n\r\nThe same problem does not occur with TrieRouter.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1361092674},{"id":1361592424,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/498","title":"perf(req): improve `c.req.query` performance","body":"I've improved `c.req.query` performance. Currently, `c.req.query` uses `new URL` for parsing query parameters strings. It is inefficient. In this PR, `c.req.query` uses just `URLSearchParams`, it becomes to be faster.\r\n\r\n## Benchmarks\r\n\r\nScripts:\r\n\r\n```ts\r\nimport { run, bench } from 'mitata'\r\nimport { getQueryStringFromURL } from '../../src/utils/url'\r\n\r\nconst urlString = 'http://localhost?foo=bar&foo2=bar2&foo3=bar3'\r\n\r\n{\r\n  bench('URL', () => {\r\n    const url = new URL(urlString)\r\n    url.searchParams.get('foo')\r\n  })\r\n}\r\n\r\n{\r\n  bench('getQueryStringFromURL + URLSearchParams', () => {\r\n    const queryStirng = getQueryStringFromURL(urlString)\r\n    const searchParams = new URLSearchParams(queryStirng)\r\n    searchParams.get('foo')\r\n  })\r\n}\r\n\r\nawait run()\r\n```\r\n\r\nResults:\r\n\r\n```plain\r\nMacBook@yusuke $ bun run ./url-params.ts\r\ncpu: Apple M1 Pro\r\nruntime: bun 0.1.11 (arm64-darwin)\r\n\r\nbenchmark                                    time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------------------------------------- -----------------------------\r\nURL                                        1.18 µs/iter   (933.55 ns … 3.21 µs)   1.14 µs   3.21 µs   3.21 µs\r\ngetQueryStringFromURL + URLSearchParams  802.39 ns/iter   (696.65 ns … 2.35 µs) 795.49 ns   2.35 µs   2.35 µs\r\n\r\n---\r\n\r\nMacBook@yusuke $ deno run -A ./deno.ts\r\ncpu: Apple M1 Pro\r\nruntime: deno 1.25.1 (aarch64-apple-darwin)\r\n\r\nbenchmark                                    time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------------------------------------- -----------------------------\r\nURL                                        2.62 µs/iter     (2.53 µs … 2.67 µs)   2.64 µs   2.67 µs   2.67 µs\r\ngetQueryStringFromURL + URLSearchParams    1.33 µs/iter      (1.3 µs … 1.34 µs)   1.33 µs   1.34 µs   1.34 µs\r\n```\r\n\r\nIn the real world:\r\n\r\n```ts\r\nimport { Hono } from '../../src/hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  const q = c.req.query('q')\r\n  return c.text(q)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nResults:\r\n\r\nBun\r\n\r\n```plain\r\n---\r\nv2.1.3\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:3000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:3000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     93868.04   25880.52  119351.49\r\n  Latency        2.13ms     1.26ms    26.70ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 938298, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    16.73MB/s\r\n\r\nAfter\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:3000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:3000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    123577.17   30821.98  148889.77\r\n  Latency        1.62ms     1.45ms    44.68ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1235784, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    22.04MB/s\r\n```\r\n\r\nDeno\r\n\r\n```plain\r\n---\r\nv2.1.3\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:9000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:9000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    105378.02    8459.58  117360.28\r\n  Latency        1.90ms   229.71us    22.57ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1053922, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    22.51MB/s\r\n  \r\n---\r\n  \r\nAfter\r\n\r\nMacBook@yusuke $ bombardier -c 200 -d 10s 'http://localhost:9000/?q=search-query&foo=bar&foo2=bar2'\r\nBombarding http://localhost:9000/?q=search-query&foo=bar&foo2=bar2 for 10s using 200 connection(s)\r\n[=======================================================================================================================================================] 10s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec    136321.87   29600.10  168217.67\r\n  Latency        1.47ms   165.65us    21.77ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1363227, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    29.12MB/s\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1361592424},{"id":1361700216,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/499","title":"Fix regexp ambigous route","body":"Fixes #497\r\n\r\nThe performance of this code is not that good, but it is a rare case and has little impact. Performance improvements will be considered later.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1361700216},{"id":1362049955,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/500","title":"initialize middleware with env variable","body":"I've tried it with the following:\r\n\r\n```\r\napp.use('*', async (c, next) => {\r\n  sentry({ environment: c.env.ENVIRONMENT })\r\n\r\n  await next()\r\n})\r\n\r\n```\r\nBut this seems to cause that sentry isn't properly initialized, any idea how I could achieve that?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1362049955},{"id":1362564626,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/501","title":"Introduce StaticRouter and SmartRouter","body":"### Motivation\r\n\r\nI think it would be difficult for users to take advantage of the \"hono has two routers and the optional RegExpRouter is faster.\"\r\nThis PR changes this to \"By default, the best router is selected based on the routing of the application.\"\r\n\r\n\r\n### StaticRouter\r\n\r\nStaticRouter is a new alternative. Works fast when there is no path to receive parameters.\r\nI think that this is not a router for benchmarking purposes, and that it could be used in the real world as follows\r\n\r\n```ts\r\napp.use('*', logger(), cors())\r\napp.use(\r\n  '/graphql',\r\n  graphqlServer({\r\n    schema,\r\n    rootResolver,\r\n  })\r\n)\r\n```\r\n\r\nHowever, when benchmarked, there did not appear to be a significant difference with RegExpRouter in nodejs.\r\nIf it is a bun, there may be a little difference, but there may not be.\r\n\r\nI think this StaticRouter is a good example of the use of SmartRouter, but may not be necessary for hono.\r\n\r\n\r\n### SmartRouter\r\n\r\nThis is a router that finds the best one for routing from several possible routers and invoke it when `match` is called.\r\n\r\n\r\n### Side effects of merging this\r\n\r\n* All routers are bundled by default, which increases the bundle size.\r\n* Slightly longer spinup time.\r\n* Makes debugging routers more difficult.\r\n\r\n### Benchmark\r\n\r\n#### with path parameters\r\n\r\nhttps://gist.github.com/usualoma/6d8db87c9f40614073b0517dc3e8cee6\r\n\r\n```\r\nhono - smart x 267,322 ops/sec ±5.61% (77 runs sampled)\r\nhono - smart - trie-router x 230,474 ops/sec ±5.72% (81 runs sampled)\r\nhono - smart - regexp-router x 267,080 ops/sec ±5.65% (68 runs sampled)\r\nhono - trie-router x 223,486 ops/sec ±5.05% (84 runs sampled)\r\nhono - regexp-router x 262,344 ops/sec ±6.61% (77 runs sampled)\r\nFastest is hono - smart,hono - smart - regexp-router,hono - regexp-router\r\n```\r\n\r\n#### without path parameters\r\n\r\nhttps://gist.github.com/usualoma/0b86e02ee9f3a16dd8e5af77f479624c\r\n\r\n```\r\nhono - smart - trie-router x 276,017 ops/sec ±6.15% (77 runs sampled)\r\nhono - smart - regexp-router x 298,234 ops/sec ±6.67% (75 runs sampled)\r\nhono - smart - static-router x 296,272 ops/sec ±6.79% (63 runs sampled)\r\nhono - trie-router x 267,239 ops/sec ±6.06% (81 runs sampled)\r\nhono - regexp-router x 303,253 ops/sec ±5.80% (82 runs sampled)\r\nFastest is hono - regexp-router,hono - smart - regexp-router,hono - smart - static-router\r\n```\r\n\r\n#### bun - RegExpRouter\r\n\r\n```ts\r\nimport { Hono } from './src/index'\r\nimport { RegExpRouter } from './src/router/reg-exp-router'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\napp.get('/posts', (c) => c.text('foo'))\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n$ ./bombardier -c 200 -d 20s http://10.1.0.139:3000/posts\r\nBombarding http://10.1.0.139:3000/posts for 20s using 200 connection(s)\r\n[==========================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     72705.89    1742.91   75809.44\r\n  Latency        2.75ms    86.69us    10.99ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1454123, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    10.40MB/s\r\n```\r\n\r\n\r\n#### bun - SmartRouter - StaticRouter\r\n\r\n```ts\r\nimport { Hono } from './src/index'\r\nimport { SmartRouter } from './src/router/smart-router'\r\nimport { StaticRouter } from './src/router/static-router'\r\n\r\nconst app = new Hono({\r\n  router:\r\n    new SmartRouter({\r\n      routers: [new StaticRouter()],\r\n    })\r\n})\r\n\r\napp.get('/posts', (c) => c.text('foo'))\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n$ ./bombardier -c 200 -d 20s http://10.1.0.139:3000/posts\r\nBombarding http://10.1.0.139:3000/posts for 20s using 200 connection(s)\r\n[==========================================================================] 20s\r\nDone!\r\nStatistics        Avg      Stdev        Max\r\n  Reqs/sec     74691.57    1911.30   80312.78\r\n  Latency        2.68ms    97.25us    10.77ms\r\n  HTTP codes:\r\n    1xx - 0, 2xx - 1493610, 3xx - 0, 4xx - 0, 5xx - 0\r\n    others - 0\r\n  Throughput:    10.68MB/s\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1362564626},{"id":1363973113,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/502","title":"CommonJS to ESM","body":"Currently, we build the projects as \"CommonJS\" for distributing for the npm package. But I think that is not necessary. Wrangler reads the ESM without doing anything, and Bun may support it. We have no opportunity to use Hono on Node.js. So I think it is okay to build it as ESM such as \"ES2020\".\r\n\r\nIf the ESM is used, it has the advantage of a smaller bundle size.\r\n\r\nRun `npm pack`:\r\n\r\n```\r\n// Current branch:\r\nnpm notice package size:  31.3 kB\r\nnpm notice unpacked size: 121.9 kB\r\n\r\n// ES2020:\r\nnpm notice package size:  30.0 kB\r\nnpm notice unpacked size: 112.5 kB\r\n```\r\n\r\n\"Hello World\" script With Wrangler:\r\n\r\n```\r\n// v2.1.4\r\nTotal Upload: 27.04 KiB / gzip: 6.09 KiB\r\n\r\n// ES2020:\r\nTotal Upload: 18.36 KiB / gzip: 4.88 KiB\r\n```\r\n\r\nWe need to do a little more investigation to see if it works correctly.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1363973113},{"id":1365060036,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/503","title":"[Proposal] Allow cors multiple origins","body":"This has been one of the pain points of cors, because without special logic it is usually impossible to allow multiple origins. \r\n\r\nMy proposal is to allow:\r\n ```js\r\napp.use(\r\n  '*',\r\n  cors({\r\n    origin: ['https://example.com', 'https://example.org'],\r\n    //...\r\n  })\r\n)\r\n```\r\n\r\nAnd for the server to respond with the correct entry based on the [`Referrer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) header. (Falling back to `origin[0]` if empty/none apply)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1365060036},{"id":1365284874,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/504","title":"usage in node","body":"Hi there -- big fan, really love working with hono, it makes building services such a fun experience.\r\n\r\nI know hono is built with web standards in mind, so only things like edge runtimes/deno/bun work, but I have a new API that uses some dependencies that only work in node right now. Is it possible to run hono in node? I saw [this gist](https://gist.github.com/usualoma/6d8db87c9f40614073b0517dc3e8cee6), which uses the Response and Request from `node-fetch`, but is this the recommended way to do so?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1365284874},{"id":1365351975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/505","title":"feat(middleware): introduce \"built-in\" Validator Middleware","body":"This PR introduces \"built-in\" validator middleware.\r\n\r\nThere is third-party validator middleware `@honojs/validator`. I like the API and think it is well thought out. And the middleware has many validation patterns, such as email addresses, IP addresses, etc. Instead, it's too fat because of using \"validator.js\" and  \"jsonpath-plus\".\r\n\r\nHowever, we want to have validator middleware; validation is often required when building web applications.\r\n\r\nThis middleware is the port of `@honojs/validator`, making it more simple, lightweight, and with zero dependencies. By reducing the rules for validation. Usage is compatible with `@honojs/validator`:\r\n\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { validation } from 'hono/validator'\r\n\r\nconst app = new Hono()\r\n\r\napp.post(\r\n  '/post',\r\n  validation((v, message) => ({\r\n    body: {\r\n      // Validation rules\r\n      title: [v.required, [v.isLength, { max: 100 }]],\r\n      // Custom error message\r\n      body: [v.required, message('Body is wrong!!')],\r\n      tags: v.optional,\r\n    },\r\n    additionalProperties: false,\r\n  }))\r\n)\r\n\r\napp.post('/post', async (c) => {\r\n  return c.text('Valid')\r\n})\r\n```\r\n\r\nAnd, this bundle size built by Wrangler is very smaller than third-party.\r\n\r\n```\r\n@honojs/validator:\r\nTotal Upload: 269.52 KiB / gzip: 52.51 KiB\r\n\r\nhono/validator:\r\nTotal Upload: 37.27 KiB / gzip: 7.96 KiB\r\n```\r\n\r\nThe use case is that the user uses this built-in middleware first and will use the third-party if the user wants to validate variable patterns.\r\n\r\nI think it's good this validator is distributed as built-in.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1365351975},{"id":1365392661,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/506","title":"Bump up Miniflare","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1365392661},{"id":1366836650,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/507","title":"Feat: data passing in context","body":"This allows users to type and create their own data, which is passed through middleware. This can be useful for things like https://npmjs.com/package/d1-orm, where the library is initialised in the first middleware, and then can't be used as easily in routes past that without doing something like editing the Env object.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1366836650},{"id":1367059016,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/508","title":"Feat/builtin validator middleware another idea","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1367059016},{"id":1367199451,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/509","title":"Bearer middleware with Cloudflare Workers environment variables only works when multiple middlewares are defined","body":"I'm trying to use the bearer auth middleware in a worker by providing the token from an environment variable. Currently i got the following code to work, but it only seems to work when i have multiple middlewares defined, otherwise it appears to be ignored.\r\n\r\n```typescript\r\napp.use('*',\r\n    async (context, next) => {\r\n        const auth = bearerAuth({ token: context.env.ARTICLE_MANAGER_TOKEN });\r\n        await auth(context, next);\r\n    },\r\n    async (context, next) => {\r\n        console.log('test');\r\n        await next()\r\n    }\r\n);\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1367199451},{"id":1367756726,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/510","title":"`content-type` not being respected in 2.1.4","body":"Setting `context.header(\"Content-Type\", \"text/css\");` still returns `\"text/plain\"` content-type headers.\r\n\r\nSeems to only effect `2.1.4`\r\n\r\nI can verify `2.1.2` and `2.1.3` work as intended.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1367756726},{"id":1368068975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/511","title":"app.onError/app.notFound do not have the correct type for Context param","body":"```ts\r\nexport interface MyEnv {\r\n\tBindings: {\r\n\t\tNAMESPACE: KVNamespace;\r\n\t}\r\n}\r\nconst app = new Hono<MyEnv>();\r\napp.onError((err, c) => {\r\n  // c is typed as Context<string, Environment>, not Context<string, MyEnv>, resulting in typescript errors when trying to access my namespace\r\n  // this also applies to app.notFound\r\n  //to access my types, I have to do:\r\n  const context = c as unknown as Context<\"\", Env>;\r\n})","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368068975},{"id":1368545047,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/512","title":"fix(types): correct types for `app.notFound` / `app.onError`","body":"Fix #511","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368545047},{"id":1368557076,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/513","title":"fix(middleware): support multiple middleware on bearer/basic auth middleware","body":"\r\nFix #509","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368557076},{"id":1368802961,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/514","title":"Roadmap to v2.2.0","body":"This is the roadmap to Hono v2.2.0.\r\n\r\nOne of the big changes is \"migration CommonJS to ESM\". It does not change API interfaces but may make it not work well on some environments. Wrangler, Deno, and Bun support importing ES Modules, so we don't have to worry that much, but we'll need to check.\r\n\r\nThere are a few other cool additions as well.\r\n\r\n- [x] ~~Migrate CommonJS to ESM~~ Support ESM #502 #526 \r\n- [x] Built-in Validator Middleware #505 #535\r\n- [x] CORS middleware = Support multiple origins #503 \r\n- [x] \"Adaptor\" server for Node.js `@honojs/node-server` - experimental / It may not be included in v2.2.0 #504 https://github.com/honojs/node-server\r\n- [x] StaticRouter ? #501 \r\n- [x] SmartRouter ? #501 \r\n- [x] Lightweight RegExpRouter #519 \r\n- [x] ~~Serve Static middleware for Node.js~~ #518  => later\r\n- [x] #517 \r\n- [x] #516 \r\n- [x] Support multiple header values #536 \r\n- [x] Support multiple cookie values #534 \r\n- [x] Support optional parameter #540\r\n- [x] Write the document for Validator middleware\r\n\r\nWhen all features are implemented, we will ship as v2.2.0!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368802961},{"id":1368842957,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/515","title":"improve documentation on bun + serveStatic","body":"took me a while and with a bit of frustration to catch this one :) \r\n\r\nWhen running hono via bun - and trying to serve static files from `assets/static` the example on the website is not working. This line \r\n```app.use('/static/*', serveStatic({ root: './' }));```\r\nShould be changed to \r\n```app.use('/static/*', serveStatic({ root: './assets' }));``` \r\nSo we point to the correct folder. \r\n\r\n( I think that the example is cool if you uses `wrangler`) ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368842957},{"id":1368886900,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/516","title":"[Deno] Serve Static middleware should return 404 correctly","body":"If missing the files, it will throw the error. It's unexpected. it should return Not Found response.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368886900},{"id":1368887194,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/517","title":"[Bun] Serve Static middleware should return 404 correctly","body":"This is the same problem as #516 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368887194},{"id":1368987329,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/518","title":"[Node] Serve Static middleware for Node.js","body":"Currently, it does not support Serve Static middleware on Node.js with `@honojs/node-server`. Perhaps it will be needed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1368987329},{"id":1369864383,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/519","title":"Lightweight RegExpRouter reborn","body":"### What is this?\r\n\r\nI have attempted to reduce code size by removing some features from RegExpRouter.\r\n\r\nI would like to demonstrate the following with this PR.\r\n\r\n* Smaller bundle size.\r\n* No performance degradation.\r\n* Existing tests for supporting path patterns should be green\r\n\r\nAfter demonstrating, I would like to replace the old one by https://github.com/usualoma/hono/pull/2.\r\nWhile the old RegExpRouter implementation is a good one, it is expensive to maintain a large number of routers and should be removed.\r\n\r\n### Routing no longer supported\r\n\r\nThe RegExpLiteRouter does not handle routing that is even slightly complicated.\r\nThrow UnsupportedPathError with the following routing.\r\n\r\n```\r\napp.get('/app/static', handler1);\r\napp.get('/app/:label', handler2);\r\n```\r\n\r\n```\r\napp.get('/:type/:id', handler1)\r\napp.get('/:class/:id', handler2)\r\n```\r\n\r\n```\r\napp.get('/:id/:action{create|update}', handler1)\r\napp.get('/:id/:action{delete}', handler2)\r\n```\r\n\r\n### bundle size\r\n\r\nSize comparison of a small example project using the hono.\r\n\r\n\r\nbefore\r\n\r\n```\r\n> esbuild --bundle --sourcemap --minify --outdir=dist ./src/index.ts\r\n\r\n\r\n  dist/index.js      21.4kb\r\n  dist/index.js.map  85.1kb\r\n```\r\n\r\nIt is still large, but much smaller.\r\n\r\nafter\r\n\r\n```\r\n> esbuild --bundle --sourcemap --minify --outdir=dist ./src/index.ts\r\n\r\n\r\n  dist/index.js      18.5kb\r\n  dist/index.js.map  71.9kb\r\n```\r\n\r\n### banchmark\r\n\r\n```diff\r\ndiff --git a/benchmarks/handle-event/index.js b/benchmarks/handle-event/index.js\r\nindex 4ef367b..ab27ee4 100644\r\n--- a/benchmarks/handle-event/index.js\r\n+++ b/benchmarks/handle-event/index.js\r\n@@ -6,7 +6,9 @@ import { Request, Response } from 'node-fetch'\r\n import { Router as SunderRouter, Sunder } from 'sunder'\r\n import { Router as WorktopRouter } from 'worktop'\r\n import { Hono } from '../../dist/hono'\r\n+import { RegExpLiteRouter } from '../../dist/router/reg-exp-lite-router'\r\n import { RegExpRouter } from '../../dist/router/reg-exp-router'\r\n+import { TrieRouter } from '../../dist/router/trie-router'\r\n \r\n globalThis.Request = Request\r\n globalThis.Response = Response\r\n@@ -27,8 +29,9 @@ const initHono = (hono) => {\r\n   return hono\r\n }\r\n \r\n-const hono = initHono(new Hono())\r\n+const hono = initHono(new Hono({ router: new TrieRouter() }))\r\n const honoWithRegExpRouter = initHono(new Hono({ router: new RegExpRouter() }))\r\n+const honoWithRegExpLiteRouter = initHono(new Hono({ router: new RegExpLiteRouter() }))\r\n \r\n // itty-router\r\n const ittyRouter = IttyRouter()\r\n@@ -120,6 +123,8 @@ const fn = async () => {\r\n   console.log(await res.text())\r\n   res = await honoWithRegExpRouter.handleEvent(event)\r\n   console.log(await res.text())\r\n+  res = await honoWithRegExpLiteRouter.handleEvent(event)\r\n+  console.log(await res.text())\r\n   res = await ittyRouter.handle(event.request)\r\n   console.log(await res.text())\r\n   res = await sunderApp.handle(event)\r\n@@ -138,6 +143,9 @@ suite\r\n   .add('hono - regexp-router', async () => {\r\n     await honoWithRegExpRouter.handleEvent(event)\r\n   })\r\n+  .add('hono - regexp-lite-router', async () => {\r\n+    await honoWithRegExpLiteRouter.handleEvent(event)\r\n+  })\r\n   .add('itty-router', async () => {\r\n     await ittyRouter.handle(event.request)\r\n   })\r\n```\r\n\r\nThere is no performance degradation.\r\n\r\n```\r\nhono - trie-router(default) x 222,450 ops/sec ±5.45% (81 runs sampled)\r\nhono - regexp-router x 260,434 ops/sec ±6.22% (79 runs sampled)\r\nhono - regexp-lite-router x 266,024 ops/sec ±6.36% (79 runs sampled)\r\nitty-router x 83,505 ops/sec ±3.57% (85 runs sampled)\r\nsunder x 110,506 ops/sec ±4.74% (78 runs sampled)\r\nworktop x 68,916 ops/sec ±2.40% (85 runs sampled)\r\nFastest is hono - regexp-lite-router,hono - regexp-router\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1369864383},{"id":1370095260,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/520","title":"etag middleware causes request to hang with Miniflare >=2.8","body":"With the following code, requests will seemingly hang for ~5s when requesting an asset from KV. \r\n\r\n```js\r\n// src/index.ts\r\nimport {Hono} from 'hono'\r\nimport {etag} from 'hono/etag'\r\nimport {getAssetFromKV, NotFoundError} from '@cloudflare/kv-asset-handler';\r\n\r\nimport manifestJSON from '__STATIC_CONTENT_MANIFEST';\r\n\r\nconst assetManifest = JSON.parse(manifestJSON);\r\n\r\nasync function assetMiddleware(context, next){\r\n\ttry{\r\n\t\tconst asset = await getAssetFromKV({\r\n\t\t\trequest: context.req,\r\n\t\t\twaitUntil(promise){\r\n\t\t\t\treturn context.executionCtx.waitUntil(promise);\r\n\t\t\t},\r\n\t\t}, {\r\n\t\t\tASSET_NAMESPACE: context.env.__STATIC_CONTENT,\r\n\t\t\tASSET_MANIFEST: assetManifest,\r\n\t\t});\r\n\t\treturn asset;\r\n\t}catch(error){\r\n\t\tif(error instanceof NotFoundError){\r\n\t\t\tcontext.res = new Response('404', {status: 404});\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(context.env.NODE_ENV !== 'production'){\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t\tcontext.res = new Response('error', {status: 500});\r\n\t}\r\n}\r\n\r\n\r\nconst app = new Hono()\r\napp.use('*', etag());\r\napp.get('/', (c) => c.text('Hello! Hono!'))\r\n\r\napp.use('*', assetMiddleware);\r\n\r\nexport default app\r\n```\r\n\r\nA full reproduction can be found at https://github.com/Cherry/hono-miniflare-slowdown including reproduction steps.\r\n\r\nIt's possible this might be caused by https://github.com/cloudflare/miniflare/commit/5ab7cb35dc8637f5b1a90c449e33be7e2294fe3d.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1370095260},{"id":1370635362,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/521","title":"fix(types): add types to middleware correctly","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1370635362},{"id":1370814678,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/522","title":"feat: get/set statusCode on Context","body":"Hi,\r\n\r\nIn [Ultra](https://github.com/exhibitionist-digital/ultra) we have a way of rendering your React app with context from Hono, which is useful for setting HTTP response codes during server render using `context.status(404)` for instance.\r\n\r\neg.\r\n\r\n```tsx\r\nfunction RouteNotFound() {\r\n  useServerContext((context) => {\r\n    context.status(404);\r\n  });\r\n  return <div>Not found</div>;\r\n}\r\n```\r\n\r\nThe problem is, there is no way of then reading that status code so that we can keep the server rendered content.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1370814678},{"id":1371249349,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/523","title":"feat(validator): add `isFalsy` and `isNotFalsy`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1371249349},{"id":1372207745,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/524","title":"Types for parameterized route possibly wrong?","body":"As I am using `hono` for routes, TS complains that when `Hono` is initialized as\r\n\r\n```js\r\ninterface Bindings {\r\n  key: string\r\n}\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n```\r\nany `Handler` type cannot satisfy `app.HTTP_METHOD`, e.g.\r\n```js\r\nimport { Handler } from 'hono'\r\nconst handler: Handler = async c => {\r\n  ...\r\n}\r\n\r\napp.get('/path/:param', handler) // <-- This will give an error from TS\r\n```\r\n\r\n![2022-09-13](https://user-images.githubusercontent.com/501113/190038403-1076c43b-d2b7-4b81-a55c-3f1d6dfb0d82.png)\r\n\r\nThis only triggers for _parameterized_ routes for some reason, so this next one is perfectly fine\r\n```js\r\napp.get('/path', handler)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1372207745},{"id":1372674756,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/525","title":"c.json naked parameters vs object parameter","body":"Is there currently any way to use an object parameter for the c.json function? I would like to use the return value(s) of a custom error function, including a default status code.\r\n\r\ne.g. \r\n\r\n```\r\npublic static sample(props: Props) {\r\n    const { error, status = 400 } = props\r\n\r\n    const object = {\r\n      message: error\r\n    }\r\n\r\n    return { object, status }\r\n  }\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1372674756},{"id":1372820309,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/526","title":"feat: support ES modules!!","body":"Currently, only CommonJS has been distributed, but this PR will also support ES Modules.\r\n\r\nThis will reduce the bundle size when using Hono with the `import` keyword. The following is the result of bundling using Wrangler.\r\n\r\n\r\nBefore:\r\n```\r\nMacBook@yusuke $ wrangler dev src/worker.ts\r\n ⛅️ wrangler 2.1.3\r\n-------------------\r\nRetrieving cached values for userId from node_modules/.cache/wrangler\r\n⬣ Listening at http://0.0.0.0:8787\r\nTotal Upload: 43.88 KiB / gzip: 9.06 KiB\r\n```\r\n\r\nThis PR:\r\n```\r\nMacBook@yusuke $ wrangler dev src/worker.ts\r\n ⛅️ wrangler 2.1.3\r\n-------------------\r\nRetrieving cached values for userId from node_modules/.cache/wrangler\r\n⬣ Listening at http://0.0.0.0:8787\r\nTotal Upload: 30.23 KiB / gzip: 7.44 KiB\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1372820309},{"id":1373049919,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/527","title":"docs(readme): update discord invite url","body":"The Discord invite url in the readme.md is invalid.\r\n\r\nvalid invite url: https://discord.gg/KMh2eNSdxV\r\ninvalid invite url in the readme.md: https://discord.gg/KVYKWmfD\r\n![image](https://user-images.githubusercontent.com/1294640/190174440-0cab20af-8ea3-478b-a588-4c566a06026e.png)\r\n\r\nI found the valid url from the comment [here](https://github.com/honojs/hono/issues/483#issuecomment-1227848565).\r\nhttps://github.com/honojs/hono/issues/483#issuecomment-1227848565","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1373049919},{"id":1373286000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/528","title":"Discord invite link has expired","body":"It seems like the current invite to discord has expired, making people unable to join the community!\r\n\r\nEdit: just noticed #527 which closes this.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1373286000},{"id":1374594298,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/529","title":"feat: `c.req.body` and `c.req.json` accept generics","body":"In this PR, we can pass the generics to `c.req.json` or `c.req.body` for adding the types to returning objects.\r\n\r\n```ts\r\ntype Author = {\r\n  name: string\r\n  age: number\r\n}\r\n\r\nconst app = new Hono()\r\n\r\napp.put(\r\n  '/author',\r\n  validation((v) => ({\r\n    json: {\r\n      'author.name': v.required,\r\n      'author.age': [v.required, v.isNumber],\r\n    },\r\n  })),\r\n  async (c) => {\r\n    const data = await c.req.json<{ author: Author }>() // <--- add the types by passing generics\r\n    const author = data.author\r\n    return c.text(`${author.name} is ${author.age} old`)\r\n  }\r\n)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1374594298},{"id":1374608562,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/530","title":"feat(validator): add `isBoolean` and `isNumber`","body":"Add new rules `isBoolean` and `isNumber` for validator middleware. It's useful to validate JSON values.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1374608562},{"id":1374692998,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/531","title":"feat(cors): allow multiple origins","body":"In this RP, it allows multiple origins on CORS middleware.\r\n\r\n```ts\r\napp.use(\r\n '*',\r\n cors({\r\n   origin: ['https://example.com', 'https://example.org'],\r\n   //...\r\n })\r\n)\r\n```\r\n\r\nThis middleware responds with the correct origin based on the `Referer` header. Falling back to origin[0] if it is empty or none.\r\n\r\nClose #503","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1374692998},{"id":1375091526,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/532","title":"Check in Origin header instead of Referer","body":"I think we should check by the Origin header, not the Referer header.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1375091526},{"id":1375186206,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/533","title":"feat(cors): Enable to check origin header by a function.","body":"I would also like to be able to dynamically check Origin by a function.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1375186206},{"id":1376885827,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/534","title":"Unable to set multiple cookies with `c.cookie()`","body":"When try to set multiple cookies with `c.cookie()` only the last cookie gets set.\r\nExample\r\n```typescript\r\nexport async function Cookies(c: Context) {\r\n    c.cookie(\"cookie1\", \"value1\")\r\n    c.cookie(\"cookie2\", \"value2\")\r\n    return c.html('<h1>You should have two cookies!</h1>')\r\n}\r\n```\r\nThis results in only `cookie2` being set.\r\n\r\nThe work around that I am currently using is\r\n```typescript\r\nexport async function Cookies(c: Context) {\r\n    const cookies = {\r\n        cookie1: \"value1\",\r\n        cookie2: \"value2\"\r\n    }\r\n    Object.entries(cookies).forEach(cookie => c.res.headers.append('set-cookie', `${cookie.join('=')};`))\r\n    return c.html('<h1>You should have two cookies!</h1>')\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1376885827},{"id":1377071402,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/535","title":"feat: another idea of Validator Middleware","body":"I like the current validator middleware API:\r\n\r\n```ts\r\napp.post(\r\n  '/json',\r\n  validation((v) => ({\r\n    json: {\r\n      'post.author.name': v.isAlpha,\r\n    },\r\n  })),\r\n  (c) => {\r\n    return c.text('Valid')\r\n  }\r\n)\r\n```\r\n\r\nBut there are times when I want \"Types\":\r\n\r\n```ts\r\n  async (c) => {\r\n    const data = await c.req.json()\r\n    // How can I access `post.author.name` ?\r\n    return c.text('Valid')\r\n  }\r\n```\r\n\r\nSo I implemented the new idea of Validator Middleware that support \"Types\". This is the approach of \"declaring the keys of properties first\".\r\n\r\n```ts\r\napp.post(\r\n  '/posts',\r\n  validator((v) => ({\r\n    id: v.json('post.id').asNumber().isRequired(),\r\n    title: v.json('post.title').isRequired().isLength(400),\r\n    body: v.json('post.body').isOptional(),\r\n  })),\r\n  (c) => {\r\n    const data = c.req.valid()\r\n    return c.text(`ID is ${data.id}, Title is ${data.title}`)\r\n  }\r\n)\r\n```\r\n\r\n![SS](https://user-images.githubusercontent.com/10682/190910186-60efc2db-c1c8-426f-bab2-da038ddbb6d5.png)\r\n\r\nWow, we got \"Types\"!\r\n\r\nThere are other good points to this approach as well.\r\n\r\n* Easy to understand the result data because \"declaring property name first\".\r\n* Easy to writing rules. `v.isLength(400)` is better than `[v.isLength, 400]` .\r\n* Getting only \"declared properties\". Additional properties are always ignored. It's safe.\r\n\r\nI liked the current Validator Middleware, but I like this one even better.\r\n\r\nOne thing that bothers me is the implementation of `hono.ts` has become more complex.\r\n\r\nHow do you think about this?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1377071402},{"id":1377293698,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/536","title":"Support appending header values","body":"Currently, `c.header` only behaves as \"setting\" header:\r\n\r\n```ts\r\nc.header('x-foo', 'bar') // => headers.set('x-foo', 'bar')\r\n```\r\n\r\nSo, we can't set multiple values for one key with `c.header` function. This issue proposes \"appeding\" header values:\r\n\r\n```ts\r\nc.header('x-foo', 'buzz', { append: true }) //  headers.append('x-foo', 'buzz')\r\n```\r\nThis is related to #534 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1377293698},{"id":1377308632,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/537","title":"fix(deno): serve static middleware returns 404 correctly","body":"Fix #516 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1377308632},{"id":1377338129,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/538","title":"fix(bun): serve static middleware returns 404 correctly","body":"Fix #517 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1377338129},{"id":1377440545,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/539","title":"feat: support appending values with `c.header`","body":"This PR enables appending values into the header with `c.header` function and makes it easier to set multiple values.\r\n\r\n```ts\r\nc.header('x-custom', 'foo')\r\nc.header('x-custom', 'bar', { append: true })\r\n```\r\n\r\nAnd this PR proposes setting multiple cookies.\r\n\r\n```ts\r\nc.cookie('delicious_cookie', 'macha')\r\nc.cookie('delicious_cookie', 'choco')\r\n```\r\n\r\nClose #534 #536 \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1377440545},{"id":1377670233,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/540","title":"feat(trie-router): support optional parameter","body":"This PR introduces \"optional parameter\":\r\n\r\n```ts\r\napp.get('/api/animals/:type?',() => {})\r\n```\r\n\r\nWill match:\r\n\r\n```http\r\nGET /api/animals\r\nGET /api/animals/dog\r\n```\r\n\r\n\r\nReference:\r\nhttps://router.vuejs.org/guide/essentials/route-matching-syntax.html#sensitive-and-strict-route-options\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1377670233},{"id":1378754661,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/541","title":"fix(redirect): don't have to make relative url to absolute one","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1378754661},{"id":1379132906,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/542","title":"feat(reg-exp-router): support optional parameter","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1379132906},{"id":1379304868,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/543","title":"Revert 542 feat/optional route reg exp router","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1379304868},{"id":1379312779,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/544","title":"Feat/optional route","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1379312779},{"id":1379410597,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/545","title":"fix(validator): make \"Types\" work well","body":"Fixed the bug pointed here: <https://github.com/honojs/hono/pull/535#issuecomment-1252210438>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1379410597},{"id":1379901698,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/546","title":"feat(validator): Enable verification results to be retrieved as structured data.","body":"Hi @yusukebe!\r\n\r\nHow about this additional feature?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1379901698},{"id":1380099558,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/547","title":"feat(validator): Enable verification results to be retrieved as structured data.","body":"Same as #546 \r\n\r\nHow about this additional feature?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1380099558},{"id":1380435910,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/548","title":"Hono 2.2.0 throws errors upon initialisation.","body":"When starting up my project using 2.2.0 on Bun, I get the following error. This issue was instantly resolved upon downgrading from 2.2.0 to 2.1.4.\r\n```\r\nReferenceError: Cannot access uninitialized variable.\r\n      at /ezlyf/node_modules/hono/dist/context.js:1:0\r\n1 | __require\r\n2 | } from \"bun:wrap\";\r\n3 | import * as $a8086364 from \"/ezlyf/node_modules/hono/dist/hono.js\";\r\n4 | \r\n5 | var { defaultNotFoundMessage} = __require($a8086364);\r\n   ^\r\n   ```\r\n\r\nOS:\r\n`jarredsumner/bun:0.1.11` docker container. Upgrading to bun 0.1.13 also does not work.\r\n\r\n`Linux 4ebf36805ce1 5.10.102.1-microsoft-standard-WSL2 #1 SMP Wed Mar 2 00:30:59 UTC 2022 x86_64 Linux`\r\n\r\nI am not using any other dependencies than `bun-types` and `hono`\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1380435910},{"id":1380990802,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/549","title":"fix: don't use `defaultNotFoundMessage` variable","body":"This PR fixes the problem when initializing the Hono script on Bun.\r\n\r\nFix #548","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1380990802},{"id":1384570807,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/550","title":"perf: remove `async` from dispatch; will be 16% faster","body":"Remove `async` from `dispatch` function in `hono.ts`. A single handler that does not use `async` will be about 16% faster on Bun:\r\n\r\nv2.2.1:\r\n\r\n```\r\nReqs/sec    158951.18   43864.54  202188.36\r\nLatency        1.26ms     1.39ms    41.26ms\r\nHTTP codes:\r\n1xx - 0, 2xx - 1589211, 3xx - 0, 4xx - 0, 5xx - 0\r\nothers - 0\r\nThroughput:    21.67MB/s\r\n```\r\n\r\nThis PR:\r\n\r\n```\r\nReqs/sec    188225.08   24307.40  218436.45\r\nLatency        1.06ms   109.58us    12.83ms\r\nHTTP codes:\r\n1xx - 0, 2xx - 1880915, 3xx - 0, 4xx - 0, 5xx - 0\r\nothers - 0\r\nThroughput:    25.65MB/s\r\n```\r\n<img width=\"802\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/192086832-cde1bed7-6bf1-4b1e-be79-3eab4ad31cfc.png\">\r\n\r\n<img width=\"862\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/192086840-d5ecd000-c637-4d80-b003-2ac2e4955f09.png\">\r\n\r\nThis benchmark using: https://github.com/SaltyAom/bun-http-framework-benchmark","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1384570807},{"id":1384827277,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/551","title":"[validator] Context inside `done` has not types","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1384827277},{"id":1384827935,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/552","title":"[validator] types of `c.env.` will disappear when using validator","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1384827935},{"id":1385066798,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/553","title":"fix(types): enable types for `c.env` when using validator","body":"Now, you can do like this:\r\n\r\n<img width=\"834\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/192151199-ee49d8fc-31bb-4eac-a929-9c265ac1ed26.png\">\r\n\r\nClose #551 #552 \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1385066798},{"id":1385144837,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/554","title":"Better error message in async api handler function","body":"If you do not write a return statement in the async api handler function we get below error in the console which is I think can be improved\r\n\r\nSample code:\r\n\r\n<img width=\"700\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28021552/192162391-ec0901a6-67a8-47fe-b2ed-f04c02ff2be2.png\">\r\n\r\n\r\nError message:\r\n\r\n![image](https://user-images.githubusercontent.com/28021552/192162231-02f6e8a0-3f0c-4fb4-90a2-eab4c5c42aff.png)\r\n\r\nReason: In the errorHandler function we print the stack and if it is empty then the message.\r\n\r\n<img width=\"599\" alt=\"image\" src=\"https://user-images.githubusercontent.com/28021552/192162437-cab08fd8-fccb-4a27-998a-f952552b43b2.png\">\r\n\r\nSolution:\r\n\r\nWhat about using `console.trace(err.message)` instead?\r\n\r\nResult:\r\n\r\n![image](https://user-images.githubusercontent.com/28021552/192162555-bcbbd158-cdcc-40bf-8b44-bec177f9a6ce.png)\r\n\r\nHappy to create a PR if this makes sense.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1385144837},{"id":1386049875,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/555","title":"fix(validator): make `isOptional` rule works correctly","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1386049875},{"id":1386081712,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/556","title":"use console.trace to improve error handler","body":"Fixes: https://github.com/honojs/hono/issues/554","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1386081712},{"id":1387251081,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/557","title":"serve-static middleware for node js","body":"There was a lack of serve-static middleware for node.js to serve static files, As mentioned in one of the issues on honojs/node-server, we needed a serve-static middleware. I have been able to create a middleware for just that. I just need approval to submit a pull request from my repo https://github.com/that-ambuj/hono/tree/node-serve into this repo. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1387251081},{"id":1387266532,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/558","title":"added serve-static middleware for node","body":"It is a contribution for issue #557 on this repo which is the same as issue #3 on honojs/node-server repo. I'm making a PR on this repo, because I need to use some types and utils from this repo.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1387266532},{"id":1387556236,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/559","title":"refactor(serve-static): use context/next instead of MiddlewareHandler","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1387556236},{"id":1387703585,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/560","title":"Can't add hono with bun","body":"Hi,\r\nI try to use Bun, but its fail when try to add hono.\r\nplease check [this](https://github.com/oven-sh/bun/discussions/1282).\r\nthanks","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1387703585},{"id":1388197382,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/561","title":"Feature request: Custom error responses for hono/validator","body":"Currently, when using the validator middleware, there's no (nice) way of providing your own error responses when the request passes validation, resulting in a plaintext response that looks something like ```Invalid Value: the JSON body \"name\" is invalid - undefined```. This isn't ideal for an API where the main format is JSON.\r\n\r\nThis feature request is to allow people to deal with formatting the error themselves. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1388197382},{"id":1388200723,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/562","title":"Hono/validator: Unexpected end of JSON input","body":"When using something like the following, and there being an invalid request body (e.g. malformed json, or no body at all), the library throws an unexpected end of json error, with status 500.\r\n```js\r\nvalidator((v) => ({\r\n  email: v\r\n    .json(\"email\")\r\n    .isRequired()\r\n}))\r\n```\r\n\r\nIt should probably throw a 400 error instead 🙂 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1388200723},{"id":1389840687,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/563","title":"feat(validator): add support for JSON array path validation","body":"This PR adds support for JSON array paths in the JSONPath util, and also support for validating JSON array paths from a validator context.\r\n\r\nThe update doesn't break backwards compatibility with the current API (besides the previous less standard `.i` syntax, eg. `posts.4` instead of `posts[4]`) and provides the ability to validate arbitrary array paths, including complex paths of nested arrays and objects.\r\n\r\nFor example this:\r\n```ts\r\nconst jsonBody = {\r\n  posts: [\r\n    {\r\n       title: 'New Post 1',\r\n       tags: ['new-ish', false],\r\n    },\r\n    {\r\n       title: 'New Post 2',\r\n       tags: ['newest', true],\r\n    },\r\n  ],\r\n}\r\n```\r\nCan have arbitrary validations like this:\r\n```ts\r\nvalidator((v) => ({\r\n  title: v.json('posts[*].title').isRequired(),\r\n  secondTag: v.json('posts[*].tags[1]').asBoolean().isRequired(),\r\n}))\r\n```\r\n\r\nOne thing I would like to do in the future is to provide messages to the API consumer about which specific values in an array path failed validation, eg. `posts[2].title is required -- undefined`. I have a working version of this in a patch for the old middleware using `validator.js`, but it would need to be modified, as mentioned in #561. However, that is for another time. As of now, I think I am ready for comment on this PR.\r\n\r\nLet me know if there is anything that needs to be changed with this PR before merge, or if you think this is a good approach at all.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1389840687},{"id":1390530653,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/564","title":"Cache middleware broke in 2.2.*","body":"Honojs cache middleware broke since 2.2.*\r\nUsing the middleware and publishing or running dev in wrangler does not give any errors. Once the route is called it will return a 500 with `Trace: This context has no ExecutionContext` in the worker log.\r\n\r\nRunning a very simple honojs Cloudflare Workers will reproduce this error:\r\n```js\r\nimport { Context, Hono, Next } from 'hono';\r\nimport { cache } from 'hono/cache'\r\n\r\nconst app = new Hono();\r\n\r\napp.get('*', cache({ cacheName: 'my-app', cacheControl: 'max-age=3600' }))\r\napp.get('/', (c) => c.text('Pretty Blog API'));\r\n\r\napp.fire();\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1390530653},{"id":1391388293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/565","title":"Middleware ergonomics with CFW","body":"Hello, thanks for the cool library!\r\n\r\nI've run into this issue a couple of times where I'd like to use the jwt middleware on CFW but routing the secret in is a bit of a pain. Maybe I'm missing something?\r\n\r\nBasically, how do I route my secret located in my `Env` (`new Hono<{ Bindings: Env }>`) to the middleware?\r\n\r\n```js\r\napp.get('/hello', jwt({ secret: '...need to pull secret off of context...' }, () => undefined)\r\n```\r\n\r\nMy proposed solution would be to support a second form of options. If you are interested I'd be happy to make a pr for it!\r\n\r\n```js\r\napp.get('/hello', jwt((c) => ({ secret: c.env.SECRET })), () => undefined)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1391388293},{"id":1391631417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/566","title":"Write about `Deno supports Cache API` on honojs.dev","body":"Deno supports Cache API since v1.26.0:\r\n\r\nhttps://github.com/denoland/deno/releases/tag/v1.26.0","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1391631417},{"id":1391651285,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/567","title":"Cache middleware throws warnings on Cloudflare Workers","body":"It throws the warnings:\r\n\r\n```\r\nYour worker called response.clone(), but did not read the body of both clones. This is wasteful, as it forces the system to buffer the entire response body in memory, rather than streaming it through. This may cause your worker to be unexpectedly terminated for going over the memory limit. If you only meant to copy the response headers and metadata (e.g. in order to be able to modify them), use `new Response(response.body, response)` instead.\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1391651285},{"id":1391679941,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/568","title":"fix(handleEvent): use `dispatch` instead of `fetch`","body":"This PR fixes #564 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1391679941},{"id":1392008341,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/569","title":"Duplicate param name","body":"Hono 2.2.2\r\n\r\nIt seems like the TrieRouter doesn't like the same param name at different levels of the trie:\r\n\r\n```typescript\r\nconst test = new Hono();\r\ntest.get('/:foo', ctx => ctx.json('bar'));\r\ntest.get('/abc/:foo', ctx => ctx.json('bar'));\r\n```\r\n\r\n```\r\nError: Duplicate param name, use another name instead of 'foo' - GET /test/abc/:foo <--- 'foo'\r\n    at Node2.insert (/.../node_modules/.pnpm/hono@2.2.2/node_modules/hono/dist/router/trie-router/node.js:54:35)\r\n    at TrieRouter.add (/.../node_modules/.pnpm/hono@2.2.2/node_modules/hono/dist/router/trie-router/router.js:15:19)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1392008341},{"id":1392265084,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/570","title":"Path templates with parameter prefix","body":"Sort of a follow up from #569 but figured it was a subtly different issue. Having renamed the parameter, I've found the router doesn't match a longer path template if it first matches a shorter one.\r\n\r\nI've put together a failing test here: https://github.com/honojs/hono/compare/main...gatesn:hono:ngates/prefix-params?expand=1\r\n\r\nI believe this can be fixed by removing this `break`: https://github.com/honojs/hono/blob/13ce2eef950f8eb11fe219280b0d5f61bd4fbec1/src/router/trie-router/node.ts#L190\r\n\r\nBut I'm not familiar enough with the code base to know whether that's correct, or just happens to work in this case.\r\n\r\nMany thanks for this project, it's incredibly useful and a pleasure to use :)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1392265084},{"id":1392426910,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/571","title":"Fix Trie router multiple matching path parameters","body":"Fixes #570 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1392426910},{"id":1392734821,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/572","title":"refactor(bun/serve-static): don't check `c.res`","body":"It does not check `c.res` so that `c.res` would not be initialized.\r\n\r\nThis PR related to #510 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1392734821},{"id":1393253362,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/573","title":"fix(cache): export cache middleware for Deno","body":"We should export the Cache middleware for the Deno distribution so that we can use it in Deno 1.26+ now that it is available.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393253362},{"id":1393423174,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/574","title":"Regression of `.all()` between 2.1.4 and 2.2.0","body":"Using Cloudflare Workers\r\n\r\nExample Code:\r\n```typescript\r\napp.get('/cf', CFEndpoint)\r\napp.get('/version', VersionEndpoint)\r\napp.all(`/cors`, CORSHandle)\r\n\r\napp.all('/', async (c) => {\r\n    if (c.env.PRODUCTION === 'true') {\r\n        return c.redirect(\r\n            'https://github.com/Cyb3r-Jak3/workers-serverless-api',\r\n            301\r\n        )\r\n    } else return await c.notFound()\r\n})\r\napp.all('*', (c) => c.notFound())\r\n\r\nexport default app\r\n```\r\nOn 2.1.4 a request to `/cors` goes to the `/cors` endpoint. On 2.2.0 it will return a 404. If `app.all(`/cors`, CORSHandle)` is replaced with `app.get(`/cors`, CORSHandle)` then it gets handled.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393423174},{"id":1393593436,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/575","title":"Error handling x middleware regression since 2.1.3","body":"👋 In versions 2.1.3 and beyond, there is a regression in how errors interact with middleware...\r\n\r\nIn version 2.1.2 and prior, if an error occurred in a route and `app.onError` was invoked, middleware would still be processed for the error response. This would allow middleware such as the built-in `logger` and built-in `cors` to still process the error response, logging the response or injecting CORS headers.\r\n\r\nIn version 2.1.3 and since, if an error occurs and `app.onError` responds, middleware does not have a chance to process the response, so middleware such as `logger` cannot log the response, and `cors` cannot inject any CORS headers.\r\n\r\n```js\r\nconst { Hono } = require('hono');\r\nconst { logger } = require('hono/logger');\r\nconst { cors } = require('hono/cors');\r\n\r\nconst app = new Hono();\r\napp.use('*', logger());\r\napp.use('*', cors({ origin: '*' }));\r\n\r\napp.get('/error', () => {\r\n  throw new Error('Test error');\r\n});\r\n\r\napp.onError((err, ctx) => {\r\n  return ctx.json({\r\n    error: true,\r\n    status: 500,\r\n    message: err.message,\r\n  });\r\n});\r\n\r\nconst main = async () => {\r\n  const res = await app.request('http://localhost/error');\r\n  console.log([ ...res.headers.entries() ]);\r\n};\r\n\r\nmain();\r\n```\r\n\r\n[RunKit demo: hono@latest](https://runkit.com/mattipv4/6338d5a353c9c20008210cfa)\r\n\r\n[RunKit demo: hono@2.1.2](https://runkit.com/mattipv4/6338d71a084d5a0008dd6ed0)\r\n\r\nThis is pretty breaking for my project, as I would like to have error responses logged, and I'd like them to contain CORS headers like any other response.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393593436},{"id":1393633545,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/576","title":"fix(compose): don't throw Error; set error response into `c.res`","body":"**This PR has a small breaking change**\r\n\r\nCurrently, if an error occurred in the Handler, it would immediately throw an Error. Therefore, the Middleware process after `await next()` will not be executed. When handling errors in Middleware, it was necessary to wrap them in try-catch.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  try {\r\n    await next()\r\n  } catch (_) {\r\n    //...\r\n  }\r\n})\r\n```\r\n\r\nThis works well for Sentry Middleware, but has a bad effect on Logger Middleware and CORS. This is mentioned #575 \r\n\r\nThis way of error handling was introduced in #491.\r\n\r\nHowever, referring above, it is not so good, so in this PR, reverting back to the way and makinging it possible to handle Error objects in the Middleware.\r\n\r\nIf the Handler throws an error, there is no need to try-catch in the Middleware, and the error resopnse is passed into `c.res`.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n  // c.res is error reponse\r\n})\r\n\r\napp.get('/error', () => {\r\n  throw new Error('Test error')\r\n})\r\n```\r\n\r\nIf you wanted to handle the original Error object in the Middleware, it would be in `c.error`.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n  const originalMessage = c.error.message\r\n  //...\r\n})\r\n```\r\n\r\nFor example, for Sentry Middleware, the following:\r\n\r\nhttps://github.com/honojs/sentry/blob/ca742a2ea35808cf2b70a19407a93481b4fbe8a0/src/index.ts#L51-L56\r\n\r\nWrite like this:\r\n\r\n```ts\r\nawait next()\r\nif (c.error) {\r\n  sentry.captureException(c.error)\r\n  throw error\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393633545},{"id":1393635569,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/577","title":"Content-Length header missing when Content-Type present","body":"It appears that if the Content-Type header is present, Content-Length is not included in the response.  \r\n\r\nExample:\r\n\r\n```js\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.head(\r\n  \"/test1\",\r\n  () =>\r\n    new Response(null, {\r\n      headers: {\r\n        \"content-length\": \"987654321\",\r\n      },\r\n    })\r\n);\r\n\r\napp.head(\r\n  \"/test2\",\r\n  () =>\r\n    new Response(null, {\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"content-length\": \"987654321\",\r\n      },\r\n    })\r\n);\r\n\r\nexport default app;\r\n```\r\n\r\n```sh\r\n➤ curl --head http://0.0.0.0:8787/test1\r\nHTTP/1.1 200 OK\r\ndate: Sun, 02 Oct 2022 04:12:37 GMT\r\ncontent-length: 987654321\r\nreport-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=mvlI0%2BygL44HvQXozzMMpSlAPz8MQFuGN%2BkiepI50MFf8ZROKo0ap5%2F%2BRTTyeGopX2JVBYZOQV1RUnbAEsx9C2PxEkOraY9EMLGOWZXh2ks1oxtIQiIU78RjxDh0rm%2FHb3oKmeLi2KipEw3rzvbJMatR8z0%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}\r\nnel: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\r\nvary: Accept-Encoding\r\ncf-ray: 753a99ce29928405-YVR\r\nalt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400\r\nserver: cloudflare\r\nConnection: keep-alive\r\nKeep-Alive: timeout=5\r\n\r\n➤ curl --head http://0.0.0.0:8787/test2\r\nHTTP/1.1 200 OK\r\ndate: Sun, 02 Oct 2022 04:12:43 GMT\r\ncontent-type: application/json\r\nreport-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tZy0y%2F%2BRiSD0sxPn4rDKZ%2FkOV665jhNC0HxibfX7rvFOM3rYmIWHmwK7ioQLB8ayyTxHny1wHZlLTNlzBYcY1WP22N271XFiXPwrSl2xqXmNJeLDoJ9TgK%2FbP%2F%2FABAUNxKpCa9CF3ArmSXXl5Zj0rBbUk4w%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}\r\nnel: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\r\nvary: Accept-Encoding\r\ncf-ray: 753a99f4cb5e8405-YVR\r\nalt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400\r\nserver: cloudflare\r\nConnection: keep-alive\r\nKeep-Alive: timeout=5\r\n```\r\n\r\nI'm scratching my head trying to understand why this would be...","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393635569},{"id":1393636420,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/578","title":"fix(validator): Malformed JSON body now returns HTTP 400 Bad Request","body":"This PR adds a new type of error that will be caught by the default error handler: `HTTPError`. It can be passed any valid `StatusCode` and it will return this code along with the `StatusText` from `getStatusText()` as the response body. \r\n\r\nThe validator middleware now catches when `Request.json()` fails and throws `new HTTPError(400)` to be caught and returned to the client. This should probably close #562 if I'm not mistaken.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393636420},{"id":1393667015,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/579","title":"fix(validator): return HTTP 400 on malformed JSON request","body":"This PR should close #562. The Validator middleware will now return a HTTP 400 Bad Request response whenever JSON in the request body fails to parse, or if the body is empty.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393667015},{"id":1393760748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/580","title":"fix(reg-exp-router): Register path for all the methods if method === METHOD_NAME_ALL.","body":"fixes #574\r\n\r\n@yusukebe I think this PR will fix #574!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393760748},{"id":1393949382,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/581","title":"Cron Triggers","body":"Hello, I'm not sure how to setup [Cron Triggers](https://developers.cloudflare.com/workers/platform/cron-triggers) that includes the context.\r\nI want to add/update some values in the KV store but need the context so I can do `context.env.KV.put(key, value)`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1393949382},{"id":1395385512,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/582","title":"trpc adapter","body":"hi again :)\r\n\r\nso in exploring trpc, they have some [adapters](https://github.com/trpc/trpc/tree/next/packages/server/src/adapters), I took a stab at modifying their fetch adapter to work with hono, but I'd love some feedback on if this looks okay:\r\n\r\n```ts\r\nimport { AnyRouter, inferRouterContext, resolveHTTPResponse } from '@trpc/server';\r\nimport { HTTPBaseHandlerOptions, HTTPRequest } from '@trpc/server/dist/http/internals/types';\r\nimport type { Context,  } from 'hono';\r\nimport { StatusCode } from 'hono/utils/http-status';\r\n\r\nexport type HonoCreateContextFn<TRouter extends AnyRouter> = (opts: {\r\n  ctx: Context;\r\n}) => inferRouterContext<TRouter> | Promise<inferRouterContext<TRouter>>;\r\n\r\nexport type HonoCreateContextOption<TRouter extends AnyRouter> =\r\n  unknown extends inferRouterContext<TRouter>\r\n    ? {\r\n        /**\r\n         * @link https://trpc.io/docs/context\r\n         **/\r\n        createContext?: HonoCreateContextFn<TRouter>;\r\n      }\r\n    : {\r\n        /**\r\n         * @link https://trpc.io/docs/context\r\n         **/\r\n        createContext: HonoCreateContextFn<TRouter>;\r\n      };\r\n\r\nexport type HonoHandlerOptions<TRouter extends AnyRouter> = HTTPBaseHandlerOptions<\r\n  TRouter,\r\n  Request\r\n> &\r\n  HonoCreateContextOption<TRouter>;\r\nexport type HonoHandlerRequestOptions<TRouter extends AnyRouter> = {\r\n  ctx: Context;\r\n  endpoint: string;\r\n} & HonoHandlerOptions<TRouter>;\r\n\r\nexport async function honoRequestHandler<TRouter extends AnyRouter>(\r\n  opts: HonoHandlerRequestOptions<TRouter>\r\n): Promise<Response> {\r\n  const createContext = async () => {\r\n    return opts.createContext?.({ ctx: opts.ctx });\r\n  };\r\n\r\n  const url = new URL(opts.ctx.req.url);\r\n  const path = url.pathname.slice(opts.endpoint.length + 1);\r\n  const req: HTTPRequest = {\r\n    query: url.searchParams,\r\n    method: opts.ctx.req.method,\r\n    headers: Object.fromEntries(opts.ctx.req.headers),\r\n    body: await opts.ctx.req.text(),\r\n  };\r\n\r\n  const result = await resolveHTTPResponse({\r\n    req,\r\n    createContext,\r\n    path,\r\n    router: opts.router,\r\n    batching: opts.batching,\r\n    responseMeta: opts.responseMeta,\r\n    onError(o) {\r\n      opts?.onError?.({ ...o, req: opts.ctx.req });\r\n    },\r\n  });\r\n\r\n  for (const [key, value] of Object.entries(result.headers ?? {})) {\r\n    if (typeof value === 'undefined') {\r\n      continue;\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      opts.ctx.header(key, value);\r\n      continue;\r\n    }\r\n\r\n    for (const v of value) {\r\n      opts.ctx.header(key, v);\r\n    }\r\n  }\r\n  return opts.ctx.body(result.body, result.status as StatusCode);\r\n}\r\n\r\n```\r\n\r\nUsage:\r\n```ts\r\nimport { serve } from '@honojs/node-server';\r\nimport { Hono } from 'hono';\r\nimport { logger } from 'hono/logger';\r\nimport { initTRPC } from '@trpc/server';\r\nimport { honoRequestHandler } from './common/trpc';\r\n\r\nconst t = initTRPC.create();\r\n\r\nconst appRouter = t.router({\r\n  userById: t.procedure\r\n    .input((val: unknown) => {\r\n      if (typeof val === 'string') return val;\r\n      throw new Error(`Invalid input: ${typeof val}`);\r\n    })\r\n    .query(req => {\r\n      const { input } = req;\r\n\r\n      return { hello: 'world' };\r\n    }),\r\n});\r\n\r\nconst app = new Hono();\r\n\r\napp.use('*', logger());\r\n\r\napp.get('/', c => c.text('working :~)'));\r\n\r\napp.use('/trpc/*', c => {\r\n  return honoRequestHandler({\r\n    router: appRouter,\r\n    ctx: c,\r\n    endpoint: 'trpc/',\r\n  });\r\n});\r\n\r\nserve(app);\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1395385512},{"id":1395481479,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/583","title":"fix(compose): fix for error handling with `async`","body":"The following PR did not support `async`.\r\n\r\nhttps://github.com/honojs/hono/pull/576\r\n\r\nThis PR will support `async`. Will fix https://github.com/honojs/hono/issues/575","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1395481479},{"id":1396701396,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/584","title":"Feature: nested validation","body":"In #563, we talked about nested validation with arrays. @usualoma mentioned an interesting way to handle nested validations like this:\r\n\r\n```ts\r\ndescribe('validate nested structure by asArray', () => {\r\n  const app = new Hono()\r\n  app.post(\r\n    '/post',\r\n    validator((v) => ({\r\n      posts: v.json('posts').asArray((nest) => ({\r\n        title: nest.json('title').isAlpha(),\r\n        tags: nest.json('tags').asArray().isRequired(),\r\n        ids: nest.json('ids').asNumber().asArray(),\r\n      }))\r\n    })),\r\n    (c) => {\r\n      const res = c.req.valid()\r\n      return c.json({ tag1: res.posts[0].tags[0] })\r\n    }\r\n  )\r\n\r\n  it('Should return 200 response', async () => {\r\n    const json = {\r\n      post: {\r\n        title: 'foo',\r\n        tags: ['Workers', 'Deno', 'Bun'],\r\n        ids: [1, 3, 5],\r\n      },\r\n    }\r\n    const req = new Request('http://localhost/post', {\r\n      method: 'POST',\r\n      body: JSON.stringify(json),\r\n    })\r\n    const res = await app.request(req)\r\n    expect(res.status).toBe(200)\r\n    expect(await res.json()).toEqual({ tag1: 'Workers' })\r\n  })\r\n})\r\n```\r\n\r\nI think we can assign a type to this.\r\n\r\n<img width=\"558\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193165303-dbf14b39-1d97-429b-8874-07ccfb6e27eb.png\">\r\n\r\n<img width=\"625\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193165323-95a14dff-9e94-4c05-95ca-564d958ed1b3.png\">\r\n\r\n<img width=\"645\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/193165344-924cba2b-1ed8-4e45-a69c-dbc0d1c9c968.png\">\r\n\r\n_Originally posted by @usualoma in https://github.com/honojs/hono/issues/563#issuecomment-1262975936_\r\n\r\nI think this coupled with some extension of the `asObject()` method, would allow clean and proper validation of any complex valid JSON structure! Hono users could then do things like this:\r\n```ts\r\n    validator((v) => ({\r\n      posts: v.json('posts').asArray((nest) => ({\r\n        title: nest.json('title').isAlpha(),\r\n        meta: nest.json('meta').asObject((nest) => ({\r\n          // A user should probably not be able to create posts like this, but it's an example ;)\r\n          relatedPosts: nest.json('relatedPosts').asArray((nest) => ({\r\n            title: nest.json('title').isAlpha(),\r\n            tags: nest.json('tags').asArray().isRequired(),\r\n            ids: nest.json('ids').asNumber().asArray(),\r\n          })),\r\n          moreStuff: nest.json('moreStuff').asArray().isOptional(),\r\n        })),\r\n        tags: nest.json('tags').asArray().isRequired(),\r\n        ids: nest.json('ids').asNumber().asArray(),\r\n      }))\r\n    })),\r\n    (c) => {\r\n      const res = c.req.valid()\r\n      return c.json({ relatedPosts1Tags: res.posts[0].meta.relatedPosts[0].tags })\r\n    }\r\n  )\r\n```\r\n\r\nThis would also allow for us to return errors specific to particular paths with arrays like:\r\n`posts[1].tags[0] is invalid - true - rule: asString` or something similar. These errors should be useful to the API consumer, and the components such as `ruleName`, `path` and `pathValue` should be exposed to custom errors (I know @yusukebe is working on a new custom validation error system). This is probably a separate issue though, and would be dependent on this issue first.\r\n\r\nWhat do you all think about this plan?\r\n      ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1396701396},{"id":1397947291,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/585","title":"What exactly is Context get/set ?","body":"In the documentation https://honojs.dev/docs/api/context/#csetcget it is only written:\r\n\r\n> Set the value specified by the key with set and use it later with get.\r\n\r\nWith a brief example. However, it is not clear what this get/set actually does and how it works. Is it global state? Session based? Something else?","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1397947291},{"id":1397977573,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/586","title":"Is it possible to invoke the validator within the handler?","body":"Hello. Thanks for this wonderful framework. Nicely done!\r\n\r\nI know it's purely a cosmetic preference, but I find it would be nice to invoke the validator *within the handler* and *only on the json body*.\r\n\r\nSo that instead:\r\n\r\n```ts\r\napp.post(\r\n  '/posts',\r\n  validator((v) => ({\r\n    // Validate header values specified with the key.\r\n    // You can get validated value as `customHeader`.\r\n    customHeader: v.header('x-custom').isAlpha(),\r\n    // Validate JSON body.\r\n    // You can get the values as structured data.\r\n    post: {\r\n      id: v.json('post.id').isRequired().asNumber(),\r\n      title: v.json('post.title').isRequired().isLength({ max: 100 }),\r\n      body: v.json('post.body').isOptional(),\r\n    },\r\n  })),\r\n  (c) => {\r\n    // Get validated data.\r\n    const res = c.req.valid()\r\n    const post = res.post\r\n    return c.text(`Post: ${post.id} is ${post.title}`)\r\n  }\r\n)\r\n```\r\n\r\nIt would be:\r\n\r\n```ts\r\napp.post(\r\n  '/posts',\r\n  (c) => {\r\n    // Get validated data.\r\n    const validatedData = await c.req.validate((v) => ({\r\n        // Validate header values specified with the key.\r\n        // You can get validated value as `customHeader`.\r\n        customHeader: v.header('x-custom').isAlpha(),\r\n        // Validate JSON body.\r\n        // You can get the values as structured data.\r\n        post: {\r\n          id: v.json('post.id').isRequired().asNumber(),\r\n          title: v.json('post.title').isRequired().isLength({ max: 100 }),\r\n          body: v.json('post.body').isOptional(),\r\n        },\r\n    }))\r\n    // ...\r\n  }\r\n)\r\n```\r\n\r\nIt's not a big deal, just a preference. I find the latter approach more comfortable and flexible, that's all. In case of errors, the validator would simply throw an error which could be handled upstream like any other error. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1397977573},{"id":1400195082,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/587","title":"Questions: Middleware","body":"Got two questions:\r\n\r\n1. Middleware is set like this: \r\n`middleware.use('*', prettyJSON())`\r\n\r\nWhat's the argument going against the pattern?\r\n`app.post('/posts', prettyMW, (c) => c.text('Created!', 201))`\r\n\r\n2. I can specify a middleware for a specific route but not a specific method. In question one, it's possible to put middleware where you want to. But when using this way, it's only possible to specify what route it should be applied to?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1400195082},{"id":1400284169,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/588","title":"Documentation of body is most likely wrong, please correct me.","body":"[Documentation is very explicit how you parse the body of an incoming post request.](https://honojs.dev/docs/api/context/#creq)\r\n\r\nCode: 1\r\n```\r\n// Parse Request body\r\n app.post('/entry', (c) => {\r\n   const body = c.req.parseBody()\r\n   ...\r\n })\r\n```\r\nCode 1, with async and await returns `Object {}`\r\n\r\n\r\nIt does not work in hono v.2.2.5. \r\nAfter some time and some reading [here](https://github.com/honojs/hono/issues/362) to try the following which actually worked.\r\n\r\nCode: 2\r\n```\r\n// Parse Request body\r\n app.post('/entry', async (c) => {\r\n   const data = await c.req.json()\r\n })\r\n```\r\n\r\nPlease tell me that I did something wrong when trying Code: 1, I highly doubt you would have wrong documentation of how to retrieve the body. \r\n\r\nEdit: [Just found this x)](https://github.com/honojs/hono/blob/406c2ee438ed9b4fd92079bb13ad7fd78dcf05aa/docs/MIGRATION.md)\r\n\r\nWord of advice, always push updated documentation when doing breaking changes like that in the future [😄](https://emojipedia.org/grinning-face-with-smiling-eyes/)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1400284169},{"id":1400492270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/589","title":"perf: remove unrequired cloning of ctx.res","body":"Response constructor's 2nd argument does not require a cloned response as all it does is read these fields and does not modify anything:\r\n- status\r\n- statusText\r\n- headers\r\n\r\n> https://fetch.spec.whatwg.org/#initialize-a-response","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1400492270},{"id":1400819238,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/590","title":"ENV not defined","body":"I have been following [this blog example that uses KV, and cloudflare workers](https://github.com/honojs/examples/tree/main/blog).\r\nThe result is that env is undefined. Not sure what I am doing wrong here according to the documentation.\r\n\r\n\"hono\": \"^2.2.5\"\r\n\"wrangler\": \"2.1.10\"\r\nnode v16.17.1\r\nnpm v8.15.0\r\nOn Windows OS using Git for windows terminal.\r\n\r\nindex.js\r\n```\r\nimport { Hono } from 'hono';\r\nconst app = new Hono();\r\napp.post('/post', async (c) => {\r\n  console.log('c', c.env.POST)\r\n  return c.json({ ok: true }, 201)\r\n})\r\n\r\nexport default app;\r\n```\r\n\r\nwrangler.toml\r\n```\r\nname = \"worker\"\r\nmain = \"src/index.js\"\r\ncompatibility_date = \"2022-10-06\"\r\n\r\naccount_id = \"myId...\"\r\nworkers_dev = true\r\n\r\n[env.staging]\r\nkv_namespaces = [\r\n    { binding = \"POST\", id = \"test\" }\r\n]\r\n\r\n[env.production]\r\nkv_namespaces = [\r\n    { binding = \"POST\", id = \"test\" }\r\n]\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1400819238},{"id":1401458413,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/591","title":"Parameter for unknown amount of segments","body":"Hi there! Very cool project!\r\n\r\nI'm currently migrating an API from SvelteKit Endpoints to a standalone Cloudflare Worker and would love to use Hono for this! With the current API, we rely heavily on a SvelteKit feature called Rest parameters (https://kit.svelte.dev/docs/advanced-routing#rest-parameters) which basically allows you to define a parameter for an unknown amount of path segments. Or in other words a wildcard as a parameter. \r\n\r\nI was wondering if something like this is possible with Hono: \r\n```ts\r\napp.get('/block/:(...path)', (c) => {\r\n  return c.text(c.req.param('path'))\r\n})\r\n\r\n// GET http://localhost:8787/block/key1/key2/key3/key4 -> key1/key2/key3/key4\r\n```\r\n\r\nI guess a workaround would be to use a wildcard and manually try to extract this from `c.req.url`. But this wouldn't be very elegant as this method would always require information about the other route parameters. Resulting in defining the parameters twice. \r\n\r\nIs there a better way? Thanks in advance! ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1401458413},{"id":1402109386,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/592","title":"feat(validator): introduce nested validation","body":"This PR introduces \"nested validation\" for Validator Middleware.\r\n\r\nIn this PR, we can validate nested JSON structured data using `v.array()` and `v.object()` functions. After much thought and consideration, the result is this API.\r\n\r\nFor example, there is a nested object like below:\r\n\r\n```ts\r\nconst data = {\r\n  posts: [\r\n    {\r\n      id: 123,\r\n      title: 'JavaScript',\r\n      tags: ['Workers', 'Deno', 'Bun'],\r\n    },\r\n  ],\r\n  pager: {\r\n    prev: true,\r\n    next: false,\r\n  },\r\n}\r\n```\r\n\r\nIt will be validated with `v.array()` and `v.object()`:\r\n\r\n```ts\r\napp.post(\r\n  '/posts',\r\n  validator((v) => ({\r\n    posts: v.array('posts', (v) => ({\r\n      id: v.json('id').asNumber().isRequired(),\r\n      title: v.json('title'),\r\n      tags: v.json('tags').asArray(),\r\n    })),\r\n    pager: v.object('pager', (v) => ({\r\n      prev: v.json('prev').asBoolean(),\r\n      next: v.json('next').asBoolean(),\r\n    })),\r\n  })),\r\n  (c) => {\r\n    return c.text('Valid!')\r\n  }\r\n)\r\n```\r\n\r\nAnd it also has types:\r\n\r\n<img width=\"814\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/194732339-d0bee8c4-3388-42a5-b66d-f788b0ce331b.png\">\r\n\r\nIsn't it cool? I want to know your opinion.\r\n\r\n## Implementation\r\n\r\nIt has become a little bit complex. There may be something missing or wrong points in this implementation. If you notice any, please review them.\r\n\r\nThe code for `JSONPathCopy` is based on @ThatOneBro's  and @usualoma 's code.\r\n\r\nhttps://github.com/honojs/hono/pull/508/files#diff-91414c404fd51d6fb8e47ba511fd1a5c410e5fe3e732254f0f6d621175fcd647\r\n\r\nThis PR related: #584","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1402109386},{"id":1402288270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/593","title":"next() is called multiple times in Deno when staticFileHandler fails to find a file","body":"The title basically speaks for itself. See the following code when serveStatic is called with a non-existing file-path:\r\n```ts\r\nexport const serveStatic = (options: ServeStaticOptions = { root: '' }) => {\r\n  return async (c: Context, next: Next) => {\r\n    // Do nothing if Response is already set\r\n    if (c.finalized) {\r\n      await next()\r\n    }\r\n\r\n    const url = new URL(c.req.url)\r\n\r\n    let path = getFilePath({\r\n      filename: options.path ?? url.pathname,\r\n      root: options.root,\r\n      defaultDocument: DEFAULT_DOCUMENT,\r\n    })\r\n\r\n    path = `./${path}`\r\n\r\n    let content\r\n\r\n    try {\r\n      content = await Deno.readFile(path)\r\n    } catch (e) {\r\n      console.warn(`${e}`) // <-- Triggers with NotFound: No such file or directory (os error 2)\r\n      await next() // <-- This triggers the flow of all the next middleware, which eventually completes\r\n    }\r\n\r\n    if (content) {\r\n      const mimeType = getMimeType(path)\r\n      if (mimeType) {\r\n        c.header('Content-Type', mimeType)\r\n      }\r\n      // Return Response object\r\n      return c.body(content)\r\n    } else {\r\n      console.warn(`Static file: ${path} is not found`) // <-- Then this is logged\r\n      await next() // And next is called again without a middleware in the queue and thus errors\r\n    }\r\n    return\r\n  }\r\n}\r\n```\r\n\r\nProposed fix: Remove the await next() call from this part:\r\n```ts\r\n    try {\r\n      content = await Deno.readFile(path)\r\n    } catch (e) {\r\n      console.warn(`${e}`) // <-- Triggers with NotFound: No such file or directory (os error 2)\r\n      // --Remove await next()\r\n    }\r\n```\r\n\r\nI literally only know hono exists since yesterday so it might be something else, but I think not.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1402288270},{"id":1402303981,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/594","title":"fix(deno): fixed the bug calling `next()` multiple times in Serve Static","body":"Fix #593 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1402303981},{"id":1402307414,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/595","title":"test(bun): add more tests for serve static middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1402307414},{"id":1402308867,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/596","title":"perf(serve-static): return immediately if `c.finalized`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1402308867},{"id":1402984822,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/597","title":"`c.set` & `c.get` variable types are not enforced","body":"**UPDATE**: I actually think this might not be a problem. It seems to be because I don't really have linting in this project.\r\n\r\nOn another project, I have linting and am warned with `@typescript-eslint/no-unsafe-assignment` when I try to access a variable that was not in the `CustomVariables` type.\r\n\r\nDoes that seem right to you? If so, I'll just close this.\r\n\r\n**/Update**\r\n\r\n---\r\n\r\nI'm trying to using types for variables as implemented in #478.\r\n\r\nIn this example (https://github.com/justinnoel/hono-cloudflare-pages-ssr), I've modified as follows;\r\n\r\n• **/src/types.ts:**\r\n\r\n```\r\nexport type CustomVariables = {\r\n\tcounter: string;\r\n}\r\n```\r\n\r\n---\r\n\r\n• **src/index.tsx:**\r\n\r\n```\r\nconst app = new Hono<{ Bindings: Env; Variables: CustomVariables }>();\r\n\r\n...\r\n\r\napp.get(\"/post/:id{[0-9]+}\", async (c) => {\r\n\tconst id = c.req.param(\"id\");\r\n\r\n\tconst counter = Number(c.get(\"counter\") || \"1\");\r\n\tconst conter = c.get(\"conter\");\r\n\r\n\tconsole.log(\"counter = \", counter)\r\n\tconsole.log(\"conter = \", conter)\r\n\r\n\tconst post = await getPost({ id, namespace: c.env.HONO_PAGES_BLOG_POSTS });\r\n\tif (!post) {\r\n\t\treturn c.notFound();\r\n\t}\r\n\r\n\treturn c.html(<Page post={post} counter={counter} />);\r\n});\r\n```\r\n\r\n---\r\n\r\nAs I'm typing, Code does properly hint that `counter` is available for `c.get()`. However, it does not prevent use of variable names that **don't** exist. It does not show `conter` as an invalid variable.\r\n\r\n\r\nThis screenshot shows that TypeScript is perfectly happy with a correct **and** and incorrect variable name.\r\n\r\n![hono-variables-not-enforced](https://user-images.githubusercontent.com/81643826/194851012-0b64f5f9-fa36-47e2-b5f6-91c029516202.jpg)\r\n\r\nIs there any way to enforce the correct variables?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1402984822},{"id":1403817328,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/598","title":"fix(object): make merge immutable to fix issues with missing fields","body":"This seems to fix the issue with missing fields on objects in the CI runner. Also immutable merges are probably safer.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1403817328},{"id":1407994056,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/599","title":"How can I get the clone of original request?","body":"Hi there,\r\n\r\nThank you to everyone in this community, you have inspired me a lot.\r\n\r\nI'm working on proxy feature with Hono, is there possible to get original request object ? then I don't have to parsebody and set the header manually , \r\n just like: https://developers.cloudflare.com/workers/examples/bulk-origin-proxy/\r\n\r\n`const ORIGINS = {\r\n  'starwarsapi.yourdomain.com': 'swapi.dev',\r\n  'google.yourdomain.com': 'www.google.com',\r\n};\r\n\r\nfunction handleRequest(request) {\r\n  const url = new URL(request.url);\r\n  // Check if incoming hostname is a key in the ORIGINS object\r\n  if (url.hostname in ORIGINS) {\r\n    const target = ORIGINS[url.hostname];\r\n    url.hostname = target;\r\n    // If it is, proxy request to that third party origin\r\n    return fetch(url.toString(), request);\r\n  }\r\n\r\n  // Otherwise, process request as normal\r\n  return fetch(request);\r\n}\r\n\r\naddEventListener('fetch', event => {\r\n  event.respondWith(handleRequest(event.request));\r\n});`\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1407994056},{"id":1408170690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/600","title":"`Internal Server Error` happened to Cloudflare Workers with cf official redirect","body":"Codes following catch `Internal Server Error` with Cloudflare Workers.\r\n```ts\r\napp.get('/', (c) => {\r\n  return Response.redirect('https://github.com')\r\n})\r\n```\r\nBut this piece of code with the same meaning can be successfully executed.\r\n```ts\r\napp.get('/', (c) => {\r\n  return new Response('', {\r\n    status: 302,\r\n    headers: { 'Location': 'https://github.com' }\r\n  })\r\n})\r\n```","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1408170690},{"id":1410321115,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/601","title":"Going to monorepo for 3rd party middleware","body":"We talk about how we manage third-party middleware, the place of the repository, how to publish to npm registry, or how to make it Deno modules:\r\n\r\nhttps://github.com/honojs/hono/issues/477\r\n\r\n* Develop on \"multirepo\" under \"honojs org\" like \"github.com/honojs/sentry\"\r\n* Publish it to npm registry by repository/package owner.\r\n* For Deno, distribute it on `deno.land/x`\r\n\r\nBUT, I've noticed the following not-so-good points about this way:\r\n\r\n* Trouble managing across repositories.\r\n* It has possible that some repositories may no longer be maintained.\r\n* Each repository owner needs to create a publishing mechanism.\r\n\r\nFor that reasons, it becomes difficult to create middleware casually.\r\n\r\nOne of the reasons this had to happen was the problem of publishing/distributing the Deno module. We need each repository to deliver from `deno.land/x`. However, with the [new `npm:` feature](https://deno.com/blog/changes#compatibility-with-node-and-npm) supported by Deno, we don't have to bother with `deno.land` and can still now use CDNs such as skypack and esm.sh.\r\n\r\nSO, I'm planning to migrate to \"monorepo\".\r\n\r\n* Manage package into one repository. Share the setting of prettier, linter, typescript, etc.\r\n* But middleware A will not referer to middleware B. Just need to be able to build them individually. We don't need a high-spec build system.\r\n* We have to increment the version number per package and make the change log individually.\r\n* Make it easy to publish into npm repository using GitHub Actions.\r\n\r\nThen I'm planning to go with just \"yarn workspaces\" and \"changesets\". I'm trying this structure in the following repository, and it seems to work well!\r\n\r\n<https://github.com/yusukebe/iekei>\r\n\r\nI want to go with monorepo. I am in the process of preparing a repository for monorepo. Once that is done, we can create a new \"tPRC middleware\". Then we would like to migrate the existing middleware, such as sentry or graphQL server.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410321115},{"id":1410324629,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/602","title":"Sharing Types for the fetch client","body":"In this issue https://github.com/honojs/hono/issues/582, @cleaton has proposed the exciting feature instead of tRPC.\r\n\r\n> Instead (or rather in addition too) of integrating with TRPC, might it not be better to just create a Proxy client that is native for Hono? I think that will be much simpler and more reliable (not break when TRPC changes things.)\r\n> ...\r\n\r\nOf course, we make tRPC middleware, but this feature is welcome.\r\n\r\nI think this means \"sharing the Types of the JSON response written in handlers for the fetch client\", and making the library for the fetch client. In addition, if we can integrate with validator middleware, it will be possible to share input types, not only output types.\r\n\r\nWe should not do everything in Hono, but we need to consider whether to take in them and how we make them.\r\n\r\nIn this Issue, let's discuss the API design and implementation.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410324629},{"id":1410402243,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/603","title":"feat(validator): has the error message per rule","body":"In this PR, the validator will have multiple result objects, so it will have an error message per rule.\r\n\r\nFor example, one error message will become more friendly.\r\n\r\n```\r\n'Invalid Value: the request body \"title\" is invalid - abcdefg'\r\n```\r\n\r\nwill be:\r\n\r\n```\r\n'Invalid Value [abcdef]: the request body \"title\" is invalid - isLength'\r\n```\r\n\r\nInternally, it has error objects as follows:\r\n\r\n```json\r\n[\r\n  {\r\n      \"isValid\": true,\r\n      \"target\": \"body\",\r\n      \"key\": \"title\",\r\n      \"value\": \"abcdefg\",\r\n      \"ruleName\": \"should be \\\"string\\\"\",\r\n      \"ruleType\": \"type\"\r\n  },\r\n  {\r\n      \"isValid\": false,\r\n      \"message\": \"Invalid Value [abcdefg]: the request body \\\"title\\\" is invalid - isLength\",\r\n      \"target\": \"body\",\r\n      \"key\": \"title\",\r\n      \"value\": \"abcdefg\",\r\n      \"ruleName\": \"isLength\",\r\n      \"ruleType\": \"value\"\r\n  }\r\n]\r\n```\r\n\r\nIf you want to do more complex error handling, you can refer to this result objects in the `done` option.\r\n\r\n```ts\r\nconst vHandler = validator(\r\n  (v) => ({\r\n    title: v.body('title').isLength({ max: 5 }),\r\n  }),\r\n  {\r\n    done: (res, c) => {\r\n      if (res.hasError) {\r\n        // ... do something\r\n        // console.log(res.results)\r\n      }\r\n    },\r\n  }\r\n)\r\n```\r\n\r\nThis PR is related to #561 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410402243},{"id":1410519751,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/604","title":"feat: added exception handler","body":"# Added NestJS inspired exception handler.\r\n\r\n## Usage:\r\n\r\n#### Basic use:\r\n\r\n```\r\napp.get('/dashboard', (c) => {\r\n  if (!user) {\r\n    throw new UnauthorizedException();\r\n  }\r\n  ...\r\n});\r\n```\r\n\r\n#### Custom Exception\r\n\r\n```\r\napp.get('/custom', () => {\r\n  throw new HttpException('Something is wrong', 500);\r\n});\r\n```\r\n\r\n## Advance use case:\r\n\r\n```\r\napp.onError((err, c) => {\r\n  if (err instanceof Exception) {\r\n    c.status(err.status as StatusCode);\r\n    if (c.req.headers.get('accept')?.includes('application/json')) {\r\n      return c.json({ message: err.message });\r\n    }\r\n\r\n    return c.text(err.message);\r\n  }\r\n\r\n  return c.text('Custom Error Message', 500);\r\n});\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410519751},{"id":1410520489,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/605","title":"Feature request: exception support","body":"Hi,\r\nI really liked this framework a lot, it has everything that I expect from a framework. I use NestJS heavily, while I was using honojs, I missed the exceptions support. Exceptions make the code more readable and easy to work with.\r\nSo I implemented exception handler inside honojs to make the developer experience more better. It is heavily inspired by NestJS. Here is a working **[demo](https://github.com/raiyansarker/honojs-exception-support-preview)**.\r\n\r\nPR for the feature: #604 \r\n\r\nSyntax looks something like this:\r\n![exception-handler-demo](https://user-images.githubusercontent.com/38852396/196043244-85195b9e-afd5-418d-91a6-193f6bfde2df.png)\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410520489},{"id":1410568900,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/606","title":"Hono Bun jsx displays [object Object]","body":"I cannot get the jsx middleware to render HTML using the examples provided, the page always displays: [object Object] .\r\n\r\nI am using the exact code from: https://github.com/honojs/examples/blob/main/bun/jsx.tsx\r\n\r\nI am using the same tsconfig.json\r\n\r\nAny ideas?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410568900},{"id":1410665491,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/607","title":"Cannot Catch Errors In Middleware","body":"I was expecting to be able to catch errors in middleware just like oak, but it doesn't seem to be working.\r\n```\r\nthis.application.use(\"*\", async (context, next) => {\r\n  try {\r\n    await next();\r\n  } catch (reason) {\r\n    console.log(`Error: ${reason}`);\r\n  }\r\n}\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1410665491},{"id":1413989850,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/608","title":"fix(bearer-auth, basic-auth): handler should not be executed when unauthorized","body":"This is a huge security concern. Imagine securing a nuclear launch handler with it :scream: \r\n\r\nI would suggest yanking all previous versions with this middleware","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1413989850},{"id":1414431181,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/609","title":"test(validator): add array results test","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1414431181},{"id":1414756351,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/610","title":"fix(basic/bearer): support \"nested\" middleware","body":"This is a continuation of #608 .","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1414756351},{"id":1414789352,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/611","title":"refactor(jwt): refactor code and add more tests","body":"This is like #608 but just refactoring. It's not a security fix because it's already secured.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1414789352},{"id":1416057998,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/612","title":"fix(validator): show \"type\" error messages if does not have \"value\" errors","body":"Fixed the bug returning an empty body if the results don't have \"value\" errors.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1416057998},{"id":1416098716,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/613","title":"fix(validator): make \"isOptional\" work correctly with \"value\" validation","body":"```ts\r\npage: v.query('page').isOptional().isNumeric()\r\n```\r\n\r\nwas validated as invalid. fixed it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1416098716},{"id":1416124745,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/614","title":"[Validator] Cast support","body":"I think it's good and helpful to support \"cast\" in validator middlware with `asNumber()` and `asBoolean()`.\r\n\r\n```ts\r\nconst search = (q: string, page: number | undefined) => `result of ${q} - ${page}`\r\n\r\napp.get(\r\n  '/search',\r\n  validator((v) => ({\r\n    q: v.query('q').isRequired(),\r\n    page: v.query('page').isOptional().asNumber(),\r\n  })),\r\n  (c) => {\r\n    const { q, page } = c.req.valid() // page is `number | undefined`\r\n    const result = search(q, page) // do not show warnings\r\n    return c.text(`search result! ${result}`)\r\n  }\r\n)\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1416124745},{"id":1416731985,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/615","title":"refactor(types): refactor and add tests for checking Types","body":"Refactored the code almost related to Types. Then added the tests for checking Types.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1416731985},{"id":1418405682,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/616","title":"Too many subrequests.","body":"Hi,\r\n\r\non a blockchain, I'm trying to get the information that the transaction has been approved.\r\n```javascript\r\nconst confirmation = await connection.confirmTransaction({\r\n        signature,\r\n        blockhash,\r\n        lastValidBlockHeight,\r\n    },\r\n    \"finalized\"\r\n);\r\n```\r\n\r\nThe `confirmTransaction` function assigns multiple get requests in the background to verify whether the transaction has been confirmed or not.\r\n\r\nin this case \"error: Too many sub-requests. Thus, employees can submit up to 50 sub-requests per request.\"\r\n\r\nthe error returns. I don't get errors when I do the same with Expressjs.\r\nWhat am I doing wrong?\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1418405682},{"id":1419269481,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/617","title":"docs(migration): add `v2.2.5 to v2.3.0`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1419269481},{"id":1419275482,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/618","title":"Update the contribution guide","body":"The way of making third-party middleware will be changed. We have to write about it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1419275482},{"id":1419525172,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/619","title":"docs(contribution): update about 3rd-party middleware","body":"Close #618","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1419525172},{"id":1419578697,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/620","title":"test(validator): add test for custom rules","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1419578697},{"id":1420014932,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/621","title":"[Validator] Bugs","body":"There are a few bugs that should be fixed in Validator Middleware:\r\n\r\n- [x] `isOptional()` is not working. `v.query('page').isNumeric().isOptional()` will return invalid if the value is `undefined`. #613","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420014932},{"id":1420030322,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/622","title":"[Validator] Support `queries`","body":"We have to support multiple queries with `c.queries()`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420030322},{"id":1420061635,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/623","title":"[Validator] Support `default()`","body":"How about setting the default value with `default()`.\r\n\r\n```ts\r\nv.query('page').isNumeric().default('1')\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420061635},{"id":1420086282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/624","title":"[Validator] path of exporting `Validator`","body":"I want to do this:\r\n\r\n```ts\r\nconst schema = (v: Validator) => ({\r\n  query: v.query('q').isRequired(),\r\n  page: v.query('page').isNumeric().isOptional(),\r\n  order: v.query('order').isIn(['asc', 'desc', 'default']).isOptional(),\r\n})\r\n\r\napp.get(\r\n  '/search',\r\n  validator(schema, {\r\n    done: (r, c) => {\r\n      if (r.hasError) {\r\n        return c.redirect('/')\r\n      }\r\n    },\r\n  }),\r\n  (c) => c.text('Valid!')\r\n)\r\n```\r\n\r\nBut, we have to use the `Validator` by importing from the path in `dist`:\r\n\r\n```ts\r\nimport type { Validator } from 'hono/dist/middleware/validator/validator'\r\n```\r\n\r\nIt's good to import from `hono/middleware`:\r\n\r\n```ts\r\nimport type { Validator } from 'hono/validator'\r\n```\r\n\r\nSo, we have to export the type `Validator` from `src/middleware/validator/index.ts`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420086282},{"id":1420652093,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/625","title":"How to get full type safety with extracted handler function?","body":"Below is minimal example that I am curious about.\r\n\r\n\r\n```ts\r\napp.get(`/api/:id`, (c) => {\r\n  const key = c.req.param().id; // This is auto-completed\r\n});\r\n\r\napp.get(`/api/:id`, handler);\r\nconst handler = (c: Context<string, Environment>) => {\r\n  const key = c.req.param().id; // This is NOT auto-completed\r\n}\r\n\r\n```\r\n\r\nCould you guide me how to deal with this? Thanks.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420652093},{"id":1420914056,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/626","title":"fix(deno): export static-router and smart-router","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420914056},{"id":1420968309,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/627","title":"feat(validator): export `Validator` from 'hono'","body":"You can write your schema definition outside the middleware handler as follows:\r\n\r\n```ts\r\nimport type { Validator } from 'hono'\r\nimport { validator } from 'hono/validator'\r\n\r\nconst schema = (v: Validator) => ({\r\n  query: v.query('query').isRequired(),\r\n  page: v.query('page').isNumeric().isOptional(),\r\n})\r\n\r\napp.get('/search', validator(schema), (c) => {\r\n  const { query, page } = c.req.valid()\r\n  //...\r\n  return c.text('Result!!')\r\n})\r\n```\r\n\r\n`Validator` and `validator` are similar and confusing, but if you don't like it, just use an alias.\r\n\r\nThis will fix #624 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1420968309},{"id":1421003650,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/628","title":"[Validator] It will be invalid if the key exists but the value is blank","body":"The validation rule:\r\n\r\n```ts\r\npage: v.query('page').isNumeric().isOptional()\r\n```\r\n\r\nRequest:\r\n\r\n```\r\nGET http://localhost:8788/?query=foo&page=\r\n```\r\n\r\nIt will be invalid:\r\n\r\n```ts\r\nInvalid Value []: the query parameter \"page\" is invalid - isNumeric\r\n```\r\n\r\nI think it should be \"valid\" where the key exists or not.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1421003650},{"id":1423165478,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/629","title":"Fix ESM support in NodeJS","body":"It's because of missing file extension in import paths\r\n\r\nhttps://github.com/honojs/hono/blob/d8da569299ff85fb0a2923d4359892f1c171134d/src/hono.ts#L1","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1423165478},{"id":1424871456,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/630","title":"Mocking c.env","body":"I'm writing a test that reads/writes to cloudflare kv. I'm using `c.env.KV.put` and `c.env.KV.get` for example.\r\n\r\nInstead of read/writing to it, I would like to mock the context env.\r\n\r\nIs there a way to do this?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1424871456},{"id":1424929356,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/631","title":"fix(build): fix ESM support in Node.js / use `esbuild`","body":"This PR fixes ES Modules support in Node.js is not working well. Previously, if we use Hono package in Node.js directly, the error would throw.\r\n\r\n<img width=\"973\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/198174189-ab5934cf-1875-46e0-8667-9142601abc3d.png\">\r\n\r\nI've done the following to fix this while keeping support for CommonJS.\r\n\r\n* Declare `type: \"module\"` in \"package.json\".\r\n* Use \"esbuild\" and make the script \"build.ts\" to build the projects instead of `tsc`.\r\n* Add extensions for importing modules, in ESM files that are emitted by esbuild, eg:`import { compose } from \"./compose.js\"`.\r\n* Copy \"package.json\" for CommonJS into `dist/cjs/package.json` (a little tricky).\r\n\r\nThis has enabled proper support for both ESM and CommonJS. However, this isn't easy to test and may not work well in your environment. If there is a problem, please let me know. We will fix it.\r\n\r\nThis PR is inspired by #629 . Thanks @pavi2410 . ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1424929356},{"id":1425526957,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/632","title":"JWT middleware may work on Bun v0.2.2?","body":"Bun the new version v0.2.2 supports \"WebCrypto\" API.\r\n\r\nhttps://github.com/oven-sh/bun/releases/tag/bun-v0.2.2\r\n\r\nSo, JWT middleware may work on Bun. We have to try it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1425526957},{"id":1427400224,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/633","title":"test(bun): JWT middleware works on Bun v0.2.2","body":"Now, Bun supports WebCrypto!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1427400224},{"id":1428080065,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/634","title":"fix(typo) package.cjs.json target to type","body":"The \"type\" in package.cjs.json was set to \"target\".\r\nThe bug did not occur because the default \"type\" in package.json is \"commonjs\".\r\nI have not checked another property but it may have been overridden by default.\r\n\r\nThis package.cjs.json also worked\r\n```\r\n{}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1428080065},{"id":1428179275,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/635","title":"fix(validator): enable handling \"Bad Request\" in validator","body":"Currently, with Validator middleware, if the JSON body is empty, it will return \"Malformed JSON in request body\" response error immediately. This behavior is good but it's not possible to handle in the validator middleware `done` method. This is mentioned in #561.\r\n\r\nTo handle \"Malformed JSON in request body\" error we have to write another middleware to get an error object. It's very verbose. So, in this PR, I made it we can handle \"Malformed JSON in request body\" in validator middleware.\r\n\r\nIf we have handler like below:\r\n\r\n```ts\r\n\r\napp.post(\r\n  '/posts',\r\n  validator(\r\n    (v) => ({\r\n      title: v.json('title'),\r\n    }),\r\n    {\r\n      done: (results, c) => {\r\n        return c.json(results, 400)\r\n      },\r\n    }\r\n  ),\r\n  (c) => {\r\n    return c.json({\r\n      message: 'Valid!',\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nThen, post the empty body to the endpoint, the result response will be this:\r\n\r\n```json\r\n{\r\n  \"hasError\": true,\r\n  \"messages\": [\r\n    \"Malformed JSON in request body\"\r\n  ],\r\n  \"results\": [\r\n    {\r\n      \"isValid\": false,\r\n      \"message\": \"Malformed JSON in request body\",\r\n      \"target\": \"unknown\",\r\n      \"key\": null,\r\n      \"value\": null,\r\n      \"ruleName\": \"Malformed JSON in request body\",\r\n      \"ruleType\": \"value\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis will make it easier to handle cases where the JSON body content is empty.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1428179275},{"id":1428264962,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/636","title":"feat(validator): support `v.queries`","body":"Close #622 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1428264962},{"id":1428551415,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/637","title":"feat(types): introduce `CustomHandler` interface","body":"In this PR, introduce `CustomHandler` interface that is exported for the users as `Handler`.\r\n\r\nIf we want to declare a handler outside of `app.get()`, we write it such like this:\r\n\r\n```ts\r\nconst handler: Handler = (c) => {\r\n  return c.text('Hi!')\r\n}\r\n```\r\n\r\nThen, in this `handler`, how can we make `c.env` or `c.get('foo')` have a type? Pass `string` as the first argument of the Generics for `Handler` and write the following:\r\n\r\n```ts\r\ntype Env = {\r\n  Bindings: { TOKEN: string }\r\n  Variables: { post: Post }\r\n}\r\n\r\nconst handler: Handler<string, Env> = (c) => { // <---\r\n  const post = c.get('post')\r\n  return c.json(post)\r\n}\r\n```\r\n\r\nThis is redundant to write `string` on purpose. So, in this PR, we can write just like this:\r\n\r\n```ts\r\nconst handler: Handler<Env> = (c) => {\r\n  const post = c.get('post')\r\n  return c.json(post)\r\n}\r\n```\r\n\r\nOf course, it keep to have the types:\r\n\r\n<img width=\"386\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/198859014-126412d8-908f-44f9-abd8-805e0909ef84.png\">\r\n\r\nIn actually, we can do something similar for Validator schema:\r\n\r\n```ts\r\nconst schema = (v: Validator) => ({\r\n  query: v.query('q'),\r\n})\r\n\r\ntype Schema = ReturnType<typeof schema>\r\n\r\nconst handler: Handler<Schema> = (c) => {\r\n  const { query } = c.req.valid()\r\n  return c.json({ query: query })\r\n}\r\n```\r\n\r\n<img width=\"446\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/198859081-bfb2d031-59b7-48ca-9e9a-a26d59bcd80e.png\">\r\n\r\nI think this is helpful to declare the handler independently for the user.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1428551415},{"id":1428891609,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/638","title":"Serve-dynamic Modules Middleware","body":"One feature that separates typical Server-Side JS apps from classical scripting languages like PHP is to have a \"filesystem based static file server\" that can use a simple script language to create assets and documents on demand.\n\nTherefore I would like to propose to create a \"serve-dynamic\" Middleware that works like \"serve-static\", but renders resources with JS.\n\nThis in combination with hono `html` Middleware can be a powerful combination to build websites and apps without the need of heavy JS frameworks (React, ...).\n\nTo avoid MIME type issues I would suggest to use a class naming convention that holds the final extension name appended by `.js`.\n\nExample:\n- Dev registers a serve-dynamic Middleware to serve `/routes/` dynamically.\n- User requests the file `/routes/theme.css\n- The server has a file `/routes/theme.css.js` that exports a function so render and respond `/routes/theme.css`\n- For this the server uses dynamic `import()` to load the JS file.\n\nThe Middleware should accept `ts` and `js` script and therefore needs to look for both files in the example above:\n- routes/theme.css.js\n- routes/theme.css.ts\n\nFor html files sometimes a folder with an /index.html file is used. Therefore requested html files need to look for following script files:\n- filename.html.js\n- filename/index.html.js\n- filiname.html.js\n- filename/index.html.ts\n\nCurrently dynamic imports are not supported by many Edge hosting platforms. I considered using a manifest.js file that contains all routes to solve it, but this has little value of creating all routes with hono router directly.\n\nFollowing is an example implementations of the middleware with deno (requires a import_map.json:\n\n```js\nimport type { Context } from 'hono/context.ts'\nimport type { Next, MiddlewareHandler } from 'hono/hono.ts'\nimport { getFilePath } from 'hono/utils/filepath.ts'\nimport { getMimeType } from 'hono/utils/mime.ts'\n\nexport type ServeDynamicOptions = {\n    root?: string\n    path?: string\n  }\n\nconst DEFAULT_DOCUMENT = 'index.html'\n\nexport const serveDynamic = (options: ServeDynamicOptions = { root: '' }): MiddlewareHandler => {\n    return async (c: Context, next: Next) => {\n        \n        if (c.finalized) {\n            await next()\n            return\n        }\n\n        const url = new URL(c.req.url)\n\n        const path = getFilePath({\n            filename: options.path ?? url.pathname,\n            root: options.root,\n            defaultDocument: DEFAULT_DOCUMENT,\n        })\n\n        const staticPath = `../${path}`\n        const dynamicPaths = [\n            `../${path}.ts`, \n            `../${path}.js`,\n        ]\n\n        if (path.endsWith('.html')) {\n            dynamicPaths.push(\n                `../${path.replace('/index.html', '.html')}.ts`, \n                `../${path.replace('/index.html', '.html')}.js`,\n            )\n        }\n\n        let content\n \n        for (const dynamicPath of dynamicPaths) {\n            try {\n                const { default: module } = await import(dynamicPath)\n                content = module(c)\n            } catch (_ignore) { /* NA */ }\n        }\n\n        if (content) {\n            const mimeType = getMimeType(staticPath)\n            if (mimeType) {\n                c.header('Content-Type', mimeType)\n            }\n            return c.body(content)\n        } else {\n            console.warn(`Dynamic file: Not found for requested ressource ${staticPath}.`)\n            await next()\n        }\n        return\n    }\n}\n```\n\n\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1428891609},{"id":1429722490,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/639","title":"Use Wrangler secrets for basic auth?","body":"The docs examples for basic auth store the basic auth username and password in the `index.ts` in plain text, which is not ideal since it will be visible in the code base. An alternative is to use the Wrangler secrets command to store these as an environment variable with a slight modification to the auth code:\r\n```\r\napp.use('*', async (c, next) => {\r\n  const auth = basicAuth({\r\n    username: c.env.BASIC_AUTH_USERNAME,\r\n    password: c.env.BASIC_AUTH_PASSWORD\r\n  })\r\n  return await auth(c, next)\r\n})\r\n```\r\n\r\nStoring the secrets can be done with:\r\n```\r\necho 'supersecretpassword' | npx wrangler secret put BASIC_AUTH_PASSWORD\r\n```\r\n\r\nIs there any reason this approach should not be taken or that it's not recommended?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1429722490},{"id":1429825116,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/640","title":"test(routing): add test cases for route grouping order","body":"```ts\r\nit('only works with correct order', async () => {\r\n  three.get('/hi', (c) => c.text('hi'))\r\n  two.route('/three', three)\r\n  one.route('/two', two)\r\n\r\n  const { status } = await one.request('http://localhost/two/three/hi', { method: 'GET' })\r\n  expect(status).toBe(200)\r\n})\r\n```\r\n\r\nSince this is kind-of-mentioned in [Routing Priority](https://honojs.dev/docs/api/routing/#routing-priority), it is easy to order routes incorrectly when grouping them. \r\n(I did. 😄 )\r\n\r\nI made some test cases in Hono's repo to understand what's happening in my app. I think it is good to add here too. And eventually, we better have some more detailed examples [here](https://github.com/honojs/honojs.dev/blob/main/content/docs/api/routing.md).\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1429825116},{"id":1431042719,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/641","title":"fix(types): improve custom handler","body":"Allow any validated data that is not explicitly type defined.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1431042719},{"id":1431360473,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/642","title":"fix(jsx): export fragment","body":"`Fragment` is not exported from `jsx-runtime`. Fixed it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1431360473},{"id":1431885815,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/643","title":"Cannot find name 'RequestInfo'. Did you mean 'RequestInit'","body":"Any idea why I am getting this error when running tsc:\r\n\r\n```\r\nnode_modules/hono/dist/hono.d.ts:47:22 - error TS2552: Cannot find name 'RequestInfo'. Did you mean 'RequestInit'?\r\n\r\n47     request: (input: RequestInfo, requestInit?: RequestInit) => Promise<Response>;\r\n```\r\n\r\nConfig:\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"allowJs\": true,\r\n    \"target\": \"esnext\",\r\n    \"lib\": [\"esnext\"],\r\n    \"moduleResolution\": \"node\",\r\n    \"resolveJsonModule\": true,\r\n    \"inlineSourceMap\": true,\r\n    \"module\": \"esnext\",\r\n    \"esModuleInterop\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"strict\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noEmit\": true,\r\n    \"types\": [\r\n      \"@cloudflare/workers-types\"\r\n    ]\r\n  },\r\n  \"ts-node\": {\r\n    \"transpileOnly\": true\r\n  },\r\n  \"include\": [\"./src/**/*\"]\r\n}\r\n\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1431885815},{"id":1432281217,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/644","title":"feat(context): Introducing c.runtime","body":"As mentioned in #413, it might be useful to have way to know on which platform the code is running. This PR introduces `c.runtime`, which is getter of `Context` interface.\r\n\r\n# Node, Deno, and Bun\r\n```ts\r\nconst global = globalThis as any\r\n\r\nif (global?.process?.title === 'node') {\r\n  return 'node'\r\n}\r\n\r\nif (global?.Deno !== undefined) {\r\n  return 'deno'\r\n}\r\n\r\nif (global?.Bun !== undefined) {\r\n  return 'bun' \r\n}\r\n```\r\nThis is straightforward. \r\n\r\nFor `Deno`, `global?.process?.title === 'deno'` is possible,  but I just used shorter one.\r\n\r\n# Cloudflare and Fastly\r\n```ts\r\nif (typeof global?.WebSocketPair === 'function') {\r\n  return 'cloudflare'\r\n}\r\n\r\nreturn 'fastly'\r\n```\r\n\r\n[WebSocketPair](https://developers.cloudflare.com/workers/runtime-apis/websockets/) is Cloudflare Worker's runtime API. I picked this because this is only available in CF. (For example, [cache](https://developers.cloudflare.com/workers/runtime-apis/cache/) exists in other platform with similar API.)\r\n\r\nFor `Fastly`, I don't know good way to determine it at runtime yet. (Resources: [1](https://github.com/honojs/compute-starter-kit), [2](https://developer.fastly.com/reference/compute/ecp-env/))\r\n\r\nBut it is almost safe to say it is `Fastly` if it is not others.\r\n```ts\r\ntype Platform = 'node' | 'deno' | 'bun' | 'cloudflare' | 'fastly'\r\n``` ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1432281217},{"id":1432906527,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/645","title":"fix(type): make compatibility with `@cloudflare/workers-types`","body":"This will fix #643 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1432906527},{"id":1433424439,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/646","title":"`app.on('METHOD', path, handler)` for other HTTP methods","body":"Currently, the HTTP methods we can use are specified in the code:\r\n\r\nhttps://github.com/honojs/hono/blob/fadce526736a610248ec5175ca66ddcc5a84c883/src/router.ts#L3\r\n\r\nThe `app.on` function that I propose in this issue will enable we to set the custom HTTP method as we like:\r\n\r\n```ts\r\napp.on('PURGE', '/foo', async (c) => {\r\n  await purgeCache('foo')\r\n  c.redirect('/')\r\n})\r\n```\r\n\r\nI think it's not difficult to implement.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1433424439},{"id":1433594605,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/647","title":"Regression. Now if an error is thrown in the app.notFound() handler app.onError() doesn't pick it up","body":"In my app in my not found handler I do this:\r\n\r\n```\r\napp.notFound(() => {\r\n  throw new ApiError(httpStatus.NOT_FOUND, 'Not found')\r\n})\r\n```\r\nWe can see its not picked up by doing:\r\n\r\n```\r\napp.onError(() => {\r\n  console.log('here')\r\n})\r\n```\r\n\r\nPreviously, this would then forward the error to the error handler but now that isn't the case, can this be fixed please?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1433594605},{"id":1433606612,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/648","title":"How do you use the custom handler type for the `onError`  handler?","body":"Hi, I am a typescript noob so sorry if it is obvious!\r\n\r\nI have an error handler like so:\r\n\r\n`app.onError(errorHandler)\r\n`\r\nAnd in a separate module I have `errorHandler` declared:\r\n\r\n```\r\nconst errorHandler: Handler<string, { Bindings: Bindings }> = (err, c) => {\r\n  let { statusCode, message } = errorConverter(err)\r\n  if (config.env === 'production' && !err.isOperational) {\r\n    statusCode = httpStatus.INTERNAL_SERVER_ERROR\r\n    message = httpStatus[httpStatus.INTERNAL_SERVER_ERROR]\r\n  }\r\n\r\n  const response = {\r\n    code: statusCode,\r\n    message,\r\n    ...(config.env !== 'production' && { stack: err.stack }),\r\n  }\r\n\r\n  return c.json(response, statusCode)\r\n}\r\n```\r\n\r\nBut I get this error:\r\n\r\n```\r\nArgument of type 'CustomHandler<string, { Bindings: Bindings; }, Partial<Schema>>' is not assignable to parameter of type 'ErrorHandler<\"/\", { Bindings: Bindings; }, Schema>'.\r\n  Types of parameters 'c' and 'err' are incompatible.\r\n    Type 'Error' is missing the following properties from type 'Context<string, { Bindings: Bindings; }, Partial<Schema>>': req, env, event, executionCtx, and 16 more.ts(2345)\r\n```\r\n\r\nWhat am I missing?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1433606612},{"id":1433973390,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/649","title":"refactor(types): reduce type definitions","body":"This PR is about refactoring. Remove `HonoContext`; use instead of `Context` as a class. Polish `ErrorHandler` and `NotFoundHandler` types.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1433973390},{"id":1434021070,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/650","title":"feat(app): introduce `app.showRoutes()`","body":"This PR includes a new feature `app.showRoutes()`.\r\n\r\nSometimes it is difficult to see what routes are registered. I've created this feature to prevent us from losing time on that. Using `app.showRoutes`, will show the routes that are registered:\r\n\r\n<img width=\"476\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/199637644-77ccca0b-6218-4dd8-a7fa-8cd218fee245.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1434021070},{"id":1434232068,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/651","title":"fix(context): check cloudflare before checking node in `c.runtime`","body":"In my environment the test in `context.test.ts` fails:\r\n\r\n<img width=\"563\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/199666904-33bb63fe-5d86-4ca0-954c-c9791403b449.png\">\r\n\r\nI don't know why it is be passed on the CI, but I think we have to fix the test and `contex.ts`.\r\n\r\nActually, the test environment with `miniflare` is not only \"node\" but also \"cloudflare\". There are both `global.process.title` and `global.WebSocketPair` in my environment.\r\n\r\n<img width=\"526\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/199667891-f70623e3-369b-4bc4-bf22-ff73a44dadc0.png\">\r\n\r\nIn this case, we have to check first whether it is `cloudflare` or not and check it later for `node`.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1434232068},{"id":1436935771,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/652","title":"fix(error): make `notFound()` enables to catch errors correctly","body":"This will fix #647","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1436935771},{"id":1436967874,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/653","title":"feat(app): introduce `app.on(method, path, handler)`","body":"This PR introduces `app.on()`.\r\n\r\nCurrently, the HTTP methods we can use are specified in the code:\r\n\r\nhttps://github.com/honojs/hono/blob/fadce526736a610248ec5175ca66ddcc5a84c883/src/router.ts#L3\r\n\r\nThe `app.on()` function will enable we set the custom HTTP method as we like:\r\n\r\n```ts\r\napp.on('PURGE', '/foo', async (c) => {\r\n  await purgeCache('foo')\r\n  return c.redirect('/')\r\n})\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1436967874},{"id":1437189396,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/654","title":"parseBody() doesn't work with JSON","body":"This used to work but now i have to use c.req.json(). Is this intentional? `parseBody()` will be undefined if you do a request like so:\r\n\r\n```\r\n    let req = new Request('http://localhost/posts', {\r\n      method: 'POST',\r\n      body: payload,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    })\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1437189396},{"id":1437235965,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/655","title":"Refactoring of feat/on branche","body":"* Since the first argument of `Router<T>#add` is expected to be uppercase, and existing code will not work correctly if lowercase is passed, I thought `toUpperCase` was unnecessary.\r\n* In StaticRouter, when adding a new method, the middleware in METHOD_ALL must be copied.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1437235965},{"id":1439057045,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/656","title":"fix(types): export `ErrorHandler` and `NotFoundHandler`","body":"I forgot about it.\r\n\r\nThis may close #648","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1439057045},{"id":1443320105,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/657","title":"relax the constraint to allow custom `Schema` type","body":"The change introduced in the https://github.com/honojs/hono/pull/641 currently breaks my existing code, as I wrote a custom request validator instead of using the built-in one.\r\n\r\nMore specifically, I'm suggesting changing the\r\n\r\nhttps://github.com/honojs/hono/blob/b82547f70af539e1ec37393bb3f1c1c3753b9cb3/src/context.ts#L17\r\n\r\ninto something like\r\n\r\n```ts\r\n{\r\n  // ..\r\n  req: Request<P, S extends Schema ? SchemaToProp<S> : S>\r\n}\r\n```\r\n\r\nAnd this would then allow\r\n\r\nhttps://github.com/honojs/hono/blob/b82547f70af539e1ec37393bb3f1c1c3753b9cb3/src/types.ts#L19-L23\r\n\r\nthe middleware, to be able to pass any typed data to the next handler.\r\n\r\n---\r\n\r\nP.S., it seems kinda weird that a _middleware_ would require the core code to do extra stuff for it, but anyway, I think it should always be a good idea to allow users to pick up whatever they want to for request deserialization.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1443320105},{"id":1443539800,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/658","title":"fix(type): change the type definition of `req` in Context","body":"This will fix #657 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1443539800},{"id":1444281575,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/659","title":"The results of `context.param` are URL-encoded","body":"## Current behavior\r\n\r\nURL: http://localhost:8000/%C3%A7awa%20y%C3%AE%3F\r\n\r\nCode:\r\n\r\n```ts\r\napp.get(\"/:text\", () => {\r\n  console.log(context.param(\"text\"));\r\n})\r\n```\r\n\r\nOutput:\r\n\r\n```ts\r\n%C3%A7awa%20y%C3%AE%3F\r\n```\r\n\r\n## Expected behavior\r\n\r\nURL: http://localhost:8000/%C3%A7awa%20y%C3%AE%3F\r\n\r\nCode:\r\n\r\n```ts\r\napp.get(\"/:text\", () => {\r\n  console.log(context.param(\"text\"));\r\n})\r\n```\r\n\r\nOutput:\r\n\r\n```ts\r\nçawa yî?\r\n```\r\n\r\n#### Version: 2.4.0","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1444281575},{"id":1445169909,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/660","title":"Sanitizer in Validator middleware does not work","body":"I tried to make some params always have lowercase, and figure that using the `addSanitizer` func in the validation pipe would be the most intuitive, except that it doesn't work at all 😅 (tried the `trim` function, but it also does nothing)\r\n\r\nYou can check the code below to reproduce it:\r\n\r\n### Reproduce code:\r\n\r\n```ts\r\nimport { Hono } from 'https://deno.land/x/hono@v2.5.0/mod.ts'\r\nimport { serve } from 'https://deno.land/std@0.163.0/http/server.ts'\r\nimport { validator } from 'https://deno.land/x/hono@v2.5.0/middleware.ts'\r\n\r\nexport const lowCase = (s: unknown) => `${s}`.toLowerCase()\r\n\r\nconst app = new Hono()\r\napp.post(\r\n  '/json',\r\n  validator(v => ({\r\n    trim: v.json('trim').trim().isOptional(),\r\n    low: v.json('low').addSanitizer(lowCase).isOptional(),\r\n  })),\r\n  ctx => ctx.json(ctx.req.valid())\r\n)\r\n\r\nawait serve(app.fetch)\r\n```\r\n\r\n### Sample request (using [Httpie](https://httpie.io/))\r\n\r\n```sh\r\nhttp POST localhost:8000/json 'trim==    b    ' low==CDF --raw '{\r\n  \"trim\": \"   a   \",\r\n  \"low\":\"ABC\"\r\n}'\r\n```\r\n\r\n### Expected result\r\n\r\n```json\r\n{\r\n  \"trim\": \"a\",\r\n  \"low\": \"abc\"\r\n}\r\n```\r\n\r\n### Actual result 🚫\r\n\r\n```json\r\n{\r\n  \"trim\": \"   a   \",\r\n  \"low\": \"ABC\"\r\n}\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1445169909},{"id":1446164616,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/661","title":"fix(sanitizer)","body":"This address #660.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1446164616},{"id":1447120492,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/662","title":"fix(param): Decode context.param","body":"Resolve #659.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1447120492},{"id":1448499704,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/663","title":"Type instantiation is excessively deep and possibly infinite.","body":"I get a typescript error after upgrading to the last version:\r\n\r\n`Type instantiation is excessively deep and possibly infinite.`\r\n\r\nfor the following line:\r\n\r\n`app.use('*', sentry())`\r\n\r\nNot sure if this belongs to the repo or to the sentry one.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1448499704},{"id":1451401521,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/664","title":"Feature request: support for file upload","body":"I have a played a bit here with `bun` and `hono` to see how it works and realized that the request body comes there in raw format if I want to upload files.\r\n\r\nsurprisingly, getting body as a buffer worked out of the box:\r\n\r\n```ts\r\n const reader = ctx.req.body.getReader()\r\n const result = await reader.read()\r\n const buffer = Buffer.from(result.value ?? [])\r\n```\r\n\r\nSo I have my `buffer`, but the question is -- do we have anything is there any functionality to have a list of files within that buffer?\r\n\r\nIn other words, - maybe there is an example of implementing file uploading with `hono`, or at least some timeline on when it will be available.\r\n\r\nThank you.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1451401521},{"id":1454426774,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/665","title":"Update MIGRATION.md","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1454426774},{"id":1455061683,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/666","title":"Middleware type incorrect for grouping","body":"When using middleware in a router and use that in a grouped route, the Hono router will no longer be of type \r\n\r\n`Hono<Environment, \"/\", Schema>` but instead be of type `Hono<Environment, string, Schema>`.\r\n\r\nTypescript error:\r\n```markdown\r\nArgument of type 'Hono<Environment, string, Schema>' is not assignable to parameter of type 'Hono<any, \"/\", Schema>'.\r\n  Types of property 'router' are incompatible.\r\n    Type 'Router<Handler<string, Environment, Schema>>' is not assignable to type 'Router<Handler<\"/\", any, Schema>>'.\r\n      Type 'Handler<string, Environment, Schema>' is not assignable to type 'Handler<\"/\", any, Schema>'.\r\n        Types of parameters 'c' and 'c' are incompatible.\r\n          Type 'Context<\"/\", any, Schema>' is not assignable to type 'Context<string, Environment, Schema>'.\r\n            The types of 'req.param' are incompatible between these types.\r\n              Type '{ (key: \"/\"): string; (): Record<\"/\", string>; }' is not assignable to type '{ (key: string): string; (): Record<string, string>; }'.\r\n                Types of parameters 'key' and 'key' are incompatible.\r\n                  Type 'string' is not assignable to type '\"/\"'.ts(2345)\r\n```\r\n\r\nSteps to reproduce: \r\n```typescript\r\nconst api = new Hono()\r\n  .use('*', logger())\r\n  .get('/example', (context) => context.json({ foo: 'bar' }))\r\n\r\nconst app = new Hono()\r\n  .route('/api', api)\r\n  .get('/hello', (context) => context.json({ message: 'Hello there!' }))\r\n\r\nexport default app\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1455061683},{"id":1456446484,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/667","title":"Let app.onError handle non-Error instance","body":"Currently, if any route throws a non-Error instance, app.onError won't be invoked. Users need to handle those separately for each route. It would be nice if that can be handled by app.onError.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1456446484},{"id":1456467912,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/668","title":"Type error when using \"moduleResolution\": \"node16\" in tsconfig.","body":"Hi, TypeSript is throw missing type error with the above config.\r\n```\r\nCould not find a declaration file for module 'hono'. '.../hono@2.5.1/node_modules/hono/dist/cjs/index.js' implicitly has an 'any' type.\r\nTry `npm i --save-dev @types/hono` if it exists or add a new declaration (.d.ts) file containing `declare module 'hono';`ts(7016)\r\n```\r\nRelated: https://github.com/microsoft/TypeScript/issues/49160","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1456467912},{"id":1456776937,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/669","title":"fix(package.json): exports types correctly","body":"This will fix #668 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1456776937},{"id":1456887716,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/670","title":"fix(package.json): add `typesVersions` section","body":"`typesVersions` is needed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1456887716},{"id":1456993909,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/671","title":"New worker- types and ambient types","body":"Cloudflare has released a new major version of their worker types: https://blog.cloudflare.com/improving-workers-types/\r\n\r\nThis new version adds exported types, so using ambient types are not required. See: https://github.com/cloudflare/workers-types/issues/195\r\n\r\nRight now Hono pulls `@cloudflare/worker-types@3`'s ambient types into its own types, and since references are added globally in TypeScript's compilation context, consumers of Hono get their context polluted with Cloudflare's types as well.\r\n\r\nThis is a bit of problem if either your project doesn't target workers as a runtime or if you want to create re-usable Hono middlewares.\r\n\r\nWould it be an option for Hono to upgrade to the `v4` of `@cloudflare/worker-types`, use imports types to reference Cloudflare's types, and remove the global Hono `Request` declaration?\r\n\r\nThe caveat is that this would be a breaking change for those creating handlers/middlewares without explicitly using Hono's Handler/Middleware types. That's it, those setting the types for their functions like:\r\n\r\n```typescript\r\nexport const myHandler = (ctx: { req: Request }, next: () => Promise<void>): Response => {\r\n  const thing = req.param('thing')\r\n  //----------------^\r\n  // TS would complain here since browser/workers Request doesn't have Hono's methods.\r\n  ...\r\n}\r\n```\r\n\r\nI wouldn't expect many to be using this syntax as it is very verbose.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1456993909},{"id":1457981459,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/672","title":"Support for asymmetric JWT validation (e.g. Auth0 or Clerk)","body":"The existing JWT middleware validates tokens where the secret is available (i.e. symmetric validation) but services like Auth0, Clerk and others use asymmetric tokens signed by the service using a secret key that is not made available for validating the token. These tokens need to be validated with the public key.\r\n\r\nShould validating asymmetric tokens be supported in Hono? It seems like it would be very useful for anyone who wants to build an API accessible by end users.\r\n\r\nI put together a quick proof of concept middleware for Clerk tokens, which grabs the public key(s), caches them in a Cloudflare workers KV and uses them to validate the token. The token's claims are made available to the context using the `c.set()` function. This code could be refined if it's something that should be supported, and note that the code as drafted introduces a dependency on the jose library for key import and validation.\r\n\r\n```ts\r\nimport type { MiddlewareHandler } from \"hono\"\r\nimport { Context } from \"hono\"\r\nimport { KeyLike, importJWK, jwtVerify } from \"jose\"\r\n\r\nconst getPublickKeys = async (\r\n  c: Context\r\n): Promise<{ keys: KeyLike[] } | null> => {\r\n  const cache: KVNamespace = c.env.PUBLIC_JWK_CACHE\r\n  const cachedKeys: string | null = await cache.get(\"public-keys\")\r\n  if (cachedKeys != null) {\r\n    return JSON.parse(cachedKeys)\r\n  } else {\r\n    try {\r\n      const res = await fetch(`${c.env.AUTH_DOMAIN}/.well-known/jwks.json`)\r\n      const freshKeys: { keys: KeyLike[] } = await res.json()\r\n      try {\r\n        await cache.put(\"public-keys\", JSON.stringify(freshKeys), {\r\n          expirationTtl: 432000,\r\n        })\r\n      } catch (e) {\r\n        // don't fail as the validation can still occur if keys can't be cached\r\n        console.log(\"Error caching public keys: \", e)\r\n      }\r\n      return freshKeys\r\n    } catch (e) {\r\n      console.log(\"Error getting fresh keys: \", e)\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport const asymmetricJwt = (): MiddlewareHandler => {\r\n  return async (c, next) => {\r\n    let jwt: string\r\n    let errors: string[] = []\r\n    const authorization = c.req.header(\"Authorization\")\r\n    if (authorization == null) {\r\n      return c.json({ error: \"No auth token found\" }, 401)\r\n    } else {\r\n      jwt = authorization.replace(/Bearer\\s+/i, \"\")\r\n    }\r\n\r\n    // get public keys from cache, or get new keys and cache them (5 day TTL)\r\n    const publicKeys = await getPublickKeys(c)\r\n    if (publicKeys == null) {\r\n      return c.json({ error: \"Failed to fetch public keys\" }, 500)\r\n    }\r\n\r\n    const [token] = await Promise.all(\r\n      publicKeys.keys.map(async (key) => {\r\n        const parsedKey = await importJWK(key)\r\n        try {\r\n          const valid = await jwtVerify(jwt, parsedKey, {\r\n            issuer: c.env.AUTH_DOMAIN,\r\n            audience: c.env.AUTH_AUDIENCE,\r\n          })\r\n          if (valid) {\r\n            return valid\r\n          }\r\n        } catch (e) {\r\n          // there can be multiple keys, so just collect the errors\r\n          errors.push(`JWT validation failed: ${e}`)\r\n        }\r\n      })\r\n    )\r\n\r\n    if (!token) {\r\n      return c.json({ errors: errors }, 401)\r\n    } else {\r\n      c.set(\"token\", token)\r\n      await next()\r\n    }\r\n  }\r\n}\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1457981459},{"id":1458080144,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/673","title":"refactor: support new `@cloudflare/worker-types`","body":"The new version of `@cloudflare/worker-types` has been released:\r\n\r\nhttps://blog.cloudflare.com/improving-workers-types/\r\n\r\nThis PR will support the new version and do some refactorings.\r\n\r\n* Fixed the type mismatch of `Request` object that is caused by using the new *workers-types*.\r\n* The new *workers-types* exports some types like `Request`, and we can import and use it. But we will continue to extend `Request` on the global without doing it.\r\n* We no longer use *workers-types* in the core Hono project. Instead, use [lib.webworker.d.ts](https://raw.githubusercontent.com/microsoft/TypeScript/main/lib/lib.webworker.d.ts). This means it does not depend on Cloudflare Workers.\r\n* However, only `KVNamespace` refers to *workers-types*.\r\n\r\nIf it looks OK, I'll merge it.\r\n\r\nRelated #671 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1458080144},{"id":1461381627,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/674","title":"refactor(context): refactor `context.ts`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1461381627},{"id":1462088705,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/675","title":"[2.5.5] Argument of type 'Context<string, Environment, Schema>' is not assignable to parameter of type 'Context<string, Environment, ValidatedData>'.","body":"After the upgrade to 2.5.5 I get the following error:\r\n\r\n<img width=\"933\" alt=\"Screenshot\" src=\"https://user-images.githubusercontent.com/15731988/203602980-c9b87721-b598-48fd-a8d9-6b6eaa59dc59.png\">\r\n\r\n<img width=\"294\" alt=\"Screenshot\" src=\"https://user-images.githubusercontent.com/15731988/203603053-b8709d0d-9f20-4f8c-88f0-be704fa99d84.png\">\r\n\r\nSame for using getSentry()","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1462088705},{"id":1463412411,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/676","title":"`app.showRoutes()` has duplicate routes when middleware is used","body":"Example code\r\n```js\r\napp.get(\"/a\", someMiddleWare, (c) => { \r\n  new Response(\"a\");\r\n})\r\napp.showRoutes();\r\n```\r\napp.showRoutes() outputs:\r\n```\r\nGET    /a\r\nGET    /a\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1463412411},{"id":1463518332,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/677","title":"Validator: v.array() weird experience","body":"<details>\r\n\r\n```js\r\nimport { Hono } from \"hono\";\r\nimport { validator } from \"hono/validator\";\r\n\r\nconst app = new Hono();\r\n\r\napp.post(\r\n\t\"/\",\r\n\tvalidator(\r\n\t\t(v) => ({\r\n\t\t\tresponse: v.object(\"response\", (v1) => ({\r\n\t\t\t\tcontent: v1.json(\"content\").isOptional().isLength({ max: 2000 }),\r\n\t\t\t\tembeds: v1\r\n\t\t\t\t\t.array(\"embeds\", (v2) => ({\r\n\t\t\t\t\t\ttitle: v2.json(\"title\").isOptional(),\r\n\t\t\t\t\t\tdescription: v2.json(\"description\").isOptional(),\r\n\t\t\t\t\t\turl: v2.json(\"url\").isOptional(),\r\n\t\t\t\t\t\ttimestamp: v2.json(\"timestamp\").isOptional(),\r\n\t\t\t\t\t\tcolor: v2.json(\"color\").asNumber().isOptional(),\r\n\t\t\t\t\t\tauthor: v2\r\n\t\t\t\t\t\t\t.object(\"embeds.[*].author\", (v3) => ({\r\n\t\t\t\t\t\t\t\tname: v3.json(\"name\").isOptional(),\r\n\t\t\t\t\t\t\t\turl: v3.json(\"url\").isOptional(),\r\n\t\t\t\t\t\t\t\ticon_url: v3.json(\"icon_url\").isOptional(),\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t.isOptional(),\r\n\t\t\t\t\t\tfooter: v2\r\n\t\t\t\t\t\t\t.object(\"embeds.[*].footer\", (v3) => ({\r\n\t\t\t\t\t\t\t\ttext: v3.json(\"text\").isOptional(),\r\n\t\t\t\t\t\t\t\ticon_url: v3.json(\"icon_url\").isOptional(),\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t.isOptional(),\r\n\t\t\t\t\t\timage: v2\r\n\t\t\t\t\t\t\t.object(\"embeds.[*].image\", (v3) => ({\r\n\t\t\t\t\t\t\t\turl: v3.json(\"url\").isOptional(),\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t.isOptional(),\r\n\t\t\t\t\t\tthumbnail: v2\r\n\t\t\t\t\t\t\t.object(\"embeds.[*].thumbnail\", (v3) => ({\r\n\t\t\t\t\t\t\t\turl: v3.json(\"url\").isOptional(),\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t.isOptional(),\r\n\t\t\t\t\t\tfields: v2\r\n\t\t\t\t\t\t\t.array(\"embeds.[*].fields\", (v3) => ({\r\n\t\t\t\t\t\t\t\tname: v3.json(\"name\"),\r\n\t\t\t\t\t\t\t\tvalue: v3.json(\"value\"),\r\n\t\t\t\t\t\t\t\tinline: v3.json(\"inline\").isOptional().asBoolean(),\r\n\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t.isOptional(),\r\n\t\t\t\t\t}))\r\n\t\t\t\t\t.isOptional(),\r\n\t\t\t\tflags: v1.json(\"flags\").isOptional().asNumber(),\r\n\t\t\t})),\r\n\t\t}),\r\n\t\t{\r\n\t\t\tdone: (res) => {\r\n\t\t\t\tif (res.hasError) {\r\n\t\t\t\t\treturn new Response(res.messages.join(\"\\n\"), { status: 400 });\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}\r\n\t),\r\n\t(c) => {\r\n\t\treturn Response.json(c.req.valid());\r\n\t}\r\n);\r\n\r\napp.notFound(() => {\r\n\treturn new Response(\"Not found\", { status: 404 });\r\n})\r\n\r\nexport default app;\r\n```\r\n</details>\r\n\r\nIssues:\r\n- [x] 1. I have to use `fields: v2.array(\"embeds.[*].fields\")` despite the fact it's already under `embeds` - if you don't it incorrectly looks under `response`. #683 \r\n- [x] 2. `v.array()` won't accept an empty array - even with it being marked as isOptional, the validator will error. This also occurs when `null` is provided. #690 \r\n- [x] 3. `\"Invalid Value [64]: the JSON body \\\"response.flags\\\" is invalid - should be \\\"number[]\\\"\"` - this is not under an array field - it should not be counted as an array? It turns out this can be fixed by putting `response.flags` before `response.embeds` in the validator - this is odd.  #680 \r\n\r\nI appreciate this issue description is pretty awful - but I feel like I'm running into a combination of bugs here with nested arrays and objects","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1463518332},{"id":1465025556,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/678","title":"Can't seem to mock fetch requests with hono and miniflare","body":"If I do:\r\n\r\n```\r\nconst fetchMock = getMiniflareFetchMock()\r\nconst origin = fetchMock.get(`http://localhost:8787`)\r\norigin.intercept({\r\n  path: '/',\r\n}).reply(200, {})\r\nconst res = await app.fetch('http://localhost:8787', {\r\n  method: 'GET'\r\n})\r\n```\r\n\r\nIt doesn't work but if I just mock a standard `await fetch` and not app.fetch it does work.\r\n\r\nAny idea what I am doing wrong?","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465025556},{"id":1465058129,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/679","title":"fix(package.json): add \"type\": \"module\"","body":"hono did not work with ESM project.\r\nAdded type field to package.json.\r\n\r\n```\r\nimport { Hono } from \"hono\";\r\n         ^^^^\r\nSyntaxError: Named export 'Hono' not found. The requested module 'hono' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from 'hono';\r\nconst { Hono } = pkg;\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465058129},{"id":1465290565,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/680","title":"fix(validator): fix jsons validation after arrays","body":"fix the bug of `v.json()` calls made after a `v.array()` to be mistakenly considered as still being inside the array\r\n\r\nfixes one of the issues mentioned in #677\r\n\r\n____\r\n\r\nThis is the result of the test I've added before applying the change:\r\n![before](https://user-images.githubusercontent.com/61631103/204113972-97527d99-f89b-4a7f-bc40-f1c42d1c031d.png)\r\n\r\n(the rest of the checks passed already, but I've included them for completeness and to cover all cases for `v.json()` :slightly_smiling_face: )","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465290565},{"id":1465403628,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/681","title":"Middleware is bypassed when get(\"*\") is used","body":"Hello! I'm not sure if this is expected behavior or not, but I'm having an issue with a middleware not executing for a specific path:\r\n\r\n```typescript\r\napp.use(\"/v1/p/*\", async (c, next) => {\r\n  console.log(\"Middleware called\");\r\n  return c.text(\"OK\");\r\n});\r\n\r\napp.get(\"*\", async (c) => {\r\n  return c.text(\"GET called\");\r\n})\r\n```\r\n\r\nWhat happens?\r\nCalling `/` -> `GET called`, expected\r\nCalling `/v1/p` -> `GET called`, expected\r\nCalling `/v1/p/test` -> `GET called`, expected value: `OK` + console.log\r\n\r\nIf I remove the get route, the middleware works for the last two cases","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465403628},{"id":1465448112,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/682","title":"[Validator] validate named parameters","body":"Currently it is not possible to validate named (path) parameters using the `validator` middleware.\r\n\r\nSomething similar to:\r\n```js\r\napp.get(\r\n\t\"/user/:id/posts/:page\",\r\n\tvalidator((v) => ({\r\n\t\tv.param(\"id\").asNumber(),\r\n\t\tv.param(\"page\").asNumber()\r\n\t}),\r\n\tasync (c) => ...\r\n)\r\n```\r\n\r\nThere are a few questions I think (for example how would `isRequiered` function), but overall this should greatly help the route's readability.\r\n\r\nI could give a shot at making a PR if this is something that is possible/needed","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465448112},{"id":1465620136,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/683","title":"fix(validator): fix subsequent nested objects names","body":"fix the bug of having subsequent objects inside a nested structure causing the validator to forget the previous keys in the scheme's path\r\n\r\nfixes point 1 of #677","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465620136},{"id":1465920148,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/684","title":"fix(reg-exp-router): Allows registering a star after a long prefix.","body":"I believe this change will fix #681.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1465920148},{"id":1467390475,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/685","title":"`c.runtime === 'node'` does not work well","body":"`c.runtime === 'node'` does not work well. It is because the `global.process.title` is such as`/Users/yusuke/.n/bin/node` in my environment. We have to detect which is `node` or not in another way.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1467390475},{"id":1467444770,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/686","title":"fix: Cache middleware throws Internal Server Error on Cloudflare Workers","body":"Cache middleware throws Internal Server Error when return a cached response.\r\nI've investigate some logs but I can't locate the problem.\r\nIn this investigation, I found that response wrapped by new Response will resolve problems, so for now I've added code which wrap response with new Response.\r\n\r\nAnd I've added code that will avoid caching response with status >= 400.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1467444770},{"id":1468215345,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/687","title":"Middleware called once, twice or not at all depending on usage","body":"Hi,\r\n\r\nin my app, I used the following pattern, which caused the middleware to be called **twice** on each request.\r\n\r\n```ts\r\napp.use('/myroute', myMiddleware)\r\napp.route('/myroute', myGroupedHono)\r\n```\r\n\r\nBy using the following pattern, the middleware is **not** called at all, which is surprising considering the previous case.\r\n\r\n```ts\r\napp.use('/myroute', myMiddleware)\r\napp.get('/myroute/whatever', myHandler)\r\n```\r\n\r\nBy using the following pattern, the middleware is called **once**, as expected:\r\n\r\n```ts\r\napp.use('/myroute/*', myMiddleware)\r\napp.route('/myroute', myGroupedHono)\r\n```\r\n\r\nI think it would be good to make this routing/middleware behavior more consistent, or at least document the curlpits. 😉 \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1468215345},{"id":1468556623,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/688","title":"`all` will not be called in `RegExpRouter`","body":"This PR #684 fixed issue #681, thanks to @usualoma . But since this fix, `all` doesn't work the situation below:\r\n\r\n```ts\r\nimport { RegExpRouter } from '../../../src/router/reg-exp-router'\r\n\r\nconst app = new Hono({ router: new RegExpRouter() })\r\n\r\napp.all('/foo', (c) => {\r\n  return c.text('foo')\r\n})\r\n\r\napp.get('/bar', (c) => {\r\n  return c.text('bar')\r\n})\r\n```\r\n\r\n```\r\nGET /foo => 404 Not Found // Not expected\r\n```\r\n\r\nAnd the following test will fail:\r\n\r\n```ts\r\n\r\ndescribe('ALL and GET', () => {\r\n  const router = new RegExpRouter<string>()\r\n\r\n  router.add('ALL', '/foo', 'foo')\r\n  router.add('GET', '/bar', 'bar')\r\n\r\n  it('get /foo', () => {\r\n    const res = router.match('GET', '/foo')\r\n    expect(res?.handlers).toEqual(['foo'])\r\n  })\r\n})\r\n```\r\n\r\nI'm investigating to fix it.\r\n\r\n@usualoma \r\n\r\nI'm sorry. I did not check it carefully enough. If you have time, it would be very helpful if you could take a look too.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1468556623},{"id":1468717511,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/689","title":"Handler `Schema` does not allow normal types","body":"Middleware must extend the validator Schema type to provide type safety for middleware specific properties or data. This requires middleware to map normal types to the Hono validator types:\r\nhttps://github.com/honojs/hono/blob/07efdb5103c4cdb37585724945e26d93f33de383/src/validator/schema.ts#L13-L24\r\n\r\nFor instance, the following middleware results in a type error.\r\n```typescript\r\nconst validateMe = () => {\r\n  const handler: MiddlewareHandler<\r\n    string,\r\n    { Bindings: Bindings },\r\n    { post: { id: string } } // <--- Type '{ post: { id: string; }; }' does not satisfy the constraint 'Partial<Schema>'.\r\n> = async (c, next) => {\r\n   // validation ... \r\n    await next();\r\n  };\r\n  return handler;\r\n};\r\n```\r\n\r\nIf one were to implement a Zod based validator one would need to map to the validator specific types which seems unnecessary.  \r\n\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1468717511},{"id":1468748879,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/690","title":"Fix Validation of optional empty/undefined arrays","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1468748879},{"id":1468835041,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/691","title":"fix(reg-exp-router): Copy from METHOD_NAME_ALL for new methods","body":"Hi @yusukebe !\r\n\r\nI don't think #684 is the cause of this problem, as #688 reproduces in v2.5.6 as well.\r\nHowever, the cause is in a similar area and it is my fault for not noticing this problem when fixing #684.\r\n\r\nIn the current RegExpRouter architecture, handlers added with METHOD_NAME_ALL are copied to each method, so I believe that copying all existing handlers the first time they (new method) are added will correct the problem, including #681.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1468835041},{"id":1469292012,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/692","title":"cors middleware vulnerability","body":"Hi, \r\n\r\nCurrently, the cors middleware is vulnerable and has a few culprits.\r\n\r\n- the `next` callback is directly invoked, even before the cors checks if the request is allowed or not\r\n- the `next` callback is invoked twice, once for the preflight request and once for the actual request\r\n- by default, all methods are allowed, which differs from the standard which allows only get/head/post by default\r\n- some other defaults are overridden\r\n\r\nAs a practical example, it would quite be disastrous to first apply `POST /delete-account` before noticing that the origin/method is not allowed. \r\n\r\nNow, this *should* not happen because the preflight request already forbids the browser to send further requests. However, if the preflight request itself triggers some \"any method\" route (including `OPTIONS`) due to the `next` callback, you may unintentionally trigger the corresponding code instead of having the request blocked.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1469292012},{"id":1469484846,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/693","title":"Updated CORS","body":"Do not call `next` for OPTIONS pre-flight requests to avoid side effects and more sensible defaults.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1469484846},{"id":1470160512,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/694","title":"chore: fix lint warnings","body":"This fixes all the lint warnings we get in PRs:\r\n![Screenshot at 2022-11-30 20-07-23](https://user-images.githubusercontent.com/61631103/204897869-3fbbebd9-3cf1-42d5-baba-ccee0fdd878f.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1470160512},{"id":1470330499,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/695","title":"Sending JSON to Hono without content-type set returns a 500","body":"Surely this error should be at least propagated to the app.onError or handled better?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1470330499},{"id":1470508516,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/696","title":"Fix detecting node runtime","body":"This resolves #685.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1470508516},{"id":1470620690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/697","title":"chore: remove unnecessary config testPathIgnorePatterns","body":"## Changes\r\n- This PR removes unnecessary jest config `testPathIgnorePatterns: ['./examples']`.\r\n\r\n## Background\r\nThe config was introduced when `examples` directory was created.\r\nhttps://github.com/honojs/hono/commit/511c0ebd7e63706d748a2950e016c1e542c8103c\r\n\r\nI guess we can remove it since `examples` directory has been removed.\r\nhttps://github.com/honojs/hono/commit/13373f0836cf4976e28e1ed7afab26b452da8de7","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1470620690},{"id":1472197399,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/698","title":"Caches on Deno Deploy","body":"Hello,\r\n\r\nI got this error while running on Deno Deploy, had to stop using cache middleware.\r\n\r\n![205103158-a9e71ea6-84dd-4109-953b-1222ea29a3c9](https://user-images.githubusercontent.com/1809619/205196836-24193592-3a89-432e-94ba-3f7f3e46c5dc.png)\r\n\r\nIt may relate to [this part](https://github.com/honojs/hono/blob/main/src/middleware/cache/index.ts#L18), where the global `caches` variable isn't available as Cache API has not been supported by Deno Deploy. I guess that.\r\n","state":"closed","labels":"[\"document\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1472197399},{"id":1472620140,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/699","title":"Bug for \"star and all\" in RegExpRouter","body":"This bug was revealed in Issue #687 (Thanks a lot, @dagnelies !)\r\n\r\nIn RegExpRouter, the following test will fail.\r\n\r\n```ts\r\ndescribe.only('ALL and Star', () => {\r\n  const router = new RegExpRouter<string>()\r\n\r\n  router.add('GET', '*', 'star1')\r\n  router.add('GET', '/a', 'a')\r\n  router.add('ALL', '/b/*', 'star2')\r\n  router.add('GET', '/b/bar', 'bar')\r\n\r\n  it.only('Should return star1, star2, and bar', async () => {\r\n    const res = router.match('GET', '/b/bar')\r\n    expect(res).not.toBeNull()\r\n    expect(res?.handlers).toEqual(['star1', 'star2', 'bar']) // <--- ['star1', 'bar']\r\n  })\r\n})\r\n```\r\n\r\n\"star and all\" problems are difficult...","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1472620140},{"id":1474857550,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/700","title":"feat(handler): \"schema\" allow normal types","body":"This PR allows normal types, instead of only allowing `Schema` in the Handler.\r\n\r\n```ts\r\ntype User = {\r\n  id: string\r\n  name: string\r\n  age: number\r\n}\r\n\r\nconst handler: Handler<User> = (c) => {\r\n  const user = c.req.valid() // <--- user is User\r\n  // ...\r\n}\r\n```\r\n\r\nThis change also makes it possible to use the 3rd party library such as \"[Zod](https://zod.dev)\" for validation.\r\n\r\n```ts\r\nimport { z } from 'zod'\r\nimport type { ZodType } from 'zod'\r\nimport { Hono } from '../../../src/hono'\r\nimport type { Handler } from '../../../src/index'\r\n\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  age: z.number(),\r\n})\r\n\r\n// You can write a custom validator with Zod:\r\nconst zValidtor = <T extends ZodType>(schema: T): Handler<z.infer<T>> => {\r\n  return async (c, next) => {\r\n    const parsed = schema.safeParse(await c.req.json())\r\n    if (!parsed.success) {\r\n      return c.text('Invalid!', 400)\r\n    }\r\n    c.req.valid(parsed.data)\r\n    await next()\r\n  }\r\n}\r\n\r\napp.post('/post', zValidtor(schema), (c) => {\r\n  const user = c.req.valid() // <--- user will be `User`\r\n  return c.json(user)\r\n})\r\n```\r\n\r\nBuiltin Validator is recommended, but if developers want to use Zod, they can.\r\n\r\nThis may resolve #689 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1474857550},{"id":1475204958,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/701","title":"Empty `body` and `headers` on POST requests","body":"I don't get any headers or body data during a POST request.\r\n\r\nMy code intercepts the request and returns a `.json()` of the `c` context and even though I've been passing a JSON body and headers they are not included within the request.\r\n\r\n![Screenshot_2022-12-04_23-02-04](https://user-images.githubusercontent.com/34487580/205516458-39bebcbb-cde5-4a5d-ae5e-6c1ca0cd3eea.png)\r\n\r\nI've tried with `parseBody()` `body` and `bodyData` over `c.req` the examples also feature a [parsedBody](https://github.com/honojs/examples/blob/main/basic/src/index.ts#L103) that doesn't exist anymore according to worker types and the confusion goes on for such an essential thing.\r\n\r\nThe code looks like this:\r\n```javascript\r\nbookmarks.post(\"/:domain\", async (c) => c.json({ status: 200, code: \"Success\", data: c });\r\n```\r\nI can see by console logging that the value of the `body` key is `{ stream: undefined, source: null, length: null }`\r\n\r\nI've tested it on localhost with Cloudflare Workers over both `Wrangler` and `Miniflare`, they both return an empty object.\r\nCurrently using the latest Hono `2.5.7` and [Thunder](https://www.thunderclient.com/) for sending requests, I also tried to use `curl` to be sure it's not a Thunder problem and it's still reproducing.\r\n\r\nIs this normal?\r\nIs there a correct way to collect the body for a `POST` request? Didn't find anything about it in the docs.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1475204958},{"id":1475691060,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/702","title":"[Validator] check the duplicated values smartly","body":"There is currently no way to smartly check for duplicate values. So if we can get the value with `v.body('mail').value`, we can check for duplicates as follows.\r\n\r\n```ts\r\nvalidator((v) => ({\r\n  mail2: v.body('mail2').isRequired(),\r\n  mail: v.body('mail').isEqual(v.body('mail2').value),\r\n}))\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1475691060},{"id":1481697936,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/703","title":"Feature: Middleware execution order","body":"The hono middleware is great, but I think the execution order should be different.\r\n\r\nAs stated in the Routing Priority documentation: \"Handlers or middleware will be executed in registration order.\"\r\nThough, middlewares don't execute according to that rule. \r\n\r\n```typescript\r\nconst router = new Hono()\r\n\r\nrouter.use(async (context, next) => {\r\n  console.log('first middleware before next')\r\n  await next()\r\n  console.log('first middleware after next')\r\n})\r\nrouter.use(async (context, next) => {\r\n  console.log('second middleware before next')\r\n  await next()\r\n  console.log('second middleware after next')\r\n})\r\nrouter.use(async (context, next) => {\r\n  console.log('third middleware before next')\r\n  await next()\r\n  console.log('third middleware after next')\r\n})\r\n\r\n\r\nrouter.get('/', (context) => context.json({ hello: 'world' }))\r\n```\r\n\r\nThe console will look like the following:\r\n1. first middleware before next\r\n2. second middleware before next\r\n3. third middleware before next\r\n4. third middleware after next\r\n5. second middleware after next\r\n6. first middleware after next\r\n\r\nWhat I expected because of the Routing Priority\r\n1. first middleware before next\r\n2. second middleware before next\r\n3. third middleware before next\r\n4. first middleware after next\r\n5. second middleware after next\r\n6. third middleware after next\r\n\r\nI propose a change in the execution order, to match the expected execution order.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1481697936},{"id":1482241522,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/704","title":"fix(trie-router): bug for routing orders with named param","body":"Fixed the bug, we could not capture the named path parameter following the pattern. When accessing `GET /hello/world`, the `console.log()` may show `undefined`:\r\n\r\n```ts\r\napp.get('/hello/:foo', async (c, next) => {\r\n  const foo = c.req.param('foo')\r\n  console.log(foo)\r\n  await next()\r\n})\r\n\r\napp.get('/hello/world', (c) => {\r\n  const foo = c.req.param('foo')\r\n  return c.text('res')\r\n})\r\n```\r\n\r\nThis is a bug of TrieRouter. Already been fixed in this PR.  This bug is reported by this tweet: https://twitter.com/_ayame113_/status/1600467184853319680 Thanks!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1482241522},{"id":1482722617,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/705","title":"[Validator] Sends `Cannot read properties of undefined (reading 'match')` when there are missing fields.","body":"I have a schema like this:\r\n```ts\r\n{\r\n    username: v\r\n      .json(\"username\")\r\n      .isRequired()\r\n      .isLength({ min: 1 })\r\n      .message(\"username is required and cannot be empty\"),\r\n    password: v\r\n      .json(\"password\")\r\n      .isRequired()\r\n      .isLength({ min: 1 })\r\n      .message(\"password is required and cannot be empty\"),\r\n  }\r\n```\r\nWhen i send a json body like this `{\"username\": \"memo\"}`, validator send `Cannot read properties of undefined (reading 'match')`.\r\nI use the version `2.5.9` with nodejs.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1482722617},{"id":1483533952,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/706","title":"fix(reg-exp-router): bug of \"star and all\" routing","body":"This PR may fix #699.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1483533952},{"id":1483650931,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/707","title":"fix(reg-exp-router): bug of \"star and all\" routing","body":"@yusukebe I would like to fix #699 this way. Please review 🙇 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1483650931},{"id":1484561005,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/708","title":"fix(validator): enable checking `undefined` in rules","body":"This PR will fix #705.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1484561005},{"id":1485212147,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/709","title":"`cookie` should return `string | undefined`","body":"if a cookie with a name isn't present, `cookie` function returns undefined although this isn't reflected at the type level.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1485212147},{"id":1487037753,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/710","title":"[Validator] Make error message as format JSON","body":"Currently, error messages are shown as `text/plain`. But a client may handle it more easily if that is JSON.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1487037753},{"id":1487593757,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/711","title":"Can't get hash parameter from callback url","body":"Hey,\r\n\r\nI am trying to get the access_token hash parameter from my Auth0 workflow in Hono but the URL is saying its empty.\r\n\r\nhttp://localhost:8787/callback#access_token=tokenvalue&expires_in=7200&token_type=Bearer&state=PENDING\r\n\r\nIs the callback url I am hitting the endpoint with (with a real token).\r\n\r\n```\r\napp.get('/callback', async(c, next) => {\r\n\tconst url = new URL(c.req.url);\r\n\tconsole.debug(url);\r\n\treturn c.json(JSON.stringify(url));\r\n});\r\n```\r\nI use the following code but just get:\r\n\r\n```\r\nGET /login 302 Found (2.51ms)\r\nURL {\r\n  href: 'http://localhost:8787/callback',\r\n  origin: 'http://localhost:8787',\r\n  protocol: 'http:',\r\n  username: '',\r\n  password: '',\r\n  host: 'localhost:8787',\r\n  hostname: 'localhost',\r\n  port: '8787',\r\n  pathname: '/callback',\r\n  search: '',\r\n  searchParams: URLSearchParams {},\r\n  hash: ''\r\n}\r\n```\r\n\r\nThe hash parameters are empty. How do I properly receive the hash values so I can start authenticating my members.\r\n\r\nThanks :D","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1487593757},{"id":1487646858,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/712","title":"[Proposal] `HonoRequest`","body":"Currently, Hono extends`Request` object to handle requests from a client.\r\n\r\n```ts\r\nRequest.prototype.param = function (this: Request, key?: string) {\r\n//...\r\n}\r\n```\r\n\r\nThis is efficient, but it is not welcome to extend the Web Standard's Request object. Because it's \"standard\". So I think it's good to make `HonoReuqest` for wrapping `Request` object.\r\n\r\n```ts\r\nclass HonoRequest {\r\n  request: Request\r\n  constructor(request: Request) {\r\n    this.request = request\r\n  }\r\n\r\n  header(key: string) {\r\n    return this.request.headers.get(key)\r\n  }\r\n  \r\n  //...\r\n}\r\n```\r\n\r\nThis may make implementation simpler. It may also improve performance.\r\n\r\nBut this is breaking changes such `c.req.headers.get()` will be obsolete. So we have to include this change in `v3.0.0`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1487646858},{"id":1488235934,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/713","title":"Suggestion: validator as part of the handler","body":"Hi, sorry to bother you again with this but I still profoundly dislike putting the validator as middleware.\r\nI would still prefer by far to use it in the handler directly.\r\n\r\nThat's why I would suggest the following modification, to be able to use it in the `c.req.valid(validator_function)`.\r\n\r\nIt would look like this:\r\n\r\n```ts\r\nconst myData = c.req.valid((v) => ({\r\n    post: {\r\n      id: v.json('post.id').isRequired().asNumber(),\r\n      title: v.json('post.title').isRequired().isLength({ max: 100 }),\r\n      body: v.json('post.body').isOptional(),\r\n    },\r\n  }))\r\n```\r\n\r\nIt would also be nice that in case of errors, it throws an exception with a clear message so that a nice HTTP 400 can be returned.\r\n\r\nI tried to look a bit in the source code, but I could not find my was around regarding this validator.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1488235934},{"id":1488515074,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/714","title":"fix(type): fix the type mismatch if using `Handler` as middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1488515074},{"id":1489274731,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/715","title":"fix(type): infer types correctly","body":"This PR will make`SchemaToProps` return types correctly. We can get \"normal types\" from `c.req.valid()`. I think this is a good change.\r\n\r\nBefore:\r\n<img width=\"442\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/206883003-4d0ab291-6a8d-41ff-996e-897f83624c74.png\">\r\n\r\nAfter:\r\n<img width=\"424\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/206883008-d7907f8c-c498-438a-a9fb-94955b2b1ebe.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1489274731},{"id":1489491120,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/716","title":"Should use Official Cloudflare Types","body":"Now that the official cloudflare types allow separate importing rather than solely as global types, Hono should support them as handler responses.\r\nhttps://unpkg.com/@cloudflare/workers-types@4.20221111.1/2022-08-04/index.ts\r\n\r\nCurrently if I use these types to build for instance a `Response`, they are not accepted by the router.\r\n\r\n## Workaround\r\nImport the Cloudflare `Response` type as `CfResponse` and then do `return myCfResponseObject as unknown as Response` which is technically unsafe.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1489491120},{"id":1490147888,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/717","title":"OpenAPI and SwaggerUI support","body":"Is it a possibility to add support for OpenAPI and be able to use the Swagger UI?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1490147888},{"id":1490965506,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/718","title":"`Internal Server Error` when putting to R2 bucket if etagNotDoesMatch is false","body":"I have noticed that I can reliably get an internal server error from Cloudflare R2 when uploading if `R2PutOptions` uses the `R2Conditional` `onlyIf` `etagDoesNotMatch` \r\n\r\nfor example in this basic test case. This call will succeed the first time and fail with `Internal Server Error` the second time. \r\n\r\n```ts\r\napp.post('/upload', async (c) => {\r\n  const formData = await c.req.formData()\r\n  const file = formData.get('file')\r\n  const arr = await file.arrayBuffer()\r\n  const etag = await md5(arr)\r\n\r\n  const options = {\r\n    onlyIf: { etagDoesNotMatch: etag },\r\n    httpMetadata: { contentType: file.type },\r\n  }\r\n\r\n  const resp = await c.env.EXAMPLE_BUCKET.put('key-name', arr, options)\r\n\r\n  return c.json(resp)\r\n})\r\n```\r\n\r\nI am using Hono 2.6.1 and Wrangler 2.6.2.\r\n\r\nI don't understand how to trace this to see what's going wrong, are you able to point me in the right direction please","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1490965506},{"id":1491515585,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/719","title":"Log a more detailed error stack.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1491515585},{"id":1493678024,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/720","title":"fix(type): make `SchemaToProp` work correctly","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1493678024},{"id":1494580105,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/721","title":"fix(request): `c.req.param()` should return `undefined` not \"undefined\"","body":"`c.req.param('missing-parameter')` was returning \"undefined\". It was a string!! not `undefined`.  Of course, it should not return a string, should return `undefined`.\r\n\r\nThis was taught to me by noil on Discord. Thanks.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1494580105},{"id":1494656923,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/722","title":"perf(context): `c.text()` returns a response immediately if header is empty","body":"`c.text()` returns `Response` immediately if headers are empty.\r\n\r\nIt does not set `Content-Type` intentionally, but `text/plain` is added automatically, so it is not a breaking change. This is mainly for benchmarking, but benchmarking is important.\r\n\r\n`GET /` will become 13% faster on Bun!\r\n\r\n<img width=\"SS\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/207391017-a64a0f91-d480-424a-b6c2-d3a1acdc501c.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1494656923},{"id":1494661955,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/723","title":"[Validator] can't parse query params correctly","body":"my validator schema is as follows \r\n```js\r\nvalidator((v) => ({\r\n    skip: v.query(\"skip\").asNumber().isOptional(),\r\n    take: v\r\n      .query(\"take\")\r\n      .asNumber()\r\n      .isRequired()\r\n      .message(\"take argument is required\"),\r\n  })),\r\n```\r\nIf i send a request like this `http://localhost:3000/api?take=100/` i receive an error as `Invalid Value [100]: the query parameter \"take\" is invalid - should be \"number\"`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1494661955},{"id":1496603580,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/724","title":"Validator - File Type in Formdata","body":"In the validator is there any way to validate a specific such as `File` within FormData? \r\n\r\nI see the `v.body` is already using `req.parseBody()` which does support `File`.\r\n\r\ne.g. \r\n\r\n```js\r\napp.put(\r\n  '/form/:id',\r\n  validator((v) => ({\r\n    file: v.body('file').isRequired(),\r\n    name: v.body('name').isOptional(),\r\n  })),\r\n  async (c) => {\r\n    const res = c.req.valid()\r\n\r\n    const id = c.req.param('id')\r\n    const file = res.file\r\n    const name = res.name || 'foo'\r\n    c.text('Valid')\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1496603580},{"id":1497441549,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/725","title":"[Validator] Make it to be optional type if `isOptional()` is set","body":"If we set `isOptional()` to the body parameter:\r\n\r\n```ts\r\nconst schema = (v: Validator) => ({\r\n  id: v.json('post.id'),\r\n  title: v.json('post.title'),\r\n  body: v.json('post.body').isOptional(), // <---\r\n})\r\n```\r\n\r\nIt is expected to be `string | undefined` but it is `string` now.\r\n\r\n```ts\r\napp.get('/post', validator(schema), (c) => {\r\n  const post = c.req.valid()\r\n  post.body // <--- `string` but want it to be `string | undefined`\r\n  return c.text('foo')\r\n})\r\n```\r\n\r\nI think it's better to be `string | undefined` if it is set `isOptional()`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1497441549},{"id":1497459449,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/726","title":"[Proposal] Schema utilities - `buildSchema` and `Infer`","body":"This is a proposal, but the implementations are almost done. It's not on PR yet.\r\n\r\nThese are utilities for helping to make a schema for the validator and enabling to create the types from the schema.\r\n\r\nUsing `buildSchema`, we can make the schema that defines what we want to get from the request:\r\n\r\n```ts\r\nconst schema = buildSchema((v) => ({\r\n  id: v.json('post.id'),\r\n  title: v.json('post.title'),\r\n  author: v.object('post.author', (v) => ({\r\n    name: v.json('name'),\r\n    age: v.json('age').asNumber(),\r\n  })),\r\n}))\r\n```\r\n\r\nWe can pass it to the validator middleware:\r\n\r\n```ts\r\napp.post('/post', validator(schema), (c) => {\r\n  const post = c.req.valid()\r\n  createPost(post)\r\n  return c.json({\r\n    message: 'success!',\r\n  })\r\n})\r\n```\r\n\r\n`Infer` is \"type\" to get the type from schema:\r\n\r\n```ts\r\ntype Post = Infer<typeof schema>\r\n```\r\n\r\n`Post` will be:\r\n\r\n```ts\r\ntype Post = {\r\n  id: string\r\n  title: string\r\n  author: {\r\n    name: string\r\n    age: number\r\n  }\r\n}\r\n```\r\n\r\nThen, you can use `Post` for the models and logics:\r\n\r\n```ts\r\nconst posts: Post[] = []\r\n\r\nconst getPosts = (): Post[] => posts\r\nconst createPost = (arg: Post) => {\r\n  posts.push(arg)\r\n}\r\n```\r\n\r\nIsn't it cool?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1497459449},{"id":1497538094,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/727","title":"[Proposal] RPC","body":"I'll introduce an ultra cool feature. It will improve our developer experience. This issue is a continuation of #602.\r\n\r\n\"[tRPC](https://trpc.io)\" is helpful for sharing the types between the server and the client. This means it makes the types an API specification. There is a request to make tRPC adapter #582 , I think it's good to make the adapter as 3rd party middleware.\r\n\r\nSo, tPRC is great, but we can do it in a better way with Hono because we can make it \"integrated\".\r\n\r\nWhat we want to do are below:\r\n\r\n* Share the request format inferred from the validation schema.\r\n* Share the response format inferred from JSON objects that is returned in a handler.\r\n* Implement \"client\" not only on the server-side.\r\n\r\nThen, I have created those prototypes. They are not fully implemented, but they work. See the screencast:\r\n\r\n![output](https://user-images.githubusercontent.com/10682/207732300-2e30a611-cead-4bee-8dd5-2ebdbbe732e6.gif)\r\n\r\nServer-side code:\r\n\r\n```ts\r\nconst api = new Hono()\r\n\r\nconst getRoute = api\r\n  .get('/hello', (c) => {\r\n    return c.jsonT({\r\n      messages: 'hello',\r\n    })\r\n  })\r\n  .build()\r\n\r\nconst postRoute = api\r\n  .post(\r\n    '/posts',\r\n    validator((v) => ({\r\n      id: v.json('id'),\r\n      title: v.json('title'),\r\n    })),\r\n    (c) => {\r\n      const post = c.req.valid()\r\n      return c.jsonT({ title: post.title })\r\n    }\r\n  )\r\n  .build()\r\n\r\nexport type AppType = typeof postRoute & typeof getRoute\r\n```\r\n\r\nClient-side code:\r\n\r\n```ts\r\nimport type { AppType } from './server'\r\n\r\nconst client = new Client<AppType>('http://127.0.0.1:8787/api')\r\n\r\nconst res = await client.get('/hello')\r\n\r\nconsole.log(res.messages)\r\n\r\nconst res2 = await client.json('/posts', {\r\n  id: '123',\r\n  title: 'Hello!'\r\n})\r\n\r\nconsole.log(res2.title)\r\n```\r\n\r\nThe client-side needs to be considered, but this is a good idea for the server-side API. And, if developers want to use 3rd party validator like a \"Zod\", they may use it.\r\n\r\nNotes, we need to brush up on our data structures to handle types with Generics.\r\n\r\nIsn't it cool? I may create the PR later.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1497538094},{"id":1497557222,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/728","title":"Discord for open source projects","body":"Add Hono to the list of open source projects supported by Discord.\r\n\r\n* [Open Source Projects | Discord](https://discord.com/open-source)","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1497557222},{"id":1498686595,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/729","title":"Add API to allow Request/Response override in Middleware","body":"Hi,\r\n\r\nlove hono and building an API gateway with it. It works like a charm.\r\n\r\nMy API gateway has 2 ways of authenticating, either by including the apiKey in the url or by adding a header. This is for compatibility with client libraries.\r\nMy Implementation looks something like this:\r\n```typescript\r\n    app.get('/apikey/:apikey/demo', authMiddleware.pathAuth, async (c) => {\r\n        const data = await getDemo()\r\n        return c.json(data)\r\n    })\r\n    app.get('/demo', authMiddleware.headerAuth, async (c) => {\r\n        const data = await getDemo()\r\n        return c.json(data)\r\n    })\r\n```\r\n\r\nSo I am in fact using the same handler for both which is fine in this case, so I can easily reuse the same handler.\r\nThe tricky part is, when my handler actually uses the Request object, since they will have different paths\r\ne.g.\r\n```typescript\r\napp.get('/apikey/:apikey/cacheddemo', authMiddleware.pathAuth, handleCachedDemo)\r\napp.get('/cacheddemo', authMiddleware.headerAuth, handleCachedDemo)\r\n\r\nasync function handleChachedDemo(c) {\r\n    // cache key will be different for different API keys int he first route\r\n    let response = await cache.match(c.req)\r\n    if (response) {\r\n        return response\r\n    }\r\n    const data = await getDemo()\r\n\r\n    cache.put(c.req, new Response(data))\r\n    return c.json(data)\r\n}\r\n\r\n```\r\n\r\nThis pattern is repeated through many of my handllers. So I would like to add a middleware into the  `/apikey/:apikey/cacheddemo` route, which transforms the Request object to only contain `/cacheddemo` so all my actual handlers can be implemented in the same way. \r\n\r\nSo I think it might be valuable to have a middleware api that actually transforms the request (or response).\r\n\r\n\r\n\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1498686595},{"id":1499335015,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/730","title":"Shorten parameter names of Generics","body":"These are a little bit verbose, I think.\r\n\r\n<img width=\"703\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/207994481-fa0f2c14-e7e0-4823-95e0-24b518d5dfeb.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1499335015},{"id":1500827966,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/731","title":"How to call a service worker from inside a hono worker?","body":"Does anyone have a recommendation on how to call a service worker from inside a hono method worker?\r\n\r\n\r\nThis is my service work which is used to send an email out:\r\n```\r\naddEventListener(\"fetch\", event => {\r\n    event.respondWith(handleRequest(event.request))\r\n})\r\n\r\nasync function handleRequest(request) {\r\n    let send_request = new Request(\"https://api.mailchannels.net/tx/v1/send\", {\r\n        \"method\": \"POST\",\r\n        \"headers\": {\r\n            \"content-type\": \"application/json\",\r\n        },\r\n        \"body\": JSON.stringify({\r\n            \"personalizations\": [\r\n                {\r\n                    \"to\": [{\r\n                        \"email\": \"you@yourdomain.com\",\r\n                        \"name\": \"Test Recipient\"\r\n                    }]\r\n                }\r\n            ],\r\n            \"from\": {\r\n                \"email\": \"DoNotReply@voogu.space\",\r\n                \"name\": \"Test Sender\",\r\n            },\r\n            \"subject\": \"Test Subject\",\r\n            \"content\": [{\r\n                \"type\": \"text/plain\",\r\n                \"value\": \"Test message content\",\r\n            }],\r\n        }),\r\n    });\r\n\r\n    let respContent = \"\";\r\n    // only send the mail on \"POST\", to avoid spiders, etc.\r\n    if (request.method == \"POST\") {\r\n        const resp = await fetch(send_request);\r\n        const respText = await resp.text();\r\n        respContent = resp.status + \" \" + resp.statusText + \"\\n\\n\" + respText;\r\n    }\r\n\r\n    let htmlContent = \"<html><head></head><body><pre>\" + \"</pre><p>Click to send message: <form method='post'><input type='submit' value='Send'/></form></p>\" + \"<pre>\" + respContent + \"</pre>\" + \"</body></html>\";\r\n    return new Response(htmlContent, {\r\n        headers: { \"content-type\": \"text/html\" },\r\n    })\r\n}\r\n```\r\n\r\nThis is my hono worker snippet:\r\n```\r\napp.post('/email', async c => {\r\n    return await c.env.emailout.fetch();\r\n});\r\n```\r\n\r\nIf I use Postman to post to my hono worker, I receive a 500 Internal Server error message. \r\n\r\nThere seems to be a lot of guidance on calling a service worker from another service worker, but not from a method worker or from hono that I can find. \r\n\r\nThanks for the guidance. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1500827966},{"id":1501386653,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/732","title":"POC: Internal HonoRequest class","body":"This prevents the prototype pollution of the global Request class and prevents issues with type clashes in TypeScript.\r\n\r\nPending to verify:\r\n\r\n- [ ] Compat with the diff runtimes and platforms\r\n- [ ] Performance degradation\r\n\r\nI simply extended the Request class, but if it doesn't work in all platforms, there's the alternative to wrap the original request object with a Proxy which shouldn't be problematic, but probbly performance will be lesser of that of the current extend approach.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1501386653},{"id":1501799116,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/733","title":"feat: introduce HonoRequest with \"wrapper pattern\"","body":"This PR introduces \"HonoRequest\" class to handle a request object with a \"wrapper pattern\". This is told in #712 . For the same purpose @stefanmaric is implementing \"HonoRequest\" with \"proxy pattern\". #727 .\r\n\r\nThe wrapper pattern has two features.\r\n\r\n1. There are no \"big\" breaking changes, but access to environment-specific properties such as `c.req.cf` must be changed to `c.req.original.cf`.\r\n2. There is no performance degradation with this change. It may even improve it.\r\n\r\nDetail. First, HonoRequest will no longer be compatible with `Request`. So, if we want to use the raw `Request` object, we should write like this:\r\n\r\n```ts\r\nconst cacheKey = c.req.original\r\n```\r\n\r\nBut, all standard methods and properties of `Request` are ported. We can use `c.req` the same way we have always used it.\r\n\r\n```ts\r\nconst value = c.req.header('key')\r\nconst value2 = c.req.headers.get('key2')\r\nconst url = c.req.url\r\nconst method = c.req.method\r\n```\r\n\r\nIf we give enough notice, it could be released as a minor update such \"v2.7.0\" instead of a major update \"v3.0.0\".\r\n\r\nSecond, about performance. Using the implementation in #732 with \"proxy pattern\", we can not avoid that it will be slower.\r\n\r\nhttps://github.com/stefanmaric/hono/compare/poc/hono-request...stefanmaric:hono:poc/hono-request-proxy\r\n\r\nThis is the benchmark score with [the scripts](https://github.com/SaltyAom/bun-http-framework-benchmark):\r\n\r\n<img width=\"721\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/208286426-c2c27990-297a-4a94-93a4-d285d424bc2f.png\">\r\n\r\nFor Hono, being fast is of great importance. So, I believe that the implementation in this PR is an advantage over #732 (However, I am very thankful to @stefanmaric).\r\n\r\n---\r\n\r\nThis matter is still open for discussion and the PR will not be merged immediately.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1501799116},{"id":1501820399,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/734","title":"Lagon runtime support","body":"Hello! I would like to discuss how we can land [Lagon](https://github.com/lagonapp/lagon) support on Hono. It's an open-source runtime and platform specifically made for the edge, similar to CF Workers / Deno Deploy, bootstrapped and driven by the community.\r\n\r\nSome notes:\r\n- We can detect the runtime (https://github.com/honojs/hono/pull/644) using `!!globalThis.__lagon__`\r\n- I have already created [an issue](https://github.com/lagonapp/lagon/issues/97) on Lagon repo to track the progress\r\n- It might be a good idea to add an example on both [Hono examples repo](https://github.com/honojs/examples) and [Lagon examples directory](https://github.com/lagonapp/lagon/tree/main/examples)\r\n- Lagon implements the native Web APIs and follows WinterCG conventions\r\n\r\nYou can already test locally using the CLI (`npm i -g @lagon/cli`, and feel free to DM me if you want to try the cloud version), here is an example of the \"Hello World\" showcased on the website and adapter for Lagon:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\napp.get('/', (c) => c.text('Hello! Hono!'))\r\n\r\nexport const handler = app.fetch\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1501820399},{"id":1503378219,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/735","title":"Please actually document the middleware API","body":"The documentation on middleware just says \"You can write your own middleware.\" and has an example that is entirely unexplained. This really needs real documentation. What order are they called in? Does `next` have any parameters? Would definitely be worth spelling out that \"the middelware function is called for every matching endpoint *before* the request handler is run and calling 'await next()' will wait for the response to be sent before being run\" (or whatever is actually the case). As it stands, way too much has to be assumed or inferred by this.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1503378219},{"id":1503694748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/736","title":"Roadmap for v3.0.0","body":"Let's go to the next step.\r\n\r\nNow, Hono is used by many developers for several runtimes, such as Cloudflare Workers, Deno, or Bun. Many bugs have been fixed, and most features are working stably. On the other hand, \"big\" breaking changes, such as the introduction of HonoRequest, have become necessary. And we would like to add the \"big\" feature \"RPC\".\r\n\r\nIt is time to go to v3.0.0.\r\n\r\nIn addition, we will improve and rethink the Validator and refactor the internal code. Then, we have to write documents.\r\n\r\nThe [`next` branch](https://github.com/honojs/hono/tree/next) will be used for development towards v3.0.0.\r\n\r\nBelow are the TODOs for the v3.0.0 release. These lists are not complete and will be edited.\r\n\r\n---\r\n\r\n- [x] Migration guide\r\n- [x] Update README\r\n- [x] Middleware monorepo => Bump up Hono\r\n- [x] ~~Update examples~~ Bump up Hono\r\n- [x] ~~Update starter templates~~ Bump up Hono\r\n\r\n## Done\r\n\r\n- [x] Examples to use \"RPC\" [pages-stack](https://github.com/honojs/examples/tree/main/pages-stack)\r\n- [x] Write documents!\r\n- [x] Write a release note\r\n- [x] ~~Write about uploading Files~~ Later\r\n- [x] Rename `TypeResponse` to `TypedResponse`\r\n- [x] ~~Validate param values~~\r\n- [x] Return undefined instead of an empty string: query/queries/~~param~~\r\n- [x] Implement Client for \"PRC\" #862 \r\n- [x] ~~Add CI for edge-runtime(edge-light) ?~~\r\n- [x] ~~Rename `hono/cloudflare-workers` to `hono/adapter/cloudflare-workers`?~~\r\n- [x] Don't make \"breaking changes\" for `getPathFromURL` in utils.\r\n- [x] ~~Don't include `Validator` in middleware?~~\r\n- [x] tRPC Server Middleware\r\n- [x] Use \"vitepress\" for `honojs.dev`, goodbye Hugo.\r\n- [x] Add badge of \"bundlephobia\"\r\n- [x] ~~`hc` support File Upload~~\r\n- [x] `@honojs` to `@hono`\r\n- [x] `@hono/graphql-server`\r\n- [x] `@hono/sentry`\r\n- [x] `@hono/firebase-auth`\r\n- [x] Benchmark with complex routings #843 \r\n- [x] ~~Migrate `yusukebe/pico` to `honojs/pico`~~\r\n- [x] ~~Make compatibility with Hono and Pico~~\r\n- [x] HonoRequest #733 #712 \r\n- [x] \"RPC\" #727\r\n- [x] Desing API of Client for \"RPC\"\r\n- [x] ~~#614~~\r\n- [x] ~~#710~~\r\n- [x] ~~#623~~\r\n- [x] ~~#725~~\r\n- [x] ~~#726~~ \r\n- [x] ~~#724~~\r\n- [x] Refactor for \"Types\"\r\n- [x] ~~#702~~ \r\n- [x] Support \"Zod\" for a validation well\r\n- [x] ~~Use another command instead of `wiptest` on Bun?~~\r\n- [x] Lagon support #734 \r\n- [x] Write tests for Lagon\r\n- [x] Generally support Node.js with `@hono/node-server`\r\n- [x] ~~\"Hello World\" examples on every runtimes?~~\r\n- [x] Performance tuning\r\n- [x] Flag to specify decode URL params or not\r\n- [x] Improve headers matter in `Context` / finalize once?\r\n- [x] Improve performance of methods in `HonoRequest`\r\n- [x] Pre-release\r\n- [x] Remove not used utils","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1503694748},{"id":1503815657,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/737","title":"TrieRouter should support . (period) as a variable name delimiter like in Express","body":"Pattern\r\n`/:id/:page.json`\r\nRequest:\r\n`mysite.com/103/test.json`\r\n\r\n## Expected\r\n`id` will be `103` and `page` will be `test`\r\n\r\n## Actual\r\n`page.json` is `test.json`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1503815657},{"id":1504837386,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/738","title":"`@honojs` to `@hono` !","body":"`@hono` name scope on npm registry has been already taken, so I had to use `@honojs` namespace. Like `@honojs/sentry`.\r\n\r\nBUT!\r\n\r\nNow, I've received the email from the support, now, we can use `@hono` name scope and transfer the `@honojs` to that!\r\nRight now, I am asking if the transfer will redirect from the old name to the new name.\r\nIf it is OK, let's move to `@hono`.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1504837386},{"id":1505126896,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/739","title":"Stack traces do not use correct source code line numbers.","body":"Any stack trace seems to have line numbers based on some generated bundle (index.js) instead of the line numbers from the actual source code.\r\n\r\nFor example, if I throw an error like this on line 23 of `index.ts`:\r\n```\r\napp.all(\"/\", (c) => {\r\n  throw new Error(\"whatever\");\r\n});\r\n```\r\n\r\nI get the following trace\r\n\r\n```\r\nTrace: Error: whatever\r\n    at index.js:4090:9\r\n    at Hono.dispatch (index.js:2801:15)\r\n    at Hono.fetch (index.js:2702:19) {\r\n  stack: Error: whatever\r\n    at index.js:4090:9\r\n    at Hono….js:2801:15)\r\n    at Hono.fetch (index.js:2702:19),\r\n  message: whatever\r\n}\r\n    at logConsoleMessage (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:143164:25)\r\n    at WebSocket2.<anonymous> (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:142938:13)\r\n    at WebSocket2.onMessage (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:121339:22)\r\n    at WebSocket2.emit (node:events:525:35)\r\n    at Receiver2.receiverOnMessage (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:122227:24)\r\n    at Receiver2.emit (node:events:513:28)\r\n    at Receiver2.dataMessage (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:120891:18)\r\n    at Receiver2.getData (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:120833:21)\r\n    at Receiver2.startLoop (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:120610:27)\r\n    at Receiver2._write (/<redacted>/node_modules/wrangler/wrangler-dist/cli.js:120567:14)\r\n```\r\n\r\nNote that the file in the trace is `index.js` while the source code file is `index.ts`. This isn't just a typescript->javascript problem tho. If the error instead happens in some other file `like whatever.ts`, the stack trace will still have some large line number inside `index.js`. It seems index.js is some large bundle that these line numbers are coming from. This makes it very difficult to debug errors.\r\n\r\nAlso note that this isn't a cloudflare bug. Doing an equivalent thing without hono gives me proper source code files and line numbers. What is hono doing that would mutate the stack traces in this way?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1505126896},{"id":1505415514,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/740","title":"[Question] Request type for fetch in cloudflare worker bindings","body":"This issue is not related to Hono types, and fits more as a question in a discussion.\r\n\r\nWe are currently refactoring our request gateway/proxy to use Hono.\r\nWe use worker bindings to route request to different workers on the same domain.\r\n\r\nReproduction:\r\nhttps://codesandbox.io/s/determined-scott-rf4sqc?file=/src/main.ts\r\n\r\nThe request type seems to not be compatible, the request works fine. But the typing is wrong.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1505415514},{"id":1507821303,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/741","title":"Write about `strict` option","body":"We did not document about `strict` option.\r\n\r\n```ts\r\nconst app = new Hono({ strict: false })\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1507821303},{"id":1510087464,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/742","title":"feat: Lagon support with runtime detection & tests","body":"Closes https://github.com/honojs/hono/issues/734\r\nCloses https://github.com/lagonapp/lagon/issues/97\r\n\r\nThis PR follows https://github.com/honojs/honojs.dev/pull/27 and adds the following:\r\n- Runtime detection using the `__lagon__` global, returning the `lagon` key as specified in WinterCG Runtime Keys\r\n- `test:lagon` command that runs `lagon_test/index.ts` inside Lagon (using `lagon dev`) and runs `lagon_test/index.test.ts` against it\r\n- Add \"Lagon\" mentions after mentions of Cloudflare Workers, Deno and Bun","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1510087464},{"id":1510173796,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/743","title":"feat: new types for \"RPC\" support & built-in  validator obsolete","body":"This RP includes big changes. If we accept it, we have to merge it into [next branch](https://github.com/honojs/hono/tree/next), and it will be released in the next major version, \"v3\".\r\n\r\nIn this PR, I introduce new types for supporting the \"RPC\" feature. And make the built-in validator obsolete.\r\n\r\n## Built-in validator obsolete\r\n\r\nPerhaps this means \"heartbroken\".  I really like the current Built-in Validator, it can easily handle JSON, Forms, etc., and is easy and intuitive to write. But the more we try to make it better, the more we have to do. It is very difficult to make the Validator correct. So I began to think that there was no need for us to make our own validators. I am very sorry to the contributor who worked with, but with this PR, I have removed the built-in validator completely.\r\n\r\n## Recommend using 3rd party validators\r\n\r\nSo I would recommend using 3rd validators, such [Zod](https://zod.dev), [TypeBox](https://github.com/sinclairzx81/typebox). They provide type safety as well as value verification.\r\n\r\n## New types for RPC\r\n\r\nOn the other hand, I would like to add an \"RPC\" feature like [tPRC](https://trpc.io). This means that server-side API definitions are shared as \"Types\" and can be used by the Client.\r\n\r\nhttps://github.com/honojs/hono/issues/727\r\n\r\nSo, I added new types and methods to provide \"RPC\" for 3rd-party validators.\r\n\r\nThe implementation just adds `app.build()` and `c.jsonT()`.  And I just added a new type.\r\n\r\n```ts\r\ndescribe('`c.jsonT()` and `app.build`', () => {\r\n  const app = new Hono()\r\n  const route = app\r\n    .get('/posts', (c) => {\r\n      return c.jsonT({\r\n        id: 123,\r\n        title: 'Hello',\r\n        flag: true,\r\n      })\r\n    })\r\n    .build()\r\n\r\n  it('Should return correct types with c.jsonT() and app.build()', () => {\r\n    type ExpectType = {\r\n      output: {\r\n        json: {\r\n          id: number\r\n          title: string\r\n          flag: boolean\r\n        }\r\n      }\r\n    }\r\n    type verify = Expect<Equal<ExpectType, typeof route>>\r\n  })\r\n})\r\n```\r\n\r\nThen, we can use these to create middleware to do the following (This middleware and client are not included in this PR.):\r\n\r\nhttps://user-images.githubusercontent.com/10682/209447905-bf1afe60-c0fd-45bb-881a-9cf00a352d08.mov\r\n\r\n## Make these under `@hono` namespace\r\n\r\nFor now, I plan to create an HTTP cline that wraps `fetch` and the validator using \"Zod\". We will not include these in the core package, but will distribute them under `@hono` namespace. For example, `@hono/client` and `@hono/zod`, will be managed in [the monorepo for middleware](https://github.com/honojs/middleware).\r\n\r\n## TODO\r\n\r\nIf we accept this PR, there are a few things we must do.\r\n\r\n* Refactor the code.\r\n* Deprecate the current built-in validator.\r\n* Release the next branch as \"pre-release\" and test it well.\r\n* Create `@hono/client` and `@hono/zod`.\r\n* Try validators other than \"Zod\".\r\n\r\n---\r\n\r\nThis is one of the big, painful decisions, but one I want to make in v3.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1510173796},{"id":1510194108,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/744","title":"Deno \"hello world\" example gives a error","body":"Hi there, \r\n\r\nI'am trying the deno Hello world [example](https://honojs.dev/docs/getting-started/deno/). But I get this typing error: \r\n```\r\nCheck file:///Users/thomasvanderwesten/server/thermos-api-deno/hello.ts\r\nerror: TS2345 [ERROR]: Argument of type '{ prefix: string; }' is not assignable to parameter of type 'Partial<Pick<Hono<Environment, string, unknown>, \"router\" | \"strict\">>'.\r\n  Object literal may only specify known properties, and 'prefix' does not exist in type 'Partial<Pick<Hono<Environment, string, unknown>, \"router\" | \"strict\">>'.\r\nconst app = new Hono({ prefix: \"/api/v1\" });\r\n                       ~~~~~~~~~~~~~~~~~\r\n    at file:///Users/thomasvanderwesten/server/thermos-api-deno/hello.ts:4:24\r\n\r\nTS2345 [ERROR]: Argument of type '(request: Request, Environment?: Bindings | undefined, executionCtx?: ExecutionContext | undefined) => Response | Promise<Response>' is not assignable to parameter of type 'string | HTTPOptions'.\r\nserve(app.fetch);\r\n      ~~~~~~~~~\r\n    at file:///Users/thomasvanderwesten/server/thermos-api-deno/hello.ts:8:7\r\n\r\nFound 2 errors.\r\n```\r\nWhen running this example:\r\n```\r\nimport { serve } from 'https://deno.land/std/http/server.ts'\r\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => c.text('Hello! Hono!'))\r\n\r\nserve(app.fetch)\r\n```\r\nDeno Version;\r\n```\r\ndeno --version\r\ndeno 1.22.0 (release, x86_64-apple-darwin)\r\nv8 10.0.139.17\r\ntypescript 4.6.2\r\n```\r\nI'am missing something.. but what?\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1510194108},{"id":1510233255,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/745","title":"feat: new validator middleware using 3rd-party & current middleware obsolete","body":"This RP includes big changes. If we accept it, we have to merge it into [next branch](https://github.com/honojs/hono/tree/next), and it will be released in the next major version, \"v3\".\r\n\r\nIn this PR, I introduce new validator middleware supporting the \"RPC\" feature. And make the current built-in validator obsolete.\r\n\r\n## Current built-in validator obsolete\r\n\r\nPerhaps this means \"heartbroken\".  I really like the current Built-in Validator, it can easily handle JSON, Forms, etc., and is easy and intuitive to write. But the more we try to make it better, the more we have to do. It is very difficult to make the Validator correct. So I began to think that there was no need for us to make our own validators. I am very sorry to the contributor who worked with, but with this PR, I have removed the current built-in validator completely.\r\n\r\n## New \"generic\" validator middleware for using 3rd-party\r\n\r\nSo I would recommend using 3rd validators, such [Zod](https://zod.dev), [TypeBox](https://github.com/sinclairzx81/typebox). They provide type safety as well as value verification.\r\n\r\nTherefore, I created a thin Validator middleware that can handle such 3rd-party Validators in a generic way. \r\n\r\n## New types for RPC\r\n\r\nOn the other hand, I would like to add an \"RPC\" feature like [tPRC](https://trpc.io). This means that server-side API definitions are shared as \"Types\" and can be used by the Client.\r\n\r\nhttps://github.com/honojs/hono/issues/727\r\n\r\nSo, I added new types and methods `app.build()` and `c.jsonT()` to provide \"RPC\" for 3rd-party validators.\r\n\r\n## Example\r\n\r\nFor example, we can write the validator with \"Zod\" like this:\r\n\r\n```ts\r\nconst v =\r\n  <T extends ZodSchema>(schema: T) =>\r\n  (value: unknown, c: Context) => {\r\n    const parsed = schema.safeParse(value)\r\n    if (!parsed.success) {\r\n      return c.text('Invalid!', 400)\r\n    }\r\n    const data = parsed.data as z.infer<T>\r\n    return data\r\n  }\r\n\r\nconst api = new Hono()\r\n\r\nconst postRoute = api\r\n  .post(\r\n    '/author',\r\n    validator(\r\n      'json',\r\n      v(\r\n        z.object({\r\n          name: z.string(),\r\n          age: z.string(),\r\n          nickname: z.string().optional(),\r\n        })\r\n      )\r\n    ),\r\n    (c) => {\r\n      const author = c.req.valid()\r\n      return c.jsonT({\r\n        youare: {\r\n          name: author.name,\r\n          age: author.age,\r\n        },\r\n      })\r\n    }\r\n  )\r\n  .build()\r\n\r\nexport type AppType = typeof postRoute\r\n```\r\n\r\nThis is a screencast for the demo. It's a little different from the implementation in this PR, but it works the same.\r\n\r\nhttps://user-images.githubusercontent.com/10682/209447905-bf1afe60-c0fd-45bb-881a-9cf00a352d08.mov\r\n\r\n## Make the client\r\n\r\nFor now, I plan to create an HTTP cline that wraps `fetch`. We will not include this in the core package, but will distribute it under `@hono` namespace `@hono/client`. And will be managed in [the monorepo for middleware](https://github.com/honojs/middleware).\r\n\r\n## `@hono/zod` etc.\r\n\r\nIt is also a good idea to create a module like `@hono/zod` to write it simpler and shorter.\r\n\r\n## TODO\r\n\r\nIf we accept this PR, there are a few things we must do.\r\n\r\n* Refactor the code.\r\n* Deprecate the current built-in validator.\r\n* Release the next branch as \"pre-release\" and test it well.\r\n* Create `@hono/client`.\r\n* Try validators other than \"Zod\".\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1510233255},{"id":1510236582,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/746","title":"New slogan \"Standard for Web Standard\"","body":"I want to make Hono \"de-fact standard web framework for Web Standard\". So, it's good to add the slogan \"**Standard for Web Standard**\" for the website or others.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1510236582},{"id":1511628015,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/747","title":"fix: Support tsconfig.json \"moduleResolution\" : \"NodeNext\"","body":"To support \"moduleResolution\" : \"NodeNext\", output .d.ts to the dist/types directory and add dist/types/package.json { \"type\": \"commonjs\" }.\r\n\r\n#679 \r\n#668","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1511628015},{"id":1513405082,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/748","title":"refactor: refactor and fix Types","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513405082},{"id":1513557428,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/749","title":"Environment Vars don't work for booleans etc in jest tests/miniflare","body":"Hi there\r\n\r\nI'm trying a simple example where I have added a var with a boolean value. But when I get that value inside the environment in a hono application it's coming out as a string, even when I type it to be boolean.\r\n\r\n```TOML\r\n# WRANGLER.TOML\r\n\r\n[vars]\r\nVALIDATE_REQUEST=false\r\n... some more\r\n\r\n```\r\n\r\nso in a middleware interceptor I get this value out but it appears as `string` not `boolean`:\r\n\r\n```typescript\r\n\r\n//bindings.d.ts\r\nexport interface Bindings {\r\n\r\n  VALIDATE_REQUESTS: boolean\r\n\r\n  USERNAME: string\r\n  PASSWORD: string\r\n\r\n  // ...\r\n}\r\n\r\n\r\n\r\n// index.ts\r\n\r\nmiddleware.use('*', async (c, next) => {\r\n\tconsole.log(`MIDDLEWARE INTERCEPT: `, {ENV: c.env, valType: typeof c.env.VALIDATE_REQUESTS, validate_request: c.env.VALIDATE_REQUESTS})\r\n\t// fail early if we don't need to validate\r\n\tif(c.req.method !== 'POST') return next();\r\n\t// bomb out if the env is not configured/needed to read\r\n\tif(!c?.env?.VALIDATE_REQUESTS) return next();\r\n \r\n \r\n// MORE CODE...\r\n})\r\n\r\n```\r\n\r\nThe Jest config:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  testEnvironment: 'miniflare',\r\n  testMatch: ['**/*.test.ts'],\r\n  transform: {\r\n    '^.+\\\\.tsx?$': 'esbuild-jest',\r\n  },\r\n}\r\n```\r\n\r\nwhen I run a test I can see the output in the jest side of things telling me:\r\n\r\n```\r\n console.log\r\n    MIDDLEWARE INTERCEPT:  {\r\n      ENV: {\r\n        VALIDATE_REQUESTS: 'false',\r\n         ... OTHER VALS ...\r\n      },\r\n      valType: 'string',\r\n      validate_request: 'false'\r\n    }\r\n\r\n      at src/index.ts:35:11\r\n```\r\n\r\nIt's happening both for the binding set `boolean` and `Boolean` so it looks like the value is never being parsed/converted as such.\r\n\r\nThe binding seems to happen when I use the `wrangler dev` call fine. But not via `jest` or testing.\r\n\r\nso if I run it on the command line:\r\n\r\n```\r\nGET / 200 OK (11.56ms)\r\nMIDDLEWARE INTERCEPT:  {\r\n  ENV: {\r\n    VALIDATE_REQUESTS: false,\r\n    // more values...\r\n  },\r\n  valType: 'boolean',\r\n  validate_request: false\r\n}\r\n```\r\n\r\nSorry if this is a silly question, just confused how the binding is working from the TOML file to the `env` based on my understanding of the bindings docs on the site and the examples for typescript/testing/jest/miniflare.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513557428},{"id":1513657748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/750","title":"r.formData is not a function (bun)","body":"Hey!\r\n\r\nI was just playing around with hono and bun and I wanted to parse the incoming form response of this route:\r\n\r\n```tsx\r\napp.get('/signup', async c => {\r\n  return c.html(\r\n    <Layout>\r\n      <form method=\"POST\" action=\"/signup\">\r\n        <input type=\"text\" name=\"username\" />\r\n        <input type=\"password\" name=\"password\" />\r\n        <input type=\"submit\" value=\"Sign up\" />\r\n      </form>\r\n    </Layout>\r\n  )\r\n})\r\n```\r\n\r\n```tsx\r\napp.post(\r\n  '/signup',\r\n  validator(v => ({\r\n    username: v.body('username').isRequired(),\r\n    password: v.body('password').isRequired(),\r\n  })),\r\n  async c => {\r\n    const body = c.req.valid()\r\n\r\n    console.log('body', body)\r\n\r\n    return c.redirect('/signup')\r\n  }\r\n)\r\n```\r\n`POST /signup` returns ```r.formData is not a function. (In 'r.formData()', 'r.formData' is undefined)```. \r\n\r\nI assume this is coming from [`body.ts#parseBody(Request: Request)`](https://github.com/honojs/hono/blob/main/src/utils/body.ts#L3) which gets called in [`request.ts#Request.parseBody`](https://github.com/honojs/hono/blob/main/src/request.ts#L133).\r\n\r\nWhen I add ```console.log(r)```\r\nto `body.ts` the following object gets logged:\r\n\r\n```\r\nRequest (0 KB) {\r\n  method: \"POST\",\r\n  url: \"http://localhost:3000/signup\"\r\n}\r\n```\r\n\r\nI assume this is a bun-only bug? Is there any workaround for this?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513657748},{"id":1513801739,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/751","title":"How about using GitHub \"Discussions\"","body":"It would be good to use GitHub \"Discussions\" to post announcements, Q&A on usage, etc. Let's try it later.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513801739},{"id":1513825838,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/753","title":"Want to know which router is being used","body":"I want to know which router is being used in my application.\r\n\r\nI wonder it would be useful if `app` had the property to get the name of the router currently being used.\r\n\r\n```ts\r\nconsole.log(app.activeRouter)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513825838},{"id":1513833717,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/754","title":"[TrieRouter] Support wildcard/regexp routing with slash `/`","body":"Currently, \"TrieRouter\" does not support wildcard/regexp routing with slash `/`. This means that it will match paths in the same depth but cannot match paths in a dynamic depth.\r\n\r\n```ts\r\napp.get('/:filename{.+.js$}', async (c, next) => {\r\n  console.log(`You access ${c.req.param('filename')}`)\r\n  await next()\r\n})\r\n```\r\n\r\nIt matches `/foo.js` but does not match `/js/foo.js`.\r\n\r\n~~\"RegExpRouter\" supports wildcard/regexp, so \"TrieRouter\" should support it (but it may be difficult).~~\r\n\r\nEDIT:\r\n\r\n\"RegExpRouter\" does not support it yet.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513833717},{"id":1513919865,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/756","title":"How to use JWT and CORS with secrets via Cloudflare","body":"Hi,\r\nThe documentation shows how to use a secret for validating a JWT but it doesn't show how to use a secret variable stored in a Cloudflare worker. Also, could you please show had to add CORS when using JWT? \r\n\r\nThis is what I have so far. But access to the environment variable is out of scope at this point and not sure how to combine with CORS.\r\nThanks.\r\n\r\n```\r\nimport { Hono } from 'hono';\r\nimport { cors } from 'hono/cors';\r\nimport { jwt } from 'hono/jwt'\r\n\r\nconst app = new Hono()\r\napp.use('/*', cors());\r\napp.use(\r\n    '/*',\r\n    jwt({\r\n        secret: c.env.JWT_TOKEN_KEY,\r\n    })\r\n)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1513919865},{"id":1514038156,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/757","title":"case insensitive headers","body":"Hi, Just noticed [this](https://github.com/honojs/hono/blob/6a96ace96a3cc3846c757cce56cad842b570760a/src/middleware/etag/index.ts#L10).\r\nHeaders are supposed to be [case insensitive](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers). \r\nWouldn't  it lead to confusion?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1514038156},{"id":1514134897,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/758","title":"fix(jsonT): `undefined` if it is not object","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1514134897},{"id":1514156164,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/759","title":"docs(migration): write about validator middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1514156164},{"id":1514159710,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/760","title":"chore(validator): show warnings about the breaking changes","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1514159710},{"id":1514341470,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/763","title":"How can I listen to chunk \"on\" events with Hono ?","body":"Hey ! I wanted to know if it is possible to implement something like this in order to track progression of an upload ?\r\n\r\n```js\r\nconst http = require('http');\r\n\r\nconst server = http.createServer((req, res) => {\r\n  if (req.method === 'POST' && req.url === '/upload') {\r\n    console.log(\"Start upload\");\r\n\r\n    let body = [];\r\n    req.on('data', (chunk) => {\r\n      body.push(chunk);\r\n      console.log(`Progress: ${body.length}`);\r\n    });\r\n\r\n    req.on('end', () => {\r\n      body = Buffer.concat(body).toString();\r\n      console.log(\"End of the upload\");\r\n    });\r\n  }\r\n});\r\n\r\nserver.listen(3000);\r\n\r\n```","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1514341470},{"id":1515245045,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/764","title":"fix(types): fixed type structure","body":"Union to Intersection","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1515245045},{"id":1516047643,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/766","title":"fix(types): specify values of `ValidationTypes`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516047643},{"id":1516083356,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/767","title":"refactor(types): fix exporting and refactor","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516083356},{"id":1516194650,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/768","title":"feat(trie-router): `regexp` support path including slashes","body":"\"TrieRouter\" did not support regexp routing with slash `/`. This means that it will match paths in the same depth but cannot match paths in a dynamic depth. \r\n\r\n```ts\r\n// GET `/js/chunk/abc.js` is not matched\r\napp.get('/:filename{.+.js$}', async (c, next) => {\r\n  console.log(`You access ${c.req.param('filename')}`)\r\n  await next()\r\n})\r\n```\r\n\r\nIn this PR, make it supports slash.\r\n\r\nWill match `/js/chunk/abc.js` not only `/abc.js`.\r\n\r\nP.S.\r\n\r\nCurrently, \"RegExpRouter\" also does **not** support regexp routing with slashes. It would be good to support it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516194650},{"id":1516234715,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/769","title":"chore: update license, contributors as the copyright holders","body":"Hono is not made only by me. Need contributors. Thanks!!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516234715},{"id":1516787224,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/770","title":"fix(validator): return message when Malformed JSON request body","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516787224},{"id":1516791051,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/771","title":"refactor: form body should be `Record<string, string | File>`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516791051},{"id":1516806782,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/772","title":"refactor(validator): show type error if get/head with form/json","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1516806782},{"id":1517291213,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/773","title":"Add CI for Node.js adapter server?","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1517291213},{"id":1517354373,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/774","title":"refactor(types): shorten name, make it safer","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1517354373},{"id":1517928422,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/775","title":"chore(benchmark): update `iity-router`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1517928422},{"id":1518522663,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/776","title":"fix(package.json): typo exports static-router","body":"There was a mistake in #747 , sorry.\r\nI was able to find it in publint.\r\n``npx publint`` or https://publint.dev/hono","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1518522663},{"id":1518584416,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/777","title":"Add CI for Fastly Compute@Edge","body":"Now, we can use `jest-preset-fastly-js-compute`.\r\n\r\n<https://github.com/ysugimoto/jest-preset-fastly-js-compute>\r\n\r\nIf this works, we can guarantee that Hono works on the following six runtimes with the CI:\r\n\r\n1. Cloudflare Workers / workerd\r\n2. Deno\r\n3. Bun\r\n4. Node.js (CI not yet on this main repo, but we can do it with Node.js Adapter)\r\n5. Lagon\r\n6. Fastly Compute@Edge\r\n\r\nIf we can test for Cloudflare Workers (jest environment) well, we should not have to do full-tests on others because almost APIs are same. It's OK that run on CI at a minimum.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1518584416},{"id":1519119718,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/778","title":"perf(context): tune up handling headers 3% faster","body":"It's a little bit faster, but definitely faster.\r\n\r\n<img width=\"996\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/210582915-25ed7573-227d-4b0c-8b02-410bf635b820.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1519119718},{"id":1519130312,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/779","title":"Question: How do I proxy a route to another route in Hono?","body":"I'm migrating a WP rest API to cf workers with Hono.\r\n\r\nThe app consists of 3 endpoints, but to ensure backward compatibility with old API clients I need to ensure the old endpoints keep working.\r\n\r\nFor example when an API client sends a request to: `https://mycfworker.dev/wp-admin/admin-ajax.php?action=wp_activate`\r\nIt should receive the same response as it would from: `https://mycfworker.dev/activate`\r\n\r\nHow would I go about that?\r\n\r\nCode snippet:\r\n\r\n```js\r\nconst app = new Hono();\r\n\r\napp.post(\"/activate\", async (c) => {\r\n  // do stuff\r\n});\r\n\r\napp.post(\"/validate\", async (c) => {\r\n  // do stuff\r\n});\r\n\r\napp.post(\"/deactivate\", async (c) => {\r\n  // do stuff\r\n});\r\n\r\n// preserve old endpoint url compatibility\r\n// e.g. https://mycfworker.dev/wp-admin/admin-ajax.php?action=wp_activate\r\napp.post(\"/wp-admin/admin-ajax.php\", async (c) => {\r\n  const action = c.req.query(\"action\");\r\n  switch (action) {\r\n    case \"wp_activate\":\r\n      // return `/activate` route\r\n    case \"wp_deactivate\":\r\n      // return `/deactivate` route\r\n    case \"wp_validate\":\r\n    default:\r\n      // return `/validate` route\r\n  }\r\n});\r\n```\r\n\r\nI would appreciate any pointers, thanks!\r\n\r\nEDIT: I was trying to avoid creating named functions but went for it anyway.\r\n\r\n```js\r\nconst app = new Hono();\r\n\r\nconst activate = async (c: Context) => {\r\n  // do stuff\r\n});\r\n\r\nconst validate = async (c: Context) => {\r\n  // do stuff\r\n});\r\n\r\nconst deactivate = async (c: Context) => {\r\n  // do stuff\r\n});\r\n\r\napp.post(\"/activate\", activate);\r\napp.post(\"/validate\", validate);\r\napp.post(\"/deactivate\", deactivate);\r\n\r\n// preserve old endpoint url compatibility\r\n// e.g. https://mycfworker.dev/wp-admin/admin-ajax.php?action=wp_activate\r\napp.post(\"/wp-admin/admin-ajax.php\", async (c) => {\r\n  const action = c.req.query(\"action\");\r\n  switch (action) {\r\n    case \"wp_activate\":\r\n      return activate();\r\n    case \"wp_deactivate\":\r\n      return deactivate();\r\n    case \"wp_validate\":\r\n    default:\r\n      return validate();\r\n  }\r\n});\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1519130312},{"id":1519182627,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/780","title":"perf(url): cache `queryIndex`  3% faster","body":"A little bit faster, but definitely faster.\r\n\r\n<img width=\"904\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/210591829-6d4c57c8-ddcf-4e20-b923-d0e6f3e98a8f.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1519182627},{"id":1521541430,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/781","title":"refactor(trie-router): Use `splitRoutingPath`.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1521541430},{"id":1522633382,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/782","title":"perf: optimize parsing queries and headers / 19% faster than 2.7.1","body":"This PR includes many changes for optimization.\r\n\r\n* Avoid using `URLSearchParams`.\r\n* Created original function to parse query params.\r\n* Optimize handling headers.\r\n* Reduced the number of headers passed to `Response`.\r\n* Decode URL based on whether it contains `%` or not.\r\n* Pass static value to `split` instead of regexp.\r\n* Use `indexOf` instead of `slice`.\r\n\r\nThe result, 19% faster than 2.7.1!\r\n\r\n<img width=\"771\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/211026398-4fc9625d-2659-4e75-9adc-fb964fe0e848.png\">\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1522633382},{"id":1522788339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/783","title":"test: add tests and CI for Fastly Compute@Edge","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1522788339},{"id":1523362257,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/784","title":"ci: refine CI structures","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1523362257},{"id":1523661661,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/785","title":"test: add tests and CI for Node.js","body":"This PR will add the tests for running on Node.js with `@hono/node-server`, and it will be tested on the CI. These tests are minimal, more testing is done in the `@hono/node-server` repository.\r\n\r\nNow we are doing CI on the following six runtimes.\r\n\r\n1. Cloudflare Workers (main)\r\n2. Deno\r\n3. Bun\r\n4. Fastly Compute@Edge\r\n5. Lagon\r\n6. Node.js\r\n\r\nAll but \"1\" are minimal but have been well tested in \"1\", so the behavior is somewhat guaranteed.\r\n\r\nThis is great!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1523661661},{"id":1523669637,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/786","title":"[do not merge] this is blank PR","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1523669637},{"id":1524288773,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/789","title":"feat(reg-exp-router): regexp support path including slashes.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1524288773},{"id":1524295085,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/790","title":"refactor(utils): splitRoutingPath, allow `@` to be safely used in parameter names.","body":"I noticed that `@` is not part of the path, but is available as part of the parameter name.\r\nI don't expect many people to use @ in parameter names, but I would like to make @ available because fewer restrictions due to internal implementation methods is better.\r\nI don't think it is quintessential to use `\\` as a parameter name, so I don't think there is any conflict if it is `@\\\\{i}`.\r\n\r\n### For another discussion\r\n\r\nTo simplify future discussions, it may be possible to decide in some version that \"only `[a-zA-Z_][a-zA-Z0-9_]+` can be used for parameter names\".","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1524295085},{"id":1524429004,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/791","title":"fix: fixed bugs handling `TypeResponse`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1524429004},{"id":1524556259,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/792","title":"fix(cors): fix bugs handling pre-flight","body":"This PR fixes a bug that a pre-flight request would be 404.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1524556259},{"id":1526491292,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/794","title":"Test with `unstable_dev` in Wrangler","body":"Since Wrangler v2.7.0, it generates test codes when we do `wrangler init`. This uses `unstable_dev` function, and we can test it as almost \"e2e\". I think is enough to test with \"Request/Response\" current way, but it's good to test with `unstable_dev` in some cases for Cloudflare Workers.\r\n\r\nP.S.\r\nThis uses \"Vitest\"!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1526491292},{"id":1527297342,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/795","title":"refactor: tweak types","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1527297342},{"id":1527489460,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/796","title":"feat: introduce `HTTPException`","body":"In this PR, I will introduce `HTTPException`.\r\n\r\nUntil now, we have not dared to create an `Exception` class that extends `Error`. Because we can handle it with the middleware looking up status codes.\r\n\r\n```ts\r\napp.post('/validator', async (c, next) => {\r\n  await next()\r\n  if (c.res.status === 400) {\r\n    return c.text('Validation error!', 400)\r\n  }\r\n})\r\n```\r\n\r\nBut, if 401 error occurs in Basic Auth or Bearer Auth middleware, another middleware cannot handle it because Basic Auth and Bearer Auth middleware immediately returns the Response. We must not fire the next middleware handler for a security issue.\r\n\r\nSo, when a fatal error occurs, such as an authentication error, we can throw this `HTTPException` and handle it with `app.onError`.\r\n\r\n```ts\r\napp.onError((e, c) => {\r\n  if (e instanceof HTTPException && e.status === 401) {\r\n    return c.json(\r\n      {\r\n        message: 'Custom error message!',\r\n      },\r\n      401\r\n    )\r\n  }\r\n  return c.text('Internal Server Error', 500)\r\n})\r\n```\r\n\r\nIt is not usually used, but it is a necessary feature to customize the error message for such an \"Unauthorized\" error.\r\n\r\nThis will be merged into \"next\" branch.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1527489460},{"id":1527830043,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/797","title":"Cloudflare worker feature","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1527830043},{"id":1529615944,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/798","title":"add helmet security for hono","body":"please add helmet security to secure our api\r\n\r\nhttps://www.npmjs.com/package/helmet","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1529615944},{"id":1529987729,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/799","title":".env files not loaded into c.env","body":"I found the `.env` files are not loaded into `c.env`:\r\n\r\nRuntime: Bun 0.4.0\r\n\r\n```js\r\n// index.ts\r\n\r\nimport { Hono } from 'hono'\r\n\r\ninterface Bindings {\r\n  API_KEY: string\r\n  API_SECRET: string\r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get('/', async (c) => {\r\n  console.log(c.env.API_KEY) // <--- undefined\r\n  return c.text('hello')\r\n})\r\n\r\nexport default {\r\n  port: 3000,\r\n  fetch: app.fetch,\r\n}\r\n```\r\n\r\n```\r\n# .env\r\n\r\nAPI_KEY=hono\r\nAPI_SECRET=123\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1529987729},{"id":1531490542,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/800","title":"Test if we could get env variables in Cloudflare","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1531490542},{"id":1533635332,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/804","title":"named route param is undefined","body":"| Platform | Issue | Details |\r\n| :- | :- | :- |\r\n| Deno `v3.0.0-rc.5` | Correct type for named optional parameter is not working. | See screenshots below. |\r\n\r\n| Not working | Working |\r\n| :- | :- |\r\n| There is no error but term is `undefined`. | Term is `202209` but there is a type error. |\r\n| ![image](https://user-images.githubusercontent.com/20136585/212521276-784893a2-c8f9-44b8-a3a1-9be531aee470.png) | ![image](https://user-images.githubusercontent.com/20136585/212521110-78ec4397-7035-40a4-b135-d1302a47ca0c.png) |\r\n\r\nI'm currently using `@ts-ignore` for the error to get it working. Is there any proper way to fix this?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1533635332},{"id":1533641567,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/805","title":"remove unnecessary individual strict mode family options","body":"The [TypeScript documentation](https://www.typescriptlang.org/tsconfig#strict) said:\r\n\r\n> The `strict` flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. **Turning this on is equivalent to enabling all of the strict mode family options**, which are outlined below. You can then turn off individual strict mode family checks as needed.\r\n\r\nBecause there is already a `strict` flag, so `strictPropertyInitialization` and `strictNullChecks` are redundant.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1533641567},{"id":1533885436,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/806","title":"refactor(types): more robust and flexible","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1533885436},{"id":1535132092,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/807","title":"feat: [BREAKING] introduce adapters","body":"This PR introduces \"adapters\" and includes breaking changes.\r\n\r\nFor example, if we want to use serve-static middleware, we have to specify which runtime we want to write like this:\r\n\r\n```ts\r\nimport { serveStatic } from 'hono/serve-static.module' // <--- Cloudflare Workers module-mode\r\n```\r\n\r\nThis means that the implementation depends on the environment. I believe that runtime-specific implementations are not appropriate as middleware. Implementations that use runtime-specific features should be separated explicitly. And implementations that use \"not\" Web standard API should not be builtin-middleware.\r\n\r\nSo, I'll introduce \"adapters\". With the adapter, we can use \"serve statice\" with writing like the following:\r\n\r\n```ts\r\nimport { serveStatice } from 'hono/cloudflare-workers'\r\n```\r\n\r\nYou can now see that this is a Cloudflare Workers specific feature.\r\n\r\nThis PR introduces the following four adapters.\r\n\r\n* Cloudflare Workers\r\n* Cloudflare Pages\r\n* Bun\r\n* Deno\r\n\r\nCloudflare Workers, Bun, and Deno have the serve-static feature the same as the current. Cloudflare Pages is new! It exports the `handle` function. We can use it within [`/functions` mode](https://developers.cloudflare.com/pages/platform/functions/get-started/).\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/cloudflare-pages'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/api/hello', async (c) => {\r\n  return c.text('Hello Pages!')\r\n})\r\n\r\nexport const onRequest = handle(app)\r\n```\r\n\r\nThis will be helpful for developers who want to use Hono in Cloudflare Pages. Related: https://github.com/honojs/hono/discussions/802\r\n\r\nThis is a big breaking change, but we can do it with the major version for \"v3\". If this PR is merged, we could test its usability as \"RC\" for v3.\r\n\r\n## Naming\r\n\r\n> Shouldn't it be `hono/adapter/cloudflare-workers`?\r\n\r\nI know what you want to say. But I prefer short names, and that's what we've tried to keep in Hono. So, it's good to be `hono/cloudflare-workers`.\r\n\r\n> `handler` is suitable for \"Cloudflare Pages\"?\r\n\r\nI think it's better. This is a matter of taste, but would not be `serve`. This is because `serve` is used in Deno, and `node-server` is used in the sense of \"starting a server\". So, I think `handle` is a good choice.\r\n\r\n## Notice\r\n\r\nHowever, we should minimize the functionality of the adapters because one of the good things fo Hono is running on many runtimes with a platform-independent implementation.\r\n\r\n## UPDATE\r\n\r\nAlso added \"Next.js\" adapter. We can write Edge API Routes with this simple syntax:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/nextjs'\r\n\r\nexport const config = {\r\n  runtime: 'edge',\r\n}\r\n\r\nconst app = new Hono()\r\n\r\napp.get((c) => {\r\n  return c.text('Hello from Hono!')\r\n})\r\n\r\nexport default handle(app)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1535132092},{"id":1535606373,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/808","title":"it's not merged","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1535606373},{"id":1535701862,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/810","title":"Support for decoding JWT","body":"I wonder if the JWT middleware should have the option to decode the token and push it onto the context after verifying?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1535701862},{"id":1536046626,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/811","title":"perf: optimize parsing queries and headers / 19% faster than 2.7.2","body":"This PR is the same as #782 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1536046626},{"id":1537164318,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/813","title":"fix(context): enable destruction such `json`","body":"This will fix #812","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537164318},{"id":1537212760,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/814","title":"fix: fixed type error for optional parameters","body":"This fixes #804","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537212760},{"id":1537223821,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/815","title":"refactor: remove the json util not needed","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537223821},{"id":1537235233,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/816","title":"refactor(utils): remove minor mime types","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537235233},{"id":1537891717,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/817","title":"fix: export `Env`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537891717},{"id":1537904582,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/818","title":"undefined durable object ","body":"how to use durable object in honojs?\r\n\r\nhttps://developers.cloudflare.com/workers/learning/using-durable-objects/#accessing-persistent-storage-from-a-durable-object","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537904582},{"id":1537943658,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/819","title":"fix: correctly export pages adapter","body":"In v3 RC, `hono/cloudflare-pages` is currently unusable due to discordance between the `exports` field and actual build asset:\r\n\r\nhttps://github.com/honojs/hono/blob/2cb250faf9b8520719102b2a4e522307323ba803/package.json#L145-L149\r\n\r\nand\r\n\r\n```console\r\n$ mkdir repro && cd $_\r\n$ npm init -y && npm install hono@next\r\n$ ls node_modules/hono/dist/adapter/cloudflare-pages\r\nhandler.js\r\n```\r\n\r\nThis PR aims to fix the problem.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1537943658},{"id":1548121469,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/820","title":"Middleware poweredBy() causes error when using DurableObject","body":"It happened to me with this simple code:\r\n\r\n```javascript\r\nconst app = new Hono<{ Bindings: Env }>()\r\n\r\napp.use('*', poweredBy())\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello Hono!')\r\n})\r\n\r\napp.get('/test', async (c) => {\r\n  const id = c.env.AUTH.idFromName(c.env.DURABLE_AUTH_NAME)\r\n  const stub = c.env.AUTH.get(id)\r\n  return await stub.fetch(c.req)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nWhen I run `yarn dev --local` and then access `/test` in browser, the console explodes with this error:\r\n```\r\nTrace: TypeError: immutable\r\n    at Headers.append (/Users/polt/aces-workers/auth/node_modules/undici/lib/fetch/headers.js:227:13)\r\n    at /Users/polt/aces-workers/auth/node_modules/hono/dist/middleware/powered-by/index.js:5:19\r\n    at /Users/polt/aces-workers/auth/node_modules/hono/dist/hono.js:163:50\r\n    at EventTarget.[kDispatchFetch] (/Users/polt/aces-workers/auth/node_modules/@miniflare/core/src/standards/event.ts:385:13)\r\n    at Server.<anonymous> (/Users/polt/aces-workers/auth/node_modules/@miniflare/http-server/src/index.ts:298:20)\r\n    at Hono.errorHandler (/Users/polt/aces-workers/auth/node_modules/hono/dist/hono.js:29:15)\r\n    at /Users/polt/aces-workers/auth/node_modules/hono/dist/compose.js:52:27\r\n    at /Users/polt/aces-workers/auth/node_modules/hono/dist/hono.js:163:50\r\n    at EventTarget.[kDispatchFetch] (/Users/polt/aces-workers/auth/node_modules/@miniflare/core/src/standards/event.ts:385:\r\n⎔ Shutting down local server.\r\n```\r\n\r\nThe error goes away when I disable the middleware.\r\n\r\nI am using `hono-minimal` template with Hono upgraded to version 2.7.2.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1548121469},{"id":1548849502,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/821","title":"Optional Route parameter has wrong type","body":"Given the following route `/api/animal/:type?`, the `type` parameter is optional and can be undefined. However, the type returned from `req.param().type` is `string` instead of an optional string (i.e `type?: string`)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1548849502},{"id":1549072443,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/823","title":"[HELP ME!] Get Validator types correctly","body":"Can anyone help me/us? I have a question about the Types of TypeScript inside Hono. This will be a BIG help. Do you know I'm creating the Validator middleware? This middleware brings type safety to Hono.\r\n\r\nTo simplify matters, I'll use pseudocode, but what I want to do is the same. \r\n\r\nLook at this code. This is a successful pattern, and the value gotten by `c.getValidatedData()` has the proper type. Excellent.\r\n\r\n```ts\r\ntype Handler<T> = (c: Context<T>) => void\r\n\r\nclass App {\r\n  post: <T>(path: string, ...handler: Handler<T>[]) => void\r\n}\r\n\r\nconst app = new App()\r\n\r\nclass Context<T> {\r\n  getValidatedData: () => T\r\n}\r\n\r\nconst validator = <T>(validatorFunc: () => T): Handler<T> => {\r\n  return () => {}\r\n}\r\n\r\napp.post(\r\n  '/',\r\n  validator(() => {\r\n    // return validated result values\r\n    return {\r\n      title: 'Hello!',\r\n    }\r\n  }),\r\n  (c) => {\r\n    const data = c.getValidatedData() // get validated result\r\n    const { title } = data // title is `string`\r\n    type verify = Expect<Equal<typeof title, string>>\r\n  }\r\n)\r\n\r\n```\r\n\r\n<img width=\"528\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213441840-2537ee9d-5581-4058-9efe-e06e656f3130.png\">\r\n\r\nHowever, if adding a handler before the `validator` function, we will not get the type right.\r\n\r\n```ts\r\napp.post(\r\n  '/',\r\n  (c) => {}, // <--- Added a handler\r\n  validator(() => {\r\n    return {\r\n      title: 'Hello!',\r\n    }\r\n  }),\r\n  (c) => {\r\n    const data = c.getValidatedData()\r\n    const { title } = data <--- Error!\r\n    type verify = Expect<Equal<typeof title, string>>\r\n  }\r\n)\r\n```\r\n\r\n<img width=\"551\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213442316-e5dc5a02-a783-4bab-851e-1e670c320d5b.png\">\r\n\r\nThe same problem will be held on the following test inside of the Hono validator. If we add the handler before `validator`, the test will fail.\r\n\r\nhttps://github.com/honojs/hono/blob/465d346e4a530c11839dadc38ab558bcba275718/src/middleware/validator/index.test.ts#L23-L34\r\n\r\nActually, I know it's bad that the `T` value is fixed like the following line.\r\n\r\n```ts\r\npost: <T>(path: string, ...handler: Handler<T>[]) => void // <-- T is always T\r\n```\r\n\r\nThis is such a difficult problem for me. Does anyone know how to solve this? I cannot sleep at night because of this problem.\r\n\r\nFull code: https://gist.github.com/yusukebe/04445587ea5107e771a10da2c71beb53","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1549072443},{"id":1549111863,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/824","title":"build: validate package exports after build","body":"This PR checks if Hono has proper package exports using publint. See #822 for details.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1549111863},{"id":1551026787,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/825","title":"fix(request): `param()` return `''` instead of `undefined`","body":"This will fix #821 and includes a \"little\" breaking change.\r\n\r\nIf define the route with an optional parameter:\r\n\r\n```ts\r\n  app.get('/api/animal/:type?', (c) => {\r\n    const type = c.req.param('type')\r\n    return c.json({\r\n      type: type,\r\n    })\r\n  })\r\n```\r\n\r\nAnd then get access to `/api/animal`. Currently, the `type` will be `undefined`.\r\n\r\nIn this PR, that will be `''` - blank string.\r\n\r\nDoes `type` return `string` or `string | undefined`? was ambiguous, so we decided always to return `string` in this PR.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1551026787},{"id":1551626736,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/826","title":"fix(request): make optional param type correct","body":"This PR fix #821 \r\n\r\nIn the current version, if `/api/animal/:type?` is defined as a route, `type` will be `string` though it is \"optional\". It's the wrong type. In this PR, it will be `string | undefined`.\r\n\r\n<img width=\"508\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213830168-8efd6d2b-2f9f-4ce3-87bb-88b301179ed5.png\">\r\n\r\nI've made PR #825  which makes it a blank string `''` not `string | undefined`. But, after getting advice from @pmbanugo, I rethought it should be `string | undefined`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1551626736},{"id":1551651907,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/827","title":"Missing mime types","body":"Missing many common mime types such as: GLTF, GLB, MP4, M4P etc","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1551651907},{"id":1551964756,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/828","title":"CORS package not working correctly","body":"Since version v2.5.7, the cors package of Hono stopped doing its work. Version v2.5.6, the latest working version, had the following changes applied that are relevant to the issue: #792 #693 \r\n\r\n**Platform:** Cloudflare Workers using Wrangler v2.8.0 (localhost testing).\r\n\r\n**Steps to reproduce (v2.5.6 and v2.7.3)**\r\n\r\n1. Create a simple backend that uses cors package (default `*`).\r\n2. Run the server.\r\n3. Try to fetch from a different client.\r\n\r\n**Expected behaviour:** Fetching from a different client should happen normally.\r\n**Actual behaviour:** CORS errors even though cors package is used.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1551964756},{"id":1552005181,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/829","title":"perf: use `substring` and `//.test` ...","body":"This PR makes Hono faster with small improvements.\r\n\r\nNote:\r\n\r\n* `substring` is faster than `slice`\r\n* `indexOf ...` if faster than `//.test`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1552005181},{"id":1552015778,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/830","title":"fix(bun): fixed throwing the error in `HTTPException`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1552015778},{"id":1552097699,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/831","title":"feat(validator): support multiple handlers w/ complex patterns.","body":"This PR enable we can register multiple validator/handlers with complex patterns.\r\n\r\nSee: <https://github.com/honojs/hono/issues/823>\r\n\r\nThanks to everyone, it comes true. We can write like this:\r\n\r\n<img width=\"974\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213915299-df0ea5c5-cfec-43a0-a600-7c0a3f74e43b.png\">\r\n\r\nNote:\r\n\r\n* We can't register over ten handlers with validators. Have to write it down in the document when releasing the \"v3\".\r\n* There may be some things to fix, but I'll merge them in, to be fixed later.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1552097699},{"id":1552137631,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/832","title":"feat(req): support `c.req.valid('query')`","body":"In this PR, we can specify which type of data we want to get by `c.req.valid()` such as `c.req.valid('query')`.\r\n\r\n```ts\r\napi.get(\r\n  '/',\r\n  zValidator(\r\n    'query',\r\n    z.object({\r\n      page: z.number(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const { page } = c.req.valid('query')\r\n    return c.text(`Current page is ${page}`)\r\n  }\r\n)\r\n```\r\n\r\n<img width=\"593\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/213920690-0982dfd5-37c8-48dd-b569-f4a890bce295.png\">\r\n\r\nWe can call `c.req.valid()` with no arguments as always to get all the data.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1552137631},{"id":1552180827,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/833","title":"Cloudflare Pages adapter is incompatible with newer workerd's `PagesFunction` type","body":"With the following `tsconfig.json` and `index.ts`, TypeScript produces a compile error.\r\n\r\n```json5\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"esnext\",\r\n    \"module\": \"esnext\",\r\n    \"lib\": [\"esnext\"],\r\n    \"moduleResolution\": \"node\",\r\n    // note the compatibility date (I need to set this in order to get the correct type for FormData).\r\n    // if I omit the date, the error disappears.\r\n    \"types\": [\"@cloudflare/workers-types/2022-08-04\"],\r\n    \"noEmit\": true\r\n  }\r\n}\r\n```\r\n\r\n```typescript\r\nimport { Hono } from \"hono\";\r\nimport { handle } from \"hono/cloudflare-pages\";\r\n\r\nconst app = new Hono();\r\napp.get(\"/hello\", (c) => c.text(\"Hello from Hono!\"));\r\n\r\nexport const onRequest: PagesFunction = handle(app);\r\n```\r\n\r\nThe error message is:\r\n\r\n```console\r\nindex.ts:7:14 - error TS2322: Type '(eventContext: EventContext<{}, string, {}>) => Response | Promise<Response>' is not assignable to type 'PagesFunction<unknown, any, Record<string, unknown>>'.\r\n  Types of parameters 'eventContext' and 'context' are incompatible.\r\n    Type 'EventContext<unknown, any, Record<string, unknown>>' is not assignable to type 'EventContext<{}, string, {}>'.\r\n      The types of 'request.fetcher.fetch' are incompatible between these types.\r\n        Type '(input: RequestInfo, init?: RequestInit<RequestInitCfProperties>) => Promise<Response>' is not assignable to type '(input: import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInfo, init?: import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInit<import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInitCfProperties>) => Pr...'.\r\n          Types of parameters 'input' and 'input' are incompatible.\r\n            Type 'import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInfo' is not assignable to type 'RequestInfo'.\r\n              Type 'Request<unknown>' is not assignable to type 'RequestInfo'.\r\n                Type 'import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").Request<unknown>' is not assignable to type 'Request<unknown>'.\r\n                  The types of 'fetcher.fetch' are incompatible between these types.\r\n                    Type '(input: import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInfo, init?: import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInit<import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInitCfProperties>) => Pr...' is not assignable to type '(input: RequestInfo, init?: RequestInit<RequestInitCfProperties>) => Promise<Response>'.\r\n                      Types of parameters 'init' and 'init' are incompatible.\r\n                        Type 'RequestInit<RequestInitCfProperties>' is not assignable to type 'import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInit<import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").RequestInitCfProperties>'.\r\n                          Types of property 'body' are incompatible.\r\n                            Type 'BodyInit' is not assignable to type 'import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").BodyInit'.\r\n                              Type 'FormData' is not assignable to type 'BodyInit'.\r\n                                Type 'FormData' is not assignable to type 'import(\"/Users/ynkt/tmp/repro-hono/node_modules/@cloudflare/workers-types/index\").FormData'.\r\n                                  The types returned by 'get(...)' are incompatible between these types.\r\n                                    Type 'string | File' is not assignable to type 'string'.\r\n                                      Type 'File' is not assignable to type 'string'.\r\n\r\n7 export const onRequest: PagesFunction = handle(app);\r\n               ~~~~~~~~~\r\n```\r\nI don't have time to investigate further right now (time to go to bed here lol), but will look into this tomorrow's night.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1552180827},{"id":1552331346,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/834","title":"fix(context): set the header values of already set","body":"This will fix #828 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1552331346},{"id":1553899420,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/835","title":"CORS breaks Content-Type header","body":"It appears that using the CORS middleware will always set the response Content-Type header to `text/plain` even when returning `c.json()` for example.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1553899420},{"id":1554012766,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/836","title":"fix(context): fixed bug raw `Response` content-type is overwritten","body":"Fix #835 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1554012766},{"id":1554126873,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/837","title":"fix(cloudflare-pages): fix type incompatibility","body":"This will fix #833 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1554126873},{"id":1558063129,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/838","title":"Renew \"Pages Framework guide\" on Cloudflare Docs","body":"Thanks to @rishavs, we have the documentation for Cloudflare Pages on the Cloudflare official site. That is one of \"Pages Framework guides\". \r\n\r\n<https://developers.cloudflare.com/pages/framework-guides/deploy-a-honojs-site/>\r\n<img width=\"400\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/214833808-15218ffc-8b05-4909-9c04-01e2ec9b6c02.png\">\r\n\r\nAnd, in this PR https://github.com/cloudflare/cloudflare-docs/pull/7410, @dario-piotrowicz improved it. That's great for us.\r\n\r\nBut, what Hono can do with Pages is not limited to what this document describes. We can make it as API for SPA in `/functions` or we can use JSX middleware for SSR. So, we have to renew the document.\r\n\r\nLet's consider writing new documentation after v3 is released.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1558063129},{"id":1558904155,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/839","title":"[Question] Can we use Deno instead of Node on CF Workers?","body":"Hi.\r\n\r\nCan we use Deno+Hono instead of [Node+Hono](https://honojs.dev/docs/getting-started/cloudflare-workers/#npm-install-hono) at Cloudflare Workers platform? 🤔\r\n\r\nTIA for any help!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1558904155},{"id":1558961321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/840","title":"[Dark mode] for the docs page","body":"Please support dark mode at https://honojs.dev/docs 🙏","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1558961321},{"id":1559023961,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/841","title":"[Question] How to access the payload from JWT middleware?","body":"Please consider this JWT token:\r\n\r\n```\r\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.L1kqegif_E08s62Tn3u88uI-sc_bybuD23uFjAxiGvQ\r\n```\r\n\r\nAs you can see at [JWT debugger](https://jwt.io), it contains the following payload:\r\n\r\n```json\r\n{\r\n  \"sub\": \"1234567890\",\r\n  \"name\": \"John Doe\",\r\n  \"iat\": 1516239022\r\n}\r\n```\r\n\r\nand this is my example:\r\n\r\n```typescript\r\nimport { serve } from \"https://deno.land/std@0.174.0/http/server.ts\";\r\nimport { Hono } from \"https://deno.land/x/hono@v2.7.5/mod.ts\";\r\nimport { jwt } from \"https://deno.land/x/hono@v2.7.5/middleware.ts\";\r\n\r\nconst app = new Hono();\r\n\r\napp.use(\r\n  \"/*\",\r\n  jwt({\r\n    alg: \"HS512\",\r\n    secret: \"it-is-very-secret\",\r\n  })\r\n);\r\n\r\napp.get(\"/\", (c) => {\r\n  // *** HOW TO ACCESS THE JWT PAYLOAD HERE? ***\r\n  return c.text(\"You are authorized\");\r\n});\r\n\r\nserve(app.fetch);\r\n```\r\n\r\nbut, how to access this in my context/request?\r\n\r\nTIA for any help!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1559023961},{"id":1559783006,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/842","title":"[Question] Should I use v2 or wait for v3?","body":"Hi.\r\n\r\nI'm going to develop a small open source CRUD application, so considering Hono as framework, but I have two questions:\r\n\r\n- Should I wait for the V3?\r\n- If so, when will it be released?\r\n\r\nTIA for any information!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1559783006},{"id":1559984723,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/843","title":"chore: benchmark of routers","body":"Added benchmark scripts for measuring the speed of HTTP routers on Node.js and Bun.\r\n\r\nIn conclusion, in my environment, RegExpRouter is the third fastest on Node.js and the first or second fastest on Bun. Unfortunately, TrieRouter is slow (It's unavoidable because it has a sorting process). The difference in results between Bun and Node.js is probably due to Bun's regular expressions being faster.\r\n\r\n`@medley/router` used in [Elysia](https://elysiajs.com) and `koa-tree-router` are fast. Our advantage is that the file sizes are smaller than anywhere else. And routings are also flexible for users' use-cases. So it is not a comparison in general, but the result is the result.\r\n\r\n## Node.js\r\n\r\n```\r\n---------------------------------------------------------------------------- -----------------------------\r\n• short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     140.13 ns/iter (127.78 ns … 204.16 ns) 141.62 ns  191.8 ns 204.08 ns\r\nHono TrieRouter                       212.64 ns/iter (208.33 ns … 287.68 ns) 212.97 ns 268.56 ns 271.18 ns\r\n@medley/router                        102.52 ns/iter   (97.63 ns … 165.8 ns) 105.03 ns 148.52 ns 152.68 ns\r\nfind-my-way                            92.51 ns/iter  (85.26 ns … 105.31 ns)  95.32 ns 100.29 ns 102.32 ns\r\nkoa-tree-router                        89.93 ns/iter    (83.4 ns … 105.3 ns)  92.71 ns 101.17 ns 101.98 ns\r\ntrek-router                           118.23 ns/iter  (109.71 ns … 129.4 ns) 121.31 ns 126.18 ns 127.26 ns\r\nexpress (WARNING: includes handling)  650.04 ns/iter  (639.19 ns … 708.6 ns) 652.52 ns  708.6 ns  708.6 ns\r\nkoa-router                                 2 µs/iter     (1.92 µs … 2.07 µs)   2.04 µs   2.07 µs   2.07 µs\r\n\r\nsummary for short static - GET /user\r\n  koa-tree-router\r\n   1.03x faster than find-my-way\r\n   1.14x faster than @medley/router\r\n   1.31x faster than trek-router\r\n   1.56x faster than Hono RegExpRouter\r\n   2.36x faster than Hono TrieRouter\r\n   7.23x faster than express (WARNING: includes handling)\r\n   22.23x faster than koa-router\r\n```\r\n\r\n```\r\n• static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     142.34 ns/iter (138.05 ns … 167.55 ns) 147.97 ns 155.47 ns 159.52 ns\r\nHono TrieRouter                       228.57 ns/iter (220.69 ns … 245.82 ns) 232.03 ns 238.06 ns 238.82 ns\r\n@medley/router                        147.26 ns/iter (138.96 ns … 165.74 ns) 146.72 ns 158.76 ns 161.97 ns\r\nfind-my-way                           160.25 ns/iter (156.06 ns … 178.38 ns) 166.26 ns 175.93 ns 177.41 ns\r\nkoa-tree-router                       125.24 ns/iter (121.52 ns … 147.05 ns)  130.7 ns 136.93 ns 138.42 ns\r\ntrek-router                           174.28 ns/iter (170.04 ns … 193.75 ns) 179.93 ns  189.7 ns 190.02 ns\r\nexpress (WARNING: includes handling)  649.44 ns/iter (643.57 ns … 677.34 ns) 650.24 ns 677.34 ns 677.34 ns\r\nkoa-router                              1.93 µs/iter     (1.93 µs … 1.96 µs)   1.94 µs   1.96 µs   1.96 µs\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  koa-tree-router\r\n   1.14x faster than Hono RegExpRouter\r\n   1.18x faster than @medley/router\r\n   1.28x faster than find-my-way\r\n   1.39x faster than trek-router\r\n   1.83x faster than Hono TrieRouter\r\n   5.19x faster than express (WARNING: includes handling)\r\n   15.44x faster than koa-router\r\n```\r\n\r\n```\r\n• dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     177.13 ns/iter (171.65 ns … 205.41 ns) 181.94 ns  191.4 ns 197.01 ns\r\nHono TrieRouter                       346.78 ns/iter (335.76 ns … 370.08 ns) 347.71 ns  367.4 ns 370.08 ns\r\n@medley/router                        197.79 ns/iter (193.47 ns … 212.85 ns) 200.01 ns 210.51 ns 212.78 ns\r\nfind-my-way                            232.1 ns/iter (226.94 ns … 249.44 ns) 237.56 ns  244.4 ns 245.99 ns\r\nkoa-tree-router                       184.69 ns/iter (179.14 ns … 205.31 ns) 188.95 ns 195.54 ns 195.56 ns\r\ntrek-router                           274.84 ns/iter  (268.82 ns … 300.5 ns) 279.72 ns 292.21 ns  300.5 ns\r\nexpress (WARNING: includes handling)    1.24 µs/iter     (1.22 µs … 1.34 µs)   1.25 µs   1.34 µs   1.34 µs\r\nkoa-router                              1.94 µs/iter     (1.93 µs … 1.97 µs)   1.95 µs   1.97 µs   1.97 µs\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono RegExpRouter\r\n   1.04x faster than koa-tree-router\r\n   1.12x faster than @medley/router\r\n   1.31x faster than find-my-way\r\n   1.55x faster than trek-router\r\n   1.96x faster than Hono TrieRouter\r\n   6.99x faster than express (WARNING: includes handling)\r\n   10.97x faster than koa-router\r\n```\r\n\r\n```\r\n• mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     170.34 ns/iter (165.74 ns … 194.03 ns) 175.47 ns 181.81 ns 183.15 ns\r\nHono TrieRouter                       343.89 ns/iter (333.45 ns … 361.15 ns) 345.72 ns 360.02 ns 361.15 ns\r\n@medley/router                        163.86 ns/iter  (160.07 ns … 192.6 ns) 163.96 ns 175.24 ns 179.88 ns\r\nfind-my-way                           204.68 ns/iter (199.88 ns … 224.42 ns) 209.68 ns 219.07 ns 222.63 ns\r\nkoa-tree-router                        154.1 ns/iter (148.82 ns … 177.18 ns) 159.07 ns 164.34 ns 166.34 ns\r\ntrek-router                           242.45 ns/iter    (237 ns … 269.24 ns) 247.57 ns  256.9 ns 261.64 ns\r\nexpress (WARNING: includes handling)    1.37 µs/iter     (1.36 µs … 1.39 µs)   1.37 µs   1.39 µs   1.39 µs\r\nkoa-router                              1.96 µs/iter     (1.96 µs … 1.99 µs)   1.97 µs   1.99 µs   1.99 µs\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  koa-tree-router\r\n   1.06x faster than @medley/router\r\n   1.11x faster than Hono RegExpRouter\r\n   1.33x faster than find-my-way\r\n   1.57x faster than trek-router\r\n   2.23x faster than Hono TrieRouter\r\n   8.87x faster than express (WARNING: includes handling)\r\n   12.75x faster than koa-router\r\n```\r\n\r\n```\r\n• post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     144.05 ns/iter (139.87 ns … 167.19 ns) 149.78 ns 156.18 ns    158 ns\r\nHono TrieRouter                       348.78 ns/iter (338.37 ns … 370.21 ns) 350.56 ns 368.32 ns 370.21 ns\r\n@medley/router                        143.85 ns/iter (140.32 ns … 165.14 ns) 145.48 ns 156.71 ns 162.33 ns\r\nfind-my-way                           201.54 ns/iter (189.71 ns … 218.24 ns) 207.03 ns 211.65 ns 213.17 ns\r\nkoa-tree-router                       143.99 ns/iter (139.08 ns … 160.36 ns) 149.27 ns 157.24 ns 157.63 ns\r\ntrek-router                           208.32 ns/iter (203.03 ns … 234.24 ns) 213.88 ns 217.34 ns 223.78 ns\r\nexpress (WARNING: includes handling)     1.4 µs/iter     (1.39 µs … 1.43 µs)   1.41 µs   1.43 µs   1.43 µs\r\nkoa-router                              1.98 µs/iter     (1.95 µs … 2.09 µs)   1.97 µs   2.09 µs   2.09 µs\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  @medley/router\r\n   1x faster than koa-tree-router\r\n   1x faster than Hono RegExpRouter\r\n   1.4x faster than find-my-way\r\n   1.45x faster than trek-router\r\n   2.42x faster than Hono TrieRouter\r\n   9.77x faster than express (WARNING: includes handling)\r\n   13.76x faster than koa-router\r\n```\r\n\r\n```\r\n• long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     157.36 ns/iter (153.27 ns … 171.93 ns) 163.09 ns 169.76 ns 169.88 ns\r\nHono TrieRouter                       330.73 ns/iter (327.63 ns … 348.84 ns) 330.72 ns 340.64 ns 348.84 ns\r\n@medley/router                        119.18 ns/iter (116.12 ns … 137.22 ns) 120.24 ns 129.64 ns 135.63 ns\r\nfind-my-way                           202.87 ns/iter (197.88 ns … 227.67 ns) 208.79 ns 215.96 ns 220.36 ns\r\nkoa-tree-router                       118.05 ns/iter (114.83 ns … 132.02 ns) 118.89 ns 129.57 ns 131.43 ns\r\ntrek-router                           137.67 ns/iter (133.75 ns … 159.65 ns) 138.97 ns 148.92 ns 150.93 ns\r\nexpress (WARNING: includes handling)  946.79 ns/iter  (936.7 ns … 978.62 ns) 952.38 ns 978.62 ns 978.62 ns\r\nkoa-router                              1.97 µs/iter     (1.93 µs … 3.07 µs)   1.94 µs   3.07 µs   3.07 µs\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  koa-tree-router\r\n   1.01x faster than @medley/router\r\n   1.17x faster than trek-router\r\n   1.33x faster than Hono RegExpRouter\r\n   1.72x faster than find-my-way\r\n   2.8x faster than Hono TrieRouter\r\n   8.02x faster than express (WARNING: includes handling)\r\n   16.69x faster than koa-router\r\n```\r\n\r\n```\r\n• wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     151.54 ns/iter (147.36 ns … 170.38 ns) 157.15 ns 161.79 ns 164.05 ns\r\nHono TrieRouter                       251.79 ns/iter (241.96 ns … 263.23 ns) 254.75 ns 261.34 ns 262.23 ns\r\n@medley/router                        112.59 ns/iter (109.32 ns … 128.28 ns) 113.77 ns 123.61 ns 126.79 ns\r\nfind-my-way                           178.03 ns/iter  (170.61 ns … 197.7 ns)  183.5 ns 189.43 ns  191.6 ns\r\nkoa-tree-router                       155.66 ns/iter (149.68 ns … 170.77 ns) 160.97 ns    165 ns 165.39 ns\r\ntrek-router                           183.27 ns/iter (176.93 ns … 217.39 ns) 187.99 ns 203.07 ns 210.88 ns\r\nexpress (WARNING: includes handling)    1.59 µs/iter     (1.57 µs … 1.62 µs)   1.59 µs   1.62 µs   1.62 µs\r\nkoa-router                              1.94 µs/iter     (1.93 µs … 1.96 µs)   1.94 µs   1.96 µs   1.96 µs\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.35x faster than Hono RegExpRouter\r\n   1.38x faster than koa-tree-router\r\n   1.58x faster than find-my-way\r\n   1.63x faster than trek-router\r\n   2.24x faster than Hono TrieRouter\r\n   14.08x faster than express (WARNING: includes handling)\r\n   17.21x faster than koa-router\r\n```\r\n\r\n```\r\n• all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     718.63 ns/iter  (714.32 ns … 731.9 ns) 718.27 ns  731.9 ns  731.9 ns\r\nHono TrieRouter                         1.81 µs/iter     (1.78 µs … 1.93 µs)   1.81 µs   1.93 µs   1.93 µs\r\n@medley/router                        636.27 ns/iter (616.76 ns … 658.81 ns) 643.83 ns 658.81 ns 658.81 ns\r\nfind-my-way                             1.04 µs/iter     (1.03 µs … 1.06 µs)   1.04 µs   1.06 µs   1.06 µs\r\nkoa-tree-router                       664.27 ns/iter (656.67 ns … 698.83 ns) 668.99 ns 698.83 ns 698.83 ns\r\ntrek-router                             1.03 µs/iter     (1.02 µs … 1.05 µs)   1.03 µs   1.05 µs   1.05 µs\r\nexpress (WARNING: includes handling)     7.8 µs/iter   (7.46 µs … 180.96 µs)   7.71 µs   8.25 µs   8.46 µs\r\nkoa-router                             13.62 µs/iter  (13.04 µs … 168.54 µs)  13.33 µs  14.25 µs  14.71 µs\r\n\r\nsummary for all together\r\n  @medley/router\r\n   1.04x faster than koa-tree-router\r\n   1.13x faster than Hono RegExpRouter\r\n   1.62x faster than trek-router\r\n   1.63x faster than find-my-way\r\n   2.84x faster than Hono TrieRouter\r\n   12.27x faster than express (WARNING: includes handling)\r\n   21.4x faster than koa-router\r\n```\r\n\r\n## Bun\r\n\r\n```\r\n---------------------------------------------------------------------------- -----------------------------\r\n• short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     168.73 ns/iter (155.26 ns … 529.23 ns) 160.26 ns 300.99 ns 442.68 ns\r\nHono TrieRouter                       299.78 ns/iter (283.41 ns … 566.59 ns) 292.11 ns 392.59 ns 566.59 ns\r\n@medley/router                        138.87 ns/iter (130.71 ns … 456.34 ns) 135.23 ns 214.85 ns 339.99 ns\r\nfind-my-way                           144.66 ns/iter (133.18 ns … 540.48 ns) 136.62 ns 214.69 ns 269.18 ns\r\nkoa-tree-router                       145.17 ns/iter (136.34 ns … 319.57 ns) 143.15 ns 209.65 ns 228.62 ns\r\ntrek-router                           202.52 ns/iter  (195.13 ns … 297.4 ns) 198.32 ns 274.77 ns 286.13 ns\r\nexpress (WARNING: includes handling)  484.38 ns/iter (426.34 ns … 627.66 ns) 514.05 ns 587.09 ns 627.66 ns\r\nkoa-router                            243.78 ns/iter (237.05 ns … 368.07 ns) 238.96 ns 311.95 ns 314.21 ns\r\n\r\nsummary for short static - GET /user\r\n  @medley/router\r\n   1.04x faster than find-my-way\r\n   1.05x faster than koa-tree-router\r\n   1.22x faster than Hono RegExpRouter\r\n   1.46x faster than trek-router\r\n   1.76x faster than koa-router\r\n   2.16x faster than Hono TrieRouter\r\n   3.49x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     171.63 ns/iter (163.48 ns … 265.79 ns)  166.2 ns 248.03 ns 257.31 ns\r\nHono TrieRouter                       347.94 ns/iter (331.75 ns … 415.75 ns) 346.66 ns 408.46 ns 415.75 ns\r\n@medley/router                        183.44 ns/iter (177.56 ns … 326.72 ns) 179.72 ns 256.21 ns  266.2 ns\r\nfind-my-way                           179.22 ns/iter (169.39 ns … 310.33 ns) 172.55 ns 245.25 ns 259.35 ns\r\nkoa-tree-router                       219.69 ns/iter (202.87 ns … 545.36 ns) 212.75 ns 391.11 ns 414.03 ns\r\ntrek-router                           323.44 ns/iter (311.88 ns … 490.22 ns) 317.66 ns 468.47 ns 490.22 ns\r\nexpress (WARNING: includes handling)  514.78 ns/iter (464.45 ns … 887.69 ns) 540.96 ns 792.68 ns 887.69 ns\r\nkoa-router                            247.07 ns/iter (240.22 ns … 324.99 ns) 242.82 ns 308.39 ns 313.53 ns\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  Hono RegExpRouter\r\n   1.04x faster than find-my-way\r\n   1.07x faster than @medley/router\r\n   1.28x faster than koa-tree-router\r\n   1.44x faster than koa-router\r\n   1.88x faster than trek-router\r\n   2.03x faster than Hono TrieRouter\r\n   3x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     200.52 ns/iter (187.81 ns … 815.73 ns) 191.07 ns 283.99 ns  319.7 ns\r\nHono TrieRouter                       537.26 ns/iter (504.63 ns … 743.42 ns) 558.99 ns 625.86 ns 743.42 ns\r\n@medley/router                        232.64 ns/iter (224.27 ns … 397.93 ns) 228.27 ns  302.4 ns 304.69 ns\r\nfind-my-way                            255.5 ns/iter    (243 ns … 394.65 ns) 248.55 ns 353.18 ns 374.52 ns\r\nkoa-tree-router                       317.31 ns/iter (296.53 ns … 695.05 ns) 309.98 ns 616.73 ns 695.05 ns\r\ntrek-router                           477.65 ns/iter (459.42 ns … 599.56 ns) 474.82 ns 552.95 ns 599.56 ns\r\nexpress (WARNING: includes handling)  680.13 ns/iter (622.32 ns … 989.88 ns) 705.92 ns 989.88 ns 989.88 ns\r\nkoa-router                            260.56 ns/iter (245.98 ns … 405.98 ns) 259.22 ns 356.82 ns 401.38 ns\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono RegExpRouter\r\n   1.16x faster than @medley/router\r\n   1.27x faster than find-my-way\r\n   1.3x faster than koa-router\r\n   1.58x faster than koa-tree-router\r\n   2.38x faster than trek-router\r\n   2.68x faster than Hono TrieRouter\r\n   3.39x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     185.69 ns/iter (174.91 ns … 350.57 ns) 178.87 ns 248.85 ns 250.18 ns\r\nHono TrieRouter                       495.27 ns/iter (467.85 ns … 693.42 ns) 517.84 ns 669.43 ns 693.42 ns\r\n@medley/router                         204.9 ns/iter (196.53 ns … 435.48 ns) 201.86 ns 268.48 ns 271.07 ns\r\nfind-my-way                           231.49 ns/iter (218.18 ns … 651.66 ns) 224.91 ns 303.14 ns 422.08 ns\r\nkoa-tree-router                       232.55 ns/iter (213.71 ns … 642.89 ns) 231.68 ns 335.15 ns  457.5 ns\r\ntrek-router                           375.87 ns/iter (357.45 ns … 453.71 ns) 371.06 ns 452.52 ns 453.71 ns\r\nexpress (WARNING: includes handling)  744.96 ns/iter (690.56 ns … 874.35 ns) 778.95 ns 874.35 ns 874.35 ns\r\nkoa-router                            280.95 ns/iter (273.88 ns … 354.77 ns) 277.15 ns 354.35 ns 354.77 ns\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  Hono RegExpRouter\r\n   1.1x faster than @medley/router\r\n   1.25x faster than find-my-way\r\n   1.25x faster than koa-tree-router\r\n   1.51x faster than koa-router\r\n   2.02x faster than trek-router\r\n   2.67x faster than Hono TrieRouter\r\n   4.01x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                      176.4 ns/iter (165.13 ns … 399.69 ns) 170.03 ns 340.78 ns 343.89 ns\r\nHono TrieRouter                        481.9 ns/iter  (459.2 ns … 709.09 ns) 497.73 ns 544.45 ns 709.09 ns\r\n@medley/router                        196.83 ns/iter (190.49 ns … 276.23 ns) 193.87 ns 257.18 ns 258.75 ns\r\nfind-my-way                           230.39 ns/iter (216.49 ns … 432.98 ns) 225.69 ns 362.38 ns 396.37 ns\r\nkoa-tree-router                       197.11 ns/iter  (185.3 ns … 409.62 ns) 189.76 ns 339.91 ns  369.8 ns\r\ntrek-router                           342.75 ns/iter (320.11 ns … 482.31 ns) 338.26 ns  424.3 ns 482.31 ns\r\nexpress (WARNING: includes handling)  771.15 ns/iter (719.96 ns … 868.24 ns)  801.8 ns 868.24 ns 868.24 ns\r\nkoa-router                            281.43 ns/iter    (270 ns … 845.24 ns)  273.8 ns 431.55 ns 845.24 ns\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  Hono RegExpRouter\r\n   1.12x faster than @medley/router\r\n   1.12x faster than koa-tree-router\r\n   1.31x faster than find-my-way\r\n   1.6x faster than koa-router\r\n   1.94x faster than trek-router\r\n   2.73x faster than Hono TrieRouter\r\n   4.37x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     186.33 ns/iter (173.07 ns … 471.34 ns) 176.23 ns 423.24 ns  447.8 ns\r\nHono TrieRouter                       596.31 ns/iter (552.77 ns … 885.07 ns) 622.17 ns 885.07 ns 885.07 ns\r\n@medley/router                         153.5 ns/iter (146.78 ns … 276.27 ns) 150.01 ns 228.09 ns 233.19 ns\r\nfind-my-way                           225.42 ns/iter (211.88 ns … 470.68 ns) 216.22 ns  368.7 ns 374.38 ns\r\nkoa-tree-router                       149.99 ns/iter  (138.15 ns … 267.1 ns) 145.84 ns 238.43 ns 257.82 ns\r\ntrek-router                           223.83 ns/iter (214.91 ns … 438.52 ns)  219.3 ns 294.52 ns 384.65 ns\r\nexpress (WARNING: includes handling)  704.11 ns/iter  (654.1 ns … 871.75 ns) 731.77 ns 871.75 ns 871.75 ns\r\nkoa-router                            249.48 ns/iter (240.57 ns … 461.07 ns) 243.83 ns 328.85 ns 430.88 ns\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  koa-tree-router\r\n   1.02x faster than @medley/router\r\n   1.24x faster than Hono RegExpRouter\r\n   1.49x faster than trek-router\r\n   1.5x faster than find-my-way\r\n   1.66x faster than koa-router\r\n   3.98x faster than Hono TrieRouter\r\n   4.69x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     179.74 ns/iter  (168.36 ns … 505.2 ns)  172.1 ns 301.09 ns 429.03 ns\r\nHono TrieRouter                       380.33 ns/iter (356.47 ns … 660.87 ns)  379.8 ns 593.38 ns 660.87 ns\r\n@medley/router                        170.49 ns/iter (161.83 ns … 295.87 ns) 167.55 ns 232.78 ns 261.57 ns\r\nfind-my-way                           204.86 ns/iter (191.16 ns … 339.58 ns) 199.85 ns 288.19 ns 301.88 ns\r\nkoa-tree-router                       246.26 ns/iter (232.76 ns … 343.84 ns) 239.21 ns 317.59 ns 323.75 ns\r\ntrek-router                           336.63 ns/iter (324.76 ns … 511.53 ns) 329.93 ns 421.44 ns 511.53 ns\r\nexpress (WARNING: includes handling)  835.68 ns/iter (786.98 ns … 921.52 ns) 865.44 ns 921.52 ns 921.52 ns\r\nkoa-router                            254.61 ns/iter    (247 ns … 444.44 ns) 250.19 ns 319.26 ns 320.58 ns\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.05x faster than Hono RegExpRouter\r\n   1.2x faster than find-my-way\r\n   1.44x faster than koa-tree-router\r\n   1.49x faster than koa-router\r\n   1.97x faster than trek-router\r\n   2.23x faster than Hono TrieRouter\r\n   4.9x faster than express (WARNING: includes handling)\r\n```\r\n\r\n```\r\n• all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     704.36 ns/iter (642.59 ns … 840.34 ns) 727.19 ns 840.34 ns 840.34 ns\r\nHono TrieRouter                         2.61 µs/iter     (2.53 µs … 2.89 µs)   2.63 µs   2.89 µs   2.89 µs\r\n@medley/router                        706.27 ns/iter (680.35 ns … 813.39 ns) 729.65 ns 813.39 ns 813.39 ns\r\nfind-my-way                             1.05 µs/iter   (987.37 ns … 1.38 µs)   1.07 µs   1.38 µs   1.38 µs\r\nkoa-tree-router                       951.36 ns/iter     (894.3 ns … 1.1 µs) 978.63 ns    1.1 µs    1.1 µs\r\ntrek-router                             1.79 µs/iter     (1.74 µs … 1.86 µs)   1.82 µs   1.86 µs   1.86 µs\r\nexpress (WARNING: includes handling)    4.37 µs/iter     (4.26 µs … 5.09 µs)   4.36 µs   5.09 µs   5.09 µs\r\nkoa-router                              1.37 µs/iter     (1.33 µs … 1.56 µs)    1.4 µs   1.56 µs   1.56 µs\r\n\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1x faster than @medley/router\r\n   1.35x faster than koa-tree-router\r\n   1.5x faster than find-my-way\r\n   1.94x faster than koa-router\r\n   2.54x faster than trek-router\r\n   3.71x faster than Hono TrieRouter\r\n   6.2x faster than express (WARNING: includes handling)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1559984723},{"id":1560132265,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/844","title":"Use Runtime Keys by WinterCG","body":"`c.runtime` returns which runtime is currently running on. The current keys are below:\r\n\r\n```ts\r\ntype Runtime = 'node' | 'deno' | 'bun' | 'cloudflare' | 'fastly' | 'vercel' | 'lagon' | 'other'\r\n```\r\n\r\nRecently the WinterCG is [defining the \"Runtime Keys\"](https://github.com/wintercg/runtime-keys/pull/2). We can see the draft in the below link:\r\n\r\n* <https://runtime-keys.proposal.wintercg.org>\r\n\r\nAccording to this document, there are other names for the keys than the ones we have defined. For example, we defined the Cloudflare Workers as `cloudflare`, but WinterCG named it `workerd`.\r\n\r\nSince Hono should be WinterCG compliant, we should use these keys (`workerd` etc.). The only thing is that Fastly has not joined WinterCG, so that should stay as it is.\r\n\r\nThis change will be a Breaking Change, so let's add it to the [next branch](https://github.com/honojs/hono/tree/next).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1560132265},{"id":1560653068,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/845","title":"feat(reg-exp-router): Lookup static path by using Object","body":"Optimize paths that do not contain variables by doing a lookup via Object.\r\nThis optimization will also reduce the size of the regular expression generated when static paths are included, so there will be no negative impact on the overall result.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1560653068},{"id":1560877377,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/846","title":"Conflict with Cloudfare D1 beta and durable objects","body":"When using cloudflare in a worker that is bound to a durable object that also has d1 bound, I get the following:\r\n\r\n```\r\nTrace: TypeError: Fetch API cannot load: /get/rows\r\n    at d1-beta-facade.entry.js:1529:16\r\n    at Hono.dispatch (d1-beta-facade.entry.js:1192:15)\r\n    at Hono.fetch (d1-beta-facade.entry.js:1093:19)\r\n    at Object.fetch (d1-beta-facade.entry.js:1744:28) {\r\n  stack: TypeError: Fetch API cannot load: /get/rows\r\n    at…at Object.fetch (d1-beta-facade.entry.js:1744:28),\r\n  message: Fetch API cannot load: /get/rows\r\n}\r\n    at logConsoleMessage (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:122443:25)\r\n    at WebSocket2.<anonymous> (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:122217:13)\r\n    at WebSocket2.onMessage (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:96544:22)\r\n    at WebSocket2.emit (node:events:525:35)\r\n    at Receiver2.receiverOnMessage (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:97432:24)\r\n    at Receiver2.emit (node:events:513:28)\r\n    at Receiver2.dataMessage (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:96096:18)\r\n    at Receiver2.getData (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:96038:21)\r\n    at Receiver2.startLoop (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:95815:26)\r\n    at Receiver2._write (/Users/dangoodman/code/UserMachines/node_modules/wrangler/wrangler-dist/cli.js:95772:14)\r\n```\r\n\r\nIf I use a route that does not communicate with a durable object (but the worker is still bound to d1) then there is no issue. It seems to be when ever I try to fetch from within a worker to a durable object while d1 is also bound.\r\n\r\nWrangler.toml looks like\r\n\r\n```toml\r\nname = \"gateway\"\r\nmain = \"services/gateway/index.ts\"\r\ncompatibility_date = \"2023-01-26\"\r\n\r\nkv_namespaces = [\r\n  { binding = \"KV\", id = \"xxx\", preview_id = \"xxx\" }\r\n]\r\n\r\ndurable_objects.bindings = [\r\n  {name = \"QUEUE\", class_name = \"Queue\"},\r\n  {name = \"STATE\", class_name = \"State\"}\r\n]\r\n\r\n[[ d1_databases ]]\r\nbinding = \"REGISTRY\"\r\ndatabase_name = \"testdb\"\r\ndatabase_id = \"xxx\"\r\npreview_database_id = xxx\"\r\n```","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1560877377},{"id":1560985225,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/847","title":"[Help] class-validator middleware is not working","body":"Hi.\r\n\r\nI have been trying to develop a [class-validator](https://github.com/typestack/class-validator) middleware, but it is failing to validade.\r\n\r\nMy current code is:\r\n\r\n```typescript\r\n// middleware/class_validator.ts\r\nimport { MiddlewareHandler } from \"https://deno.land/x/hono@v2.7.5/types.ts\";\r\nimport { validate } from \"https://cdn.skypack.dev/class-validator@0.14.0?dts\";\r\nimport { instanceToPlain } from \"https://cdn.skypack.dev/class-transformer@0.5.1?dts\";\r\n\r\nexport const class_validator = <T>(): MiddlewareHandler => {\r\n  return async (c, next) => {\r\n    const json = await c.req.json<T>();\r\n    const plain = instanceToPlain<T>(json);\r\n    const errors = await validate(plain);\r\n    if (errors?.length > 0) {\r\n      return c.json(errors, 400);\r\n    }\r\n    await next();\r\n  };\r\n};\r\n```\r\n\r\n```typescript\r\n// model/post.ts\r\nimport { Max } from \"https://cdn.skypack.dev/class-validator@0.14.0?dts\";\r\n\r\nexport class Post {\r\n  @Max(3)\r\n  title!: string;\r\n}\r\n```\r\n\r\n```typescript\r\n// main.ts\r\nimport { serve } from \"https://deno.land/std@0.174.0/http/server.ts\";\r\nimport { Hono } from \"https://deno.land/x/hono@v2.7.5/mod.ts\";\r\n\r\nimport { class_validator } from \"./middleware/class_validator.ts\";\r\n\r\nimport { Post } from \"./model/post.ts\";\r\n\r\nconst app = new Hono();\r\n\r\napp.post(\"/\", class_validator<Post>(), (c) => {\r\n  return c.text(\"OK\");\r\n});\r\n\r\nserve(app.fetch);\r\n```\r\nand my example to test:\r\n\r\n```bash\r\n% curl -w '\\n' --json '{\"title\":\"aw yeah\"}' http://localhost:8000/\r\nOK\r\n```\r\n\r\nAs you can see above, it is returning `OK`, but it should return `[{\"target\":{},\"property\":\"title\",\"children\":[],\"constraints\":{\"max\":\"title must not be greater than 3\"}}]`. 😞\r\n\r\nCan you help me to make this middleware working?\r\n\r\nTIA for any help!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1560985225},{"id":1560992014,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/848","title":"[Feature request] Uploads support","body":"Hi.\r\n\r\nIt would be nice to make it easy to handle uploads.\r\n\r\nReferences:\r\n\r\n- https://github.com/denoland/deploy_feedback/issues/328\r\n- https://expressjs.com/en/resources/middleware/multer.html\r\n- https://github.com/richardgirges/express-fileupload","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1560992014},{"id":1561024003,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/849","title":"Send 204 response","body":"Hi, me again, still great library, just curious how you send 204 request, i.e. 'No Content'.\r\n\r\nUsing \"hono\": \"^2.7.5\"\r\n\r\n[Documentation ](https://honojs.dev/docs/api/context/#shortcuts-for-response)says `c.status()` should set status so I thought returning context when status equal 204 would work.\r\n\r\nTried returning `ctx.status(204)`\r\n\r\nHowever I get this error:\r\n\r\n```\r\n Context is not finalized. You may forget returning Response object or `await next()`\r\n    at index.js:1240:17 {\r\n  stack: Error: Context is not finalized. You may forget reÔÇª object or `await next()`\r\n    at index.js:1240:17,\r\n  message: Context is not finalized. You may forget returning Response object or `await next()`\r\n}\r\nonError: ctx Context {\r\n  error: undefined,\r\n  _status: 204,\r\n  _pretty: false,\r\n  _prettySpace: 2,\r\n  header:\r\n  ...\r\n}\r\n```\r\n\r\nThe only thing that I observed that works is:\r\n```\r\nreturn ctx.text(undefined, 204)\r\nor\r\nctx.status(204);\r\nreturn ctx.text(undefined);\r\n```\r\n\r\nThe voice of reasons states that content ought to be undefined unless we specifically set it to be something? Or what do you guys think? ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1561024003},{"id":1561089431,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/850","title":"Rename runtime keys","body":"Resolves #844.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1561089431},{"id":1561384164,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/851","title":"Sub-Instances of Hono don't trigger onError","body":"Hi!\r\nI'm currently restructuring my project's routes to use multiple sub-instances for their respective category. Hono supports grouping multiple instances with [`hono.route()`](https://honojs.dev/docs/api/routing/#grouping), though it seems like it's not possible to define a custom error handler for a sub-instance.  \r\n  \r\nHere is my example code:\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { serve } from \"https://deno.land/std/http/server.ts\";\r\n\r\nconst hono = new Hono();\r\n\r\nconst route = new Hono();\r\n\r\nroute.onError((err, ctx) => {\r\n  return ctx.text(\"Caught error!\", 500);\r\n});\r\n\r\nroute.get(\"/\", (ctx) => {\r\n  throw new Error(\"Unhandled Error.\");\r\n});\r\n\r\nhono.route(\"/\", route);\r\n\r\nserve(hono.fetch, { port: 3000 });\r\n```\r\n\r\nThe endpoint `/`, defined by `route`, will throw an Error. The instance `route` *should* catch and handle errors, because of `route.onError(...)`.  \r\nThough when hitting the endpoint `/`, the thrown error gets printed to the console and the API returns `500 - Internal Server Error`.\r\n```\r\nTrace: Error: Unhandled Error.\r\n    at file:///workspace/src/server.ts:13:9\r\n    at Hono.dispatch (https://deno.land/x/hono@v2.7.5/hono.ts:216:15)\r\n    at Server.fetch (https://deno.land/x/hono@v2.7.5/hono.ts:263:17)\r\n    at Server.#respond (https://deno.land/std@0.174.0/http/server.ts:299:37)\r\n    at Server.#serveHttp (https://deno.land/std@0.174.0/http/server.ts:346:20)\r\n    at Hono.errorHandler (https://deno.land/x/hono@v2.7.5/hono.ts:111:13)\r\n    at Hono.handleError (https://deno.land/x/hono@v2.7.5/hono.ts:191:19)\r\n    at Hono.dispatch (https://deno.land/x/hono@v2.7.5/hono.ts:219:21)\r\n    at Server.fetch (https://deno.land/x/hono@v2.7.5/hono.ts:263:17)\r\n    at Server.#respond (https://deno.land/std@0.174.0/http/server.ts:299:37)\r\n    at Server.#serveHttp (https://deno.land/std@0.174.0/http/server.ts:346:20)\r\n```  \r\nThis looks like a bug to me. I appreciate any help!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1561384164},{"id":1561526116,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/852","title":"Add runtime conditions into `package.json`","body":"Hono supports JavaScript multi-runtime, and WinterCG defines the standard keys for that (`c.runtime` already returns the runtime key on which the app runtime running). Then I know we can include the keys in `package.json` for specifiying conditions like Wrangler doing:\r\n\r\n* https://twitter.com/jasnell/status/1619450523912126464\r\n* https://github.com/cloudflare/wrangler2/pull/2629\r\n\r\nI don't know yet what effect it will have on Hono, but I think it is good we will challenge it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1561526116},{"id":1562419791,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/853","title":"feat: rewnew output types","body":"This PR renews output types emitted from \"app\".\r\n\r\nBefore this PR, it will output types with `app.build()` and the client such as `hc` use it. But in this PR, we don't have to use `app.build()`, and emitted types are changed:\r\n\r\nFor example, write the endpoint with the validator middleware:\r\n\r\n```ts\r\nconst route = app.post(\r\n  '/api/v2/posts',\r\n  validator(\r\n    'json',\r\n    validatorFunc(\r\n      z.object({\r\n        id: z.number(),\r\n        title: z.string(),\r\n      })\r\n    )\r\n  ),\r\n  (c) => {\r\n    return c.jsonT({\r\n      success: true,\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nAnd we can get the type:\r\n\r\n```ts\r\nexport type AppType = typeof route\r\ntype Schema = ExtractSchema<typeof route>\r\n```\r\n\r\nThe extracted types are the followings. `Schema` will be:\r\n\r\n```ts\r\ntype Schema = {\r\n  '/api/v2/posts': {\r\n    $post: {\r\n      input: {\r\n        json: {\r\n          id: number\r\n          title: string\r\n        }\r\n      }\r\n      output: {\r\n        success: boolean\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI think this format is very useful for writing the client.  Just a simple use of this types and the client looks like this.\r\n\r\nhttps://user-images.githubusercontent.com/10682/215485265-a74e85e1-ea8a-44f3-abf3-423b08051222.mov\r\n\r\nThis client has no implementation but is more type-safe.\r\n\r\nI think this is good PR.\r\n\r\nBTW:\r\n\r\nI am now thinking of rewriting the client and creating it in the core project as `hono/client`. This is because it is easier to handle and develop.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1562419791},{"id":1563415053,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/854","title":"POC: feat: use added app's errorHandler","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1563415053},{"id":1564570758,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/855","title":"Can't get working 404 handler with honojs and CloudFlare Pages","body":"Trying simple CloudFlare Pages example \r\n\r\n```javascript\r\nimport { Hono } from 'hono';\r\nconst app = new Hono();\r\n\r\napp.get('*', async ctx => await ctx.env.ASSETS.fetch(ctx.req));\r\n\r\napp.notFound(ctx => {\r\n    return ctx.text('Custom 404 Message', 404);\r\n})\r\n\r\nexport default app;\r\n```\r\n\r\nbut don't have 404 message on missing assets","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1564570758},{"id":1565872087,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/856","title":"fix(breaking): obsolete no args `c.req.valid()`","body":"This PR obsolete `c.req.valid()` has no arguments.\r\n\r\nWe can **not** do:\r\n\r\n```ts\r\nconst { page } = c.req.valid()\r\n```\r\n\r\nstill we can do:\r\n\r\n```ts\r\nconst { page } = c.req.valid('query')\r\n```\r\n\r\nThe `c.req.valid()` could merge the same key, and result may be unintended values. Then, this change allowed us to remove `utils/object.ts`, thus reducing the bundle size and package size.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1565872087},{"id":1566083876,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/857","title":"refactor(request): don't cache jsonBody, formBody, and headers","body":"Don't cache JSON body, Form body, and Headers in `HonoRequest`. These were used in Validator, but we no longer need to cache them, so we removed them. There is no performance degradation unless multiple Validations are performed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1566083876},{"id":1566306701,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/858","title":"req.cf?.city is not included in the type","body":"I'm trying to access `req.cf?.city` and `req.cf?.country` but I get a TypeScript error. How can I get this value and why doesn't it cover all the available properties?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1566306701},{"id":1566983495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/859","title":"fix(req): `never` if `c.req.valid()`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1566983495},{"id":1566992293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/860","title":"perf(context): improve handling response","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1566992293},{"id":1568768708,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/861","title":"refactor: obsolute `CustomHandler`","body":"It's not needed. Use `Handler` or `MiddlewareHandler` instead.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1568768708},{"id":1568861373,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/862","title":"feat: `hc` - Hono Client","body":"This PR introduces a new feature, \"Hono Client\". \"hc\" for the same purpose was built as `@hono/hc`, but making it obsolete, includes it in the core package.\r\n\r\n## Usage\r\n\r\nFirst, create the API server. Write the endpoint and export the type of route:\r\n\r\n```ts\r\n// server.ts\r\nimport { Hono } from 'hono'\r\nimport { z } from 'zod'\r\nimport { zValidator } from '@hono/zod-validator'\r\n\r\nconst app = new Hono()\r\n\r\nconst route = app.post(\r\n  '/api/v2/posts',\r\n  zValidator(\r\n    'json',\r\n    z.object({\r\n      id: z.number(),\r\n      title: z.string(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const { id, title } = c.req.valid('json')\r\n   // Use `c.jsonT()` to emit types\r\n    return c.jsonT({\r\n      message: `${id} is ${title}`,\r\n      success: true,\r\n    })\r\n  }\r\n)\r\n\r\nexport type AppType = typeof route // export the type\r\n```\r\n\r\nSecond, start writing the `client.ts`, import the type from `server.ts` and pass it to the `hc` function as Generics:\r\n\r\n```ts\r\nimport { hc } from 'hono/client'\r\n\r\nimport type { AppType } from './server'\r\n\r\nconst client = hc<AppType>('http://localhost:8787/')\r\n```\r\n\r\nThen, time for magic:\r\n\r\nhttps://user-images.githubusercontent.com/10682/216456881-7c9d4bad-e669-4cfb-a027-86ce98074973.mov\r\n\r\nIt will suggest the code based on the path and schema of the API server endpoint.\r\n\r\nAnd handle the response:\r\n\r\nhttps://user-images.githubusercontent.com/10682/216457919-1484ed48-b1d3-4428-b6be-565f7a9ee879.mov\r\n\r\n`data` has the appropriate type. Great!\r\n\r\nThe final code is here:\r\n\r\n```ts\r\nconst res = await client.api.v2.posts.$post({\r\n  json: {\r\n    id: 123,\r\n    title: 'Hello!!',\r\n  },\r\n})\r\n\r\nconst data = await res.json()\r\n\r\nconsole.log(data.message)\r\n```\r\n\r\n### Don't you use `@hono/hc`?\r\n\r\nSeparating core packages and `hc` is good, but it makes development difficult. For example, if we want to refer to the same `Hono` or `ValidationTypes` types, but the projects are separated, it is difficult to do so, and type errors occur frequently. Even if we include it in the core package, it is independent of `hono`, so the bundle size will not change unless we use it. In addition, it is very small and does not depend on an external library.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1568861373},{"id":1570739444,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/863","title":"Fix 404 error on Serve Static Middleware","body":"There will be a 404 error when non-standard characters appear in URL. Add `decodeURI()` to fix it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1570739444},{"id":1571627319,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/864","title":"fix(serve-static): decode url pathname","body":"The fix in the PR https://github.com/honojs/hono/pull/863 is only for Deno. So this PR will fix it for Cloudflare and Bun.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1571627319},{"id":1571628268,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/865","title":"chore: denoify","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1571628268},{"id":1573415336,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/866","title":"feat: use added app's errorHandler and notFoundHandler for fallback.","body":"### about `errorHandler`\r\n\r\nAs for errorHandler, I think it would be the expected result for any app.\r\n\r\n### about `notFoundHandler`\r\n\r\nAs for notFoundHandler, I think most apps will get the expected results, but cb6eff90f99cdce38d69e15dc79a7cacb8b8c812 commitments will lead to unexpected results in some cases.\r\n\r\n#### unexpected results ?\r\n\r\n```typescript\r\n// prepare\r\nconst app = new Hono()\r\nconst api = new Hono()\r\nconst middleware = new Hono()\r\n\r\napi.get('/posts', (c) => c.text('List'))\r\n\r\nmiddleware.use('*', async (c, next) => {\r\n  await next()\r\n  c.res.headers.append('x-custom-b', 'b')\r\n})\r\nmiddleware.notFound((c) => c.text('Not Found', 404))\r\n\r\napp.route('/api', middleware)\r\napp.route('/api', api)\r\n\r\n// request\r\napp.request('http://localhost/api/posts') // => not found\r\n```\r\n\r\nHowever, this is a very rare usage, and if you don't add cb6eff90f99cdce38d69e15dc79a7cacb8b8c812, notFound will be ignored, so it's still cb6eff90f99cdce38d69e15dc79a7cacb 8b8c812 should be added, in my opinion.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1573415336},{"id":1573431265,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/867","title":"perf(reg-exp-router): Cache Result<T> instead of T[] if there is no parameter.","body":"I would like to change it to cache the constructed `Result<T>` for static paths.\r\n\r\nI could not see a clear change in the benchmark, but I believe there is a slight performance benefit, which can reduce object creation at request time.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1573431265},{"id":1573464036,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/868","title":"Remove StaticRouter from default candidates ( or remove StaticRouter completely )","body":"### Reasons for removing StaticRouter from the default list of candidates\r\n\r\nWith the optimization by #845 #867, I believe RegExpRouter can now perform as well as StaticRouter in a static path only application.\r\n\r\nWith https://github.com/usualoma/hono/commit/866a84ba2688367cb1b12ce270299971c451c1c6, The result is as follows.\r\n\r\n```\r\n$  npm run bench-static:node\r\n...\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1.14x faster than Hono StaticRouter\r\n   2.78x faster than koa-tree-router\r\n   2.97x faster than @medley/router\r\n   4.07x faster than trek-router\r\n   4.24x faster than find-my-way\r\n   8.91x faster than Hono TrieRouter\r\n   34.19x faster than express (WARNING: includes handling)\r\n   75.49x faster than koa-router\r\n\r\n$ npm run bench-static:bun\r\n...\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1.16x faster than Hono StaticRouter\r\n   2.86x faster than koa-tree-router\r\n   3.11x faster than @medley/router\r\n   4.27x faster than trek-router\r\n   9.83x faster than Hono TrieRouter\r\n   34.08x faster than express (WARNING: includes handling)\r\n   79.63x faster than koa-router\r\n```\r\n\r\nWhether RegExpRouter or StaticRouter is the winner can change if you swap the order in https://github.com/usualoma/hono/commit/866a84ba2688367cb1b12ce270299971c451c1c6#diff-1454672c9673414d6a1726ce738b4f2dddae2f99ad5a806d69185ff7a813f2a1R12-R20. Based on these results, I would consider the two to be of equal performance in static path routing.\r\n\r\nThe bundle size can be reduced by removing StaticRouter as the default candidates.\r\n\r\n### If so, should we even remove StaticRouter from repository?\r\n\r\nIf an application that uses static paths wants to reduce the size of the application to the extreme, specifying a StaticRouter is an effective way to do so. It is worth leaving it if we recommend this type of use.\r\n\r\n```typescript\r\nconst app = new Hono({ router: new StaticRouter() })\r\n```\r\n\r\nHowever, since Hono is small enough by default and is almost never used in such a way, I feel that StaticRouter can be removed from the repository.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1573464036},{"id":1573465887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/869","title":"feat: Remove the StaticRouter from default candidates.","body":"#868","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1573465887},{"id":1574914182,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/870","title":"Multiple methods","body":"How about this syntax?\n\n```ts \napp.on(['GET','POST'], handler)\n```\n\nI think it's not so difficult to implement though the type definitions will be complex.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1574914182},{"id":1575169495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/871","title":"feat: use added app's errorHandler","body":"Derived from #866, version for errorHandler only","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1575169495},{"id":1576188393,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/872","title":"Revert \"feat: use added app's errorHandler (#871)\"","body":"This reverts commit b8a99b53672520b0b23547906cfc4042931438d7.\r\n\r\n#871 seems to fix #851, but it does not support \"one handler pattern\". The following tests fails:\r\n\r\n```ts\r\ndescribe('onError', () => {\r\n  const app = new Hono()\r\n  const sub = new Hono()\r\n\r\n  sub.get('/ok', (c) => c.text('OK'))\r\n\r\n  sub.get('/error', () => {\r\n    throw new Error('This is Error')\r\n  })\r\n\r\n  sub.onError((err, c) => {\r\n    return c.text('onError by sub', 500)\r\n  })\r\n\r\n  app.route('/sub', sub)\r\n\r\n  it('handled by app', async () => {\r\n    const res = await app.request('https://example.com/sub/ok')\r\n    expect(res.status).toBe(200)\r\n  })\r\n})\r\n```\r\n\r\nSo, I will revert it.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1576188393},{"id":1576242181,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/873","title":"feat(router) [breaking]: StaticRouter obsolete","body":"We've discussed in #868, we decided to remove StaticRouter from default candidates and remove it also from the packages. This means StaticRouter will become obsolete. After merging the PR, we can't use StaticRouter.\r\n\r\nThanks to @usualoma for creating StaticRouter. And goodbye StaticRouter.\r\n\r\nThis will fix #868.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1576242181},{"id":1576881146,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/874","title":"feat: use added app's errorHandler with comose()","body":"A shorter version that solves the problem of https://github.com/honojs/hono/pull/871#issuecomment-1422647262","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1576881146},{"id":1576886375,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/875","title":"feat: use added app's errorHandler with try/cache","body":"Slightly longer version that solves the problem of https://github.com/honojs/hono/pull/871#issuecomment-1422647262","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1576886375},{"id":1577660407,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/876","title":"merge main into next","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1577660407},{"id":1579944221,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/878","title":"feat(adapter): `handle(path, app)` for CF Pages & Next.js","body":"This PR is for the adapter of Cloudflare Pages and Next.js. It allows passing the mount path as an argument to `handle`.\r\n\r\nFor example, if you struct the Next.js project like this:\r\n\r\n<img width=\"191\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/218135327-6cbc7c72-8e16-441e-9119-d8f989896243.png\">\r\n\r\n`pages/api/[route].ts` could be follows:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/nextjs'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/hello', (c) => {\r\n  return c.json({\r\n    message: 'Hello',\r\n  })\r\n})\r\n\r\napp.get('/morning', (c) => {\r\n  return c.json({\r\n    message: 'Morning',\r\n  })\r\n})\r\n\r\nexport default handle('/api', app)\r\n```\r\n\r\nIt is simpler because you don't have to write `/api` in the argument of `app.get` every time.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1579944221},{"id":1579981959,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/879","title":"feat(validator): moved validator outside of middleware","body":"We have been treating `validator` as Middleware, but since it is different in property from Middleware, move it out.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1579981959},{"id":1580374239,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/880","title":"chore: update Deno benchmark","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1580374239},{"id":1580681215,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/881","title":"feat(adapter)!: simplify HandleInterface and reduce bundle size","body":"***This PR breaks compatibility with rc.12 but is still compatible with rc.11.*** Since rc.12 is only 9 hours old and adapters aren't in the stable releases yet, I hope this breaking change doesn't have any significant impact.\r\n\r\nWith this PR, type definitions for `handle` in Cloudflare Pages and Next.js become simpler and parameter names are more descriptive. It also saves the bundle size; minified ESM for Cloudflare Pages adapter is reduced from 825B to 503B and Next.js adapter from 561B to 406B.\r\n\r\nHere are the pros/cons I can think of:\r\n\r\n<dl>\r\n<dt>Pros</dt>\r\n  <dd>\r\n\r\n  - Bundle size is smaller.\r\n  - Interface is simpler.\r\n  </dd>\r\n<dt>Cons</dt>\r\n  <dd>\r\n\r\n  - Parameter order is different from `Hono.prototype.route`. Some people might feel awkward.\r\n  - A new Hono app is always instantiated and this has a slight overhead. That said, I think it won't be a problem because:\r\n    - The overhead is negligible compared to other heavy work user's app does.\r\n    - I guess people want to mount `subApp` to a dedicated path like `/api` when they use these adapters (at least I do). So `new Hono()` is called anyway in rc.12 as well.\r\n</dl>\r\n\r\nFeel free to close if you disagree to this change.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1580681215},{"id":1580686880,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/882","title":"feat(`app`): support multiple methods with `app.on()`","body":"This PR enables handling multiple methods with `app.on()` method.\r\n\r\n```ts\r\napp.on(['PUT', 'DELETE'], '/posts/:id', (c) => {\r\n  //...\r\n  return c.text(`Your method is ${c.req.method}`)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1580686880},{"id":1580745558,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/883","title":"feat: move http-exception out of utils","body":"Moved `src/utils/http-exception.ts` to `src/http-exception.ts` because \"HTTPException\" is not just a utility object.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1580745558},{"id":1580987474,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/884","title":"header may return undefined","body":"See [Line 94](https://github.com/honojs/hono/pull/884/files#diff-b1a2ab03a3672e105afeaab6615ad625365cd8459d592a840d925f132af62b35R94).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1580987474},{"id":1581035846,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/885","title":"Should middleware/html work with inline javascript and css?","body":"Hi Hono!\r\nA question about the HTML middleware implementation.\r\n\r\nI would expect to be able to be able to inline javascript and css strings when using the HTML middleware.\r\nThis works fine and the html lands in the browser as I would expect:\r\n```\r\napp.get(\"/\", (c) =>\r\n  c.html(\r\n    html`<html>\r\n        <head>\r\n          <style>div#and:after {content: '&&&&&&&&&&&&&&'};</style>\r\n        </head>\r\n        <body>\r\n          <div id=\"and\"></div>\r\n          <script>console.log(true && 'hello')</script>\r\n        </body>\r\n      </html>`,\r\n  ));\r\n```\r\n\r\nHowever, if I put the js and css strings into variables, the html function \"escapes\" the content and does things like turning `&` into `&amp` which breaks the code, so this doesn’t work as I would expect.\r\n\r\n```\r\nconst css = \"div#and:after {content: '&&&&&&&&&&&&&&'};\"\r\nconst js = \"console.log(true && 'hello')\"\r\napp.get(\"/\", (c) =>\r\n  c.html(\r\n    html`<html>\r\n        <head>\r\n          <style>${css}</style>\r\n        </head>\r\n        <body>\r\n          <div id=\"and\"></div>\r\n          <script>${js}</script>\r\n        </body>\r\n      </html>`,\r\n  ));\r\n```\r\n\r\nThis seems intentional if I look at the [tests here](https://github.com/honojs/hono/blob/main/src/middleware/html/index.test.ts).\r\n\r\nIs this intentional?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1581035846},{"id":1581153542,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/886","title":"fix(deno): export deno adapter","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1581153542},{"id":1581158270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/887","title":"fix(deno): allow `{}` for `app.fetch` fo compatibility","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1581158270},{"id":1581431212,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/888","title":"fix(req): query return type as `string | undefined`","body":"The return type of `c.req.query()` should be `string | undefined`.\r\n\r\nAnd this PR fix `getPathFromURL()` in `utils/urls.ts`. This seems to be a \"breaking change\", but this is rather nice since it is compatible with v2.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1581431212},{"id":1582296014,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/889","title":"refactor: rename to `TypedResponse`","body":"Rename `TypeResponse` to `TypedResponse`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1582296014},{"id":1582409283,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/890","title":"refactor: rename `ValidationTypes` to `ValidationTargets`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1582409283},{"id":1584200148,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/891","title":"docs(readme): add bundlephobia badges","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1584200148},{"id":1584236962,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/892","title":"Url contains hash","body":"`/auth/callback#access_token=access_token&expires_in=86400&token_type=Bearer&state=xyz`\r\nHow do I access values after hash? ( apart from using javascript to manually extract them ) ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1584236962},{"id":1584889898,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/893","title":"feat: change the arg `InferResponseType` receives","body":"```ts\r\nconst req = client.index\r\ntype Actual = InferResponseType<typeof req>\r\n```\r\n\r\nwill be:\r\n\r\n```ts\r\nconst req = client.index.$get\r\ntype Actual = InferResponseType<typeof req>\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1584889898},{"id":1584991536,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/894","title":"feat(hc): add `InferRequestType`","body":"We can write like below:\r\n\r\n```ts\r\nconst client = hc<AppType>('/')\r\nconst $get = client.index.$get\r\n\r\ntype ReqType = InferRequestType<typeof $get>\r\ntype T = ReqType['query']\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1584991536},{"id":1585274534,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/895","title":"Use ENV parameters in CORS middleware","body":"I have been trying to access `c.env` to inject my environment variables into the CORS configuration. However, it does not work as expected.\r\n```javascript\r\nimport { Hono } from 'hono';\r\nimport { cors } from 'hono/cors';\r\n\r\nconst app = new Hono();\r\n\r\napp.use('*', async (c, next) => {\r\n    cors({\r\n        origin: c.env.APP_URL,\r\n        allowedHeaders: ['Origin', 'Content-Type', 'Authorization'],\r\n        allowMethods: ['GET', 'OPTIONS', 'POST', 'PUT', 'DELETE'],\r\n        credentials: true\r\n    });\r\n    await next();\r\n});\r\n```\r\nThis code above returns the following error when trying to access the local worker (http://localhost:8000) from the browser (http://localhost:3000):\r\n\r\n> Access to XMLHttpRequest at 'http://localhost:8000/test' from origin 'http://localhost:3000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\r\n\r\nWhen I hardcode this value, it works fine:\r\n```javascript\r\napp.use('*', cors({\r\n    origin: 'http://localhost:3000',\r\n    allowedHeaders: ['Origin', 'Content-Type', 'Authorization'],\r\n    allowMethods: ['GET', 'OPTIONS', 'POST', 'PUT', 'DELETE'],\r\n    credentials: true\r\n}));\r\n```\r\n\r\nIs there any way to use my environment variables from `c.env` in the CORS configuration middleware?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1585274534},{"id":1585289162,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/896","title":"`.get()` is undefined in Durable Object","body":"As app is using get request directly like `this.app.get(\"/api/v1/activities\", async (c) => {`, context does not have access to context setters from middleware. Is there a way to get access to `c.get(\"user\")` in DO? Also is there a way to use the nested routes we do normally we use `Grouping`? ","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1585289162},{"id":1586564530,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/897","title":"Compression middleware only reads first header value for Accept-Encoding (Miniflare)","body":"This has been giving me a little bit of a headache recently, but I think I understand now what's going on. It appears that in [this line](https://github.com/honojs/hono/blob/main/src/middleware/compress/index.ts#L12), the `ctx.req.headers.get` call only ever returns the first entry in a comma-separated list of headers values. So if the browser sends `Accept-Encoding=gzip,deflate,br` (pretty standard), then the accepted value will always be `gzip`, a single value.\r\n\r\nI'm not sure if this is related only to me running it in Miniflare, but I saw this issue: https://github.com/cloudflare/miniflare/issues/180\r\n\r\nIt correctly returns me all the headers values when I use `ctx.req.cf?.clientAcceptEncoding`. Maybe we could fall back to this in Hono, if present?","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1586564530},{"id":1587145502,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/898","title":"feat(client): introduce `Fetch` type","body":"With `Fetch`, you can write `fetcher` for [SWR](https://swr.vercel.app/ja) type-safety.\r\n\r\n```ts\r\nimport useSWR from 'swr'\r\nimport { hc, InferRequestType, Fetch } from 'hono/client'\r\nimport { AppType } from '../functions/api/[[route]]'\r\n\r\nconst App = () => {\r\n  const client = hc<AppType>('/api')\r\n  const $get = client.hello.$get\r\n\r\n  const fetcher = (method: Fetch<typeof $get>) => (arg: InferRequestType<typeof $get>) => {\r\n    return async () => {\r\n      const res = await method(arg)\r\n      return await res.json()\r\n    }\r\n  }\r\n\r\n  const { data, error, isLoading } = useSWR(\r\n    'api-hello',\r\n    fetcher($get)({\r\n      query: {\r\n        name: 'SWR',\r\n      },\r\n    })\r\n  )\r\n\r\n  if (error) return <div>failed to load</div>\r\n  if (isLoading) return <div>loading...</div>\r\n\r\n  return <h1>{data.message}</h1>\r\n}\r\n```\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1587145502},{"id":1587299948,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/899","title":"refactor(req): remove `async` keyword from `json()` etc.","body":"Refactored. Perhaps, it may improve performance.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1587299948},{"id":1587752861,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/900","title":"chore: `honojs.dev` to `hono.dev`","body":"Now, we've got a new domain, \"hono.dev\"!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1587752861},{"id":1589999118,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/901","title":"fix(jsx): declare types for JSX correctly","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1589999118},{"id":1590043491,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/902","title":"docs(readme): update for v3","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590043491},{"id":1590212547,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/903","title":"docs: update migration guide for v3","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590212547},{"id":1590332437,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/904","title":"docs(migration): add descriptions","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590332437},{"id":1590333561,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/905","title":"v3","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590333561},{"id":1590338188,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/906","title":"Hono's context in Deno's registry does not have `jsonT`","body":"Hono's context on deno.land/x doesn't have `jsonT` and the following Deno program doesn't compile (see [this page](https://deno.land/x/hono@v3.0.0-rc.16/mod.ts?s=Context#prop_json)).\r\n\r\n```ts\r\nimport { Hono } from \"https://deno.land/x/hono@v3.0.0-rc.16/mod.ts\";\r\n\r\nconst app = new Hono();\r\napp.get(\"/\", (c) => c.jsonT({}));\r\n```\r\n\r\n```console\r\n$ deno check index.ts\r\nCheck file:///Users/ynkt/tmp/hono-typedresponse/deno/index.ts\r\nerror: TS2551 [ERROR]: Property 'jsonT' does not exist on type 'Context<string, Environment, unknown>'. Did you mean 'json'?\r\napp.get(\"/\", (c) => c.jsonT({}));\r\n                      ~~~~~\r\n    at file:///Users/ynkt/tmp/hono-typedresponse/deno/index.ts:4:23\r\n\r\n    'json' is declared here.\r\n      json = <T>(object: T, status: StatusCode = this._status, headers: Headers = {}): Response => {\r\n      ~~~~\r\n        at https://deno.land/x/hono@v3.0.0-rc.16/context.ts:188:3\r\n```\r\n\r\nImporting from `npm:hono@3.0.0-rc.16` will solve the error, but neither Deno Deploy nor Fresh doesn't support npm specifier right now.\r\n\r\nI'm not sure if this is caused by Hono or other tools (e.g., package registry or denoify) because `deno_dist` in this repo has `jsonT` indeed. I wanted to let you know anyway.\r\n\r\nhttps://github.com/honojs/hono/blob/433ed530fcb010d90e52f0db132f6059694ce7be/deno_dist/context.ts#L240-L250\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590338188},{"id":1590572175,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/908","title":"feat(client): Inject common headers","body":"Enabled passing the commonly used site header as an argument during HonoClient instance generation.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590572175},{"id":1590591060,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/909","title":"feat(types): keep schema info with `app.route()`","body":"This PR will fix the matter of #907 .\r\n\r\nWhen using `app.route()`, the schema information is missing but made it so that it is kept.\r\n\r\n<img width=\"753\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/219934403-edb429ca-3d99-440f-b49e-d66223133145.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1590591060},{"id":1591655876,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/911","title":"How to mock Context?","body":"Hey, how can i mock Context constructor for unit testing my controllers? ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1591655876},{"id":1591778481,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/912","title":"Router - Base path ","body":"is It possible to set a base path for the router?\r\n\r\ninstead of handling endpoints like`domain.com/v1/auth` as`/v1/auth`, it should handles it as `/auth`\r\n\r\nThanks!\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1591778481},{"id":1592112157,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/913","title":"RSS/XML support?","body":"Hi! I'm hoping to render a page using [RSS](https://validator.w3.org/feed/docs/rss2.html).\r\n\r\nLooking at [tests](https://github.com/honojs/hono/blob/65921824da777284226ed3a4ea84b17939dd86ba/src/middleware/jsx/index.test.tsx#L28) it seems `<!DOCTYPE html>` is recognized but can I also render a page using XML? Thanks.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1592112157},{"id":1592700495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/914","title":"[Feature Suggestion] `c.stream` Response helper","body":"Working on CF Workers and occasionally I find myself wanting to stream chunks of text down to cURL. There are a couple of steps to make it work, but I've wrapped it up in a little util that might make sense for inclusion into Hono?\r\n\r\n```ts\r\napp.get(\"/\", async (c) => {\r\n  return c.stream(async (stream) => {\r\n    for (let i = 0; i < 3; i++) {\r\n      stream.writeln(i).flush();\r\n      await new Promise((res) => setTimeout(res, 1000));\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n&nbsp;\r\n\r\nhttps://user-images.githubusercontent.com/23264/220233752-98d2abe5-5f9a-4813-80ac-ec45fc23d933.mov\r\n\r\n&nbsp;\r\n\r\n^ That's an example worker without Hono or Typescript. Source code, if you want to copy/paste it into the CF Workers editor:\r\n\r\n<details>\r\n\r\n```js\r\nclass StreamingApi {\r\n  constructor(writable) {\r\n    this.bytesWritten = 0;\r\n    this.writer = writable.getWriter();\r\n    this.encoder = new TextEncoder();\r\n  }\r\n\r\n  write(str) {\r\n    const bytes = this.encoder.encode(str);\r\n    this.bytesWritten += bytes.length;\r\n    this.writer.write(bytes);\r\n    return this;\r\n  }\r\n\r\n  writeln(str) {\r\n    return this.write(str + \"\\n\");\r\n  }\r\n\r\n  flush() {\r\n    const bytes_needed = 4096 - (this.bytesWritten % 4096);\r\n    const BACKSPACE = 8;\r\n    this.writer.write(new Uint8Array(bytes_needed).fill(BACKSPACE));\r\n    this.bytesWritten = 0;\r\n  }\r\n\r\n  close() {\r\n    this.writer.close();\r\n  }\r\n}\r\n\r\nconst textStream = (cb) => {\r\n  const { readable, writable } = new TransformStream();\r\n  const stream = new StreamingApi(writable);\r\n  cb(stream).finally(() => stream.close());\r\n  return new Response(readable, {\r\n    headers: {\r\n      \"content-type\": \"text/plain\",\r\n      \"Transfer-Encoding\": \"chunked\",\r\n    },\r\n  });\r\n};\r\n\r\nexport default {\r\n  async fetch(request, env) {\r\n    return textStream(async (stream) => {\r\n      for (let i = 0; i < 3; i++) {\r\n        console.log(i);\r\n        stream.writeln(i).flush();\r\n        await new Promise((res) => setTimeout(res, 1000));\r\n      }\r\n    });\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n### How does it work?\r\n\r\nTo do this kind of chunked-streaming from CF Workers, you need a couple of things:\r\n\r\n* To create a `ReadableStream` and `WritableStream` using `new TransformStream()`\r\n* Return a `Response` with the `readable` as the body, and `Transfer-Encoding: chunked` header.\r\n* Use `writable.write()` to push content onto the stream\r\n* 🚨 **DANK HAX ALERT** 🚨 Pad out chunks to the nearest 4096 bytes so CF sends them immediately, otherwise they're buffered (thx [this post](https://community.cloudflare.com/t/streaming-responses/106683/4)). I send `ASCII 8 (BACKSPACE)` because cURL ignores this.\r\n* Remember to `writable.close()` to end the stream & close the response.\r\n* Hit it with cURL, potentially with `-N` flag. Browsers don't seem to stream things correctly, and also the backspaces make Chrome download it as a file and Firefox displays them as little hex chars. But curl works great.\r\n\r\nI've made a `textStream` function that gives this API:\r\n\r\n```ts\r\nreturn textStream(async (stream) => {\r\n  for (let i = 0; i < 3; i++) {\r\n    stream.writeln(i).flush();\r\n    await new Promise((res) => setTimeout(res, 1000));\r\n  }\r\n});\r\n```\r\n\r\nIt sets up the TransformStream invokes the callback (without awaiting it) and returns the Response:\r\n\r\n```ts\r\ntype TextStream = (cb: (stream: StreamingApi) => Promise<void>) => Response;\r\nconst textStream: TextStream = (cb) => {\r\n  const { readable, writable } = new TransformStream();\r\n  const stream = new StreamingApi(writable);\r\n  cb(stream).finally(() => stream.close());\r\n  return new Response(readable, {\r\n    headers: {\r\n      \"content-type\": \"text/plain\",\r\n      \"Transfer-Encoding\": \"chunked\",\r\n    },\r\n  });\r\n};\r\n```\r\n\r\nThe `stream` property that's passed into the callback is an instance of this `StreamingApi` class, which provides helpers like `.write`, `.writeln`, `.flush` etc. This could be expanded with a bunch of helpers, but here is the implementation as-is:\r\n\r\n```ts\r\nclass StreamingApi {\r\n  private bytesWritten: number;\r\n  private writer: WritableStreamDefaultWriter;\r\n  private encoder: TextEncoder;\r\n\r\n  constructor(writable: WritableStream) {\r\n    this.bytesWritten = 0;\r\n    this.writer = writable.getWriter();\r\n    this.encoder = new TextEncoder();\r\n  }\r\n\r\n  write(str) {\r\n    const bytes = this.encoder.encode(str);\r\n    this.bytesWritten += bytes.length;\r\n    this.writer.write(bytes);\r\n    return this;\r\n  }\r\n\r\n  writeln(str) {\r\n    return this.write(str + \"\\n\");\r\n  }\r\n\r\n  flush() {\r\n    const bytes_needed = 4096 - (this.bytesWritten % 4096);\r\n    const BACKSPACE = 8;\r\n    this.writer.write(new Uint8Array(bytes_needed).fill(BACKSPACE));\r\n    this.bytesWritten = 0;\r\n  }\r\n\r\n  close() {\r\n    this.writer.close();\r\n  }\r\n}\r\n```\r\n\r\nI'm going to wrap this up into its own little library and publish it, but thought I'd raise an issue here first as I'm curious what you think of the API?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1592700495},{"id":1593614986,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/915","title":"Incorrect type inference for `route`ing Hono instance with different `jsonT`-returning endpoints","body":"Suppose we have the following code, which doesn't compile:\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { hc } from \"hono/client\";\r\n\r\nconst api = new Hono()\r\n  .get(\"/foo\", (c) => c.jsonT({ foo: \"\" }))\r\n  .post(\"/bar\", (c) => c.jsonT({ bar: 0 }));\r\nconst app = new Hono().route(\"/api\", api);\r\n\r\nconst client = hc<typeof app>(\"/\");\r\nconst res = await client\r\n  .api\r\n  .foo\r\n  .$get();\r\n// ^^^^\r\n// Property '$get' does not exist on type 'ClientRequest<{ $get: { input: {}; output: { foo: string; }; }; } | { $post: { input: {}; output: { bar: number; }; }; }>'.\r\n// Property '$get' does not exist on type 'ClientRequest<{ $post: { input: {}; output: { bar: number; }; }; }>'.ts(2339)\r\n```\r\n\r\nIn the above case, `app` has a type of \r\n\r\n```ts\r\nHono<Env, Record<\"/api/foo\", {\r\n  $get: {\r\n    input: {};\r\n    output: {\r\n      foo: string;\r\n    };\r\n  };\r\n} | {\r\n  $post: {\r\n    input: {};\r\n    output: {\r\n      bar: number;\r\n    };\r\n  };\r\n}> | Record<\"/api/bar\", {\r\n  $get: {\r\n    input: {};\r\n    output: {\r\n      foo: string;\r\n    };\r\n  };\r\n} | {\r\n  $post: {\r\n    input: {};\r\n    output: {\r\n      bar: number;\r\n    };\r\n  };\r\n}>>\r\n```\r\n\r\nwhich isn't what I want. The expected type should be\r\n\r\n```ts\r\nHono<Env, Record<\"/api/foo\", {\r\n  $get: {\r\n    input: {};\r\n    output: {\r\n      foo: string;\r\n    };\r\n  };\r\n}> | Record<\"/api/bar\", {\r\n  $post: {\r\n    input: {};\r\n    output: {\r\n      bar: number;\r\n    };\r\n  };\r\n}>>\r\n```\r\n\r\nIn terms of unit testing, the following test should pass but it currently fails.\r\n\r\n```ts\r\ntest('MergeSchemaPath with different endpoints', () => {\r\n  type Sub = Schema<\r\n    'get',\r\n    '/foo',\r\n    {},\r\n    {\r\n      foo: string\r\n    }\r\n  > &\r\n    Schema<\r\n      'get',\r\n      '/bar',\r\n      {},\r\n      {\r\n        bar: number\r\n      }\r\n    >\r\n\r\n  type Actual = MergeSchemaPath<Sub, '/api'>\r\n\r\n  type Expected = {\r\n    '/api/foo': {\r\n      $get: {\r\n        input: {}\r\n        output: {\r\n          foo: string\r\n        }\r\n      }\r\n    }\r\n  } & {\r\n    '/api/bar': {\r\n      $get: {\r\n        input: {}\r\n        output: {\r\n          bar: number\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  type verify = Expect<Equal<Expected, Actual>>\r\n})\r\n```\r\n\r\nMy guess is that union distribution is doing something harm. I am trying to fix this but haven't succeeded yet. I'll keep investigation.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1593614986},{"id":1594127597,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/917","title":"Fetch a Cloudflare service binding with Hono Client","body":"It would be great if the Hono client could be used to send a fetch request to a service binding. \r\nWith service bindings you have to call the `fetch` method on the binded `Fetcher` like this:\r\n```toml\r\nservices = [\r\n  { binding = \"auth\", service = \"authentication\" }\r\n]\r\n```\r\n```javascript\r\nexport default {\r\n  async fetch(request, env) {\r\n    const authResponse = await env.auth.fetch(request.clone());\r\n    ...\r\n  }\r\n};\r\n```\r\nSince Hono client uses the default `fetch` implementation this does not work, it would be great if we could pass our own fetch function which could default to the normale environment `fetch` implementation and the Hono Client would just call this fetch parameter.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1594127597},{"id":1594845114,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/918","title":"Expose HonoRequest Type","body":"Congrats on the v3, launch. Really liking Hono as a clean and fast framework. \r\n\r\nIn my apps, I sometimes build utility functions that are used by multiple handlers and they interact with the Request. Since the request has changed to `HonoRequest`, I think it is valuable to also expose its type, so ppl can write functions and define `HonoRequest` as a parameter.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1594845114},{"id":1595144610,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/919","title":"fix(types): `app.route` with multiple endpoints returns types correctly","body":"As pointed out in #915, the type was incorrectly inferred when mounting an app with multiple `jsonT()` endpoints using `app.route()`.\r\n\r\n<img width=\"457\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/220639134-6d99d497-d9ab-4842-ac1c-f34d6bc1cf02.png\">\r\n\r\nThis PR will fix #915","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1595144610},{"id":1595331627,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/920","title":"Custom fetch method for Hono Client options","body":"As described in my issue https://github.com/honojs/hono/issues/917 it would be great to be able to pass a custom fetch method to Hono Client to be able to call Service Bindings through Hono Client.\r\n\r\nI have just added an optional `fetch` method to the `RequestOptions` so that the `fetch` method of a Service Binding can be used instead of the default `fetch` API when it's set in the options.\r\n\r\nSee this example on how it would be used:\r\n```\r\nservices = [\r\n  { binding = \"AUTH\", service = \"auth-service\" },\r\n]\r\n```\r\n```typescript\r\nconst client = hc<CreateProfileType>('/', { fetch: c.env. AUTH.fetch });\r\n...\r\n// use client normally\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1595331627},{"id":1596100569,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/921","title":"feat: allow pathname argument","body":"In order to avoid having to write the full URL every time when writing tests, \r\nwe implemented a feature to implicitly format the URL and generate the request object when the pathname argument is entered.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1596100569},{"id":1596794719,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/923","title":"Hono.js not working on Supabase Edge function","body":"I tried using [Hono.js](https://hono.dev/) with the edge function but it failed to work.\r\n\r\nFunction Code:\r\n```\r\nimport { Hono } from 'https://deno.land/x/hono@v3.0.1/mod.ts'\r\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts'\r\n\r\nconsole.log('Notion Parser Method Functions!')\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => c.text('Hello Deno 123!'))\r\n\r\nserve(app.fetch)\r\n```\r\nThe code is building but giving a 404 Not Found error both locally and after deployment.\r\n\r\nI have created a ticket regarding this issue on the Supabase repo https://github.com/supabase/supabase/issues/12629.\r\n\r\nPosting it here to get help.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1596794719},{"id":1598933433,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/924","title":"Don't use `Buffer`","body":"We are using `Buffer` in `utils/encode.ts`:\r\n\r\nhttps://github.com/honojs/hono/blob/b3868d10753c287fedf6ed9196c799eb5c6f43fa/src/utils/encode.ts#L12\r\n\r\nThis is written for in case of \"polyfill\" in an environment without `atob/btoa`, but since [Fastly Compute@Edge also supports `atob/btoa` now](https://github.com/fastly/js-compute-runtime/blob/main/CHANGELOG.md#added-btoa-and-atob-global-functions), it is not necessary. We can remove it.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1598933433},{"id":1598974046,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/925","title":"refactor(util): remove using `Buffer` from `encode.ts`","body":"We don't need it anymore. Fix #924","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1598974046},{"id":1599036862,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/926","title":"fix(validator): clone Request object if `json` or `form`","body":"It throws the error if we do `c.req.json()` or `c.req.parseBody()` after validating `json` or `form` with `hono/validator`, \r\n\r\n```ts\r\nconst app = new Hono()\r\napp.post(\r\n  '/',\r\n  validator('json', () => {\r\n    return {\r\n      foo: 'bar',\r\n    }\r\n  }),\r\n  async (c) => {\r\n    await c.req.json() // throw error!\r\n    return c.text('foo')\r\n  }\r\n)\r\n```\r\n\r\nThis bug is caused by the Request object being used though the body has been used. So, we should clone it before validation.\r\n\r\nFix #818","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599036862},{"id":1599059603,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/927","title":"feat(deno): export `HonoRequest` type in Deno","body":"Remaining tasks for #918.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599059603},{"id":1599588699,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/928","title":"[Feature suggestion] \"after\" hook for Hono Client","body":"From discord. About Hono Client.\r\n\r\nSometimes we want to write a common handling when receiving responses.\r\n\r\n```ts\r\nconst res = await client.api.hello.$get()\r\nif (res.status === 404) {\r\n  window.location.href = '/'\r\n}\r\n\r\n// ...\r\n\r\nconst res = await client.api.morning.$get()\r\nif (res.status === 404) {\r\n  window.location.href = '/'\r\n}\r\n\r\n// ...\r\n```\r\n\r\nSince it is tedious to write the same process every time, how about having a hook for when the response is received?\r\n\r\n```ts\r\nconst client = hc<AppType>('/api', {\r\n  after: (res) => {\r\n    if (res.status === 404) {\r\n      window.location.href = '/'\r\n      return\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nIt can also be used to output logs, for example.\r\n\r\n```ts\r\nconst client = hc<AppType>('/api', {\r\n  after: (res) => {\r\n    console.log(`Response status is ${res.status}`)\r\n  }\r\n})\r\n```","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599588699},{"id":1599663205,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/929","title":"feat: Improve route()","body":"### What is this PR?\r\n\r\nThis PR implements the following.\r\n* Reduce side-effects of `route()` calls on the parent app\r\n    * https://github.com/honojs/hono/compare/main...usualoma:hono:feat/basepath-2?expand=1#diff-8ac13809c9886e994d1db33943de82df4d6c5d88b73fd0270c0189804ff565c2R182\r\n* Support nested `route()` calls\r\n    * https://github.com/honojs/hono/compare/main...usualoma:hono:feat/basepath-2?expand=1#diff-8ac13809c9886e994d1db33943de82df4d6c5d88b73fd0270c0189804ff565c2R179-R180\r\n\r\n\r\n### What will this PR allow us to do\r\n\r\n`route()` can be used to specify the base path.\r\n\r\n```typescript\r\nconst hono = new Hono().route('/api')\r\nconst api = hono.get('/search', (c) => c.jsonT({ ok: true }))\r\ntype AppType = typeof api\r\n```\r\n\r\n<img width=\"703\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/221352266-5749c14a-1061-4572-b610-8f305aa59b84.png\">\r\n\r\n\r\n### Why can't we specify our basePath in the constructor in this PR?\r\n\r\nI also wrote the following code to try to be able to specify it in the constructor, but I just could not get it to infer correctly.\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:feat/basepath\r\n\r\n<img width=\"726\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/221353328-5438f225-3fb1-4401-97b1-22cae612ace7.png\">\r\n\r\n\r\nI know that the following utility method can be prepared and used in place of `new Hono` in the same way as specifying it in the constructor.\r\n\r\n```typescript\r\nexport const hono = <E extends Env = Env, S = {}, BasePath extends string = ''>(\r\n  init: {\r\n    router?: Router<H>\r\n    strict?: boolean\r\n    basePath?: BasePath\r\n  } = {}\r\n) => {\r\n  return new Hono<E, S, BasePath>(init as any)\r\n}\r\n```\r\n\r\n<img width=\"377\" alt=\"image\" src=\"https://user-images.githubusercontent.com/30598/221353136-ad4a43f4-69da-465b-8e07-8a5cfc7dc0a6.png\">\r\n\r\nHowever, I see no need for such a utility method, as it is short enough to be written as follows\r\n\r\n```typescript\r\nconst hono = new Hono().route('/api')\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599663205},{"id":1599699339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/930","title":"feat(client): introduce \"after\" hook","body":"This PR introduces the new feature \"after\" hook for Hono Client.\r\n\r\nAs mentioned in #928, writing the same steps for each response is tedious.\r\n\r\nIn this PR, `after` hook allows us to write common actions after getting the response.For example, to output logs, we can write the following:\r\n\r\n```ts\r\nconst client = hc<AppType>('http://localhost:8787', {\r\n  after: (res) => {\r\n    console.log(`${Date.now()}: Response status is ${res.status}`)\r\n  },\r\n})\r\n```\r\n\r\nI would like to keep the Hono Client to a minimum, but this `after` Hook is good because it allows for so much with so little implementation.\r\n\r\nThis will resolve #928 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599699339},{"id":1599705134,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/931","title":"chore: update sponsor link","body":"Add @usualoma to our funding list.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599705134},{"id":1599787690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/932","title":"Hono Client type is `unkown` when validator schema has boolean field","body":"I played around with some `zod` schemas and Hono Client, when specifying a query field as`z.boolean()` with `zValidator` the type of the client is `unkown`. See this example:\r\n```typescript\r\nexport const route = new Hono().get(\r\n  '/',\r\n  zValidator(\r\n    'query',\r\n    z.object({\r\n      bool: z.boolean(),\r\n    }),\r\n  ),\r\n)\r\n\r\ntype AppType = typeof route;\r\n\r\nconst client = hc< AppType >('/api');\r\n```\r\n\r\nIs this expected, or should it be possible to pass a boolean as a query field?\r\n\r\nI know boolean parsing in JS is a bit weird to this might be expected.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599787690},{"id":1599891557,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/933","title":"fix: let the app.request behave the same as fetch","body":"This pr is to extend `app.request` usage range.\r\n\r\nWe test app by fetching directly via `app.request` without a setup of an app server, but the request parameters can only accept string or request, while fetch's can accept string, request or URL for the first parameter.\r\n\r\nMoreover, when the input is request, then the second paramter `RequestInit` dose not worked as fetch dose.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599891557},{"id":1599997958,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/934","title":"Abstracting the filesystem","body":"Any thoughts on possibly abstracting the filesystem?\r\n\r\nI noticed you have dedicated static file-serving middleware implementations for each platform.\r\n\r\nThis comes with some limitations. For example, your `mime` utils rely on filenames, which works for trusted static assets - but if you were building a site that accepts user uploaded files, you would need content-based MIME detection based on \"magic bytes\", which is not something you can implement cross-platform without some form of filesystem access. You can build this for Node.JS, but it'll only work there. Other examples include directory listing middleware, asset minification middleware, [dynamic](https://github.com/honojs/hono/issues/638) file servers, and so on.\r\n\r\nWhile the `serveStatic` implementations are small, and while they do share the `filepath` and `mime` utils, it would be nice if the differences could be abstracted behind web standards, as appears to be your philosophy - by which I mean (probably subsets of) standards such as the [Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API), [Files](https://developer.mozilla.org/en-US/docs/Web/API/File_API), [File System](https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API) and [Store Manager](https://developer.mozilla.org/en-US/docs/Web/API/StorageManager) APIs.\r\n\r\n(You might not need to build it all. From my understanding, platforms like Deno and Bun are already adopting web standards. There might already be polyfills for some of these APIs for Node?)\r\n\r\nIf we want to write [portable middleware](https://github.com/honojs/hono/issues/443), this would probably be something to think about.\r\n\r\nNow, I don't know precisely what your goals are with multi-platform support:\r\n\r\nIf your goal is to enable building portable applications (and middleware) that can run on multiple platforms, I think more work might be needed in this direction?\r\n\r\nOn the other hand, if your goal is only to have a multi-platform kernel that can be used to build a platform-specific project, perhaps this feature isn't necessary?\r\n\r\nWhat do you think?","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1599997958},{"id":1600178150,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/935","title":"How to send a file with Hono under Node.JS?","body":"With the Node.JS adapter, how do you send a file stream to the Response?\r\n\r\nI found [this](https://github.com/honojs/node-server/blob/main/src/serve-static.ts#L29) in `@hono/node-server/serve-static`:\r\n\r\n```\r\n      const content = readFileSync(path)\r\n      if (content) {\r\n        // ...\r\n        return c.body(content)\r\n      }\r\n```\r\n\r\nBut this will read the entire file into memory (!) before sending it - that's not acceptable as more than a proof of concept. (and really should be fixed in that package as well.)\r\n\r\nI found [this article](https://2ality.com/2022/06/web-streams-nodejs.html#support-for-web-streams-in-node.js), which talks about different ways to get a Web Stream in Node.JS.\r\n\r\nLooking at documentation [here](https://nodejs.org/dist/latest-v18.x/docs/api/fs.html#filehandlereadablewebstream), it doesn't look like that's going to work, since \"it will **not** close the FileHandle automatically\", and I won't have any way to close it after returning the Response. (?)\r\n\r\nI looked through [stream](https://nodejs.org/docs/latest-v18.x/api/stream.html) and [web stream](https://nodejs.org/docs/latest-v18.x/api/webstreams.html) and [file system](https://nodejs.org/dist/latest-v18.x/docs/api/fs.html) docs, and there are *so* many things that sound like it's going to be the thing I'm looking for (Stream, Readable, ReadableStream) but I can't figure out how to convert or wrap any of these into a *web* stream.\r\n\r\nI had this working in Express only because Express provides a helper function to do it, I guess.\r\n\r\nMaybe we need some platform helper functions (as I've also proposed [here](https://github.com/honojs/hono/issues/934)) - will anyone be able to figure this out on their own? The 2ality.com article is 40 pages and doesn't seem to even fully answer the basic question of how to open a file.\r\n\r\nI am *so* lost. 😥","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1600178150},{"id":1600866320,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/936","title":"fix: add missing `MergePath`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1600866320},{"id":1600916725,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/937","title":"fix(client): show type error if `$get()` needs args","body":"Made it throws the type error if `client.path.$method()` needs arguments:\r\n\r\n<img width=\"592\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221541313-13858e40-4df4-4f67-a54d-fad448aea020.png\">\r\n\r\nThis fix will make the Client more type-safety.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1600916725},{"id":1601098147,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/938","title":"Capturing Hono exceptions with the Cloudflare Pages Sentry Plugin","body":"Hi there, i'd like to be able to use the Cloudflare Pages Sentry Plugin (https://developers.cloudflare.com/pages/platform/functions/plugins/sentry) to capture exceptions from my Hono API. I've got the following 2 files:\r\n\r\n`functions/hello.ts`\r\n```\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/cloudflare-pages'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/hello', (c) => {\r\n  throw new Error('Capture this error in Sentry!')\r\n})\r\n\r\nexport const onRequest = handle(app, '/api')\r\n```\r\n\r\n`functions/_middleware.ts`\r\n```\r\nimport sentryPlugin from \"@cloudflare/pages-plugin-sentry\";\r\n\r\nexport const onRequest: PagesFunction = sentryPlugin({\r\n  dsn: \"https://sentry.io/welcome/xyz\",\r\n});\r\n```\r\n\r\nWhen I trigger the error from the `hello.ts` function.. it doesn't see to be properly capturing it in the Sentry Pages Plugin. **I'd like to use the Sentry Pages Plugin so I can capture all my exceptions (not just from my Hono API's).** \r\n\r\nAny idea's how I could get the exception to properly trigger the Sentry Pages Plugin? Thanks!\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1601098147},{"id":1601197288,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/939","title":"feat(`jsonT`): check JSON type","body":"`jsonT()` returns a JSON object composed of primitive types. For example, a `Date` object is converted to a string. But currently, `jsonT()` allows the `Date` type.\r\n\r\n```ts\r\napp.get('/hello', (c) => {\r\n  return c.jsonT({\r\n    messge: 'Hello',\r\n    datetime: new Date(), // does not show the error\r\n  })\r\n})\r\n```\r\n\r\nAnd the Client will get the `Date` type even though the actual value is a string.\r\n\r\n<img width=\"303\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221574375-f761fc98-107e-4fa6-97aa-a170bacf678a.png\">\r\n\r\nAllowing the types of objects other than primitives to be loose can be confusing.\r\n\r\nIn this PR, I've made it provides a JSON type and limits the object that `jsonT()` would receive, and if they are not JSON type, it throws an error.\r\n\r\n<img width=\"319\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221573552-d14d61e8-4f9c-4e68-99d6-9a1c3a055446.png\">\r\n\r\nOn the client side, the return type of `res.json()` is `never`.\r\n\r\n<img width=\"318\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/221573584-8e185c12-12fb-4045-bf28-f0549a37155a.png\">\r\n\r\nThis feature was inspired by the following article.\r\n\r\n<https://zenn.dev/kosei28/articles/f4bac1ed2b64a7#date%E5%9E%8B%E3%81%AF%E6%96%87%E5%AD%97%E5%88%97%E3%81%AB%E3%81%AA%E3%82%8B>\r\n\r\nBy restricting the types that `jsonT()` accepts to JSON types composed of primitives, we can make it more type-safe.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1601197288},{"id":1601778665,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/940","title":"[v3.0.2] await handler(c, next); typescript error","body":"Please check this repo: https://codesandbox.io/p/sandbox/naughty-sunset-sewpnb?selection=%5B%7B%22endColumn%22%3A17%2C%22endLineNumber%22%3A11%2C%22startColumn%22%3A17%2C%22startLineNumber%22%3A11%7D%5D&file=%2Findex.ts\r\n\r\n<img width=\"929\" alt=\"Screenshot\" src=\"https://user-images.githubusercontent.com/15731988/221658454-2dae4138-7445-4fe9-b779-f4c10876eb4b.png\">\r\n\r\nThis error popped up after upgrading to v3","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1601778665},{"id":1604004039,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/941","title":"feat(app): add `basePath` option","body":"With this PR, we can specify the `basePath` in the constructor of `Hono`:\r\n\r\n```ts\r\nconst app = new Hono({ basePath: '/api' })\r\n```\r\n\r\nAlso, it has the correct type.\r\n\r\n<img width=\"358\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/222011617-aa00c3b6-e8c2-4938-8868-4e69553c5460.png\">\r\n\r\n<img width=\"529\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/222011596-6eae2c68-8f49-44c4-985a-a011d31788d6.png\">\r\n\r\nRelated to #929 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1604004039},{"id":1605478967,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/942","title":"fix(validator): can't get json value","body":"fix(validator): can't get json value.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1605478967},{"id":1605971000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/943","title":"fix(pages/nextjs): don't use `route()` if path is not passed","body":"If we use `handle` in the Cloudflare Pages adapter with no second argument:\r\n\r\n```ts\r\nexport const onRequest = handle(app)\r\n```\r\n\r\nWith the current implementation,  `app` will be passed to `route()`\r\n\r\nhttps://github.com/honojs/hono/blob/b1c50597088c2e4e1d3666f53f3f9de171cbd506/src/adapter/cloudflare-pages/handler.ts#L17-L22\r\n\r\nIf we do so, the error thrown from `app` can't be re-thrown:\r\n\r\n```ts\r\nconst app = new Hono().route('/api')\r\n\r\napp.get('/hello', (c) => {\r\n  throw new Error('Capture this error in Sentry!')\r\n})\r\n\r\napp.onError((e) => {\r\n  throw e // <--- This will not be a real \"error\", will return 500 response.\r\n})\r\n\r\nexport const onRequest = handle(app)\r\n```\r\n\r\nThis PR fixes this issue.\r\n\r\nThis will resolve #938","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1605971000},{"id":1607863098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/946","title":"Using zod's `z.transform` makes hc client `unknown` type","body":"// Please allow me to make several posts one after another..\r\n\r\n[https://www.typescriptlang.org/play?#code/JYWwDg9gTgL....](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgLwGoEMA2wAm6bRwC+cAZlBCHAOQACAFhAHYQD0yEOAtAG5a75o1ANwAoUJFiI4ACWYRiZClWqMWI8eGjwkyReUo0OODRO3T6AY33KaatpewBTJjA2iEouN7iXmAZ3h0MDA4AF44JicAd1l5AAoASgA6AHMnGHivHxzqVlIICGoAGmyc7zR+PAIoLPL6mgBHAFcnKABPErKGiuSIACMAKydLTM8entwALhRkwKhgJlSk5KgndIAPeNYAPQBtAAYuAE4AXQBqABJWRO6JhuSYKHQmfwKoEHiAOWaQfrbEqV7t4iIC7j4wT14pZEuEAHzg+qWZKDfzMAAq8XGwJy018qycjWSfGwOHi1BabU6KVwQJxPlYrHp9x2AH5EeVQXTvIkxN0-K94I5gC54BErAAeGDtMBOCCkODBMBw8msai87qMnJs0REDz8gJBELhSIxOIsFbpTIcvIFIrc8qVUmCWoc3KUjpdHHIPpDEZjN0NPE++aLZYpNabbb7I5nK43QP1LWPZ6vd6fH5-AEOnpcjmQhrQ2FhBE45GojFYxPlPHItZEkm4cke6nJWnVnJa5k9HU4vM5DUGwW+ZyuE2S6Wy+WKkIqvLqsSdpk+HV60RAA)\r\n\r\n![image](https://user-images.githubusercontent.com/4177010/222620374-e5e22363-b79d-4470-b149-ea29003d5c13.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1607863098},{"id":1607885759,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/947","title":"Enable to add sub-applications in a method chain format by using route()","body":"I, too, think it would be better to be able to specify this in the method chaining.\r\n\r\n### Discussed in https://github.com/orgs/honojs/discussions/945\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **kissge** March  3, 2023</sup>\r\nI've tried to use `route` like this, but couldn't make it work:\r\n\r\n```ts\r\n// api/photos/photos.routes.ts\r\nconst routes = new Hono().get('/list', (c) => c.jsonT({ photos: 0 }))\r\nexport default routes\r\n```\r\n\r\n```ts\r\n// api/videos/videos.routes.ts\r\nconst routes = new Hono().get('/list', (c) => c.jsonT({ videos: 0 }))\r\nexport default routes\r\n```\r\n\r\n```ts\r\n// api/routes.ts\r\nimport photos from './photos/photos.routes.ts'\r\nimport videos from './photos/photos.routes.ts'\r\nconst routes = new Hono().route('/photos', photos).route('/videos', videos)\r\nexport default routes\r\n```\r\n\r\n```ts\r\n// api/index.ts\r\nimport routes from './routes'\r\nconst app = new Hono()\r\n    .route('/', routes)\r\n    .use(...)\r\n    .use(...)\r\n    .use(...)\r\n```\r\n\r\nIs this usage expected? Does hono support it? Any hint would be appreciated.\r\n\r\nhttps://github.com/kissge/hono/commit/7e35ff5817b92c87a97276e6cea20edb57aa94c0</div>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1607885759},{"id":1607924258,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/948","title":"feat: Returns the parent's app from `route(path, subApp)`.","body":"#947\r\n\r\nAs for `route()`, in general, I think the expected type depends on the arguments given.\r\n\r\nIf no subApp is given, then of course an app with path as basePath should be returned.\r\n```\r\nconst subApp = app.route('/api')\r\n```\r\n\r\nHowever, if a subApp is given, the app that has it in the basePath is usually not necessary.\r\n```\r\nconst probablyNeverBeUsed = app.route('/api', subApp)\r\n```\r\nIf so, it would be more convenient to return `this` when a subApp is specified. This PR includes such a change.\r\n\r\n\r\n### Is this a good API?\r\n\r\nHowever, it is generally not a good API to have the return type change depending on the argument. I think we can avoid this confusion by renaming the single argument `route()` as `basePath()` and make the return value intuitive as well.\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:feat/basePath-method\r\n\r\n\r\n### Other options\r\n\r\nI don't think the current behavior of main branch is so bad, so I think there is an option not to change it.\r\n\r\n@yusukebe \r\nWhat do you think?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1607924258},{"id":1608050517,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/949","title":"feat: `env` support enviroment variables for multi runtimes","body":"This PR introduces `env` function to get environment variables for any runtimes, not only variables of Cloudflare Workers' Bindings.\r\n\r\nWe can write the code with the same syntax at any runtime:\r\n\r\n```ts\r\nimport { env } from 'hono/adapter'\r\n\r\napp.get('/env', (c) => {\r\n  const { NAME } = env<{ NAME: string }>(c)\r\n  return c.text(NAME)\r\n})\r\n```\r\n\r\nSupported runtimes:\r\n\r\n* Cloudflare Workers\r\n* Deno\r\n* Bun\r\n* Lagon ( It works on dev but can't resolve the path of `.env` on CI )\r\n* Node.js\r\n* Vercel ( No CI )\r\n* Fastly ( Users may not define the values... )\r\n\r\n## Why don't we use `c.env`?\r\n\r\nAlready we are using `c.env` for Cloudflare Workers' Bindings, so we can use it for other runtimes. But, if we do so, we have to write the code to `context.ts`. It's bad to write that things depend on each environment on the common component. Separating `env` as `import { env } from 'hono/adapter'` is a better API.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1608050517},{"id":1608150864,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/950","title":"Returning `Array<T>` response makes `jsonT` think it as `T` type","body":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAcgAt0JiBuAKFElkTlIGNs8CiyKB6FgG2ABTNDGo0aLdAGd4AQzBg4AXjhohAdxQUAFAEoAdAHMhMHcR64IlADRwdLPSoB8cFgYBW09ABUdSYAATAC44AG1iK1s4ABYAJgBdbD09Wh4eOEy4AD0AfgkpNFk3QRF4VVYAHhgATzAhCFw4BTBncx5iVMkZeCghaRVmjTlgeAFhUQMogwASEzMuwuLAuRg5Qblh0bg+6U9vNH00jKy8iSA\r\n\r\n![image](https://user-images.githubusercontent.com/4177010/222666095-087f379e-62dd-4418-8c5d-857078ef916b.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1608150864},{"id":1608193975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/951","title":"fix(type): remove unnecessary distribution","body":"Do not use `PrettyJSON<T>` because it causes unnecessary distributions. As a side effect, `boolean` is inferred to `true | false`. But I think there is no problem in practical use.\r\n\r\nThis will fix #950 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1608193975},{"id":1608438260,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/952","title":"Basic auth not working when using app.onError","body":"Since version 3.0.0 the basic auth doesn't work anymore when also using `app.onError`\r\n\r\nExample:\r\n\r\n```js\r\n\r\napp.use('/test-auth', basicAuth(\r\n    {\r\n        username: 'test',\r\n        password: 'test',\r\n    }\r\n))\r\n\r\napp.get('/test-auth', async (c) => {\r\n    return c.json({\r\n        message: 'You are authorized!',\r\n        status: 200\r\n    })\r\n})\r\n\r\napp.onError((err, c) => {\r\n    console.log(\"An error has been thrown: \" + err)\r\n    return c.json({\r\n        message: 'Internal Server Error',\r\n        status: 500\r\n    }, 500);\r\n})\r\n\r\n```\r\n\r\nIn this example, when you use the /test-auth route, it just returns an \"Internal Server Error\" and the error it returns is: \"Error: Unauthorized\"\r\n\r\nWhen I am not using the `app.onError` (I comment that out), it does work normally.\r\nThis issue occurs since version 3.0.0\r\n\r\nI hope someone can help 🙂\r\nThanks in advance!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1608438260},{"id":1609278413,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/953","title":"Testing when using the 'cache' middleware is difficult due to missing execution context","body":"When utilizing the `cache` middleware it assumes that the context and `caches` will be present.\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/middleware/cache/index.ts#L18\r\n\r\nIt might be helpful if this was a no-op when used in environments that don't have access to the cache API? Otherwise, it becomes difficult to run any unit tests against the API without a workaround.\r\n\r\nThe discussion here provides a helpful utility method. If cache can't be a no-op in test environments, then perhaps this utility could be fleshed out to provide a testing helper that Hono would provide to handle this situation in a more official way.\r\n\r\nhttps://github.com/honojs/hono/issues/678#issuecomment-1364578058\r\n\r\nI extended it a little bit so I could extract it and use it across the test suite by passing in the `Hono` app object.\r\n\r\n```typescript\r\n/**\r\n * A helper function to easily make GET requests against\r\n * the hono router with a dummy ExecutionContext. This is needed\r\n * because the 'cache' middleware requires an ExecutionContext\r\n * to be present, which is not present in the unit tests. This\r\n * function will create a dummy ExecutionContext and pass it to\r\n * the app.fetch() function. Use this for GET requests instead of\r\n * 'await app.request('http://localhost/')' in unit tests.\r\n * @param app The hono app\r\n * @param url The URL to fetch\r\n * @param environment The environment to pass to the app\r\n * @param mockContext The mock context to pass to the app\r\n * @returns The response\r\n * @see: https://github.com/honojs/hono/issues/678#issuecomment-1364578058\r\n * */\r\nexport function get(\r\n  app: Hono<{ Bindings: Bindings }>,\r\n  url: string | URL,\r\n  environment?: any,\r\n  mockContext?: ExecutionContext,\r\n) {\r\n  const request = new Request(url)\r\n  mockContext ??= {\r\n    passThroughOnException: () => {},\r\n    waitUntil: () => {},\r\n  }\r\n  return app.fetch(request, environment, mockContext)\r\n}\r\n```\r\n\r\nThanks for guidance on a better way to handle this if there is one.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1609278413},{"id":1610214563,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/955","title":"Simplify Middleware role","body":"Currently the middleware can return a Response, but what about making it unable to return?\r\n\r\n```ts\r\ntype MiddlewareHandler = (c: Context, next: Next) => Promise<void>\r\n```\r\n\r\nThe reason the Middleware Handler is able to return a Response is because Basic Auth Middleware and others needed to return a response immediately.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  // authentication process\r\n  if (unauthorized) {\r\n    return authResponse\r\n  }\r\n  await next()\r\n})\r\n```\r\n\r\nBut now that we have `HTTPException`, `return` is not necessary.\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  // authentication process\r\n  if (unauthorized) {\r\n    throw new HTTPException(401, {\r\n      res: authResponse,\r\n    })\r\n  }\r\n  await next()\r\n})\r\n```\r\n\r\nIf we want to change the Response in the Middleware, assign it to `c.res`. Here is a practical example:\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n\r\n  class HeaderElementHandler {\r\n    element(element: Element) {\r\n      element.append('<b>Hono</b>', { html: true })\r\n    }\r\n  }\r\n\r\n  const rewriter = new HTMLRewriter().on('*', new HeaderElementHandler())\r\n  if (c.res.headers.get('content-type')?.startsWith('text/html')) {\r\n    c.res = rewriter.transform(c.res)\r\n  }\r\n})\r\n```\r\n\r\nThe beauty of Hono is that Middleware and Handler are treated in the same way, but there are differences. I thought that being able to do a lot of things is good, but by making it more limited, it makes it easier to explain \"what Middleware is?\". Then this way can clarify the role with Handler. Or perhaps we could make the implementation of `compose.ts` simpler.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1610214563},{"id":1610219894,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/956","title":"docs(readme): add creator name of RegExpRouter and SmartRouter","body":"I have wanted to write this for a while; this is important.\r\n\r\nOne of the features of Hono is the RegExpRouter, but I must not take credit for that.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1610219894},{"id":1610223829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/957","title":"feat(context): allow passing `unknown` to `executionCtx.waitUntil`","body":"This is suggested by @koistya. Thanks!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1610223829},{"id":1610354706,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/958","title":"Allow any instead of void for waitUntil.","body":"This matches up with what Cloudflare uses.\r\n\r\nhttps://github.com/Cloudflare-Mining/Cloudflare-Datamining/blob/87ef982bb7bbf9f8f1468f38de1dc1701e4a04cf/data/workers-types/experimental/index.d.ts#L291","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1610354706},{"id":1611663403,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/959","title":"feat(context): allow passing `RequestInit` to `c.json()` etc.","body":"This PR proposes allowing us to pass `InitResponse` as the second argument to `c.text()` or `c.json()`. It will overload these methods.\r\n\r\n```ts\r\ninterface TextRespond {\r\n  (text: string, status?: StatusCode, headers?: HeaderRecord): Response\r\n  (text: string, init?: ResponseInit): Response\r\n}\r\n```\r\n\r\nThis is inspired by Issue #952. Now, it is very tedious to customize Basic Auth errors.\r\n\r\n```ts\r\napp.onError((e, c) => {\r\n  if (e instanceof HTTPException) {\r\n    const res = e.getResponse()\r\n    res.headers.set('content-type', 'application/json')\r\n    return new Response(\r\n      JSON.stringify({\r\n        message: 'Unauthorized!',\r\n      }),\r\n      res\r\n    )\r\n// ...\r\n```\r\n\r\nSo I thought it would be easier if we can pass `ResponseInit`, i.e. meta information such as headers, to `c.json()`.\r\n\r\n```ts\r\napp.onError((e, c) => {\r\n  if (e instanceof HTTPException) {\r\n    return c.json(\r\n      {\r\n        message: Unauthorized!',\r\n      },\r\n      e.getResponse()\r\n    )\r\n  }\r\n```\r\n\r\nThis feature is not only used in the above cases, but can also be used when we want to modify and return the content retrieved from the outside using `fetch`.\r\n\r\n```ts\r\napp.get('/mirror', async (c) => {\r\n  const res = await fetch('http://example.com')\r\n  return c.json({ foo: 'bar' }, res)\r\n})\r\n```\r\n\r\n## Side effects\r\n\r\n* The code size will increase. But they are almost types definitions.\r\n* Overload is often confusing to users. But, I think it is intuitive to pass `ResponseInit` in this case.\r\n* The implementation becomes more complex. There is no way around this :(\r\n\r\n---\r\n\r\nIt would be a good feature, except that the code would be complicated. In addition, I think it's not a bad idea to allow overloads since one of the big features of Hono is flexible to write code.\r\n\r\nIf you have any other good ideas, please let me know.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1611663403},{"id":1611693174,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/960","title":"A way to completly overwrite response from middleware after next()","body":"This is a very niche issue.\r\n\r\nWe use Hono for many things, including our Cloudflare workers' proxy. \r\nThe proxy sits on top of our domain and routes traffic to different workers and other external servers.\r\n\r\nWhen you proxy a request from a worker, the response that Hono gets is a fetch response, and you cannot change headers.\r\n\r\nWhen we use middleware in our proxy, there is no way for us to re-write the response since ´contex.res´ has a `set` that manipulates the headers.\r\n\r\nhttps://github.com/honojs/hono/blob/fea78f29bd681350ce61dd71b33042aa6ec7db5c/src/context.ts#LL101-L110C4\r\n\r\n```typescript\r\n  set res(_res: Response) {\r\n    if (this._res) {\r\n      this._res.headers.delete('content-type')\r\n      this._res.headers.forEach((v, k) => {\r\n        _res.headers.set(k, v)\r\n      })\r\n    }\r\n    this._res = _res\r\n    this.finalized = true\r\n  }\r\n```\r\n\r\nNot many people will have this issue, but we could really use some type of overwrite on the response so that we can write middleware that does something like this:\r\n\r\n```typescript\r\nexport const cookieMiddleware: MiddlewareHandler<HonoEnv> = async (c, next) => {\r\n    await next()\r\n    if(c.res.headers.has(\"special-header\")) {\r\n      // We cannot use res.headers, so we clone the headers\r\n      const clonedHeaders = cloneResponseHeaders(c.res)\r\n      clonedHeaders.append('Set-Cookie', \"cookie goes here\")\r\n        \r\n      // create a new response from the old\r\n      const newResponse = new Response(c.res.body, {\r\n        headers: clonedHeaders,\r\n        status: c.res.status,\r\n      })\r\n      // some way to overwrite response, just an example\r\n      c.overwriteResponse(newResponse)\r\n    }\r\n}\r\n```\r\n\r\nIf only the `set` did not change headers we could have used that\r\n\r\n```typescript\r\n set res(_res: Response) {\r\n    this._res = _res\r\n    this.finalized = true\r\n  }\r\n```\r\n\r\nMaybe this is something that should be contained in its own world. \"hono/proxy\". Which is meant to handle things as a proxy and not api.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1611693174},{"id":1612611646,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/962","title":"Hono Client incorrectly handles root endpoints","body":"Defining root endpoints makes the hono client to add a `index` route, which make the requests fail because it doesn't exist.\r\n\r\n```ts\r\nconst app = new Hono()\r\n  .get('/', (c) => c.text('Pretty Blog API'))\r\n\r\ntype App = typeof app;\r\n\r\nconst client = hc<App>(\"http://localhost:8787/\");\r\n```\r\n\r\n### Current Behavior\r\n```ts\r\nclient.index.$get()\r\n```\r\n\r\n### Expected Behavior\r\n```ts\r\nclient.$get()\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1612611646},{"id":1613689714,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/963","title":"Cache and CORS middleware conflict","body":"Hi!\r\n\r\nI'm using both Cache middleware w/ the CORS middleware and there is a conflict. Cloudflare Worker throws this error `Can't modify immutable headers` when the cached response is returned directly.\r\n\r\nAs a workaround I'm using the ff code:\r\n```ts\r\n  const cacheKey = new Request(ctx.req.url.toString(), ctx.req.raw)\r\n  const cache = await caches.open('test')\r\n  const cacheResp = await cache.match(cacheKey)\r\n  if (cacheResp) return new Response(cacheResp.body, cacheResp)\r\n  ```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1613689714},{"id":1614357207,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/964","title":"feat: `route()` with one argument is renamed `basePath()`.","body":"#948 basePath() version\r\n\r\nOne difference from https://github.com/honojs/hono/pull/948#issuecomment-1455115090 is that we replaced `private _basePath` with `#basePath`. This should make it more straightforward that it is a local member.\r\n\r\n### Compatibility\r\n\r\nTo reduce confusion caused by compatibility issues, it would be possible to allow `route(path)` to be used in 3.x and then remove it in 4.x.\r\n\r\n```diff\r\ndiff --git a/src/hono.ts b/src/hono.ts\r\nindex 72380c8..3238c35 100644\r\n--- a/src/hono.ts\r\n+++ b/src/hono.ts\r\n@@ -137,9 +137,23 @@ export class Hono<\r\n   route<SubPath extends string, SubEnv extends Env, SubSchema>(\r\n     path: SubPath,\r\n     app: Hono<SubEnv, SubSchema>\r\n+  ): Hono<E, RemoveBlankRecord<MergeSchemaPath<SubSchema, SubPath> | S>, BasePath>\r\n+  /** @deprecated\r\n+   * Use `basePath` instead of `route` with one argument.\r\n+   * The `route` with one argument has been removed in v4.\r\n+   */\r\n+  route<SubPath extends string>(path: SubPath): Hono<E, RemoveBlankRecord<S>, BasePath>\r\n+  route<SubPath extends string, SubEnv extends Env, SubSchema>(\r\n+    path: SubPath,\r\n+    app?: Hono<SubEnv, SubSchema>\r\n   ): Hono<E, RemoveBlankRecord<MergeSchemaPath<SubSchema, SubPath> | S>, BasePath> {\r\n     const subApp = this.basePath(path)\r\n \r\n+    if (!app) {\r\n+      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+      return subApp as any\r\n+    }\r\n+\r\n     app.routes.map((r) => {\r\n       const handler =\r\n         app.errorHandler === errorHandler\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/30598/223580511-35d5e183-35e1-4259-86b5-8f111bf9044a.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1614357207},{"id":1614463130,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/965","title":"[Suggestion] Create \"Cookie Middleware\", obsolete `req.cookie()` and `c.cookie()`","body":"For Hono-based applications, there are not many cases in which using cookies. So rather than having `c.req.cookie()` and `c.cookie()` as standard, I thought it would be better to provide a method to set and get a cookie.\r\n\r\n```ts\r\nimport { getCookie, setCookie } from 'hono/cookie'\r\n\r\ngetCookie(c, 'yummy_cookie')\r\nsetCookie(c, 'great_cookie', 'banana')\r\n```\r\n\r\nThis will reduce the bundle size. This is a good change. However, since it is a breaking change, we must write a migration guide and output a polite error message when a user uses `c.req.cookie()` or `c.cookie()`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1614463130},{"id":1615729591,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/966","title":"hono/cloudflare-pages 404 handler doesn't work","body":"As shown in the snippet below, when using hono's cloudflare pages handler, it doesn't inherit the 404 handler of the original app, so it responds with Hono's generic plaintext 404 (thanks to `new Hono().route(...)`)\r\n\r\n```js\r\nexport const onRequest = handle(app, '/api');\r\n```\r\n\r\nhttps://github.com/honojs/hono/blob/fea78f29bd681350ce61dd71b33042aa6ec7db5c/src/adapter/cloudflare-pages/handler.ts#L17-L22","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1615729591},{"id":1616256987,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/967","title":"fix(type): add forgotten `BasePath`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1616256987},{"id":1617172596,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/968","title":"Roadmap to v3.1.0","body":"Tasks for the next minor upgrade version \"v3.1.0\". The following may be edited.\r\n\r\n- [x] `basePath` #964 \r\n- [x] `env` #949 \r\n- [x] Deprecate 2nd arg of `handle()` on Pages/Next.js adapter / Use instead `app.basePath()` to specify the base path. #981 \r\n- [x] Consider handling Hono Client root endpoints #962 #971 #978\r\n- [x] Consider the middleware behavior #960 #955 #970\r\n- [x] Support inferring input/output of a validator #946 #969 \r\n- [x] Update `@hono/zod-validator`\r\n- [x] Update `@hono/typebox-validator`\r\n- [x] ~~Client: `api.user[\"123\"].get()`~~ => later\r\n- [x] bun `wiptest` to `test` #977 977\r\n- [x] AWS Lambda Adapter? #987 \r\n- [x] `c.req.path` ?\r\n- [x] Update starters\r\n\r\n### May not be implemented\r\n\r\n- [x] allow passing `RequestInit` to `c.json()` etc. #959 \r\n- [x] ~~`hono()`~~","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1617172596},{"id":1617396200,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/969","title":"feat(validator): support type transformation","body":"This PR provides supporting \"type transformation\" for the validator.\r\n\r\nFor example, Zod has a \"transform\" feature.\r\n\r\n```ts\r\nz.string()\r\n  .regex(/^[0-9]+$/)\r\n  .transform(Number)\r\n```\r\n\r\nThis means that the input type(`string`) and output type(`number`) are different. But, Hono does not support different input and output types. If we use \"transform\" in Zod Validator Middleware, the value from `c.req.valid()` will be \"input type\" not \"output type\":\r\n\r\n```ts\r\nconst app = new Hono().post(\r\n  '/foo',\r\n  zValidator(\r\n    'json',\r\n    z.object({\r\n      id: z\r\n        .string()\r\n        .regex(/^[0-9]+$/)\r\n        .transform(Number),\r\n    })\r\n  ),\r\n  (c) => {\r\n    c.req.valid('json').id // expected to be `number`\r\n```\r\n\r\n<img width=\"643\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224057616-69bd5ef2-f8cd-4929-bc85-c2461482db9e.png\">\r\n\r\nThis is mentioned at #946 \r\n\r\nWith this PR, the validator treats input and output types as different, so it will suport Zod's transform.\r\n\r\n<img width=\"577\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224058868-927497f1-3ed5-46b7-90b9-983f8926ae58.png\">\r\n\r\nWithout this feature, Validation using Zod and others would be very inconvenient to use. So, if there are no problems, would like to include it in the next minor version upgrade \"v3.1.0.\r\n\r\nThis will fix #946","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1617396200},{"id":1620019705,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/970","title":"feat(middleware): support overwriting response after `next()`","body":"This PR enables completely overwriting the response from middleware after `next()`. This matter is mentioned at #960 .\r\n\r\nWe can do it by putting `undefined`:\r\n\r\n```ts\r\napp.use('*', async (c, next) => {\r\n  await next()\r\n  c.res = undefined\r\n  c.res = new Response('New Response')\r\n})\r\n```\r\n\r\nGood PR, as this is done with very few codes.\r\n\r\nFix #960","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1620019705},{"id":1620048482,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/971","title":"fix(types): make `MergePath<'/api', '/'>` work well","body":"This PR fixes the `MergePath` type definition.\r\n\r\nBefore this PR if you write the following:\r\n\r\n```ts\r\ntype path = MergePath<'/api', '/'>\r\n```\r\n\r\n`path` will be `/api/`. But this is not correct because the actual value with `mergePath()` is the different. The trailing slash is removed:\r\n\r\nhttps://github.com/honojs/hono/blob/fea78f29bd681350ce61dd71b33042aa6ec7db5c/src/utils/url.test.ts#L113\r\n\r\nSo, I've fixed it:\r\n\r\n```ts\r\ntype path = MergePath<'/api', '/'>\r\n// path will be /api\r\n```\r\n\r\nWhit this PR, the matters mentioned at #962 may be resolved.\r\n\r\n<img width=\"768\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224492645-57cbb58f-a2f0-47ad-b051-f75071fb48aa.png\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1620048482},{"id":1620222210,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/972","title":"`etag` middleware returns incorrect headers","body":"The [**IETF** standards](https://datatracker.ietf.org/doc/html/rfc9110#name-304-not-modified) say the following[^1] about `304 Not Modified` responses...\r\n\r\n> The server generating a 304 response MUST generate any of the following header fields that would have been sent in a [200 (OK)](https://datatracker.ietf.org/doc/html/rfc9110#status.200) response to the same request:\r\n> * [Content-Location](https://datatracker.ietf.org/doc/html/rfc9110#field.content-location), [Date](https://datatracker.ietf.org/doc/html/rfc9110#field.date), [ETag](https://datatracker.ietf.org/doc/html/rfc9110#field.etag), and [Vary](https://datatracker.ietf.org/doc/html/rfc9110#field.vary)\r\n> * Cache-Control and Expires (see [[CACHING](https://datatracker.ietf.org/doc/html/rfc9111)])\r\n\r\nHowever, the `etag` middleware does not return the `ETag` header for 304 responses.\r\n\r\nhttps://github.com/honojs/hono/blob/fea78f29bd681350ce61dd71b33042aa6ec7db5c/src/middleware/etag/index.ts#L20-L30\r\n\r\n[^1]: https://datatracker.ietf.org/doc/html/rfc9110#section-15.4.5-2","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1620222210},{"id":1620264354,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/973","title":"fix(etag): returns correct headers","body":"In this PR, I've made the Etag Middleware returns the `Etag` header if the response is `304`.\r\n\r\nThis will fix #972 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1620264354},{"id":1620634423,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/974","title":"optional route parameter does not work","body":"The route `/:optional?` is not used by Hono.\r\n\r\nWhen i go to [`/test`](https://honojs.deno.dev/test), the optional route is correctly used by Hono.\r\n\r\nHowever, when i go to [`/`](https://honojs.deno.dev/), the optional route is skipped.\r\n\r\n## Reproduction\r\nhttps://dash.deno.com/playground/honojs\r\n\r\n## Raw Code\r\n```ts\r\nimport { serve } from 'https://deno.land/std@0.179.0/http/server.ts';\r\nimport { logger } from 'https://deno.land/x/hono@v3.0.4/middleware.ts';\r\nimport { Hono } from 'https://deno.land/x/hono@v3.0.4/mod.ts';\r\n\r\n// json helper\r\nconst formatJSON = (input: string) => JSON.stringify(input, null, 4);\r\n\r\n// create a hono instance\r\nconst app = new Hono();\r\n\r\n// middleware\r\napp.use(logger());\r\n\r\n// optional route\r\napp.get('/:optional?', c => c.text(formatJSON({ route: '/:optional?', params: c.req.param() })));\r\n\r\n// fallback route\r\napp.get('*', c => c.text(formatJSON({ route: '*', params: c.req.param() })));\r\n\r\n// list routes\r\napp.showRoutes();\r\n\r\n// start server\r\nawait serve(app.fetch);\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1620634423},{"id":1621224232,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/975","title":"fix(route): support a root-level optional parameter","body":"I've implemented a root-level optional parameter `/:optional?` which was not provided.\r\n\r\nThis will fix #974 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1621224232},{"id":1621453642,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/976","title":"refactor: remove lint warnings","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1621453642},{"id":1621460733,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/977","title":"test(bun): use `test` instead of `wiptest`!","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1621460733},{"id":1621501887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/978","title":"fix(client): `removeIndexString` supports `/sub/index`","body":"`removeIndexString`  was supporting only `/`, so if we have a case like below, it will request to `/foo/index`.\r\n\r\n```ts\r\nconst res = await client.foo.index.$get()\r\n```\r\nBut,  if the endpoint path is `/foo/`, of course, it will return Not Found.\r\n\r\nThis PR makes `removeIndexString` support `/sub/index` and will fix the issue.\r\n\r\nFix #962 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1621501887},{"id":1621711645,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/979","title":"hc index route","body":"Hey,\r\n\r\nI encountered a bug when using `route` with a nested index route:\r\n\r\n```ts\r\nimport { Hono } from 'hono';\r\nimport { hc } from 'hono/client';\r\n\r\nconst api = new Hono().route('/api');\r\nconst route = api.get('', c => c.jsonT({ ok: true }));\r\n\r\ntype AppType = typeof route;\r\n\r\nconst client = hc<AppType>('/');\r\n\r\n// this will create a request against `/api/index` instead of `/api`\r\nclient.api.index.$get();\r\n```\r\n\r\nThe request is run against `/api/index` instead of `/api` in this example.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1621711645},{"id":1622445491,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/980","title":"feat(pages): enable getting `eventContext`","body":"This PR is for an adapter of Cloudflare Pages. Now we can get \"EventContext\" from `env`. It's useful for adding Basic Auth to your page's site with the middleware.\r\n\r\n```ts\r\n// functions/_middleware.ts\r\nimport { Hono } from 'hono'\r\nimport { basicAuth } from 'hono/basic-auth'\r\nimport { handle } from 'hono/cloudflare-pages'\r\nimport type { EventContext } from 'hono/cloudflare-pages'\r\n\r\ntype Bindings = {\r\n  eventContext: EventContext\r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get(\r\n  '*',\r\n  basicAuth({\r\n    username: 'hoge',\r\n    password: 'bar',\r\n  }),\r\n  async (c) => {\r\n    return c.env.eventContext.next()\r\n  }\r\n)\r\n\r\nexport const onRequest = handle(app)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1622445491},{"id":1622465294,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/981","title":"feat(page/nextjs): show \"deprecated\" for 2nd arg of `handle()`","body":"This PR is for the Cloudflare Pages adapter and the Next.js adapter. Now, we recommend using `app.basePath()` to set the base path instead of passing a second argument to `handle()`. With this PR showing the \"deprecated\" message:\r\n\r\n<img width=\"561\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/224855331-1cc293a7-e406-421d-9eb8-7414e1374f55.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1622465294},{"id":1623254424,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/982","title":"feat(validator): Allow validator to apply validation to path param.","body":"How about allowing the validator to also apply validation to the path param?\r\n\r\nWe can still write the following, which is a helpful way to do it.\r\n```\r\napp.get('/users/:id{[0-9]+}/books/:title', handler);\r\n```\r\n\r\nHowever, validating with a validator in the following cases would be good.\r\n* Should use 400 instead of 404.\r\n* Should be validated by something that regular expressions cannot express.\r\n* Should be changed to Number type.\r\n\r\n### Type?\r\n\r\nI tried the following changes but couldn't get the https://github.com/usualoma/hono/blob/1a3f2f62d6dece59e4c5e90b5ed21f0388d8b4d9/src/validator/validator.test.ts#L96-L150 test to pass and gave up. Although we cannot reference the path parameter type (generated from `:id`) in ValidationFunction, this PR change would be a useful enough feature.\r\n\r\n```diff\r\ndiff --git a/src/validator/validator.ts b/src/validator/validator.ts\r\nindex c38ad05..b5d27a5 100644\r\n--- a/src/validator/validator.ts\r\n+++ b/src/validator/validator.ts\r\n@@ -7,9 +7,9 @@ type ValidationTargetByMethod<M> = M extends 'get' | 'head' // GET and HEAD requ\r\n   ? Exclude<keyof ValidationTargets, ValidationTargetKeysWithBody>\r\n   : keyof ValidationTargets\r\n \r\n-export type ValidationFunction<InputType, OutputType, E extends Env = {}> = (\r\n+export type ValidationFunction<InputType, OutputType, E extends Env = {}, P extends string = any> = (\r\n   value: InputType,\r\n-  c: Context<E>\r\n+  c: Context<E, P>\r\n ) => OutputType | Response | Promise<Response>\r\n \r\n export const validator = <\r\n@@ -29,7 +29,7 @@ export const validator = <\r\n   E extends Env = any\r\n >(\r\n   target: U,\r\n-  validationFunc: ValidationFunction<InputType, OutputType, E>\r\n+  validationFunc: ValidationFunction<InputType, OutputType, E, P>\r\n ): MiddlewareHandler<E, P, V> => {\r\n   return async (c, next) => {\r\n     let value = {}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1623254424},{"id":1623623653,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/983","title":"fix(types): infer types correctly","body":"This PR will fix two issues about types:\r\n\r\n1. It could not infer the param type if the path has path parameters.\r\n\r\n<img width=\"576\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225035919-b58f64c8-e98d-4acd-bc0e-d1102faf1177.png\">\r\n\r\n2. The value became `unknown` in validation functions.\r\n\r\n<img width=\"579\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225036338-2ea5b5f7-9c7c-4942-af26-768360258716.png\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1623623653},{"id":1623767875,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/984","title":"feat(validator): `query` supports array params","body":"This PR enables the validator to handle array params with `query`, not using `queries`.\r\n\r\nFor example, before this PR, we could not validate multiple params like `tag` using `query`:\r\n\r\n```\r\nhttp://localhost/search?page=123&tag=a&tag=b\r\n```\r\n\r\nOr we have to use `queries` but if we do so, they all will be `array`.\r\n\r\nWith this PR, the values we could get from `query` will be `Record<string, string | string[]>`. So we can write the followings:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n  q: z.string(),\r\n  tag: z.array(z.string()),\r\n})\r\n\r\nconst route = app.get('/post', zValidator('query', schema), (c) => {\r\n  const { q, tag } = c.req.valid('query')\r\n  return c.jsonT({\r\n    queryString: q,\r\n    tags: tag,\r\n  })\r\n})\r\n```\r\n\r\nThis issue is mentioned by @equt in our Discord. Thanks.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1623767875},{"id":1626345113,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/985","title":"Feature Req: Use zod-validation-error to parse zod errors","body":"There is an excellent library that makes the responses from Zod validation errors much more useful and human friendly.\r\n\r\nI would suggest incorporating this into the Zod validation middleware.\r\n\r\nhttps://github.com/causaly/zod-validation-error/\r\n\r\n They recommend this lib in the Zod docs.\r\n\r\nhttps://zod.dev/?id=error-handling","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1626345113},{"id":1627268698,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/986","title":"Modifying cookies should create a new response object","body":"Setting cookies via `c.cookie` does not work with `getMiniflareFetchMock` provided by Miniflare, this is because the headers object returned by `MockAgent` is immutable, and `c.cookie` mutates the headers instead of creating a new `Response`.\r\n\r\n```\r\nTrace: TypeError: immutable\r\n    at Headers.append (/*/node_modules/.pnpm/undici@5.9.1/node_modules/undici/lib/fetch/headers.js:227:13)\r\n    at Context.header (/*/node_modules/.pnpm/hono@3.0.5/node_modules/hono/dist/cjs/context.js:53:28)\r\n    at Context.cookie (/*/node_modules/.pnpm/hono@3.0.5/node_modules/hono/dist/cjs/context.js:150:12)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1627268698},{"id":1627633820,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/987","title":"feat(adapter): introduce AWS Lambda Adapter","body":"This PR introduces the AWS Lambda Adapter. With this Adapter, you can run applications using Hono on AWS Lambda, and you can also publish them with API Gateway.\r\n\r\n### Caution\r\n\r\nIf this feature is released, it will be experimental for a while and the API might be change\r\n\r\n### Usage\r\n\r\nThe usage is almost the same as the Cloudflare Pages and Next.js adapters. Import `handle`, give the Hono application, and export it.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/aws-lambda'\r\nimport { logger } from 'hono/logger'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', logger())\r\n\r\napp.get('/hello', (c) => {\r\n  return c.json({\r\n    message: 'Hono meets Lambda',\r\n  })\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nThis is all you need to do to get your Hono application running in Lambda.\r\n\r\n### Settings\r\n\r\nUse AWS API Gateway to publish applications run on Lambda.\r\n\r\n<img width=\"712\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225646479-368a9034-91c0-4abd-87b1-f2eca99115fc.png\">\r\n\r\nIn API Gateway, create a Route `ANY /{proxy+}`. This way, the Hono application can handle all methods and paths.\r\n\r\n<img width=\"641\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/225646901-eef470de-4861-490f-a6ab-209012571575.png\">\r\n\r\n### Deploy\r\n\r\nThe simplest way is to use esbuild to transpile to JavaScript, compress it to Zip, and upload it using `aws` CLI. For example, `package.json` could look like this.\r\n\r\n```json\r\n{\r\n  \"name\": \"lambda-hello\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"build\": \"esbuild --bundle --outfile=./dist/index.js --platform=node --target=node18 ./src/index.ts\",\r\n    \"zip\": \"zip -j lambda.zip dist/index.js\",\r\n    \"update\": \"aws lambda update-function-code --zip-file fileb://lambda.zip --function-name hello\",\r\n    \"deploy\": \"run-s build zip update\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Is this what users really want?\r\n\r\nI think the answer is \"Yes\". Hono was originally intended for environments where Web Standard runs natively, such as Cloudflare Workers and Deno. However, Node.js v18 now supports Web Standard such as Request/Response, so it can work on Lambda without Polyfill.\r\n\r\nMany users use Hono for Cloudflare Workers. But that's not all we need to do, because one of Hono's key features is that it works on many platforms. With Hono running on many platforms, more users will use it and get a lot of feedback. We want to make it even better.\r\n\r\n### Have to include it in core?\r\n\r\nMaybe yes. It's OK to be `hono/aws-lambda`. AWS Lambda adapters should be treated like Cloudflare Pages and Next.js adapters. By limiting support to Node.js v18 only, Polyfill is not needed, so the project will not be as large as it could be with as little code as possible.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1627633820},{"id":1628280015,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/988","title":"feat(req): introduce `c.req.path`","body":"This PR introduces the property `path` for HonoRequest.\r\n\r\nThis simple feature allows you to get the URL's path by accessing `c.req.path`.\r\n\r\n```ts\r\napp.get('/search', (c) => c.text(c.req.path)) // \"search\"\r\n```\r\n\r\nThis feature is what many users wanted. This is good because there is no performance degradation, only a slight increase in file size. There are some API changes, but they are used internally, so there are no problems.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1628280015},{"id":1628848701,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/989","title":"Merge next into main","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1628848701},{"id":1629641623,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/990","title":"Protocol mismatch. Expected: http:. Got: https:","body":"I'm using bun with hono and I got this error, How can I solve this ?\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/47665507/225970136-ccbaa2b8-f918-4dfa-97da-08c09677b888.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1629641623},{"id":1630262943,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/993","title":"ConnectionClosed: fetch() failed","body":"Hello, I'm using  npm package `yt-search` in my bun hono project.\r\n\r\nI use it like this in my code :\r\n`const videos = await yts.search(\"Alan walker\");`\r\n\r\nAnd this throw me this error: \r\n\r\n![image](https://user-images.githubusercontent.com/47665507/226099158-90aca524-a2f2-41f1-bd7c-7d893f9da9c0.png)\r\n\r\n**Note**: The package work well in nodeJS express project.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630262943},{"id":1630263737,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/994","title":"ConnectionClosed: fetch() failed","body":"Hello, I'm using npm package yt-search in my bun hono project.\r\n\r\n```\r\nimport * as yts from \"yt-search\";\r\nconst videos = await yts.search(\"Alan walker\");\r\n```\r\n\r\nAnd this throw me this error:\r\n\r\n![image](https://user-images.githubusercontent.com/47665507/226099315-dff812fc-4c02-48ac-a0fb-c398568c7d07.png)\r\n\r\n\r\nNote: The package work well in nodeJS express project.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630263737},{"id":1630542029,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/995","title":"Setting a cookie partially breaks HTML content type","body":"Applying a cookie appears to break calls to the `c.html` method. The below code erroneously returns a plain text content type.\r\n```ts\r\napp.get('/cookietest', (c: Context) => {\r\n    c.cookie(\"COOKIE\", \"cookieString\");\r\n    return c.html(\"<h1>This rendered fine</h1>\");\r\n})\r\n```\r\nIf the code is changed to the below code, it works as expected and returns an html content type.\r\n```ts\r\napp.get('/cookietest', (c) => {\r\n    c.cookie(\"COOKIE\", \"cookieString\");\r\n    c.header('Content-Type', 'text/html');\r\n    return c.html(\"<h1>This rendered fine</h1>\");\r\n})\r\n```\r\nIf a return call uses `c.html`, the `Content-Type` should not need to separately specified.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630542029},{"id":1630678574,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/996","title":"`basePath` incompatible with `app.route()`","body":"The following deno script throws a typescript error (works fine without `basePath`)\r\n\r\n```ts\r\nimport { Hono } from \"[hono/mod.ts](https://deno.land/x/hono@v3.1.0/mod.ts)\";\r\n\r\nconst mainApp = new Hono();\r\nmainApp.get(\"/foo\", (c) => c.text(\"bar\"));\r\n\r\nconst subApp = new Hono().basePath(\"/sub\");\r\nsubApp.get(\"/bar\", (c) => c.text(\"baz\"));\r\n\r\nmainApp.route(\"/sub\", subApp);\r\n/*\r\nArgument of type 'Hono<Env, {}, \"/sub\">' is not assignable to parameter of type 'Hono<Env, {}, \"\">'.\r\n  The types of 'route(...).use' are incompatible between these types.\r\n    Type 'MiddlewareHandlerInterface<Env, Record<string, unknown>, \"/sub\">' is not assignable to type 'MiddlewareHandlerInterface<Env, Record<string, unknown>, \"\">'.\r\n      Types of parameters 'handlers' and 'handlers' are incompatible.\r\n        Types of parameters 'c' and 'c' are incompatible.\r\n          Type 'Context<Env, `/sub/${string}`, {}>' is not assignable to type 'Context<Env, string, {}>'.\r\n            Types of property 'req' are incompatible.\r\n              Type 'HonoRequest<`/sub/${string}`, unknown>' is not assignable to type 'HonoRequest<string, unknown>'.\r\n                Type 'string' is not assignable to type '`/sub/${string}`'.deno-ts(2345)\r\n*/\r\n```\r\n\r\nThis is not that big of a deal (maybe even not intended to work?), but would be useful when navigating my code and for RPC across files \r\n(Will probably have to see if the client even supports it, as I don't know if it was built with multiple `app`s in mind, but can cross that bridge later!)\r\n\r\n---\r\n\r\nIf this is something that could be made to work, it should also be possible to enforce a correct `basePath` when using `.route`\r\n```ts\r\nconst mainApp = new Hono();\r\n\r\nconst subApp = new Hono().basePath(\"/sub\");\r\n\r\n/* TS error */\r\nmainApp.route(\"/notsub\", subApp);\r\n\r\n/* no error */\r\nmainApp.route(\"/sub\", subApp);\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630678574},{"id":1630753627,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/997","title":"fix(context): fixed a bug for `c.header()` with a `append` option","body":"This PR fixes the issue for `c.header()` with `append` option.\r\n\r\nWhen using `c.header()` with the `append` option as in the following code, the `Content-Type` was not set correctly.\r\n\r\n```ts\r\napp.get('/', (c) => {\r\n  c.header('foo', 'bar', { append: true })\r\n  return c.html('<h1>This rendered fine</h1>') // <== text/plain...\r\n})\r\n```\r\n\r\nThis PR will resolve it.\r\n\r\nFix #995 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630753627},{"id":1630755949,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/998","title":"feat: Enable to add subApp with basePath.","body":"This PR fixes #996.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630755949},{"id":1630766668,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/999","title":"Refactoring base64 logic for JWT","body":"- Import base64 logic from https://github.com/Code-Hex/firebase-auth-cloudflare-workers/blob/main/src/base64.ts\r\n- Decoding speed will be faster almost 2x\r\n- Accept to encode RFC 3548 examples\r\n- This PR is created at YAPC::Japan::Kyoto 2023 🔥 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1630766668},{"id":1631077259,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1000","title":"Hono({ strict: false }) seems to not work correctly","body":"I have an app developed on miniflare (deployed to cloudflare) like this:\r\n\r\n`index.ts`\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { serveStatic } from 'hono/cloudflare-workers'\r\nimport page from './page'\r\n\r\nconst app = new Hono({ strict: false })\r\n\r\napp.get('/static/*', serveStatic({ root: './' }))\r\napp.get('/img/*', serveStatic({ root: './' }))\r\napp.route('', page)\r\n\r\nexport default app\r\n\r\n```\r\n\r\n\r\npage.tsx\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\nconst page = new Hono({ strict: false })\r\npage.get('/abg', (c) => c.text('abg'))\r\npage.get('/', (c) => c.text('hello root'))\r\n\r\nexport default page\r\n```\r\n\r\nwith this setup when I visit \r\nhttp://localhost:8787 => 404\r\nhttp://localhost:8787/ => 404\r\nhttp://localhost:8787/abg => abg\r\nhttp://localhost:8787/abg/ => abg\r\n\r\nwhen I remove `strict: false` both in `index.ts` and `page.tsx` I get this\r\nhttp://localhost:8787 => hello root\r\nhttp://localhost:8787/ => hello root\r\nhttp://localhost:8787/abg => abg\r\nhttp://localhost:8787/abg/ => 404\r\n\r\n\r\nAm I doing something wrong? How Can I get the same behaviour with and without trailing slashes?\r\n\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1631077259},{"id":1631684398,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1001","title":"supported issued_at validation for JWT","body":"This validation is allowed `current_time >= iat` if there is iat field.\r\n\r\n[RFC](https://www.rfc-editor.org/rfc/rfc7519#section-4.1.6) for iat but there is no reference to requirements. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1631684398},{"id":1632001743,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1002","title":"Questions on how the cors middleware works","body":"In the following LoC, `cors` defaults to the 1st origin in a provided list of origins when it is not able to find a match.\r\n\r\nhttps://github.com/honojs/hono/blob/ea67919b8215ef9eed4f91fc85e4fda71c70d482/src/middleware/cors/index.ts#L30\r\n\r\n It is mainly due to the request URL does not have `origin`/ `Origin` header set. However, this raises a few questions:\r\n\r\n1. Should an incoming request be allowed when it is not one of the allowed origins?\r\n1. Why is the 1st origin being used as the default origin?\r\n1. While HTTP headers are not case sensitive, does the middleware also need to look for the request origin from the `Origin` header instead of just `origin`, like `c.req.headers.get('Origin')`?\r\n\r\n   https://github.com/honojs/hono/blob/ea67919b8215ef9eed4f91fc85e4fda71c70d482/src/middleware/cors/index.ts#L39\r\n\r\nThanks in advance.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1632001743},{"id":1632218784,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1003","title":"fix(app): don't remove slash form `/` if strict is `false`","body":"When the `strict` option is `false` and the path is `/`, do not remove slashes.\r\n\r\nFix #1000 \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1632218784},{"id":1632230527,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1004","title":"fix(app): don't remove slash form `/` if strict is false","body":"Do not remove slashes when the strict option is `false` and the path is `/`.\r\n\r\nFix https://github.com/honojs/hono/issues/1000","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1632230527},{"id":1632723544,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1005","title":"Feature Request: Get output of JWT payload","body":"In my application, we need the payload from the validated JWT, however the util currently just returns `true` if it's been validated. This is a feature request to either:\r\n\r\n- Allow it to return the payload (this might be breaking though?)\r\n- Put it in the context, using `c.set()` with a key that the user defines as one of the options\r\n\r\nThis would allow people to use the JWT module more effectively 🙂 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1632723544},{"id":1635287079,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1006","title":"Decode URL params","body":"Since query params are passed in the URL, the data is encoded (e.g. `@` becomes `%40`).\r\n\r\nThis breaks the **validators** in cases like having a Regex to validate an email.\r\n\r\nAlso the data received in the **handlers** is encoded.\r\n\r\n### Current Behavior\r\n```ts\r\nconst query = c.req.valid('query')\r\n// { email: 'example%40gmail.com' }\r\n```\r\n\r\n### Expected Behavior\r\n```ts\r\nconst query = c.req.valid('query')\r\n// { email: 'example@gmail.com' }\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1635287079},{"id":1636617852,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1008","title":"perf: Reduce await.","body":"This change will improve the results of the following benchmarks\r\nhttps://github.com/SaltyAom/bun-http-framework-benchmark","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1636617852},{"id":1637153565,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1009","title":"feat(adapter): Added aws-handler support for APIGatewayProxyEventV2","body":"Super exicted about the slim adapter! Got the chance to start using it yesterday and ran into some missing mappings when calling lambda directly through the function URL.\r\n\r\n- Renamed `APIGatewayEvent` to `APIGatewayProxyEvent` to follow the convention from `@types/aws-lambda`\r\n- Added `APIGatewayEventV2`. The type used by function urls\r\n- Added support for sending files through streams. Ran into issues while using with `serveStatic`. Files will be converted to `base64`.\r\n- Broke the handler into smaller functions. It became quite bloated when accounting for base64 and event mapping\r\n\r\nSubmitted directly through github.com - will catch up on any red flags 👍 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1637153565},{"id":1639612951,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1010","title":"fix(req): decode special chars in URL params","body":"This PR enables `c.req.query` and `c.req.queries` to decode special characters in URL parameters.\r\n\r\nThis will fix #1006","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1639612951},{"id":1640700229,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1012","title":"fix(package.json): fixed `test:wrangler` and `test:lambda`","body":"The `package.json` was incorrectly configured and has been fixed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1640700229},{"id":1640903781,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1013","title":"feat(jwt): support for getting payload from `c.get('jwtPayload')`","body":"This PR will add support for getting the decoded payload from `c.get('jwtPaload')` for JWT Auth Middleware.\r\n\r\n```ts\r\napp.post(\r\n  '/auth/abc',\r\n  jwt({\r\n    secret: 'a-secret',\r\n  }),\r\n  (c) => {\r\n    const payload = c.get('jwtPayload')\r\n    //...\r\n  }\r\n)\r\n```\r\n\r\nThis will resolve #810 #1005 \r\n\r\n### Does it include breaking changes?\r\n\r\nThe `verify()` API in `utils/jwt/jwt.ts` has been changed. It will return `any` instead of `boolean`. This seems to be  a breaking change, but this function is mainly \"utility\" used in the Hono internal. We should release the fix, including breaking changes as major version up, but this change will not affect end users. EDIT ~~I'd like to release it as a minor version up \"3.2.0\".~~\r\n\r\n\r\nEDIT:\r\n\r\nWe can release this with a patch release.\r\n\r\n* Utilities such as `utils/url.ts` are broken and changed without notice. utilities are intended to be used internally and may be changed in patch releases. Same for `utils/jwt/jwt.ts.\r\n* It is not a major feature addition, and we don't have to include it in the Minor or Major release.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1640903781},{"id":1641093842,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1014","title":"fix(utils/url): Replace \"+\" in the query string with \" \".","body":"We should replace \"+\" with \" \" for the query string.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent#decoding_query_parameters_from_a_url","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1641093842},{"id":1641762246,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1015","title":"refactor(utils/url): Decode parameters more accurately without performance degradation.","body":"More accurate decoding in query string parsing. (e.g., encoded keys)\r\n\r\n### performance\r\n\r\nThe following are the results of a comparison between hono's v3.1.3 and fast-querystring (which is used in elysia) with a slight modification to the benchmarks/query-param added in this PR.\r\n\r\nIn some places, hono's v3.1.3 is faster because decoding is skipped, and compared to that, this PR has a performance decrease. Nevertheless, the speed reduction is slight, and the amount of code has not increased.\r\nThis should be changed as it is unsuitable for a framework not to get parameters right.\r\n\r\n#### bun\r\n\r\n```\r\n$ npm run bench:bun\r\n\r\n> bench:bun\r\n> bun run ./src/bench.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: bun 0.5.8 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------------- -----------------------------\r\n• {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        65.82 ns/iter  (61.54 ns … 198.54 ns)  65.23 ns 117.97 ns 133.18 ns\r\nhono with PR      66.68 ns/iter  (60.56 ns … 174.03 ns)  66.41 ns 123.95 ns  138.5 ns\r\nfastQuerystring   90.34 ns/iter  (84.92 ns … 269.87 ns)  88.87 ns 143.85 ns 167.52 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n  hono 3.1.3\r\n   1.01x faster than hono with PR\r\n   1.37x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       158.91 ns/iter  (150.2 ns … 333.56 ns) 155.87 ns 217.88 ns 324.67 ns\r\nhono with PR     121.36 ns/iter (111.56 ns … 219.51 ns) 119.86 ns 184.04 ns    193 ns\r\nfastQuerystring  161.95 ns/iter  (152.05 ns … 230.4 ns) 163.67 ns 225.31 ns 227.72 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n  hono with PR\r\n   1.31x faster than hono 3.1.3\r\n   1.33x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        93.51 ns/iter   (88.1 ns … 216.14 ns)  92.46 ns 146.49 ns 192.24 ns\r\nhono with PR      98.15 ns/iter   (93.23 ns … 176.8 ns)  97.18 ns 149.85 ns 162.26 ns\r\nfastQuerystring   88.39 ns/iter  (82.92 ns … 211.82 ns)  87.12 ns 143.22 ns 178.06 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\"}\r\n  fastQuerystring\r\n   1.06x faster than hono 3.1.3\r\n   1.11x faster than hono with PR\r\n\r\n• {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       181.37 ns/iter (170.66 ns … 302.08 ns) 180.01 ns 243.45 ns 247.03 ns\r\nhono with PR     186.77 ns/iter (176.45 ns … 290.13 ns)  190.2 ns  246.7 ns 263.16 ns\r\nfastQuerystring  162.25 ns/iter  (153.31 ns … 302.2 ns) 159.61 ns 227.72 ns 247.82 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n  fastQuerystring\r\n   1.12x faster than hono 3.1.3\r\n   1.15x faster than hono with PR\r\n\r\n• {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       196.09 ns/iter  (183.96 ns … 276.2 ns) 194.43 ns 257.71 ns 272.48 ns\r\nhono with PR     232.93 ns/iter (222.82 ns … 309.85 ns) 231.97 ns 294.33 ns 299.66 ns\r\nfastQuerystring  259.47 ns/iter (249.71 ns … 319.48 ns) 258.02 ns 315.05 ns 315.56 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n  hono 3.1.3\r\n   1.19x faster than hono with PR\r\n   1.32x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       184.92 ns/iter (174.18 ns … 326.26 ns) 187.11 ns 254.86 ns 256.74 ns\r\nhono with PR     621.62 ns/iter (576.61 ns … 810.12 ns)  623.6 ns 810.12 ns 810.12 ns\r\nfastQuerystring  542.04 ns/iter (516.23 ns … 739.35 ns) 538.62 ns 710.87 ns 739.35 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n  hono 3.1.3\r\n   2.93x faster than fastQuerystring\r\n   3.36x faster than hono with PR\r\n\r\n• {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       628.45 ns/iter (598.59 ns … 732.02 ns) 638.18 ns 732.02 ns 732.02 ns\r\nhono with PR     658.52 ns/iter  (525.1 ns … 733.42 ns) 661.84 ns 733.42 ns 733.42 ns\r\nfastQuerystring   301.3 ns/iter (283.41 ns … 388.77 ns) 302.77 ns 383.02 ns 388.77 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n  fastQuerystring\r\n   2.09x faster than hono 3.1.3\r\n   2.19x faster than hono with PR\r\n```\r\n\r\n#### node\r\n\r\n```\r\n$ npm run bench:node\r\n\r\n> bench:node\r\n> tsx ./src/bench.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: node v18.14.0 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------------- -----------------------------\r\n• {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        41.39 ns/iter  (37.95 ns … 516.84 ns)  43.52 ns  57.09 ns  60.73 ns\r\nhono with PR      55.12 ns/iter     (52.5 ns … 68.3 ns)  57.14 ns  62.19 ns  64.97 ns\r\nfastQuerystring   66.02 ns/iter  (63.96 ns … 372.19 ns)   65.9 ns  72.42 ns  73.45 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\",\"key\":\"page\"}\r\n  hono 3.1.3\r\n   1.33x faster than hono with PR\r\n   1.6x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        124.2 ns/iter  (118.8 ns … 131.31 ns) 126.15 ns 130.28 ns 130.52 ns\r\nhono with PR      76.68 ns/iter    (73.77 ns … 88.6 ns)  79.09 ns  83.51 ns  84.45 ns\r\nfastQuerystring  199.72 ns/iter (194.35 ns … 217.53 ns) 202.18 ns 211.56 ns 211.94 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\",\"key\":\"page\"}\r\n  hono with PR\r\n   1.62x faster than hono 3.1.3\r\n   2.6x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3        80.57 ns/iter  (77.79 ns … 104.94 ns)  82.96 ns  89.03 ns  99.25 ns\r\nhono with PR      91.85 ns/iter    (87.9 ns … 107.6 ns)   93.9 ns 101.43 ns 103.75 ns\r\nfastQuerystring   71.55 ns/iter   (68.54 ns … 86.92 ns)  74.12 ns  82.68 ns  82.95 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?page=1\"}\r\n  fastQuerystring\r\n   1.13x faster than hono 3.1.3\r\n   1.28x faster than hono with PR\r\n\r\n• {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       164.39 ns/iter (153.94 ns … 197.98 ns) 168.11 ns 186.43 ns 196.59 ns\r\nhono with PR     167.32 ns/iter (163.34 ns … 181.16 ns) 169.12 ns 176.17 ns 177.04 ns\r\nfastQuerystring  202.08 ns/iter (195.31 ns … 213.89 ns) 204.75 ns  213.7 ns  213.7 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com&page=1\"}\r\n  hono 3.1.3\r\n   1.02x faster than hono with PR\r\n   1.23x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       161.58 ns/iter (156.25 ns … 172.65 ns)  163.5 ns 168.73 ns 172.38 ns\r\nhono with PR     200.47 ns/iter (195.61 ns … 212.69 ns) 202.35 ns 210.52 ns 211.87 ns\r\nfastQuerystring  400.78 ns/iter (393.91 ns … 439.39 ns) 402.97 ns 426.57 ns 439.39 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?url=http://example.com/very/very/deep/path/to/something&search=very-long-search-string\"}\r\n  hono 3.1.3\r\n   1.24x faster than hono with PR\r\n   2.48x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       165.62 ns/iter (159.12 ns … 206.62 ns) 167.27 ns 182.45 ns 203.05 ns\r\nhono with PR        646 ns/iter (634.85 ns … 691.84 ns) 647.97 ns 691.84 ns 691.84 ns\r\nfastQuerystring  724.25 ns/iter (711.73 ns … 763.09 ns) 725.07 ns 763.09 ns 763.09 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?search=Hono+is+a+small,+simple,+and+ultrafast+web+framework+for+the+Edge.&page=1\"}\r\n  hono 3.1.3\r\n   3.9x faster than hono with PR\r\n   4.37x faster than fastQuerystring\r\n\r\n• {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n------------------------------------------------------- -----------------------------\r\nhono 3.1.3       534.15 ns/iter  (524.4 ns … 561.31 ns) 536.08 ns 552.36 ns 561.31 ns\r\nhono with PR     419.28 ns/iter (410.06 ns … 449.23 ns) 421.47 ns 439.72 ns 449.23 ns\r\nfastQuerystring  397.81 ns/iter (388.85 ns … 414.47 ns) 400.37 ns 412.43 ns 414.47 ns\r\n\r\nsummary for {\"url\":\"http://example.com/?a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9&j=10\"}\r\n  fastQuerystring\r\n   1.05x faster than hono with PR\r\n   1.34x faster than hono 3.1.3\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1641762246},{"id":1646313896,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1016","title":"Query params not always correctly decoded","body":"Hey, I noticed when I am doing oAuth2 with google that sometimes google sends me query parameters such as:\r\n\r\n```\r\n{\"state\":\"841c886d-14b7-4d82-9e03-dc5629cb473b\",\"code\":\"4%2F0AVHEtk63juCeqrbpiPBBKuGcnk_QnmUzVLhZ5WFxkLsSeOy5IFGJAZwXb1345hYk4Kc4iw\",\"scope\":\"email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid\",\"authuser\":\"1\",\"prompt\":\"consent\"}\r\n```\r\n\r\nor\r\n\r\n```\r\n{\"state\":\"348c51b6-7cbc-40da-a48c-16c3b100659a\",\"code\":\"4%2F0AVHEtk5mxLXlW660ngx3MWf4N1_tYox0lt2IC1mRNx398CJ3z4ab7gLP5kfWViyDNxv-hQ\",\"scope\":\"email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid\",\"authuser\":\"1\",\"prompt\":\"consent\"}\r\n```\r\n\r\nin code when I do:\r\n\r\n```\r\nconst { state, code } = c.req.query()\r\n```\r\n\r\n`code` looks like this: `4%2F0AVHEtk5mxLXlW660ngx3MWf4N1_tYox0lt2IC1mRNx398CJ3z4ab7gLP5kfWViyDNxv-hQ`\r\n\r\nwhich is not correctly decoded. When I do:\r\n\r\n```\r\ndecodeURIComponent(code)\r\n```\r\n\r\nI get the correct value: `4/0AVHEtk5mxLXlW660ngx3MWf4N1_tYox0lt2IC1mRNx398CJ3z4ab7gLP5kfWViyDNxv-hQ`\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1646313896},{"id":1646365735,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1017","title":"Improve typings on the new env adapter","body":"Rather than explicitly re-type the env variables as in the release notes example (`const { NAME } = env<{ NAME: string }>(c)`), could we simply re-use the typed `env` object from the passed in context?\r\n\r\nExample:\r\n\r\n```ts\r\nexport const env = <T extends Context>(c: T): T['env'] => {\r\n  // ... same as current implementation\r\n}\r\n```\r\n\r\nThen type-checking and autocomplete work as expected without having to re-declare the typings for the env bindings.\r\n\r\n<img width=\"544\" alt=\"Screenshot 2023-03-29 at 2 06 49 PM\" src=\"https://user-images.githubusercontent.com/847542/228642331-6f22d873-b83c-4686-aeaa-9fadb03fbdc9.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1646365735},{"id":1646834951,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1018","title":"req.parseBody should allow multiple keys (and converted to array)","body":"# Currently\r\nOnly the last key is recorded into the resulting object after `req.parseBody()`.\r\n\r\n# Expected\r\nWhen parsing request parameters that consists of multiple keys, the keys should be converted to array automatically.\r\n\r\n```\r\ntests=1&tests=2&tests=3\r\n\r\n{ tests: [ 1,2,3 ] }\r\n```\r\n\r\nAlso, another use case where using `tests[]` which has been around for some time also need to be supported.\r\n\r\n```\r\ntests[]=1\r\n\r\n{ tests: [ 1 ] }\r\n```  \r\n\r\nRelated: https://github.com/honojs/hono/issues/257","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1646834951},{"id":1646840635,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1019","title":"feat(types): expose `Input` type","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1646840635},{"id":1647845144,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1021","title":"feat(adapter): infer env typings from context","body":"closes  #1017 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1647845144},{"id":1648714340,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1022","title":"hono 3.1.4 brings new query utils which breaks some query use cases","body":"Let's see the case:\r\n\r\n`?pretty&foo=bar` should be resolved with `{ foo: 'bar', pretty: '' }` or `{ foo: 'bar', pretty: undefined }`.\r\n> Which I think the former one is more precise.\r\n\r\n![screenshot](https://user-images.githubusercontent.com/447084/229032684-4047d929-82d6-44bb-88c4-7a2042c29f02.png)\r\n\r\nBut with current hono implementations, this resolved as `{ 'pretty$foo': 'bar' }`\r\n![screenshot](https://user-images.githubusercontent.com/447084/229033661-57b50e2a-2a24-4ac3-b3b1-5c82f7f2705e.png)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1648714340},{"id":1648785674,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1023","title":"fix(utils/url): Fix behavior when parameters with no value specified are mixed.","body":"This PR fixes #1022\r\n\r\nThere is almost no performance degradation (In particular, there is no degradation for `_getQueryParam(url, key)`.)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1648785674},{"id":1649004945,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1024","title":"feat(deno): denoify","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1649004945},{"id":1649034279,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1025","title":"feat(jwt): support for getting payload from `c.get('jwtPayload')`","body":"Copied from #1013.\r\n\r\n---\r\n\r\nThis PR will add support for getting the decoded payload from `c.get('jwtPaload')` for JWT Auth Middleware.\r\n\r\n```ts\r\napp.post(\r\n  '/auth/abc',\r\n  jwt({\r\n    secret: 'a-secret',\r\n  }),\r\n  (c) => {\r\n    const payload = c.get('jwtPayload')\r\n    //...\r\n  }\r\n)\r\n```\r\n\r\nThis will resolve #810 #1005 \r\n\r\n### Does it include breaking changes?\r\n\r\nThe `verify()` API in `utils/jwt/jwt.ts` has been changed. It will return `any` instead of `boolean`. This seems to be  a breaking change, but this function is mainly \"utility\" used in the Hono internal. We should release the fix, including breaking changes as major version up, but this change will not affect end users. EDIT ~~I'd like to release it as a minor version up \"3.2.0\".~~\r\n\r\n\r\nEDIT:\r\n\r\nWe can release this with a patch release.\r\n\r\n* Utilities such as `utils/url.ts` are broken and changed without notice. utilities are intended to be used internally and may be changed in patch releases. Same for `utils/jwt/jwt.ts.\r\n* It is not a major feature addition, and we don't have to include it in the Minor or Major release.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1649034279},{"id":1653426251,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1026","title":"fix(pages): fixed type mismatch in `EventContext`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1653426251},{"id":1659349282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1028","title":"[Question] How Can I set a header key in a Middleware?","body":"Just Question.\r\nThis code tries to convert jwtsub into a header user-id key.\r\nBut header is Immutable.\r\nAre there alternative ways to compute the incoming request header keys?\r\nThe following middlewares need to computed requests.\r\n\r\n```typescript\r\nexport const setTenantIdMiddleware: MiddlewareHandler = async (ctx, next) => {\r\n    const jwtPayload = ctx.get('jwtPayload');\r\n\r\n  \r\n    if (!jwtPayload) {\r\n      const res = new Response('Unauthorized', {\r\n        status: 401,\r\n        headers: {\r\n          'WWW-Authenticate': `Bearer realm=\"${ctx.req.url}\",error=\"invalid_request\",error_description=\"jwtPayload is missing\"`,\r\n        },\r\n      });\r\n      throw new HTTPException(401, { res });\r\n    }\r\n  \r\n    const sub = jwtPayload.sub;\r\n    ctx.req.headers.set('user-id', sub);\r\n  \r\n    await next();\r\n  };\r\n```\r\n\r\n```log\r\n  Trace: TypeError: immutable\r\n    at Headers.set (/home/vscode/.volta/tools/image/packages/wrangler/lib/node_modules/wrangler/node_modules/undici/lib/fetch/headers.js:379:13)\r\n```\r\n \r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1659349282},{"id":1660048035,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1029","title":"Possible error in util/jwt","body":"It looks like the verify method in jwt.js uses the same test for \"exp\" as it does for \"nbf\". Is this correct?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1660048035},{"id":1665656461,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1031","title":"Export multiple route's type","body":"Hi, thank you for the amazing work for HonoJS so far.\r\n\r\nI have a question, how do I export types for multiple route using one `export` declaration? Because I'd like to import single type in my client (`const client = hc<ApiType>(\"/api\")`).\r\n\r\nFor example:\r\n\r\n```ts\r\nconst app = new Hono().basePath(\"/api\");\r\n\r\nexport const helloRoute = app.get(\"/hello\", (c) => hello());\r\nexport const greetRoute = app.get(\"/greet\", (c) => greet());\r\nexport type ApiType = typeof app; // <- How do I export all routes at once?\r\n\r\nexport default handle(app);\r\n\r\n```\r\n\r\nCurrently my workaround is this:\r\n\r\n```ts\r\nconst app = new Hono().basePath(\"/api\");\r\n\r\nexport const helloRoute = app.get(\"/hello\", (c) => hello());\r\nexport const greetRoute = app.get(\"/greet\", (c) => greet());\r\nexport type ApiType = typeof helloRoute | typeof greetRoute;\r\n\r\nexport default handle(app);\r\n```\r\n\r\nBut this approach requires me to add another union declaration for each routes that I have.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1665656461},{"id":1668923243,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1032","title":"Support `Host` as part of route matching?","body":"For applications such as proxies or any application that accepts multiple hostnames as part of routing logic it would be useful if each route also could match on `Request.Host`. Not sure if this is out of scope for Hono?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1668923243},{"id":1670885764,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1033","title":"Add `rewritePath` to `serveStatic` of hono/deno","body":"Need to add the feature from https://github.com/honojs/node-server/issues/29\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1670885764},{"id":1679516192,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1035","title":"We can use environment variables inside middleware but how to access them in middleware options?","body":"How to access environment variables in middlewares options for `jwt({secret: env.JWT_SECRET})`\r\n\r\nI have to use this trick to get this done\r\n```ts\r\nexport const authMiddleware: MiddlewareHandler = async (c, next) => {\r\n  await jwt({ secret: c.env.JWT_SECRET })(c, next);\r\n};\r\n\r\napp.get(\"/\", authMiddleware, (c) => {\r\n  return c.text(\"Authorized!!!\");\r\n});\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1679516192},{"id":1680000482,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1036","title":"feat: introduce PatternRouter and `hono/tiny`","body":"In this PR, I'll introduce **URLPatternRouter** and `hono/tiny`.\r\n\r\nThis feature, if merged, is experimental and subject to API changes in the future.\r\n\r\n### Motivation\r\n\r\nHono is small. The minimal \"Hello World\" application using latest \"v3.1.6\" is **20.6KB** when minified.\r\n\r\n<img width=\"506\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/233829404-e9ebe98f-f81b-483d-b068-53027218a735.png\">\r\n\r\nAbout half of that code consists of router implementations. Therefore, I thought we could create a router using `URLPattern` to reduce its size. It would be great if this approach allowed users to choose between a faster version or a smaller yet slower alternative.\r\n\r\n### URLPatternRouter\r\n\r\n**URLPatternRouter** is implemetend with `URLPattern`.\r\n\r\n> The URLPattern interface matches URLs or parts of URLs against a pattern. The pattern can contain capturing groups that extract parts of the matched URL.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/URLPattern\r\n\r\n`URLPattern` is only available in Cloudflare Workers and Deno. It is already implemented in the runtime, so we don't need to write additional code for matching URL paths with patterns.\r\n\r\nWe can use URLPatternRouter in the same way as RegExpRouter, TrieRouter, or SmartRouter:\r\n\r\n```ts\r\nconst app = new Hono({\r\n  router: new URLPatternRouter(),\r\n})\r\n```\r\n\r\n### `hono/tiny`\r\n\r\nHono uses a combination of \"SmartRouter, RegExpRouter, and TrieRouter\" by default.\r\n\r\n```ts\r\nreadonly router: Router<H> = new SmartRouter({\r\n  routers: [new RegExpRouter(), new TrieRouter()],\r\n})\r\n```\r\n\r\nThis awesome idea to keep it fast and support all routing patterns. However, if you want to use URLPatternRouter, you are forced to import these routers, as you cannot import only URLPatternRouter. This is because these routers are hard-coded in the constructor of `hono.ts`. This design is not ideal. Ideally, if you want to use only URLPatternRouter, it should allow you to import just URLPatternRouter.\r\n\r\nThen, I made `hono-base.ts`. It's like an abstract class which has not a really router. So, we have to use it with concrete router implemantation. Belows are new `hono.ts` as default.\r\n\r\n```ts\r\nexport class Hono extends HonoBase {\r\n  constructor(init: Partial<Pick<Hono, 'router' | 'strict'>> = {}) {\r\n    super(init)\r\n    this.router = new SmartRouter({\r\n      routers: [new RegExpRouter(), new TrieRouter()],\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n`hono/tiny` uses only URLPatternRouter along with the `hono-base.ts` mechanize. You can use it just like `hono` and It will be very small.\r\n\r\n```ts\r\nimport { Hono } from 'hono/tiny'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello hono/tiny!')\r\n})\r\n```\r\n\r\n### Really small\r\n\r\nI measured the size, and it is **13.06KB**! It's indeed very small.\r\n\r\n<img width=\"527\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/233830634-191bb9ea-e840-45f1-b9ab-7401140c86f5.png\">\r\n\r\n### Benchmark\r\n\r\nI took the benchmark. `URLPattern` is not available in Node.js and Bun, so I ran it on Deno. As expected, it is very slow.\r\n\r\n<img width=\"875\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/233830648-60a057f6-cf69-4050-a9a6-d8b1708765d3.png\">\r\n\r\nNevertheless, this router is featured by its small size, so it is okay if it is slow.\r\n\r\n### Implementation\r\n\r\n`URLPattern` has several features not found in Hono's other routers. If we allow those features to be used, other routers may have to support them. Therefore, it throws an Error when it tries to use those functions.\r\n\r\n---\r\n\r\nI like this feature. The implementation may be improved.\r\n\r\n---\r\n\r\n## EDIT.1\r\n\r\n### Real world benchmarks\r\n\r\nI ran the application using both `hono` and `hono/tiny` on Deno, and measured their performance with `bombardier`.\r\n\r\n```ts\r\napp.get('/', (c) => {\r\n  return c.text('Hello hono/tiny!')\r\n})\r\n\r\napp.get('/user', (c) => {\r\n  return c.text('Hello User')\r\n})\r\n\r\napp.get('/user/:name', (c) => {\r\n  return c.text(`Hello ${c.req.param('name')}`)\r\n})\r\n```\r\n\r\nWith `hono` default:\r\n\r\n<img width=\"883\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/233839165-1f2969ee-c87f-4a60-b65f-63a6072b83b2.png\">\r\n\r\nWith `hono/tiny`:\r\n\r\n<img width=\"816\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/233839175-faa78e42-def3-420c-9189-4134447a2741.png\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1680000482},{"id":1680034287,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1037","title":"feat(utils): remove HTTP status messages from `http-status.ts`","body":"This RP removes HTTP status messages provided in `statuses` variables and removes the Union of status codes from `utils/http-status.ts`.\r\n\r\nThese messages are hard-coded and make the bundled code fat, even though they are not used that much. And status codes are not necessary to be Unioned; it's not a problem if it is just a `number`.\r\n\r\nThese changes seem to cause \"breaking changes\", but they are only for the internal. So, we can include t it in the next minor version, `3.2.0`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1680034287},{"id":1680035801,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1038","title":"Tasks for v3.2.0","body":"Tasks for the next minor upgrade version \"v3.2.0\". The following may be edited:\r\n\r\n- [x] release note\r\n- [x] release node server\r\n- [x] `mount()`\r\n- [x] Write documents\r\n- [x] Check hostname based routing\r\n- [x] export `fire()`\r\n- [x] show router name?\r\n- [x] Fix AWS Lambda bugs\r\n- [x] Benchmark for measuring boot times.\r\n- [x] #1033\r\n- [x] Cookie Middleware\r\n- [x] deprecate `c.cookie` and `c.req.cookie` #965 \r\n- [x] `c.header('set-cookie', undefined)`\r\n- [x] Create `hono/vercel` / deprecate `hono/nextjs`\r\n- [x] ~~`app.bundleHandlers()` - experimental~~ #1072 \r\n- [x] Create a starter template for Vercel\r\n- [x] Remove HTTP status messages and remove status code Unions from `utils/http-status.ts`. #1037 \r\n- [x] PatternRourter\r\n- [x] LinearRouter\r\n- [x] `hono/tiny`\r\n- [x] `hono/quick` ?\r\n- [x] Node Adapter supports Node.js native web standard API / as rc https://github.com/honojs/node-server/releases/tag/v1.0.0-rc.1\r\n- [x] Allow routings with hostname #1064\r\n\r\n## May not be implemeted\r\n\r\n- [x] ~~deprecate `hono/adapter/*`~~\r\n- [x] ~~PatternRouter as default ?~~\r\n- [x] ~~HonoBase~~\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1680035801},{"id":1680429216,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1039","title":"Use RegExp instead of URLPattern.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1680429216},{"id":1682197224,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1041","title":"[POC] Introduce LinearRouter","body":"This PR introduces a router that can return results faster on the first request.\r\n\r\n### benchmark\r\n\r\n```\r\n% yarn bench-spinup:node\r\nyarn run v1.22.19\r\n$ tsx ./src/bench-spinup.mts\r\ncpu: Apple M2 Pro\r\nruntime: node v18.14.0 (arm64-darwin)\r\n\r\nbenchmark          time (avg)             (min … max)       p75       p99      p995\r\n----------------------------------------------------- -----------------------------\r\n• GET /user\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    30.87 µs/iter    (25.08 µs … 2.05 ms)     28 µs  88.54 µs 342.58 µs\r\nTrieRouter       8.19 µs/iter    (7.5 µs … 289.96 µs)      8 µs  11.54 µs  15.04 µs\r\nLinearRouter   929.75 ns/iter  (910.6 ns … 967.65 ns) 936.97 ns 967.65 ns 967.65 ns\r\nMedleyRouter     2.79 µs/iter     (2.74 µs … 3.01 µs)   2.79 µs   3.01 µs   3.01 µs\r\nFindMyWay       64.36 µs/iter  (59.25 µs … 392.92 µs)  62.75 µs 102.13 µs 163.13 µs\r\nKoaTreeRouter    2.33 µs/iter      (2.3 µs … 2.43 µs)   2.33 µs   2.43 µs   2.43 µs\r\nTrekRouter        4.9 µs/iter     (4.82 µs … 5.05 µs)   4.94 µs   5.05 µs   5.05 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   2.5x faster than KoaTreeRouter\r\n   3x faster than MedleyRouter\r\n   5.27x faster than TrekRouter\r\n   8.81x faster than TrieRouter\r\n   33.2x faster than RegExpRouter\r\n   69.23x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.42 µs/iter    (25.13 µs … 2.23 ms)  27.04 µs  44.38 µs    333 µs\r\nTrieRouter       8.19 µs/iter   (7.54 µs … 478.29 µs)   7.96 µs  11.79 µs  15.13 µs\r\nLinearRouter   990.42 ns/iter   (968.97 ns … 1.03 µs) 996.34 ns   1.03 µs   1.03 µs\r\nMedleyRouter     2.84 µs/iter     (2.78 µs … 3.06 µs)   2.86 µs   3.06 µs   3.06 µs\r\nFindMyWay       62.76 µs/iter  (59.54 µs … 288.96 µs)  62.67 µs  79.42 µs 150.42 µs\r\nKoaTreeRouter    2.36 µs/iter     (2.33 µs … 2.42 µs)   2.37 µs   2.42 µs   2.42 µs\r\nTrekRouter       4.89 µs/iter     (4.85 µs … 4.97 µs)    4.9 µs   4.97 µs   4.97 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   2.38x faster than KoaTreeRouter\r\n   2.87x faster than MedleyRouter\r\n   4.94x faster than TrekRouter\r\n   8.27x faster than TrieRouter\r\n   29.7x faster than RegExpRouter\r\n   63.37x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.39 µs/iter       (25.29 µs … 2 ms)  27.29 µs  43.21 µs 330.08 µs\r\nTrieRouter       8.21 µs/iter   (7.67 µs … 146.04 µs)   8.04 µs  10.96 µs  13.21 µs\r\nLinearRouter     1.13 µs/iter     (1.12 µs … 1.19 µs)   1.14 µs   1.19 µs   1.19 µs\r\nMedleyRouter     2.88 µs/iter     (2.85 µs … 2.96 µs)   2.89 µs   2.96 µs   2.96 µs\r\nFindMyWay       62.05 µs/iter  (59.58 µs … 316.17 µs)  61.25 µs  79.75 µs 146.17 µs\r\nKoaTreeRouter    2.43 µs/iter     (2.39 µs … 2.67 µs)   2.44 µs   2.67 µs   2.67 µs\r\nTrekRouter       5.02 µs/iter     (4.96 µs … 5.18 µs)   5.04 µs   5.18 µs   5.18 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  LinearRouter\r\n   2.15x faster than KoaTreeRouter\r\n   2.54x faster than MedleyRouter\r\n   4.43x faster than TrekRouter\r\n   7.23x faster than TrieRouter\r\n   25.91x faster than RegExpRouter\r\n   54.71x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.28 µs/iter    (25.29 µs … 2.38 ms)  27.04 µs  42.13 µs 330.42 µs\r\nTrieRouter       8.38 µs/iter     (8.25 µs … 8.45 µs)    8.4 µs   8.45 µs   8.45 µs\r\nLinearRouter     1.16 µs/iter     (1.14 µs … 1.24 µs)   1.17 µs   1.24 µs   1.24 µs\r\nMedleyRouter     2.87 µs/iter     (2.84 µs … 2.96 µs)   2.89 µs   2.96 µs   2.96 µs\r\nFindMyWay       62.22 µs/iter  (59.46 µs … 481.71 µs)  61.25 µs  78.08 µs 159.29 µs\r\nKoaTreeRouter    2.42 µs/iter     (2.37 µs … 2.68 µs)   2.45 µs   2.68 µs   2.68 µs\r\nTrekRouter       4.97 µs/iter      (4.93 µs … 5.1 µs)      5 µs    5.1 µs    5.1 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  LinearRouter\r\n   2.08x faster than KoaTreeRouter\r\n   2.47x faster than MedleyRouter\r\n   4.28x faster than TrekRouter\r\n   7.2x faster than TrieRouter\r\n   25.17x faster than RegExpRouter\r\n   53.48x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.26 µs/iter    (25.21 µs … 2.12 ms)  26.88 µs  40.79 µs 318.54 µs\r\nTrieRouter       8.27 µs/iter     (8.13 µs … 8.46 µs)   8.35 µs   8.46 µs   8.46 µs\r\nLinearRouter   378.52 ns/iter (364.51 ns … 416.77 ns) 383.04 ns 403.42 ns 416.77 ns\r\nMedleyRouter     2.85 µs/iter     (2.84 µs … 2.88 µs)   2.86 µs   2.88 µs   2.88 µs\r\nFindMyWay       63.16 µs/iter  (59.67 µs … 229.25 µs)  63.33 µs  81.17 µs  147.5 µs\r\nKoaTreeRouter    2.41 µs/iter     (2.38 µs … 2.52 µs)   2.41 µs   2.52 µs   2.52 µs\r\nTrekRouter       4.93 µs/iter      (4.9 µs … 4.96 µs)   4.94 µs   4.96 µs   4.96 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   6.37x faster than KoaTreeRouter\r\n   7.54x faster than MedleyRouter\r\n   13.03x faster than TrekRouter\r\n   21.85x faster than TrieRouter\r\n   77.31x faster than RegExpRouter\r\n   166.85x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.17 µs/iter     (25.17 µs … 1.8 ms)     27 µs  42.38 µs 330.79 µs\r\nTrieRouter       8.36 µs/iter     (8.27 µs … 8.47 µs)   8.38 µs   8.47 µs   8.47 µs\r\nLinearRouter     1.15 µs/iter     (1.14 µs … 1.22 µs)   1.16 µs   1.22 µs   1.22 µs\r\nMedleyRouter     2.81 µs/iter     (2.76 µs … 3.04 µs)   2.81 µs   3.04 µs   3.04 µs\r\nFindMyWay       62.38 µs/iter  (59.46 µs … 273.33 µs)  61.29 µs  80.29 µs 158.29 µs\r\nKoaTreeRouter    2.42 µs/iter     (2.35 µs … 2.45 µs)   2.43 µs   2.45 µs   2.45 µs\r\nTrekRouter       4.88 µs/iter     (4.84 µs … 4.92 µs)    4.9 µs   4.92 µs   4.92 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  LinearRouter\r\n   2.1x faster than KoaTreeRouter\r\n   2.44x faster than MedleyRouter\r\n   4.23x faster than TrekRouter\r\n   7.25x faster than TrieRouter\r\n   25.27x faster than RegExpRouter\r\n   54.05x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.39 µs/iter    (25.13 µs … 2.33 ms)  26.96 µs  44.88 µs 330.25 µs\r\nTrieRouter       8.28 µs/iter     (8.17 µs … 8.43 µs)   8.31 µs   8.43 µs   8.43 µs\r\nLinearRouter   992.22 ns/iter   (960.64 ns … 1.03 µs) 997.72 ns   1.03 µs   1.03 µs\r\nMedleyRouter     2.86 µs/iter     (2.81 µs … 3.11 µs)   2.87 µs   3.11 µs   3.11 µs\r\nFindMyWay       62.54 µs/iter  (59.63 µs … 216.25 µs)  61.42 µs  80.58 µs 145.96 µs\r\nKoaTreeRouter    2.48 µs/iter     (2.42 µs … 2.53 µs)   2.51 µs   2.53 µs   2.53 µs\r\nTrekRouter       5.05 µs/iter     (4.95 µs … 5.15 µs)    5.1 µs   5.15 µs   5.15 µs\r\n\r\nsummary for GET /static/index.html\r\n  LinearRouter\r\n   2.5x faster than KoaTreeRouter\r\n   2.88x faster than MedleyRouter\r\n   5.09x faster than TrekRouter\r\n   8.35x faster than TrieRouter\r\n   29.62x faster than RegExpRouter\r\n   63.03x faster than FindMyWay\r\n✨  Done in 38.02s.\r\n```\r\n\r\n```\r\n% yarn bench-spinup:bun\r\nyarn run v1.22.19\r\n$ bun run ./src/bench-spinup.mts\r\ncpu: Apple M2 Pro\r\nruntime: bun 0.5.8 (arm64-darwin)\r\n\r\nbenchmark          time (avg)             (min … max)       p75       p99      p995\r\n----------------------------------------------------- -----------------------------\r\n• GET /user\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    31.55 µs/iter     (25.46 µs … 3.4 ms)  31.33 µs  50.75 µs  62.71 µs\r\nTrieRouter       7.76 µs/iter   (6.33 µs … 628.67 µs)   7.46 µs  14.08 µs  16.46 µs\r\nLinearRouter     1.32 µs/iter      (1.24 µs … 1.6 µs)   1.33 µs    1.6 µs    1.6 µs\r\nMedleyRouter     4.07 µs/iter      (3.9 µs … 4.51 µs)   4.09 µs   4.51 µs   4.51 µs\r\nFindMyWay          58 µs/iter    (42.79 µs … 1.74 ms)  58.21 µs  77.54 µs  86.08 µs\r\nKoaTreeRouter    3.29 µs/iter     (3.14 µs … 3.54 µs)   3.33 µs   3.54 µs   3.54 µs\r\nTrekRouter        5.2 µs/iter     (5.07 µs … 5.38 µs)   5.24 µs   5.38 µs   5.38 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   2.5x faster than KoaTreeRouter\r\n   3.08x faster than MedleyRouter\r\n   3.94x faster than TrekRouter\r\n   5.88x faster than TrieRouter\r\n   23.91x faster than RegExpRouter\r\n   43.96x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.23 µs/iter     (25.71 µs … 727 µs)  33.67 µs  49.79 µs  61.17 µs\r\nTrieRouter          8 µs/iter     (7.87 µs … 8.13 µs)   8.06 µs   8.13 µs   8.13 µs\r\nLinearRouter     1.39 µs/iter     (1.32 µs … 1.53 µs)   1.42 µs   1.53 µs   1.53 µs\r\nMedleyRouter      4.1 µs/iter      (3.98 µs … 4.2 µs)   4.13 µs    4.2 µs    4.2 µs\r\nFindMyWay       57.99 µs/iter    (43.83 µs … 1.73 ms)  57.75 µs  75.04 µs  79.42 µs\r\nKoaTreeRouter    3.47 µs/iter     (3.29 µs … 3.57 µs)   3.53 µs   3.57 µs   3.57 µs\r\nTrekRouter        5.4 µs/iter     (5.31 µs … 5.48 µs)   5.42 µs   5.48 µs   5.48 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   2.49x faster than KoaTreeRouter\r\n   2.95x faster than MedleyRouter\r\n   3.88x faster than TrekRouter\r\n   5.74x faster than TrieRouter\r\n   23.86x faster than RegExpRouter\r\n   41.65x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.15 µs/iter  (26.21 µs … 571.08 µs)  33.58 µs  49.04 µs  60.25 µs\r\nTrieRouter       8.48 µs/iter     (8.35 µs … 8.57 µs)   8.53 µs   8.57 µs   8.57 µs\r\nLinearRouter     1.72 µs/iter     (1.63 µs … 1.99 µs)   1.73 µs   1.99 µs   1.99 µs\r\nMedleyRouter      4.3 µs/iter      (4.17 µs … 4.4 µs)   4.33 µs    4.4 µs    4.4 µs\r\nFindMyWay       61.07 µs/iter        (45.5 µs … 2 ms)  60.63 µs  77.71 µs  84.71 µs\r\nKoaTreeRouter    3.65 µs/iter     (3.51 µs … 3.78 µs)   3.68 µs   3.78 µs   3.78 µs\r\nTrekRouter       5.62 µs/iter      (5.49 µs … 5.7 µs)   5.66 µs    5.7 µs    5.7 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  LinearRouter\r\n   2.13x faster than KoaTreeRouter\r\n   2.5x faster than MedleyRouter\r\n   3.27x faster than TrekRouter\r\n   4.94x faster than TrieRouter\r\n   19.3x faster than RegExpRouter\r\n   35.56x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.54 µs/iter  (26.17 µs … 669.08 µs)  33.79 µs  49.46 µs  59.63 µs\r\nTrieRouter       8.57 µs/iter      (8.33 µs … 8.7 µs)   8.62 µs    8.7 µs    8.7 µs\r\nLinearRouter     1.71 µs/iter     (1.59 µs … 1.87 µs)   1.76 µs   1.87 µs   1.87 µs\r\nMedleyRouter     4.33 µs/iter      (4.2 µs … 4.56 µs)   4.34 µs   4.56 µs   4.56 µs\r\nFindMyWay       60.84 µs/iter     (44.5 µs … 1.78 ms)  60.63 µs  78.38 µs  87.33 µs\r\nKoaTreeRouter    3.54 µs/iter     (3.42 µs … 3.68 µs)   3.59 µs   3.68 µs   3.68 µs\r\nTrekRouter       5.66 µs/iter     (5.53 µs … 5.85 µs)   5.72 µs   5.85 µs   5.85 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  LinearRouter\r\n   2.06x faster than KoaTreeRouter\r\n   2.53x faster than MedleyRouter\r\n   3.31x faster than TrekRouter\r\n   5x faster than TrieRouter\r\n   19.58x faster than RegExpRouter\r\n   35.53x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.54 µs/iter  (26.17 µs … 625.88 µs)  33.83 µs   48.5 µs  55.79 µs\r\nTrieRouter       8.67 µs/iter      (8.5 µs … 9.03 µs)   8.68 µs   9.03 µs   9.03 µs\r\nLinearRouter   568.46 ns/iter  (507.97 ns … 651.4 ns) 589.97 ns  651.4 ns  651.4 ns\r\nMedleyRouter     4.33 µs/iter     (4.24 µs … 4.46 µs)   4.36 µs   4.46 µs   4.46 µs\r\nFindMyWay          59 µs/iter    (44.58 µs … 2.08 ms)   58.5 µs   75.5 µs  82.21 µs\r\nKoaTreeRouter    3.57 µs/iter      (3.41 µs … 3.7 µs)    3.6 µs    3.7 µs    3.7 µs\r\nTrekRouter       5.68 µs/iter      (5.53 µs … 5.8 µs)   5.75 µs    5.8 µs    5.8 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   6.27x faster than KoaTreeRouter\r\n   7.62x faster than MedleyRouter\r\n   10x faster than TrekRouter\r\n   15.25x faster than TrieRouter\r\n   59.01x faster than RegExpRouter\r\n   103.8x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    34.03 µs/iter  (26.04 µs … 635.92 µs)   34.5 µs  49.58 µs  60.63 µs\r\nTrieRouter       8.89 µs/iter     (8.79 µs … 9.09 µs)   8.93 µs   9.09 µs   9.09 µs\r\nLinearRouter     1.49 µs/iter      (1.41 µs … 1.6 µs)   1.51 µs    1.6 µs    1.6 µs\r\nMedleyRouter      4.3 µs/iter      (4.2 µs … 4.39 µs)   4.33 µs   4.39 µs   4.39 µs\r\nFindMyWay       61.38 µs/iter    (45.67 µs … 1.61 ms)  60.96 µs  77.71 µs  84.58 µs\r\nKoaTreeRouter     3.6 µs/iter     (3.51 µs … 3.74 µs)   3.63 µs   3.74 µs   3.74 µs\r\nTrekRouter       5.62 µs/iter     (5.46 µs … 5.76 µs)   5.68 µs   5.76 µs   5.76 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  LinearRouter\r\n   2.42x faster than KoaTreeRouter\r\n   2.89x faster than MedleyRouter\r\n   3.78x faster than TrekRouter\r\n   5.98x faster than TrieRouter\r\n   22.9x faster than RegExpRouter\r\n   41.29x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    34.18 µs/iter  (26.29 µs … 618.88 µs)  34.63 µs  50.58 µs  59.79 µs\r\nTrieRouter        8.7 µs/iter     (8.51 µs … 8.94 µs)   8.74 µs   8.94 µs   8.94 µs\r\nLinearRouter     1.45 µs/iter     (1.36 µs … 1.63 µs)   1.46 µs   1.63 µs   1.63 µs\r\nMedleyRouter      4.4 µs/iter     (4.29 µs … 4.46 µs)   4.44 µs   4.46 µs   4.46 µs\r\nFindMyWay       60.44 µs/iter       (44 µs … 1.97 ms)   60.5 µs  78.96 µs   84.5 µs\r\nKoaTreeRouter    3.76 µs/iter     (3.62 µs … 3.94 µs)   3.79 µs   3.94 µs   3.94 µs\r\nTrekRouter       5.86 µs/iter     (5.76 µs … 5.92 µs)   5.89 µs   5.92 µs   5.92 µs\r\n\r\nsummary for GET /static/index.html\r\n  LinearRouter\r\n   2.59x faster than KoaTreeRouter\r\n   3.02x faster than MedleyRouter\r\n   4.03x faster than TrekRouter\r\n   5.98x faster than TrieRouter\r\n   23.5x faster than RegExpRouter\r\n   41.55x faster than FindMyWay\r\n✨  Done in 41.42s.\r\n```\r\n\r\n### If we are ok with the increased bundle size\r\n\r\nI think that by incorporating it into SmartRouter, as shown in ee5b26d12badc66b5a6e46aa8c0b74eb7d1b94a4, we can make hono's default router a fast router for one-shot requests and for repeated requests.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1682197224},{"id":1686021387,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1043","title":"feat: Introduce LinearRouter.","body":"It is slightly slower than #1041, but the bugs have been fixed, and it covers most use cases.\r\n\r\n\r\n```\r\n% npm run bench-includes-init:node\r\n\r\n> bench-includes-init:node\r\n> tsx ./src/bench-includes-init.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: node v18.14.0 (arm64-darwin)\r\n\r\nbenchmark          time (avg)             (min … max)       p75       p99      p995\r\n----------------------------------------------------- -----------------------------\r\n• GET /user\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    30.71 µs/iter    (24.88 µs … 1.84 ms)  28.54 µs  86.63 µs 335.17 µs\r\nTrieRouter       8.16 µs/iter    (7.5 µs … 155.54 µs)   7.88 µs   12.5 µs  16.83 µs\r\nLinearRouter   946.25 ns/iter (932.29 ns … 985.59 ns) 950.19 ns 985.59 ns 985.59 ns\r\nMedleyRouter      2.8 µs/iter     (2.73 µs … 2.91 µs)   2.81 µs   2.91 µs   2.91 µs\r\nFindMyWay       63.95 µs/iter  (58.63 µs … 293.75 µs)  62.92 µs 100.92 µs 164.17 µs\r\nKoaTreeRouter    2.35 µs/iter     (2.32 µs … 2.43 µs)   2.35 µs   2.43 µs   2.43 µs\r\nTrekRouter       4.88 µs/iter     (4.83 µs … 5.06 µs)   4.89 µs   5.06 µs   5.06 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   2.48x faster than KoaTreeRouter\r\n   2.96x faster than MedleyRouter\r\n   5.16x faster than TrekRouter\r\n   8.62x faster than TrieRouter\r\n   32.45x faster than RegExpRouter\r\n   67.59x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.26 µs/iter     (24.83 µs … 1.9 ms)  27.04 µs  41.67 µs 332.67 µs\r\nTrieRouter        8.1 µs/iter    (7.5 µs … 136.13 µs)   7.88 µs  12.04 µs  15.17 µs\r\nLinearRouter     1.03 µs/iter     (1.01 µs … 1.08 µs)   1.03 µs   1.08 µs   1.08 µs\r\nMedleyRouter     2.81 µs/iter     (2.76 µs … 2.95 µs)   2.83 µs   2.95 µs   2.95 µs\r\nFindMyWay       62.06 µs/iter  (58.67 µs … 279.13 µs)  61.25 µs  80.25 µs 147.38 µs\r\nKoaTreeRouter    2.37 µs/iter     (2.34 µs … 2.43 µs)   2.37 µs   2.43 µs   2.43 µs\r\nTrekRouter       4.94 µs/iter      (4.9 µs … 5.07 µs)   4.95 µs   5.07 µs   5.07 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   2.3x faster than KoaTreeRouter\r\n   2.73x faster than MedleyRouter\r\n   4.8x faster than TrekRouter\r\n   7.86x faster than TrieRouter\r\n   28.41x faster than RegExpRouter\r\n   60.25x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.24 µs/iter    (24.88 µs … 1.89 ms)  27.33 µs  39.17 µs 334.21 µs\r\nTrieRouter       8.31 µs/iter   (7.63 µs … 239.58 µs)   8.04 µs  12.25 µs  15.58 µs\r\nLinearRouter     1.18 µs/iter     (1.16 µs … 1.21 µs)   1.19 µs   1.21 µs   1.21 µs\r\nMedleyRouter     2.88 µs/iter     (2.86 µs … 3.05 µs)   2.88 µs   3.05 µs   3.05 µs\r\nFindMyWay       61.43 µs/iter  (58.71 µs … 199.67 µs)  60.63 µs  75.29 µs 150.13 µs\r\nKoaTreeRouter    2.43 µs/iter     (2.39 µs … 2.61 µs)   2.43 µs   2.61 µs   2.61 µs\r\nTrekRouter       5.06 µs/iter     (5.01 µs … 5.19 µs)   5.06 µs   5.19 µs   5.19 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  LinearRouter\r\n   2.06x faster than KoaTreeRouter\r\n   2.44x faster than MedleyRouter\r\n   4.29x faster than TrekRouter\r\n   7.04x faster than TrieRouter\r\n   24.78x faster than RegExpRouter\r\n   52.06x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.11 µs/iter    (24.88 µs … 2.26 ms)  27.08 µs  39.54 µs 332.71 µs\r\nTrieRouter       8.29 µs/iter   (7.67 µs … 270.25 µs)   8.04 µs  12.38 µs  16.38 µs\r\nLinearRouter     1.21 µs/iter     (1.18 µs … 1.23 µs)   1.22 µs   1.23 µs   1.23 µs\r\nMedleyRouter     2.88 µs/iter     (2.85 µs … 2.99 µs)   2.89 µs   2.99 µs   2.99 µs\r\nFindMyWay       61.73 µs/iter  (58.63 µs … 239.71 µs)  60.83 µs  76.54 µs 155.38 µs\r\nKoaTreeRouter    2.39 µs/iter     (2.35 µs … 2.48 µs)    2.4 µs   2.48 µs   2.48 µs\r\nTrekRouter       5.03 µs/iter     (4.99 µs … 5.09 µs)   5.04 µs   5.09 µs   5.09 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  LinearRouter\r\n   1.98x faster than KoaTreeRouter\r\n   2.38x faster than MedleyRouter\r\n   4.16x faster than TrekRouter\r\n   6.86x faster than TrieRouter\r\n   24.07x faster than RegExpRouter\r\n   51.06x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.39 µs/iter    (24.88 µs … 1.99 ms)  27.25 µs  40.54 µs 324.63 µs\r\nTrieRouter       8.22 µs/iter     (8.11 µs … 8.54 µs)   8.19 µs   8.54 µs   8.54 µs\r\nLinearRouter   393.35 ns/iter (382.09 ns … 418.51 ns) 397.38 ns  410.8 ns 418.51 ns\r\nMedleyRouter     2.85 µs/iter     (2.81 µs … 2.91 µs)   2.85 µs   2.91 µs   2.91 µs\r\nFindMyWay       61.63 µs/iter  (58.71 µs … 276.88 µs)  60.83 µs  74.92 µs 147.96 µs\r\nKoaTreeRouter    2.39 µs/iter     (2.34 µs … 2.44 µs)   2.41 µs   2.44 µs   2.44 µs\r\nTrekRouter       5.02 µs/iter     (4.95 µs … 5.17 µs)   5.04 µs   5.17 µs   5.17 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   6.07x faster than KoaTreeRouter\r\n   7.25x faster than MedleyRouter\r\n   12.76x faster than TrekRouter\r\n   20.89x faster than TrieRouter\r\n   74.72x faster than RegExpRouter\r\n   156.67x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    28.95 µs/iter     (24.79 µs … 1.9 ms)  26.92 µs  38.96 µs 332.25 µs\r\nTrieRouter       8.21 µs/iter     (8.15 µs … 8.39 µs)   8.18 µs   8.39 µs   8.39 µs\r\nLinearRouter     1.19 µs/iter     (1.16 µs … 1.24 µs)    1.2 µs   1.24 µs   1.24 µs\r\nMedleyRouter     2.79 µs/iter     (2.77 µs … 2.91 µs)   2.79 µs   2.91 µs   2.91 µs\r\nFindMyWay       61.33 µs/iter  (58.67 µs … 311.71 µs)  60.29 µs  73.67 µs 156.92 µs\r\nKoaTreeRouter    2.38 µs/iter     (2.34 µs … 2.47 µs)   2.39 µs   2.47 µs   2.47 µs\r\nTrekRouter       4.92 µs/iter        (4.87 µs … 5 µs)   4.94 µs      5 µs      5 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  LinearRouter\r\n   2x faster than KoaTreeRouter\r\n   2.34x faster than MedleyRouter\r\n   4.13x faster than TrekRouter\r\n   6.9x faster than TrieRouter\r\n   24.31x faster than RegExpRouter\r\n   51.5x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    29.22 µs/iter    (24.83 µs … 2.25 ms)  26.88 µs  42.63 µs 326.67 µs\r\nTrieRouter       8.09 µs/iter         (8 µs … 8.2 µs)    8.1 µs    8.2 µs    8.2 µs\r\nLinearRouter        1 µs/iter   (987.87 ns … 1.03 µs)   1.01 µs   1.03 µs   1.03 µs\r\nMedleyRouter     2.78 µs/iter     (2.73 µs … 2.86 µs)   2.79 µs   2.86 µs   2.86 µs\r\nFindMyWay       62.44 µs/iter  (58.88 µs … 546.79 µs)  63.33 µs  76.79 µs 150.63 µs\r\nKoaTreeRouter    2.41 µs/iter     (2.37 µs … 2.69 µs)    2.4 µs   2.69 µs   2.69 µs\r\nTrekRouter       5.16 µs/iter     (4.94 µs … 5.66 µs)   5.31 µs   5.66 µs   5.66 µs\r\n\r\nsummary for GET /static/index.html\r\n  LinearRouter\r\n   2.4x faster than KoaTreeRouter\r\n   2.77x faster than MedleyRouter\r\n   5.14x faster than TrekRouter\r\n   8.06x faster than TrieRouter\r\n   29.11x faster than RegExpRouter\r\n   62.2x faster than FindMyWay\r\n```\r\n\r\n```\r\n% npm run bench-includes-init:bun\r\n\r\n> bench-includes-init:bun\r\n> bun run ./src/bench-includes-init.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: bun 0.5.8 (arm64-darwin)\r\n\r\nbenchmark          time (avg)             (min … max)       p75       p99      p995\r\n----------------------------------------------------- -----------------------------\r\n• GET /user\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    31.61 µs/iter    (25.54 µs … 1.74 ms)  31.38 µs  51.71 µs  69.83 µs\r\nTrieRouter       7.86 µs/iter   (6.42 µs … 577.46 µs)   7.58 µs  14.04 µs  16.42 µs\r\nLinearRouter     1.44 µs/iter     (1.28 µs … 4.31 µs)   1.38 µs   4.31 µs   4.31 µs\r\nMedleyRouter     4.21 µs/iter     (4.07 µs … 4.58 µs)   4.23 µs   4.58 µs   4.58 µs\r\nFindMyWay       59.52 µs/iter     (43.71 µs … 1.9 ms)  59.96 µs  79.13 µs  89.96 µs\r\nKoaTreeRouter    3.43 µs/iter     (3.31 µs … 3.73 µs)   3.44 µs   3.73 µs   3.73 µs\r\nTrekRouter       5.34 µs/iter     (5.23 µs … 5.47 µs)   5.38 µs   5.47 µs   5.47 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   2.39x faster than KoaTreeRouter\r\n   2.93x faster than MedleyRouter\r\n   3.72x faster than TrekRouter\r\n   5.47x faster than TrieRouter\r\n   22x faster than RegExpRouter\r\n   41.42x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.39 µs/iter  (26.25 µs … 784.08 µs)  33.75 µs   48.5 µs  64.38 µs\r\nTrieRouter       8.16 µs/iter     (8.03 µs … 8.36 µs)   8.21 µs   8.36 µs   8.36 µs\r\nLinearRouter     1.51 µs/iter     (1.44 µs … 1.62 µs)   1.54 µs   1.62 µs   1.62 µs\r\nMedleyRouter     4.29 µs/iter     (4.17 µs … 4.39 µs)   4.32 µs   4.39 µs   4.39 µs\r\nFindMyWay       58.89 µs/iter    (44.46 µs … 1.92 ms)  58.88 µs  76.63 µs   82.5 µs\r\nKoaTreeRouter    3.59 µs/iter     (3.42 µs … 3.71 µs)   3.63 µs   3.71 µs   3.71 µs\r\nTrekRouter       5.55 µs/iter     (5.46 µs … 5.66 µs)    5.6 µs   5.66 µs   5.66 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   2.37x faster than KoaTreeRouter\r\n   2.83x faster than MedleyRouter\r\n   3.67x faster than TrekRouter\r\n   5.39x faster than TrieRouter\r\n   22.06x faster than RegExpRouter\r\n   38.9x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.52 µs/iter  (26.42 µs … 646.21 µs)     34 µs  47.96 µs  55.92 µs\r\nTrieRouter       8.58 µs/iter     (8.28 µs … 8.83 µs)   8.65 µs   8.83 µs   8.83 µs\r\nLinearRouter     1.82 µs/iter      (1.7 µs … 2.04 µs)   1.84 µs   2.04 µs   2.04 µs\r\nMedleyRouter     4.44 µs/iter     (4.34 µs … 4.54 µs)   4.48 µs   4.54 µs   4.54 µs\r\nFindMyWay       60.36 µs/iter      (45.5 µs … 1.9 ms)  59.88 µs  78.13 µs  82.92 µs\r\nKoaTreeRouter    3.81 µs/iter     (3.73 µs … 3.87 µs)   3.84 µs   3.87 µs   3.87 µs\r\nTrekRouter       5.84 µs/iter     (5.75 µs … 6.04 µs)   5.86 µs   6.04 µs   6.04 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  LinearRouter\r\n   2.1x faster than KoaTreeRouter\r\n   2.45x faster than MedleyRouter\r\n   3.21x faster than TrekRouter\r\n   4.73x faster than TrieRouter\r\n   18.46x faster than RegExpRouter\r\n   33.24x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    33.66 µs/iter  (26.21 µs … 639.79 µs)  34.08 µs  48.08 µs  53.46 µs\r\nTrieRouter       8.68 µs/iter     (8.54 µs … 8.89 µs)   8.72 µs   8.89 µs   8.89 µs\r\nLinearRouter     1.83 µs/iter      (1.7 µs … 2.03 µs)   1.85 µs   2.03 µs   2.03 µs\r\nMedleyRouter     4.43 µs/iter     (4.31 µs … 4.53 µs)   4.47 µs   4.53 µs   4.53 µs\r\nFindMyWay       61.88 µs/iter    (45.38 µs … 2.12 ms)  61.88 µs  78.58 µs  84.71 µs\r\nKoaTreeRouter    3.69 µs/iter     (3.61 µs … 3.76 µs)   3.72 µs   3.76 µs   3.76 µs\r\nTrekRouter       5.83 µs/iter      (5.7 µs … 5.92 µs)   5.89 µs   5.92 µs   5.92 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  LinearRouter\r\n   2.02x faster than KoaTreeRouter\r\n   2.42x faster than MedleyRouter\r\n   3.19x faster than TrekRouter\r\n   4.74x faster than TrieRouter\r\n   18.38x faster than RegExpRouter\r\n   33.78x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    34.12 µs/iter  (26.58 µs … 606.17 µs)  34.54 µs  48.13 µs  55.25 µs\r\nTrieRouter       8.82 µs/iter     (8.62 µs … 9.24 µs)   8.83 µs   9.24 µs   9.24 µs\r\nLinearRouter   592.78 ns/iter (539.86 ns … 665.46 ns)  617.7 ns 665.46 ns 665.46 ns\r\nMedleyRouter      4.5 µs/iter     (4.43 µs … 4.63 µs)   4.53 µs   4.63 µs   4.63 µs\r\nFindMyWay       61.51 µs/iter    (45.46 µs … 2.04 ms)  61.29 µs  78.75 µs   84.5 µs\r\nKoaTreeRouter    3.68 µs/iter     (3.58 µs … 3.83 µs)   3.72 µs   3.83 µs   3.83 µs\r\nTrekRouter       5.87 µs/iter      (5.7 µs … 6.01 µs)   5.93 µs   6.01 µs   6.01 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   6.22x faster than KoaTreeRouter\r\n   7.59x faster than MedleyRouter\r\n   9.9x faster than TrekRouter\r\n   14.88x faster than TrieRouter\r\n   57.56x faster than RegExpRouter\r\n   103.76x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    34.25 µs/iter  (26.29 µs … 670.17 µs)  34.58 µs  49.13 µs   56.5 µs\r\nTrieRouter       9.05 µs/iter      (8.91 µs … 9.2 µs)   9.09 µs    9.2 µs    9.2 µs\r\nLinearRouter      1.6 µs/iter     (1.53 µs … 1.75 µs)   1.61 µs   1.75 µs   1.75 µs\r\nMedleyRouter     4.43 µs/iter     (4.33 µs … 4.54 µs)   4.45 µs   4.54 µs   4.54 µs\r\nFindMyWay       62.36 µs/iter    (46.25 µs … 1.69 ms)  61.79 µs  78.67 µs  87.42 µs\r\nKoaTreeRouter    3.69 µs/iter      (3.53 µs … 3.9 µs)   3.72 µs    3.9 µs    3.9 µs\r\nTrekRouter       5.79 µs/iter     (5.64 µs … 5.93 µs)   5.83 µs   5.93 µs   5.93 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  LinearRouter\r\n   2.31x faster than KoaTreeRouter\r\n   2.77x faster than MedleyRouter\r\n   3.63x faster than TrekRouter\r\n   5.67x faster than TrieRouter\r\n   21.46x faster than RegExpRouter\r\n   39.08x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n----------------------------------------------------- -----------------------------\r\nRegExpRouter    34.96 µs/iter  (26.71 µs … 758.42 µs)  35.42 µs     50 µs  58.79 µs\r\nTrieRouter       8.89 µs/iter     (8.58 µs … 9.06 µs)   8.94 µs   9.06 µs   9.06 µs\r\nLinearRouter     1.59 µs/iter     (1.48 µs … 1.81 µs)   1.62 µs   1.81 µs   1.81 µs\r\nMedleyRouter     4.52 µs/iter     (4.38 µs … 4.66 µs)   4.55 µs   4.66 µs   4.66 µs\r\nFindMyWay       61.53 µs/iter    (43.75 µs … 2.12 ms)  61.71 µs  77.88 µs  84.71 µs\r\nKoaTreeRouter    3.87 µs/iter     (3.72 µs … 3.99 µs)   3.93 µs   3.99 µs   3.99 µs\r\nTrekRouter       6.04 µs/iter     (5.89 µs … 6.22 µs)   6.07 µs   6.22 µs   6.22 µs\r\n\r\nsummary for GET /static/index.html\r\n  LinearRouter\r\n   2.44x faster than KoaTreeRouter\r\n   2.85x faster than MedleyRouter\r\n   3.8x faster than TrekRouter\r\n   5.6x faster than TrieRouter\r\n   22.01x faster than RegExpRouter\r\n   38.74x faster than FindMyWay\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1686021387},{"id":1686696147,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1044","title":"Range error  Maximum call stack size exceeded.","body":"I keep geting this error\r\n`RangeError: Maximum call stack size exceeded.`\r\n\r\n`index.ts`\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { Logger } from \"./utils/logger/index.js\";\r\n\r\nconst port = parseInt(process.env.PORT as string) || 3000;\r\n\r\nconst logger = new Logger();\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/test\", (c) => {\r\n    return c.json({ message: \"Hello World!\" }, 200);\r\n});\r\n\r\nlogger.log(`Running at http://localhost:${port}`);\r\n\r\nconst server = Bun.serve({\r\n    port,\r\n    fetch: app.fetch,\r\n    // development: process.env.DEVELOPMENT ? true : false,\r\n});\r\n\r\nexport default server;\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1686696147},{"id":1687053789,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1045","title":"Content-type header gets overridden","body":"I'm using `hono@2.7.5` in Cloudflare Workers and I'm trying to proxy a request made with `fetch` like this:\r\n\r\n```js\r\napp.get('...', cache({ cacheName: '...', cacheControl: 'public, max-age=315360000' }), async (c) => {\r\n\t// targetUrl = ...\r\n\r\n\tconst response = await fetch(targetUrl);\r\n\r\n\tc.status(response.status as StatusCode);\r\n\r\n\tc.header('Content-Type', response.headers.get('Content-Type') || 'application/octet-stream');\r\n\tc.header('Content-Disposition', response.headers.get('Content-Disposition') || 'inline');\r\n\r\n\treturn c.body(response.body);\r\n\r\n})\r\n```\r\n\r\nThe problem is that `response`'s `content-type` equals to `image/svg+xml` BUT `hono` responds with content type set to `text/plain;charset=UTF-8`. Am I doing something wrong? 😵‍💫 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1687053789},{"id":1687511242,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1046","title":"fix(context): Fix typo in charset.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1687511242},{"id":1689253323,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1049","title":"HTTPException should be exported from mod.ts","body":"To import HTTPException in Deno, we have to import directly from http-exception.ts instead of from mod.ts","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1689253323},{"id":1689850221,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1051","title":"perf: shorten code","body":"This PR enables the reduction of code size when bundling. I've done two things:\r\n\r\n* Shortened private variable names.\r\n* Created a private function for `decodeURIComponent`.\r\n\r\nThe result:\r\n\r\n<img width=\"771\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/235346328-ac5eaa95-f284-4bd9-8777-f67946f98cd5.png\">\r\n\r\nWhile heavy optimization may not be ideal, this scope is only for the internal code, so I believe this is a good improvement 👍 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1689850221},{"id":1689887240,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1052","title":"Reading from \"fastly:env\" is not handled by plugins","body":"Hey,\r\n\r\nI am trying to bundle hono with webpack and it explodes due to something with fastly:\r\n\r\n```\r\nModule build failed: UnhandledSchemeError: Reading from \"fastly:env\" is not handled by plugins (Unhandled scheme).\r\nWebpack supports \"data:\" and \"file:\" URIs by default.\r\nYou may need an additional plugin to handle \"fastly:\" URIs.\r\n    at C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\webpack\\lib\\NormalModule.js:837:25\r\n    at Hook.eval [as callAsync] (eval at create (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\tapable\\lib\\HookCodeFactory.js:33:10), <anonymous>:6:1)\r\n    at Hook.CALL_ASYNC_DELEGATE [as _callAsync] (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\tapable\\lib\\Hook.js:18:14)\r\n    at Object.processResource (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\webpack\\lib\\NormalModule.js:834:8)\r\n    at processResource (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\loader-runner\\lib\\LoaderRunner.js:220:11)\r\n    at iteratePitchingLoaders (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\loader-runner\\lib\\LoaderRunner.js:171:10)\r\n    at runLoaders (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\loader-runner\\lib\\LoaderRunner.js:398:2)\r\n    at NormalModule._doBuild (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\webpack\\lib\\NormalModule.js:824:3)\r\n    at NormalModule.build (C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\webpack\\lib\\NormalModule.js:968:15)\r\n    at C:\\Users\\shyim\\Downloads\\FroshAppWebDav\\node_modules\\webpack\\lib\\Compilation.js:1371:12\r\n @ ./node_modules/hono/dist/cjs/context.js 228:22-43\r\n @ ./node_modules/hono/dist/cjs/hono.js 25:21-41\r\n @ ./node_modules/hono/dist/cjs/index.js 24:18-35\r\n @ ./src/index.ts 3:15-30\r\n\r\nwebpack 5.81.0 compiled with 1 error in 1038 m\r\n```\r\n\r\nThis line seems let it explode https://github.com/honojs/hono/blob/f0777321ae43ad5b605c583aed556e00f73ce15f/src/adapter.ts#L27\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1689887240},{"id":1689895547,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1053","title":"perf: use `===` instead of `startsWith` and `endsWith`","body":"`===` is faster than `startsWith` or `endsWith` on Bun:\r\n\r\n<img width=\"891\" alt=\"SS\" src=\"https://user-images.githubusercontent.com/10682/235352353-71fd40e1-b71f-4863-a606-ca2921ac407b.png\">\r\n\r\nWe mainly measure performance based on Bun, so this change is effective.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1689895547},{"id":1689904519,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1055","title":"Hono auto replace the latest set header when have mutiple values with the same header key","body":"If you use ChatGPT, in their sever --> They can set multiple `Set-Cookie` headers in login with google step. I tried in Hono too, but not luck 😆. Hope anyone can take a look.\r\n\r\n![image](https://user-images.githubusercontent.com/24296018/235353550-00e058d8-3e05-48d8-baef-8f0bfbd96d21.png)\r\n\r\nHere is my code\r\n\r\n```ts\r\nconst auth = new Hono<{ Bindings: EnvBindings }>();\r\nexport const authRoute = auth.post('/auth/auth0/token', (c) => {\r\n\t... handle business logic\r\n\tc.header('Set-Cookie', 'XYZ');\r\n\tc.header('Set-Cookie', 'ABC'); --> Response header only return this value\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1689904519},{"id":1691302489,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1056","title":"empty string is a valid header value","body":"As mentioned in [this PR](https://github.com/honojs/hono/pull/884#issuecomment-1426925215), empty strings are valid header values.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1691302489},{"id":1691913462,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1057","title":"fix: check `global.fastly` instead of `require('fastly:env')`","body":"This PR fixes the method for detecting whether the code is running on Fastly Compute@Edge or not.\r\n\r\nPreviously, it used `require('fastly:env')` and checked whether it could access the variables. With this PR, it checks for `global.fastly` instead. Additionally, in `adapter.ts`, the `env` function used dynamic require, but this caused errors in environments like `webpack`, so it has been removed. We can use `ConfigStore` to manage user-defined data on Fastly.\r\n\r\nResolve #1052","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1691913462},{"id":1691926104,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1058","title":"fix(deno): export `HTTPException` from `mod.ts`","body":"Fix #1049 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1691926104},{"id":1692004887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1059","title":"Tasks for v4","body":"Tasks for the major upgrade to version \"v4\". The following items may be edited:\r\n\r\n- [x] Remove HTTP status messages and remove status code Unions from `utils/http-status.ts`. #1037 \r\n- [x] PatternRourter\r\n- [x] LinearRouter\r\n- [ ] HonoBase\r\n- [x] `hono/tiny`\r\n- [ ] `hono/quick`\r\n- [ ] Node Adapter supports Node.js native web standard API\r\n- [ ] PatternRouter as default ?\r\n- [x] Allow routings with hostname\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1692004887},{"id":1692103791,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1060","title":"chore: update eslint","body":"Update eslint and remove `.eslintignore` which is not used.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1692103791},{"id":1692299768,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1061","title":"feat: Allow getPath to be replaced.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1692299768},{"id":1692306918,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1062","title":"chore: move runtime tests into `runtime_tests`","body":"Moved runtime tests for Fastly, Bun, Deno, etc., to the `runtime_tests` directory.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1692306918},{"id":1693062584,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1064","title":"feat: Allow getPath to be replaced.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1693062584},{"id":1694142907,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1065","title":"feat(serve-static): `rewriteRequestPath` option for Workers/Deno/Bun","body":"This PR introduces `rewriteRequestPath` option for a serve-static for Cloudflare Workers, Deno, and Bun.\r\n\r\n```ts\r\napp.use(\r\n  '/dot-static/*',\r\n   serveStatic({\r\n    root: './assets',\r\n    rewriteRequestPath: (path) => path.replace(/^\\/dot-static/, '/.static'),\r\n  })\r\n)\r\n```\r\n\r\nFix #1033","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1694142907},{"id":1694329387,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1066","title":"feat: Cookie Middleware and deprecate `c.req.cookie()` / `c.cookie()`","body":"This PR introduces the Cookie Middleware, which includes `getCookie()` and `setCookie()` methods. As a result, `c.req.cookie()` and `c.cookie()` will be deprecated.\r\n\r\n```ts\r\nimport { getCookie, setCookie } from 'hono/cookie'\r\n\r\n// ...\r\n\r\napp.get('/cookie', (c) => {\r\n  const yummyCookie = getCookie(c, 'yummy_cookie')\r\n  // ...\r\n  setCookie(c, 'delicious_cookie', 'macha')\r\n  //\r\n}\r\n```\r\n\r\n`c.req.cookie()` and `c.header()` will be obsolete in v4.\r\n\r\nRelated to #965 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1694329387},{"id":1694331391,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1067","title":"serve static error","body":"the docs here seem to be a bit incomplete:\r\nhttps://hono.dev/getting-started/nodejs#serve-static-files\r\n\r\n```\r\napp.use('/images/*', serveStatic({ root: './assets/images' }))\r\n```\r\n\r\ngives me this error:\r\n```\r\n✘ [ERROR] Error on remote worker: ParseError: A request to the Cloudflare API (/accounts/f9d6328dc3115e621758a741dda3d5c4/workers/scripts/graphql-yoga/edge-preview) failed.\r\n\r\n      at throwFetchError\r\n  (/Users/a/Dev/sonicjs-workers/yoga/node_modules/wrangler/wrangler-dist/cli.js:130684:17)\r\n      at fetchResult\r\n  (/Users/a/Dev/sonicjs-workers/yoga/node_modules/wrangler/wrangler-dist/cli.js:130651:5)\r\n      at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n      at async createPreviewToken\r\n  (/Users/a/Dev/sonicjs-workers/yoga/node_modules/wrangler/wrangler-dist/cli.js:132627:29)\r\n      at async createWorkerPreview\r\n  (/Users/a/Dev/sonicjs-workers/yoga/node_modules/wrangler/wrangler-dist/cli.js:132648:17)\r\n      at async start\r\n  (/Users/a/Dev/sonicjs-workers/yoga/node_modules/wrangler/wrangler-dist/cli.js:151221:34) {\r\n    text: 'A request to the Cloudflare API\r\n  (/accounts/f9d6328dc3115e621758a741dda3d5c4/workers/scripts/graphql-yoga/edge-preview) failed.',\r\n    notes: [\r\n      {\r\n        text: 'Uncaught Error: No such module \"__STATIC_CONTENT_MANIFEST\".\\n' +\r\n          '  imported from \"index.js\"\\n' +\r\n          ' [code: 10021]'\r\n      }\r\n    ],\r\n    location: undefined,\r\n    kind: 'error',\r\n    code: 10021\r\n  }\r\n```\r\n\r\ndo I also need to add something like this to the wrangler.toml file?\r\n```\r\n[site]\r\nbucket = \"./assets\"\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1694331391},{"id":1695353484,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1068","title":"dangerouslySetInnerHTML always returns Error","body":"The following code snippet throws the error **\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\"**\r\n\r\n```javascript\r\nimport { Hono } from 'hono';\r\n\r\nconst app = new Hono();\r\n\r\napp.get('/', (c) => {\r\n  const inner = { __html: 'JSX &middot; SSR' };\r\n  return c.html(<div dangerouslySetInnerHTML={inner} />);\r\n});\r\n\r\nconst port = Number(process.env.PORT) || 3000;\r\nconsole.log(`🚀 Running at http://localhost:${port}`);\r\n\r\nexport default {\r\n  port,\r\n  fetch: app.fetch\r\n};\r\n```\r\n\r\nThis is based on the Docs at https://hono.dev/middleware/builtin/jsx#dangerouslysetinnerhtml\r\n\r\nThe error is coming from https://github.com/honojs/hono/blob/21f4c196e7914a5d11348d8591a23a094dee15bd/src/middleware/jsx/index.ts#L125 but it's condition of `(children.length > 0)` should not be passing.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1695353484},{"id":1695886696,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1069","title":"with S3-storage ","body":"I've tried a lot of ways to use S3 storage, but I get an error on hono, can you give me a little advice?\r\n\r\n```\r\nimport { Context } from \"hono\";\r\n\r\nimport AWS from \"aws-sdk\";\r\nimport { S3Client } from '@aws-sdk/client-s3'\r\nimport multer from \"multer\";\r\nimport multerS3 from \"multer-s3\";\r\n\r\nexport default async (context: Context) => {\r\n    const body = await context.req.parseBody();\r\n    console.log(body);\r\n    const fileBuffer:File = body.file;\r\n\r\n    const s3Client = new S3Client({\r\n        credentials: {\r\n            accessKeyId: process.env.S3_ACCESS_KEY, // accessKeyId that is stored in .env file\r\n            secretAccessKey: process.env.S3_SECRET_KEY, // secretAccessKey is also store in .env file\r\n        },\r\n        region: process.env.S3_REGION,\r\n        endpoint: process.env.S3_ENDPOINT,\r\n        forcePathStyle: true,\r\n    });\r\n\r\n    multer({\r\n        storage: multerS3({\r\n            s3: s3Client,\r\n            bucket: process.env.S3_BUCKET,\r\n            shouldTransform: true,\r\n            acl: \"private\",\r\n            metadata: function (req, fileBuffer, cb) {\r\n                cb(null, { fieldName: fileBuffer._name });\r\n            },\r\n            key: function (req, fileBuffer, cb) {\r\n                cb(null, Date.now().toString());\r\n            },\r\n        }),\r\n    })\r\n\r\n\r\n    return context.json({\r\n        file: fileBuffer,\r\n        StorageS3: s3Client\r\n        // multerS3Config: multerS3Config,\r\n    });\r\n}\r\n\r\n\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1695886696},{"id":1696890309,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1070","title":"fix(jsx): fix a `jsx-runtime` bug","body":"Fix #1068 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1696890309},{"id":1696903462,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1071","title":"feat(context): clear the header with `c.header(key, undefined)`","body":"This PR allows the Context to clear a header using `c.header(key, undefined)` because previously, we didn't have a way to clear headers.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1696903462},{"id":1698654634,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1072","title":"feat(app): introduce `app.bundleHandlers()`","body":"This PR introduces a `bundleHandlers()` function in `hono-base.ts`. This function will **bundle a path and handlers** into `[path, ...handlers]`. The bundled handler can be used with `app.get()` and other route methods. The `bundleHandlers()` is useful for writing application code when using RPC-mode.\r\n\r\nWithout `bundleHandlers()`:\r\n\r\n```ts\r\nconst routes = app\r\n  .get(\r\n    '/list',\r\n    validator('query', () => {\r\n      return { page: '1' }\r\n    }),\r\n    (c) => c.jsonT(c.req.valid('query'))\r\n  )\r\n  .post(\r\n    '/create',\r\n    validator('form', () => {\r\n      return { title: 'Hono is cool!' }\r\n    }),\r\n    (c) => c.jsonT(c.req.valid('form'))\r\n  )\r\n```\r\n\r\nWith `bundleHandlers()`, you can write like the following:\r\n\r\n```ts\r\nconst listHandler = app.bundleHandlers(\r\n  '/list',\r\n  validator('query', () => {\r\n    return { page: '1' }\r\n  }),\r\n  (c) => c.jsonT(c.req.valid('query'))\r\n)\r\n\r\nconst createHandler = app.bundleHandlers(\r\n  '/create',\r\n  validator('form', () => {\r\n    return { title: 'Hono is cool!' }\r\n  }),\r\n  (c) => c.jsonT(c.req.valid('form'))\r\n)\r\n\r\nconst routes = app.get(...listHandler).post(...createHandler)\r\n\r\n//...\r\n\r\nexport type AppType = typeof routes\r\n```\r\n\r\nIt may be more verbose, but it makes a better outlook on the code. Users can choose to use `bundleHandlers()` or chaining without it.\r\n\r\nThis is implemented as a method in `hono-base.ts`. It slightly increases the code volume, but this implementation is quite simple:\r\n\r\n```ts\r\nthis.bundleHandlers = (path: string, ...handlers: H[]) => {\r\n  return [path, ...handlers]\r\n}\r\n```\r\n\r\nI think this API provides simplicity for users.\r\n\r\nThis will be released as \"experimental\" in \"v3.2\", and we'll gather feedback on its usage. If it proves to be effective, it will be made generally available.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1698654634},{"id":1698910802,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1073","title":"feat(adapter): add `hono/vercel` / deprecate `hono/nextjs`","body":"I realized that Hono works on Vercel, not only with Next.js. Therefore, I create `hono/vercel` and deprecate `hono/nextjs`. `hono/nextjs` will become obsolete in v4.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1698910802},{"id":1698917633,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1074","title":"feat(preset): add `hono/quick`","body":"This PR introduces `hono/quick` and a `preset` directory to manage `hono/tiny` and `hono/quick`.\r\n\r\n`hono/quick` uses only the **LinearRouter**. It has the fastest boot time, making it suitable for Fastly Compute@Edge.\r\n\r\nYou can use `hono/quick` just like `hono`:\r\n\r\n```ts\r\nimport { Hono } from 'hono/quick'\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1698917633},{"id":1698993659,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1075","title":"When sending a POST to the Lambda Function URL, it doesn't work.","body":"If I write the following code in Lambda and try to POST it from FunctionURL, it fails.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/aws-lambda'\r\nimport { logger } from 'hono/logger'\r\n\r\nconst app = new Hono()\r\n\r\ninterface UserBody {\r\n  user: string;\r\n}\r\n\r\napp.use('*', logger())\r\napp.post('/', async (c) => {\r\n  const { user } = await c.req.json<UserBody>();\r\n  if (!user) {\r\n    return c.text('Please Setting \"user\"', 400)\r\n  } \r\n  return c.json({\"user\": user})\r\n})\r\napp.get('/', (c) => { \r\n    return c.text(`Hono is running on ${c.runtime}\\n`)\r\n})\r\nexport const handler = handle(app)\r\n\r\n```\r\n\r\n- error\r\n\r\n```json\r\n{\r\n    \"errorType\": \"TypeError\",\r\n    \"errorMessage\": \"Request with GET/HEAD method cannot have body.\",\r\n    \"stack\": [\r\n        \"TypeError: Request with GET/HEAD method cannot have body.\",\r\n        \"    at new Request (node:internal/deps/undici/undici:7171:17)\",\r\n        \"    at createRequest (/var/task/index.js:1570:10)\",\r\n        \"    at Runtime.handler (/var/task/index.js:1540:17)\",\r\n        \"    at Runtime.handleOnceNonStreaming (file:///var/runtime/index.mjs:1086:29)\"\r\n    ]\r\n```\r\n\r\nI suspected it might be an issue with the event, so I investigated it. (I couldn't find anything about it in the official documentation.)\r\n\r\n```node\r\nexport const handler = async(event, context, callback) => {\r\n    return {\r\n        statusCode: 200,\r\n        body: \"EVENT: \\n\" + JSON.stringify(event, null, 2),\r\n    };\r\n};\r\n```\r\n\r\n- GET\r\n```bash\r\ncurl -X GET -H 'Content-Type: application/json' -d '{ \"usr\": \"uga\" }' https://v6omzqz2b2ck4asqa3f6ktm26m0ogpxq.lambda-url.ap-northeast-1.on.aws/\r\nEVENT: \r\n{\r\n  \"version\": \"2.0\",\r\n  \"routeKey\": \"$default\",\r\n  \"rawPath\": \"/\",\r\n  \"rawQueryString\": \"\",\r\n  \"headers\": {\r\n    \"content-length\": \"16\",\r\n    \"x-amzn-tls-cipher-suite\": \"ECDHE-RSA-AES128-GCM-SHA256\",\r\n    \"x-amzn-tls-version\": \"TLSv1.2\",\r\n    \"x-amzn-trace-id\": \"Root=1-64577867-46dd53e40ce1f6e5279c68bd\",\r\n    \"x-forwarded-proto\": \"https\",\r\n    \"host\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq.lambda-url.ap-northeast-1.on.aws\",\r\n    \"x-forwarded-port\": \"443\",\r\n    \"content-type\": \"application/json\",\r\n    \"x-forwarded-for\": \"35.77.42.73\",\r\n    \"accept\": \"*/*\",\r\n    \"user-agent\": \"curl/7.88.1\"\r\n  },\r\n  \"requestContext\": {\r\n    \"accountId\": \"anonymous\",\r\n    \"apiId\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq\",\r\n    \"domainName\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq.lambda-url.ap-northeast-1.on.aws\",\r\n    \"domainPrefix\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq\",\r\n    \"http\": {\r\n      \"method\": \"GET\",\r\n      \"path\": \"/\",\r\n      \"protocol\": \"HTTP/1.1\",\r\n      \"sourceIp\": \"35.77.42.73\",\r\n      \"userAgent\": \"curl/7.88.1\"\r\n    },\r\n    \"requestId\": \"ef5bdbc2-2f20-4769-9939-9a5a712e5be4\",\r\n    \"routeKey\": \"$default\",\r\n    \"stage\": \"$default\",\r\n    \"time\": \"07/May/2023:10:07:35 +0000\",\r\n    \"timeEpoch\": 1683454055510\r\n  },\r\n  \"body\": \"{ \\\"usr\\\": \\\"uga\\\" }\",\r\n  \"isBase64Encoded\": false\r\n}\r\n```\r\n\r\n- POST\r\n\r\n```bash\r\n curl -X POST -H 'Content-Type: application/json' -d '{ \"usr\": \"uga\" }' https://v6omzqz2b2ck4asqa3f6ktm26m0ogpxq.lambda-url.ap-northast-1.on.aws/\r\nEVENT: \r\n{\r\n  \"version\": \"2.0\",\r\n  \"routeKey\": \"$default\",\r\n  \"rawPath\": \"/\",\r\n  \"rawQueryString\": \"\",\r\n  \"headers\": {\r\n    \"content-length\": \"16\",\r\n    \"x-amzn-tls-cipher-suite\": \"ECDHE-RSA-AES128-GCM-SHA256\",\r\n    \"x-amzn-tls-version\": \"TLSv1.2\",\r\n    \"x-amzn-trace-id\": \"Root=1-64577775-7b347e31250dd7241a79d0b0\",\r\n    \"x-forwarded-proto\": \"https\",\r\n    \"host\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq.lambda-url.ap-northeast-1.on.aws\",\r\n    \"x-forwarded-port\": \"443\",\r\n    \"content-type\": \"application/json\",\r\n    \"x-forwarded-for\": \"35.77.42.73\",\r\n    \"accept\": \"*/*\",\r\n    \"user-agent\": \"curl/7.88.1\"\r\n  },\r\n  \"requestContext\": {\r\n    \"accountId\": \"anonymous\",\r\n    \"apiId\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq\",\r\n    \"domainName\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq.lambda-url.ap-northeast-1.on.aws\",\r\n    \"domainPrefix\": \"v6omzqz2b2ck4asqa3f6ktm26m0ogpxq\",\r\n    \"http\": {\r\n      \"method\": \"POST\",\r\n      \"path\": \"/\",\r\n      \"protocol\": \"HTTP/1.1\",\r\n      \"sourceIp\": \"35.77.42.73\",\r\n      \"userAgent\": \"curl/7.88.1\"\r\n    },\r\n    \"requestId\": \"e3114561-02fc-4479-8bfb-34b8b28d6382\",\r\n    \"routeKey\": \"$default\",\r\n    \"stage\": \"$default\",\r\n    \"time\": \"07/May/2023:10:03:33 +0000\",\r\n    \"timeEpoch\": 1683453813329\r\n  },\r\n  \"body\": \"{ \\\"usr\\\": \\\"uga\\\" }\",\r\n  \"isBase64Encoded\": false\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1698993659},{"id":1699007930,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1076","title":"feat(adapter): AWS Lambda Adapter supports requests via Lambda Function URLs.","body":"Lambda Function URLs are endpoints that allow for simple requests to be passed to Lambda without an API Gateway. \r\n\r\nhttps://aws.amazon.com/jp/blogs/aws/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/\r\n\r\nMost of the event is compatible with API Gateway, but the location of the method is different, which is why, as mentioned in https://github.com/honojs/hono/issues/1075, we specified the behavior of GET during a POST request. This patch attempts to fix that issue.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1699007930},{"id":1699020711,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1077","title":"mTls binding is undefined with Cloudflare worker","body":"When a binding to an mtls cert is defined in wrangler.toml\r\n\r\n```\r\nmtls_certificates = [\r\n  { binding = \"MY_CERT\", certificate_id = \"xxxxx\" },\r\n]\r\n```\r\nThe binding does not appear in context.env. Is this enabled in hono?","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1699020711},{"id":1699612735,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1078","title":"remove `type.ts`","body":"Maybe this file is not needed:\r\nhttps://github.com/honojs/hono/blob/next/src/router/pattern-router/type.ts","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1699612735},{"id":1699778467,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1079","title":"fix: enable specifying router from args","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1699778467},{"id":1700256074,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1080","title":"fix(context): enable extending `ContextVarableMap`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1700256074},{"id":1700715913,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1081","title":"Unable to execute yarn command due to @hono includes many things in the module","body":"Execute:\r\n```yarn cache clean tar```\r\n\r\nResult:\r\n\r\n```\r\nyarn cache v1.22.19\r\nerror An unexpected error occurred: \"There should only be one folder in a package cache (got .changeset,.eslintignore,.eslintrc.js,.github,.gitignore,.prettierrc,.vscode,.yarn-metadata.json,.yarn-tarball.tgz,README.md,jest.config.js,package.json,packages,tsconfig.json,yarn.lock in /Users/mac/Library/Caches/Yarn/v6/npm-@hono-0.0.0/node_modules/@hono)\".\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1700715913},{"id":1702024234,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1082","title":"fix: remove `type.ts`","body":"Close #1078","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1702024234},{"id":1702111902,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1083","title":"fix(types): set `/` for generics `basePath`","body":"TODO:\r\n\r\n- [x] `denoify`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1702111902},{"id":1702321852,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1084","title":"c.req.query(  ) cause infinite loop when query has prefix of key","body":"Infinite loop may occur in `c.req.query(key)`.\r\n\r\nWhen you have a parameter (like `&d0=`) with key (like `d`) as prefix\r\n\r\n`http://localhost/foo?a=0&b=1`: `c.req.query('d')` -> `undefined`\r\n`http://localhost/foo?c=2&d=3`: `c.req.query('d')` -> `'3'`\r\n`http://localhost/foo?c=2&d0=3`: `c.req.query('d')` -> **infinite loop**\r\n\r\nif this parameter on first then return `undefined` correctly.\r\n`http://localhost/foo?d0=3`: `c.req.query('d')` -> `undefined`\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1702321852},{"id":1702727518,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1085","title":"fix(getQueryParam): Fixed a bug in getQueryParam when a partial matching key was found.","body":"Fixes #1084","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1702727518},{"id":1702736983,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1086","title":"fix(context): Fix typo in charset, again.","body":"Here it is UTF8 again!\r\n\r\nhttps://github.com/honojs/hono/commit/0a19deaa5bb800a43909c0f25e53d68dbcf4e48a#diff-1c6b79733c620b41d7f8b63deb644f09e5fda79664918394b443c2a348731605L278-R279","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1702736983},{"id":1704612961,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1088","title":"ErrorHandler type fix","body":"We can use async function in app.onError method and it works correctly. But it has type error.\r\nReturn type of callback function isn't including Promise so i changed it to: \r\n`\r\n(err: Error, c: Context<E>) => Response | Promise<Response>\r\n`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1704612961},{"id":1705353161,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1090","title":"feat(app): `onError()` supports async","body":"As mentioned by @AliKaanT in #1088, `app.onError()` can be an asynchronous function.\r\n\r\n```ts\r\napp.onError(async (e, c) => {\r\n  //...\r\n})\r\n```\r\n\r\nThis PR enables support for an asynchronous function in `app.onError()`. It is based on #1088, I added tests and a small fix. If this is merged, I will need to add @AliKaanT as a co-author.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1705353161},{"id":1705667008,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1091","title":"fix(lambda): don't encode text","body":"This PR concerns the AWS Lambda adapter.\r\n\r\nFrom PR #1009, it encodes any content as Base64.\r\n\r\nThis works fine on Function URLs, but it does not perform well on Lambda with API Gateway. We don't need to encode text-based content, only binary. In this PR, it determines whether the content is text or not and decides whether encoding is necessary.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1705667008},{"id":1706161533,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1092","title":"Trying to get simple test working, ReferenceError: Request is not defined","body":"I am following your example test here:\r\nhttps://github.com/honojs/hono-minimal/blob/main/src/index.test.ts\r\n\r\nI have pretty much the same simple test here:\r\nhttps://github.com/lane711/yoga/blob/feature/hono2/src/index.test.ts\r\n\r\nbut when I run it I get:\r\n` FAIL  src/index.test.ts\r\n  ● Test the application › Should return 200 response\r\n\r\n    ReferenceError: Request is not defined\r\n\r\n       6 | describe('Test the application', () => {\r\n       7 |   it('Should return 200 response', async () => {\r\n    >  8 |     const res = await app.request(`${baseUrl}/test`)\r\n         |                           ^\r\n       9 |     expect(res.status).toBe(200)\r\n      10 |   })\r\n      11 | })\r\n\r\n      at Hono.request (node_modules/hono/dist/cjs/hono.js:66:28)\r\n      at Object.<anonymous> (src/index.test.ts:8:27)`\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1706161533},{"id":1706203469,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1093","title":"Jest tests not working with serveStatic","body":"I created a simple project with hono-minimal \r\n\r\nI then added\r\n```\r\nimport { serveStatic } from \"hono/cloudflare-workers\";\r\napp.use(\"/*\", serveStatic({ root: \"./\" }));\r\napp.use(\"/favicon.ico\", serveStatic({ path: \"./favicon.ico\" }));\r\n```\r\n\r\nnow when I run `npm run test` I get this error:\r\n```\r\n    Cannot find module '__STATIC_CONTENT_MANIFEST' from 'node_modules/hono/dist/cjs/adapter/cloudflare-workers/server-static-module.js'\r\n\r\n    Require stack:\r\n      node_modules/hono/dist/cjs/adapter/cloudflare-workers/server-static-module.js\r\n      node_modules/hono/dist/cjs/adapter/cloudflare-workers/index.js\r\n      src/index.ts\r\n      src/index.test.ts\r\n```\r\n\r\nhttps://github.com/lane711/hono-minimal/blob/main/src/index.ts","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1706203469},{"id":1706540921,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1094","title":"[Feature suggestion] Adding End To End Type safety","body":"Adding end to end type safety can improve user experience, There's an implementation of that already it's called [tRPC](https://trpc.io/), and a Bun framework called elysia js already implemented their own \"plugin\" for using to fetch with type safety!\r\n\r\nI consider this feature very interesting since i'll help developers integrate their backend **easily** with the frontend.\r\nThanks","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1706540921},{"id":1706824806,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1095","title":"chore:denoify","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1706824806},{"id":1707661271,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1096","title":"Add options to pass custom replacer to json function","body":"Sometimes people want to remove null values from response .It will be good if json function accepts custom replacer like below\r\n\r\nJSON.stringify(x, (k, v) => v ?? undefined)\r\n\r\nAlthough I can manually send Response Object but it will be good if its added in api itself. If its fine I can raise a pull request","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1707661271},{"id":1707860748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1097","title":"jsx","body":"Hi, I am trying to incorporate the jsx middelware into my project:\r\n\r\nhttps://hono.dev/middleware/builtin/jsx\r\n\r\nMy code is here\r\nhttps://github.com/lane711/hono-pages2/blob/main/src/cms/admin/test.tsx\r\n\r\nGetting this error:\r\n`Cannot find name 'React'.ts(2304)`\r\non the `<html>` and other tags\r\n\r\nI must have something misconfigured?\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1707860748},{"id":1708410258,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1098","title":"fix(cloudflare-workers): serveStatic `rewriteRequestPath` option","body":"This PR enables the `rewriteRequestPath` option for `serveStatic`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1708410258},{"id":1708432633,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1099","title":"[Cloudflare Worker]: How can I get the original request when calling another bound worker in Cloudflare worker?","body":"[about service-bindings docs](https://developers.cloudflare.com/workers/platform/bindings/about-service-bindings/)\r\n\r\n```typescript\r\nexport default {\r\n  async fetch(request, env) {\r\n    // Fetch AUTH service and pass request\r\n    const authResponse = await env.auth.fetch(request.clone());\r\n\r\n    // Return response from the AUTH service if the response status is not 200\r\n    // It would return 403 'x-custom-token does not match, request not allowed' response in such case\r\n    if (authResponse.status !== 200) {\r\n      return authResponse;\r\n    }\r\n\r\n    // Request allowed\r\n    // You can write application logic here\r\n    // In this case we delegate the logic to an `application` Worker\r\n    return await env.application.fetch(request)\r\n  },\r\n};\r\n```\r\n\r\nHow can I get the original request when calling another bound worker in Cloudflare worker?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1708432633},{"id":1708441678,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1100","title":"feat: add devcontainer to improve developer experience","body":"Adding the .devcontainer configuration makes it easier for us to develop projects online.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1708441678},{"id":1708535213,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1101","title":"Argument of type { data: Type }   is not assignable to parameter of type JSONValue","body":"I have an endpoint to get all users --> The user services return `UserTable[]`. But I don't know why Hono blames me when I pass this into `c.jsonT` like the image below.\r\n\r\n```ts\r\nget(\"/users\", async (c) => {\r\n\t\tconst users = await userService.findUsers(....);\r\n\t\treturn c.jsonT({ data: users }, httpStatus.OK)\r\n\t})\r\n```\r\n\r\n![image](https://github.com/honojs/hono/assets/24296018/4f2b99fc-18a5-4108-85a2-280c9e8fb113)\r\n![image](https://github.com/honojs/hono/assets/24296018/273aca72-47b6-46d2-bf74-1d5495d0f32c)\r\n\r\nHow can we solve this problem 🤔? I hope anyone can help me. Thanks!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1708535213},{"id":1708750522,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1102","title":"Can't use websocket with middleware: TypeError: Headers are immutable","body":"`Deno.upgradeWebSocket` returns a response with immutable headers. But middleware wants to mutate them.\r\n\r\nSample code:\r\n\r\n```ts\r\napp.use('/*', logger(), cors({ origin: '*', exposeHeaders: ['link'] }));\r\n\r\napp.get('/api/v1/streaming', (c) => {\r\n  const { socket, response } = Deno.upgradeWebSocket(c.req.raw);\r\n  socket.addEventListener('message', (e) => console.log(e));\r\n  return response;\r\n});\r\n```\r\n\r\nResult:\r\n\r\n```\r\nTrace: TypeError: Headers are immutable.\r\n    at Headers.set (ext:deno_fetch/20_headers.js:362:13)\r\n    at https://deno.land/x/hono@v3.0.2/context.ts:104:22\r\n    at Headers.forEach (ext:deno_webidl/00_webidl.js:1122:11)\r\n    at Context.set res (https://deno.land/x/hono@v3.0.2/context.ts:103:25)\r\n    at dispatch (https://deno.land/x/hono@v3.0.2/compose.ts:57:22)\r\n    at https://deno.land/x/hono@v3.0.2/compose.ts:38:33\r\n    at https://deno.land/x/hono@v3.0.2/middleware/cors/index.ts:59:13\r\n    at dispatch (https://deno.land/x/hono@v3.0.2/compose.ts:37:17)\r\n    at https://deno.land/x/hono@v3.0.2/compose.ts:38:33\r\n    at https://deno.land/x/hono@v3.0.2/middleware/logger/index.ts:66:11\r\n    at errorHandler (https://deno.land/x/hono@v3.0.2/hono.ts:54:11)\r\n    at https://deno.land/x/hono@v3.0.2/compose.ts:74:29\r\n    at eventLoopTick (ext:core/01_core.js:181:11)\r\n    at async https://deno.land/x/hono@v3.0.2/middleware/logger/index.ts:66:5\r\n    at async https://deno.land/x/hono@v3.0.2/hono.ts:246:50\r\n    at async Server.#respond (https://deno.land/std@0.177.0/http/server.ts:299:18)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1708750522},{"id":1708806403,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1103","title":"feat(deno): export cookie middleware","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1708806403},{"id":1709540599,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1104","title":"feat: `app.mount()`","body":"This PR introduces a new feature, `mount()`.\r\n\r\nCurrently, there are many frameworks that support Web Standard APIs. They provide applications that receive a Request and return a Response:\r\n\r\n```\r\nRequest => app => Response\r\n```\r\n\r\nI've found an interesting idea to utilize this unique point, which is `mount()`.\r\n\r\nBy using `mount()`, you can integrate applications using other frameworks, such as *itty-router*, with Hono.\r\n\r\n```ts\r\nimport { Router as IttyRouter } from 'itty-router'\r\nimport { Hono } from 'hono'\r\nimport { mount } from 'hono/mounter'\r\n\r\n// Create itty-router application\r\nconst ittyRouter = IttyRouter()\r\n\r\n// Handle `GET /itty-router/hello`\r\nittyRouter.get('/hello', () => new Response('Hello from itty-router'))\r\n\r\n// Hono application\r\nconst app = new Hono()\r\n\r\n// Mount!\r\napp.get(...mount('/itty-router', ittyRouter.handle))\r\n\r\nexport default app\r\n```\r\n\r\nAnd I also tried the Remix app:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { env } from 'hono/adapter'\r\nimport { mount } from 'hono/mounter'\r\n\r\nimport { serveStatic } from 'hono/cloudflare-workers'\r\n\r\nimport { createRequestHandler } from '@remix-run/cloudflare'\r\nimport * as build from './build'\r\n\r\n// Remix application\r\n// @ts-ignore\r\nconst handleRemixRequest = createRequestHandler(build, process.env.NODE_ENV)\r\n\r\n// Hono application\r\nconst app = new Hono()\r\n\r\n// Static files for Remix\r\napp.get(\r\n  '/remix/build/*',\r\n  serveStatic({\r\n    root: './',\r\n  })\r\n)\r\n\r\n// Mount Remix app\r\napp.get(\r\n  ...mount('/remix', handleRemixRequest, (c) => {\r\n    return { env: env(c) }\r\n  })\r\n)\r\n```\r\n\r\nThis means we can mount any applications built with any framework like *itty-router*, *Remix*, *Qwik*, *SoildJS* into our Hono app. We don't need to create middleware to mount a specific framework, we can do it simply with `mount()`.\r\n\r\nWith this implementation, now, we have two concepts: **adapt** and **mount**. In my view, **adapt** means \"Hono adapts to any runtime\", while **mount** means \"Hono can mount any framework\". Along with middleware, we can create a large ecosystem like the following:\r\n\r\n![Image](https://github.com/honojs/hono/assets/10682/74272c1d-decc-488a-bed4-24ddab8c451e)\r\n\r\nWith these special features, Hono will not just be a web framework, it will be like a \"Glue\".\r\n\r\nIn any case, I believe the ability to mount applications built with other frameworks is a good idea.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1709540599},{"id":1710252650,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1105","title":"feat(app): `app.routerName()`","body":"This PR introduces a `c.routerName()` function in `context.ts`. With this function, we can determine the name of the currently active router. This can be useful for debugging purposes.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\n//...\r\n\r\napp.get('/', (c) => {\r\n  return c.text(c.routerName ?? 'N/A') // \"SmartRouter + RegExpRouter\"\r\n})\r\n```\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1710252650},{"id":1710271468,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1106","title":"fix(app): export `fire()` correctly","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1710271468},{"id":1713246603,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1108","title":"ci: use `setup-bun`","body":"Use `setup-bun` for CI and specify the Bun version `v0.5.9`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1713246603},{"id":1713525890,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1109","title":"`hono/quick` is really quick?","body":"We are planning to release `v3.2.0` soon! In this version, we are introducing a new feature called \"preset\". If you use `hono/quick`, the application will use `LinearRouter`, which is the fastest during the registration phase. Therefore, I believe using `hono/quick` is most suitable for **Fastly Compute@Edge**.\r\n\r\nYou can already use `hono/quick` by installing the RC release:\r\n\r\n```\r\nyarn add hono@3.2.0-rc.4\r\n```\r\n\r\nThen, you can use it by importing `hono/quick`.\r\n\r\n```ts\r\nimport { Hono } from 'hono/quick'\r\n```\r\n\r\nI'm interested in knowing the performance of `hono/quick` in the Fastly Compute@Edge environment.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1713525890},{"id":1713827516,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1110","title":"Enable to get router name via `app.routerName`.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1713827516},{"id":1714677952,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1111","title":"Get new path by param.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1714677952},{"id":1714684851,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1112","title":"Generate new URL more simply.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1714684851},{"id":1714993279,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1113","title":"fix(preset): fix constructor args","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1714993279},{"id":1715038462,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1114","title":"fix(router): `PatternRouter` supports a hostname, added tests","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1715038462},{"id":1715061107,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1115","title":"docs(readme): update","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1715061107},{"id":1715751740,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1116","title":"HTTPException type not available in nodejs","body":"I am trying to implement the error handling per the documentation [here](https://hono.dev/api/hono#error-handling) in node however there doesn't appear to be a HTTPException type. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1715751740},{"id":1716540557,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1117","title":"v3.2","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1716540557},{"id":1717778156,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1118","title":"Cache middleware is not working","body":"I don't think the cache is working after v3.1.0.\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport { cache } from 'hono/cache'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '/',\r\n  cache({ cacheName: 'hello', cacheControl: 'max-age=360'}),\r\n  async (c) => c.text('Hello, Hono!')\r\n)\r\n\r\nexport default app\r\n```\r\n\r\nI have confirmed that it works up to v3.0.5.\r\n\r\nI'm sorry if I'm wrong.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1717778156},{"id":1718071044,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1119","title":"fix(app): `app.mount()` supports `/`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1718071044},{"id":1718223408,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1120","title":"Duplicate cookie middleware export","body":"I have found that in the latest minor release (3.2.1), a PR (#1103) was merged that duplicates the export of the cookies middleware. The PR was supposed to fix the missing export, but the export already existed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1718223408},{"id":1718281623,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1121","title":"Unexpected 500 Error, Instead of 401 in Basic Auth Middleware.","body":"Basic Authentication Middleware returns a 500 error when passed an Authorization header containing a string that is not correctly Base64 encoded.\r\n\r\n```\r\napp.use(\r\n  '*',\r\n  basicAuth({\r\n    username: 'hono',\r\n    password: 'acoolproject',\r\n  })\r\n\r\napp.get('/auth/page', (c) => {\r\n  return c.text('You are authorized')\r\n})\r\n```\r\n\r\nThis header is 200 OK  (hono:acoolproject)\r\nAuthorization: Basic aG9ubzphY29vbHByb2plY3Q=\r\n\r\nAnd This header is 500 Internal Server Error (removed  \"a\" after \"Basic\")\r\nAuthorization: Basic G9ubzphY29vbHByb2plY3Q=\r\n\r\nIt seems that an invalid value was passed to the Base64 decoding process( atob ), resulting in a 500 error.\r\nhttps://github.com/honojs/hono/blob/1c44c6ec460142536217e508f8e6a4eac516a74b/src/utils/encode.ts#L16-L25\r\n\r\nAt any rate, I deal with it by checking if value is Base64 string before calling function of this line.\r\nhttps://github.com/honojs/hono/blob/1c44c6ec460142536217e508f8e6a4eac516a74b/src/middleware/basic-auth/index.ts#L16\r\n\r\nIt is one idea, but there may be other good ideas.\r\n```\r\nconst BASE64_REGEXP = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/\r\nconst isBase64 = BASE64_REGEXP.exec(match[1])\r\nif(!isBase64) {\r\n  return undefined\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1718281623},{"id":1718332143,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1122","title":"fix(basic-auth): handle passing invalid value to `atob()`","body":"This PR will fix #1121.\r\n\r\nIf an invalid value like `G9ubzphY29vbHByb2plY3Q=` is passed to `atob()`, it should throw a `DOMException`. However, the existing Basic Auth middleware cannot handle this, resulting in a \"500 Internal Error\" when an invalid string is sent.\r\n\r\nThe `jest-environment-miniflare` testing environment does not throw an exception from `atob()`. Therefore, this PR includes a test for this in `runtime_tests/deno/middleware.test.tsx`. The implementation in Deno is correct according to the spec.\r\n\r\nRegarding the implementation, it uses `try`, even though we can check if the string is valid or invalid for Base64. This is because testing is difficult due to the above reasons, so I believe we need to keep the implementation as simple as possible.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1718332143},{"id":1718733710,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1123","title":"fix typo","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1718733710},{"id":1718779829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1124","title":"chore: denoify","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1718779829},{"id":1719146512,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1125","title":"Hono 3.0.0 and superior seems not compatible with the cloudflare html rewritters feature","body":"Hello,\r\nWe were doing that in our middleware:\r\n```\r\n      ctx.res = new HTMLRewriter()\r\n        .on('[data-i18n-key]', new ElementHandler()\r\n        .transform(ctx.res);\r\n```\r\n\r\nNow it gives that error:\r\nTrace: TypeError: immutable\r\n    at Headers.delete (/root/git_repo/test/bluewindow-athena/node_modules/undici/lib/fetch/headers.js:280:13)\r\n    at Context.set res [as res] (/root/git_repo/test/bluewindow-athena/node_modules/hono/dist/context.js:193:25)\r\n    at /root/git_repo/test/bluewindow-athena/node_modules/hono/dist/compose.js:58:21\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at errorHandler (/root/git_repo/test/bluewindow-athena/node_modules/hono/dist/hono-base.js:18:11)\r\n    at /root/git_repo/test/bluewindow-athena/node_modules/hono/dist/compose.js:58:33\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n\r\nIf we change to (what we want to avoid to do because we chain the rewritters in fct of the middleware):\r\n```\r\nconst res = fetch(ctx.req.raw);\r\nreturn new HTMLRewriter()\r\n        .on('[data-i18n-key]', new ElementHandler()\r\n        .transform(res);\r\n```\r\n\r\nThat does not break but the rewritters are not executed (basic example from the documentation: [doc](https://developers.cloudflare.com/workers/runtime-apis/html-rewriter/#handlers)).\r\nWould you consider checking this please?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1719146512},{"id":1720822266,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1126","title":"Export PatternRouter and LinearRouter","body":"These have not been exported yet!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1720822266},{"id":1722401031,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1127","title":"__STATIC_CONTENT_MANIFEST error when bundling with Cloudflare's wrangler.","body":"When using Hono@3.2.1 for Cloudflare's Workers, when bundling with Wrangler or ESbuild I get this error when importing `serveStatic` from `hono/cloudflare-workers`\r\n```\r\n✘ [ERROR] Could not resolve \"__STATIC_CONTENT_MANIFEST\"\r\n\r\n    node_modules/hono/dist/adapter/cloudflare-workers/server-static-module.js:2:21:\r\n      2 │ import manifest from \"__STATIC_CONTENT_MANIFEST\";\r\n        ╵                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n  You can mark the path \"__STATIC_CONTENT_MANIFEST\" as external to exclude it\r\n  from the bundle, which will remove this error.\r\n\r\n1 error\r\n```\r\nEven when I mark it as `external` and `exclude it form the bundle` When running the worker I get an error stating `Uncaught SyntaxError: Cannot use import statement outside a module`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1722401031},{"id":1723315128,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1128","title":"fix: export `PatternRouter` and `LinearRouter`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1723315128},{"id":1723497465,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1129","title":"fix(middleware): don't use `headers.append()`, use `headers.set()`","body":"Some middleware are using `response.headers.append()` when setting header values. With this method, it's possible to set duplicate values if the middleware is called twice.\r\n\r\n```ts\r\napp.use(\r\n  '/api/*',\r\n  cors({\r\n    origin: 'http://example.com',\r\n  })\r\n)\r\napp.use(\r\n  '/api/*',\r\n  cors({\r\n    origin: 'http://example.com',\r\n  })\r\n)\r\n```\r\n\r\nIn this PR, `response.headers.set()` is used to fix this issue.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1723497465},{"id":1724599034,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1130","title":"app.get should handle HEAD requests","body":"Ideally, HEAD requests would be matched by `app.get()` routes and it would only return the headers (no body).\r\n\r\nIt's common for other libraries ([like Express](https://expressjs.com/en/4x/api.html#app.METHOD)) to do this as a convenience, so you don't have to specify an `app.head()` for every single route.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1724599034},{"id":1725008267,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1131","title":"Bump up Bun version in CI","body":"https://github.com/oven-sh/bun/issues/2905 is resolved, so we will bump up this version:\r\n\r\nhttps://github.com/honojs/hono/blob/b06b4d97bcbc5fc2ab2e988bebbbb0a925ed0a6f/.github/workflows/ci.yml#L39","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1725008267},{"id":1726436789,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1133","title":"Access to context inside CORS origin callback function?","body":"https://github.com/honojs/hono/blob/b06b4d97bcbc5fc2ab2e988bebbbb0a925ed0a6f/deno_dist/middleware/cors/index.ts#L4\r\n\r\nThe reason is that we want to return a different `Access-Control-Allow-Origin` header for our staging env.\r\n\r\n```typescript\r\napi.use(\r\n'*',\r\n  cors({\r\n      origin: (origin, c) => {\r\n          if(c.env.ENVIRONMENT === 'staging') {\r\n            return \"http://localhost:31337\"\r\n          }\r\n          return \"https://yourcrowd.ai.moda\"\r\n        },\r\n    allowHeaders: ['content-type', 'Authorization'],\r\n    allowMethods: ['POST', 'PUT', 'DELETE', 'GET', 'PATCH', 'OPTIONS'],\r\n    exposeHeaders: ['via'],\r\n    maxAge: 600,\r\n    credentials: true,\r\n  })\r\n)\r\n```","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1726436789},{"id":1728829911,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1135","title":"fix: Add missing client types and TypedResponse type","body":"Hi @yusukebe we have an issue with `hc` – we'd like to publish typed hono client from our Hono app as a library with zero dependencies, but since hono package.json has `\"types\": \"dist/types/index.d.ts\",` and this file doesn't contain client types we can't make it standalone – without `import from 'hono/dist...'` (see screenshots now/after change).\r\n\r\nWe have such entry point (client.ts) that we build separately from Hono app worker itself:\r\n```\r\nimport { hc } from 'hono/client';\r\n\r\nimport { AppType } from '.';\r\n\r\nexport type { InferRequestType, InferResponseType } from 'hono/client';\r\n\r\nexport const client = hc<AppType>;\r\n```\r\n\r\nThis is what we have now after build:\r\n<img width=\"908\" alt=\"Screen Shot 2566-05-27 at 20 32 41\" src=\"https://github.com/honojs/hono/assets/116948/8a90094d-2cf4-4721-98d2-12e8788af660\">\r\n\r\nThis is what we want to have with this changes:\r\n<img width=\"920\" alt=\"Screen Shot 2566-05-27 at 20 29 39\" src=\"https://github.com/honojs/hono/assets/116948/8d81466a-bcc8-430e-8a09-0300b2772052\">\r\n\r\nSo i exported few hono client types that we \r\nneed for that. Changed RequestOptions => ClientRequestOptions to avoid possible type name collisions. As it uses only internally now that should not be a breaking change for anybody.\r\nAs well I exported the TypedResponse bcs we don't want use jsonT but instead to return Response | TypedResponse from handler and we need this type to be exposed as well.\r\n\r\nI'm not sure if I need to change files in deno_dist as well. so please let me know if i need to roll them back","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1728829911},{"id":1728986213,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1136","title":"Typing Handler returns","body":"New to Hono and TypeScript here so this is probably a dumb question but... how do I define the return type on a specific app handler endpoint. For example:\r\n\r\n```ts\r\nconst route = app\r\n  // Get a todo by id\r\n  .get('/:id', zValidator('param', getTodo), async (c) => {\r\n    const { id } = c.req.valid('param')\r\n    const db = getDB('read', c.get('geo'))\r\n    const todo = await db\r\n      .selectFrom('todo')\r\n      .selectAll()\r\n      .where('id', '=', id)\r\n      .executeTakeFirst()\r\n    if (!todo) {\r\n      throw new ApiError(httpStatus.NOT_FOUND, 'Todo not found')\r\n    }\r\n    return c.jsonT<Todo>(todo)\r\n  })\r\n  // Update a todo by id\r\n  .put(\r\n    '/:id',\r\n    zValidator('param', getTodo),\r\n    zValidator('json', createTodo),\r\n    async (c) => {\r\n      const { id } = c.req.valid('param')\r\n      const todo = c.req.valid('json')\r\n      const db = getDB('write')\r\n      const updated = await db\r\n        .updateTable('todo')\r\n        .set(todo)\r\n        .where('id', '=', id)\r\n        .executeTakeFirst()\r\n      if (!updated.numUpdatedRows || Number(updated.numUpdatedRows) < 1) {\r\n        throw new ApiError(httpStatus.NOT_FOUND, 'Todo not found')\r\n      }\r\n      return c.jsonT<Todo>({ id, ...todo })\r\n    }\r\n  )\r\n```\r\n\r\nAs I don't really know TypeScript very well... I believe what i'm doing below is called `Explicitly` typing?\r\n```ts\r\nreturn c.jsonT<Todo>({ id, ...todo }) // Added <Todo> to validate my return\r\n```\r\n\r\nBut I want the return type to be `Implicitly` inferred by the Handler (I think?)... so I can just do this below:\r\n```ts\r\nreturn c.jsonT({ id, ...todo })\r\n```\r\n\r\nAny assistance or guidance would be appreciated! :)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1728986213},{"id":1729020540,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1137","title":"fix(deno): export client types","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1729020540},{"id":1730589447,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1138","title":"Component children need to be passed as ordinary props because of the absence of `JSX.ElementChildrenAttribute`","body":"The following Hono code produces an error saying `This JSX tag's 'children' prop expects type 'HtmlEscapedString' which requires multiple children, but only a single child was provided. ts(2745)`:\r\n\r\n```ts\r\nimport { type HtmlEscapedString } from \"hono/utils/html\";\r\n\r\nconst Container = (props: { children: HtmlEscapedString }) => (\r\n  <div class=\"container\">{props.children}</div>\r\n);\r\nexport const Page = () => (\r\n  <Container>\r\n    <p>Hello world!</p>\r\n  </Container>\r\n);\r\n```\r\n\r\nYou need to apply the following patch to get the correct type, but this requires redundant props drilling. Alternatively, you can also write `<Container children={<p>Hello world!</p>} />`, but this is not so straightforward.\r\n\r\n```diff\r\n- export const Page = () => (\r\n-   <Container>\r\n+ export const Page = (props: { children: HtmlEscapedString }) => (\r\n+   <Container {...props}>\r\n```\r\n\r\nOn the other hand, the following React counterpart compiles.\r\n\r\n```ts\r\nimport React from \"react\";\r\n\r\nconst Container = (props: { children: React.ReactNode }) => (\r\n  <div className=\"container\">{props.children}</div>\r\n);\r\nexport const Page = () => (\r\n  <Container>\r\n    <p>Hello world!</p>\r\n  </Container>\r\n);\r\n```\r\n\r\nTypeScript's [`JSX.ElementChildrenAttribute`](https://www.typescriptlang.org/docs/handbook/jsx.html#children-type-checking) makes this possible and I'm preparing a PR for this.\r\n\r\nOf course Hono is not React, so the syntax can be different from each other. That said, I suppose the first code snippet would be what users want (at least I do).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1730589447},{"id":1730591196,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1139","title":"feat: define JSX.ElementChildrenAttribute interface","body":"Fix #1138.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1730591196},{"id":1731352339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1140","title":"RegExpRouter returns not found","body":"In this case, RegExpRouter returns a \"not found\" response, which is not expected.\r\n\r\n```ts\r\napp.get('/webhooks/github', async (c, next) => {\r\n  await next()\r\n})\r\n\r\napp.get('/webhooks/:service', (c) => {\r\n  return c.text(`service: ${c.req.param('service')}`)\r\n})\r\n```\r\n\r\n```\r\nGET /webhooks/github => 404 Not Found\r\n```\r\n\r\nIf using TrieRouter, it returns a 200 response, though returning `undefined` is another issue.\r\n\r\n```\r\nGET /webhook/github => service: undefined\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1731352339},{"id":1731358380,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1141","title":"Should the router handle `params` per handler?","body":"This issue pertains to the router. Currently, the result object is composed of `handlers` and `params`:\r\n\r\n```ts\r\ninterface Result<T> {\r\n  handlers: T[]\r\n  params: Record<string, string>\r\n}\r\n```\r\n\r\nHowever, it might be that each `handler` should have its own `params`, rather than all handlers sharing one `params`.\r\n\r\nFor instance, in the current pattern, the result is not as expected. (This example uses TrieRouter, because RegExpRouter has another issue #1140)\r\n\r\n```ts\r\napp.get('/webhooks/github', async (c, next) => {\r\n  await next()\r\n})\r\n\r\napp.get('/webhooks/:service', (c) => {\r\n  return c.text(`service: ${c.req.param('service')}`)\r\n})\r\n```\r\n\r\n```\r\nGET /webhooks/github => service: undefined\r\n```\r\n\r\nI believe it should return `service: github`. To make this work correctly, we might need a structure like the one below, where `params` are handled per handler.\r\n\r\n```ts\r\ninterface Result<T> {\r\n  routes: Route<T>[]\r\n}\r\n\r\ninterface Route<T> {\r\n  handler: T\r\n  params: Record<string, string>\r\n}\r\n```\r\n\r\nIf we decide to address these issues, it will require significant effort. But, it might be worth doing.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1731358380},{"id":1731456552,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1142","title":"feat: handle HEAD method","body":"This PR allows `app.get()` to handle the HEAD method, resolving issue #1130.\r\n\r\nCurrently, we have to define the process in `app.head()` if a HEAD method request comes in. However, the HEAD method is essentially \"the response of GET without the body\". Therefore, `HEAD /foo` will be handled by `app.get('/foo')` and return the response without the body. Users will not be able to define `app.head()`.\r\n\r\nWhile this is a feature change, on the other hand, it simply corrects the handling of HEAD. Therefore, I believe it's acceptable to release it as a patch.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1731456552},{"id":1732129983,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1143","title":"feat: `headMethod` middleware","body":"This PR introduces the \"HEAD Method middleware\". This middleware handles `HEAD` method requests.\r\n\r\n```ts\r\nimport { headMethod } from 'hono/head-method'\r\n\r\n// ...\r\n\r\napp.use('*', headMethod({ app }))\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello!')\r\n})\r\n```\r\n\r\nIncoming `HEAD` requests will be handled by `app.get()` and it will return a response without the body.\r\n\r\n```\r\ncurl --head http://localhost:8787/\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: text/plain;charset=UTF-8\r\n```\r\n\r\nThe advantage of this approach is that it's implemented as middleware. Therefore, users can choose whether to allow HEAD requests or not.\r\n\r\nThis will resolve #1130 , alternative to #1142","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1732129983},{"id":1732333793,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1144","title":"[POC] feat: `contentLength` middleware","body":"This PR introduces the \"Content Length Middleware\", which calculates content length and adds the `Content-Length` header to the response.\r\n\r\n```ts\r\nimport { contentLength } from 'hono/content-length'\r\n\r\n// ...\r\n\r\napp.use('*', contentLength())\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello!')\r\n})\r\n```\r\n\r\n```\r\ncurl -XGET -I http://localhost:8787/\r\n\r\nHTTP/1.1 200 OK\r\nContent-Length: 6\r\nContent-Type: text/plain;charset=UTF-8\r\n```\r\n\r\nWhile this seems beneficial, we generally do not recommend using it.\r\n\r\nThis is because it's not necessary for edge environments such as Cloudflare, Deno, Compute@Edge, or Bun. In these environments, the `Content-Length` header will be automatically added. Moreover, this middleware calculates length by handling the content in memory, which is not ideal.\r\n\r\nSo, first, we need to discuss whether we should accept this PR or not.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1732333793},{"id":1733195613,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1145","title":"fix(trie-router): fixed the named capture issue","body":"Will fix #1141 just for TrieRouter.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1733195613},{"id":1735203436,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1146","title":"fix(reg-exp-router): Register static paths first for duplicate checking.","body":"Fixes #1140","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1735203436},{"id":1735577948,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1147","title":"Multiline error messages doesn't work on deno","body":"Precondition:\r\n```ts\r\napp.get('/', () => {\r\n   throw new HTTPException(400, `\r\n    I want big messages here,\r\n    so I could print more info about the error\r\n   `);\r\n})\r\n```\r\n\r\nHono version: **v3.2.3**\r\nDeno version: **1.34.0**\r\nOs: MacOs\r\nExpected result: **Response status code 400 with the corresponding text in body**\r\nActual result: **Response status code 500 with the `Internal Server Error` in body**\r\n\r\n\r\nAlso, I see an error in the log:\r\n```\r\nTypeError: Status text is not valid.\r\n    at initializeAResponse (ext:deno_fetch/23_response.js:184:11)\r\n    at new Response (ext:deno_fetch/23_response.js:322:5)\r\n    at HTTPException.getResponse (https://deno.land/x/hono@v3.2.3/http-exception.ts:20:12)\r\n    at Hono.errorHandler (https://deno.land/x/hono@v3.2.3/hono-base.ts:50:16)\r\n    at Hono.handleError (https://deno.land/x/hono@v3.2.3/hono-base.ts:252:19)\r\n    at https://deno.land/x/hono@v3.2.3/hono-base.ts:309:23\r\n    at eventLoopTick (ext:core/01_core.js:182:11)\r\n    at async Server.#respond (https://deno.land/std@0.190.0/http/server.ts:299:18)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1735577948},{"id":1736110014,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1148","title":"fix(tire-router/pattern-router): fixed the named capture issue","body":"This PR will fix the issue of capturing named parameters in TrieRouter and PatternRouter.\r\n\r\nIf we have the following routes:\r\n\r\n```ts\r\napp.get('/webhooks/github', async (c, next) => {\r\n  await next()\r\n})\r\n\r\napp.get('/webhooks/:service', (c) => {\r\n  return c.text(`service: ${c.req.param('service')}`)\r\n})\r\n```\r\n\r\nThen, when accessing `GET /webhooks/github`, it currently can't handle the named parameter as `github`:\r\n\r\n```\r\nGET /webhooks/github => service: undefined\r\n```\r\n\r\nWith this fix, it can capture `github`:\r\n\r\n```\r\nGET /webhooks/github => service: github\r\n```\r\n\r\nResolves #1141","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1736110014},{"id":1736143652,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1149","title":"ci: don't specify Bun version in CI","body":"Fix #1131","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1736143652},{"id":1736287339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1150","title":"perf: use `indexOf()` intead of `includes()`","body":"`indexOf()` is faster than `includes()`.\r\n\r\nBenchmark script:\r\n\r\n```ts\r\nbench('noop', () => {})\r\n\r\nbench('includes', async () => {\r\n  'abc+defg'.includes('+')\r\n})\r\n\r\nbench('indexOf', async () => {\r\n  'abc+defg'.indexOf('+') !== -1\r\n})\r\n\r\nawait run()\r\n```\r\n\r\nResults:\r\n\r\n```\r\nyusuke $ bun run src/benchmark-includes.mts\r\ncpu: Apple M1 Pro\r\nruntime: bun 0.6.6 (arm64-darwin)\r\n\r\nbenchmark      time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nnoop       319.56 ps/iter      (300 ps … 9.97 ns)  312.5 ps  370.9 ps  379.1 ps\r\nincludes     86.1 ns/iter  (82.47 ns … 208.26 ns)   84.9 ns 122.15 ns 126.49 ns\r\nindexOf     81.83 ns/iter  (78.61 ns … 126.58 ns)  81.25 ns 115.38 ns 116.34 ns\r\n```\r\n\r\n```\r\nyusuke $ tsx src/benchmark-includes.mts\r\ncpu: Apple M1 Pro\r\nruntime: node v18.16.0 (arm64-darwin)\r\n\r\nbenchmark      time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------- -----------------------------\r\nnoop       318.36 ps/iter  (304.1 ps … 284.83 ns)  312.5 ps  337.5 ps  341.7 ps\r\nincludes    60.78 ns/iter  (55.94 ns … 122.27 ns)  61.53 ns 110.34 ns 119.61 ns\r\nindexOf     59.25 ns/iter     (53.15 ns … 123 ns)  60.42 ns  66.92 ns 112.51 ns\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1736287339},{"id":1736443985,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1151","title":"The type of hc<AppType>() is unknown","body":"Did I miss something? I set up RPC according to the document, it doesn't seem to work on type inference\r\n\r\nHere is my code\r\n\r\nclient.ts\r\n```tsx\r\nimport { AppType } from \"./router\";\r\nimport { hc } from \"hono/client\";\r\n\r\nexport const client = hc<AppType>(\"http://localhost:8787/\");\r\n             ^^^^^^ infer as unknown\r\n\r\n```\r\n\r\nrouter.ts\r\n\r\n```tsx\r\nimport { Hono } from \"hono\";\r\nimport { zValidator } from \"@hono/zod-validator\";\r\nimport { z } from \"zod\";\r\nconst router = new Hono();\r\n\r\nrouter.post(\"/email\", zValidator(\"json\", z.object({})), (c) => {\r\n  return c.jsonT({\r\n    ok: true,\r\n    message: \"Created!\",\r\n  });\r\n});\r\n\r\nexport { router };\r\n\r\nexport type AppType = typeof router;\r\n```\r\n\r\nDeps:\r\n\r\n```json\r\n{\r\n\"hono\": \"^3.2.3\",\r\n\"@hono/zod-validator\": \"^0.1.2\",\r\n\"typescript\": \"^5.0.4\",\r\n}\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1736443985},{"id":1737331621,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1152","title":"Invoke dispatch() without changing request.method for HEAD method.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1737331621},{"id":1738186329,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1153","title":"WebSockets","body":"Please implement WebSockets feature in honojs.\r\n\r\nhttps://developers.cloudflare.com/workers/runtime-apis/websockets/","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1738186329},{"id":1738191629,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1154","title":"refactor(pattern-router): Use Object.assign for shortening the code.","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1738191629},{"id":1738621092,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1155","title":"REST Client VSCODE extension - error on request body","body":"From what I have seen from example, getting the body from request is done by:\r\n`const body = await c.req.json()`\r\n\r\nIf I use postman to fill the body, it works just fine\r\n![image](https://github.com/honojs/hono/assets/99525837/67845a75-350a-452a-ba65-5565857f5611)\r\n![image](https://github.com/honojs/hono/assets/99525837/337f1c94-de9c-41ed-ba59-fefdd14c035b)\r\n\r\nBut when I use REST Client, weird error happened\r\n![image](https://github.com/honojs/hono/assets/99525837/9ac435f3-4e5d-4e8c-a4da-f66a46dd436e)\r\n\r\nI'm using the latest bun as the runtime and latest hono by the way.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1738621092},{"id":1738867252,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1156","title":"refactor: dispatch() arguments can no longer be omitted","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1738867252},{"id":1738950073,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1157","title":"refactor: Tweaks variable names to reduce code.","body":"It would reduce the number of conditional branches in `result?.handlers` and `result?.params` and shorten the code by a few lines.\r\n\r\nSince this is not a particularly big improvement, it is safe to decide not to merge.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1738950073},{"id":1739859417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1158","title":"Allow using interface in `ctx.jsonT()`","body":"I'm using Hono's RPC mode.\r\nI tried to pass the type of interface to the argument of `context.jsonT()`, but I get a type error.\r\n\r\n```ts\r\ninterface Data {\r\n  data: string;\r\n}\r\nfunction getData(): Data {\r\n  return { data: \"foo\" };\r\n}\r\n\r\n\r\nimport { Hono } from \"$hono/mod.ts\";\r\nconst app = new Hono();\r\nconst route = app\r\n  .get(\r\n    \"/api\",\r\n    (c) => {\r\n      const data = getData();\r\n      return c.jsonT(data); // Type 'Data' is not assignable to type 'JSONObject'.\r\n    },\r\n  );\r\nexport type AppType = typeof route;\r\n```\r\n\r\n```\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(object: JSONValue, status?: number | undefined, headers?: HeaderRecord | undefined): TypedResponse<never>', gave the following error.\r\n    Argument of type 'Data' is not assignable to parameter of type 'JSONValue'.\r\n      Type 'Data' is not assignable to type 'JSONObject'.\r\n        Index signature for type 'string' is missing in type 'Data'.  Overload 2 of 2, '(object: JSONValue, init?: ResponseInit | undefined): TypedResponse<never>', gave the following error.\r\n    Argument of type 'Data' is not assignable to parameter of type 'JSONValue'.deno-ts(2769)\r\n```\r\n\r\nI know that changing `interface Data {}` to `type Data = {}` will eliminate the type error, but there are types provided by other libraries, so changing everything from `interface` to `type` is not realistic.\r\nHow about relaxing the restrictions on the JSONValue type here so that we can return a response of the type defined by the interface?\r\nI think that types (such as `MyClass` / `Function`) that clearly cannot be serialized to JSON can be treated as type errors, and anything else can be considered valid as an argument.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1739859417},{"id":1740233849,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1159","title":"feat(jsx): React-like `style` conversion","body":"This PR introduces a React-like `style` attribute conversion in the JSX middleware. This could be referred to as \"CSS in JS\", but since the definition isn't clear, I'll call it \"React-like\" for now.\r\n\r\nYou can now write `style` attributes using an object:\r\n\r\n```ts\r\nconst Tag = () => (\r\n  <h1\r\n    style={{\r\n      color: 'red',\r\n      fontSize: 'small',\r\n    }}\r\n  >\r\n    Hello\r\n  </h1>\r\n)\r\n```\r\n\r\nThis will be converted to:\r\n\r\n```html\r\n<h1 style=\"color:red;font-size:small\">Hello</h1>\r\n```\r\n\r\nI believe this feature will be useful for creating styled web pages.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1740233849},{"id":1740383381,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1160","title":"[aws-lambda] probrem on implicit conversion binary to base64","body":"Thank you for the nice framework!\r\n\r\nI'm trying hono in AWS Lambda and found a small issue in conversion to base64.\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/adapter/aws-lambda/handler.ts\r\n\r\nIt seems that return value is automatically converted into base64 when content-type means binary type.\r\nThe conversion seems to support only `ReadableStream` but in my usecase need to response from `ArrayBuffer` like this (using node-fetch).\r\n\r\n```javascript\r\nconst data = await fetch(\r\n    'https://pass/to/image.png'\r\n).then((res) => res.arrayBuffer());\r\nc.status(200);\r\nc.header('Content-Type', 'image/png');\r\nreturn c.body(data);\r\n```\r\n\r\nHowever, this snipet doesn't work, error occurs in the conversion. We need other conversion like:\r\n\r\n```javascript\r\nfunction base64Encode(buf: ArrayBuffer) {\r\n    let string = '';\r\n    new Uint8Array(buf).forEach((byte) => {\r\n        string += String.fromCharCode(byte);\r\n    });\r\n    return btoa(string);\r\n}\r\n```\r\n\r\nIn my opinion we would have some options.\r\n\r\n1. modify current function to support ArrayBuffer: https://github.com/honojs/hono/blob/main/src/adapter/aws-lambda/handler.ts#L143\r\n    a. but not only ArrayBuffer needs support: e.g.) Buffer\r\n2. pass base64 string to res.body and skip conversion to base64 in handle().\r\n    a. may able to skip when content-type is binary and res.body is String\r\n    b. or quit automatic conversion. \r\n\r\nHow do you think?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1740383381},{"id":1741282995,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1161","title":"fix(HttpException): error message should not be the HTTP reason phrase","body":"Closes #1147","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1741282995},{"id":1741713903,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1162","title":"feat: Allow `context.jsonT` to take interface as an argument","body":"close #1158\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1741713903},{"id":1742875417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1164","title":"`setCookie`'s `signed` option is not being used","body":"Hey folks! I noticed that `setCookie` has a `signed` option and I assumed it was for getting the cookie value signed before it's set as a header. But after looking into [setCookie](https://github.com/honojs/hono/blob/main/src/middleware/cookie/index.ts) and the [serialize](https://github.com/honojs/hono/blob/main/src/utils/cookie.ts#L25) util it uses, they are not reading or doing anything for the `signed` option.\r\n\r\nI suggest that setCookie should get updated to sign cookies if that option is set as it's a core best practice for protecting cookies from being tampered. [cookie-signature](https://github.com/tj/node-cookie-signature) is a good library to do so. I can submit a PR if this makes sense.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1742875417},{"id":1742988972,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1165","title":"fix: replace to use better base64-encoder","body":"discussed in and close #1160 \r\n\r\nAt first I thought I should add new test but this PR makes no change for a behavior from outside so I decided not to do so.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1742988972},{"id":1743098507,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1167","title":"chore(benchmark): add radix3","body":"Related #1166","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1743098507},{"id":1743806204,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1168","title":"fix: avoid range-error","body":"In Node.js, spread operator for large-sized array occurs Range Error:\r\n\r\nhttps://stackoverflow.com/questions/51249561/aws-lambda-rangeerror-maximum-call-stack-size-exceeded\r\nhttps://github.com/nodejs/node/issues/16870\r\n\r\nWhen I use somewhat large image this problem happens. To avoid this I re-wrote some codes. This doesn't make no change on behaiviors.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1743806204},{"id":1747180097,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1169","title":"c.req.query() should return an array for multiple query parameters with same name","body":"Hello!\r\nIf user add multiple query parameters with same name, the expected behavior is two return a list with that parameters but hono just returns the first query parameter. For example if user request this url:\r\n```\r\nhttps://example.com/api?l=html,css&l=js,php\r\n```\r\nExpected behavior is that c.req.query returns this:\r\n```\r\nObject {\r\n  l: [\r\n    'html,css',\r\n    'js,php'\r\n  ]\r\n}\r\n```\r\nbut it returns this:\r\n```\r\nObject {\r\n  l: 'html,css'\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1747180097},{"id":1747579494,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1170","title":"deno_dist/adapter/deno/serve-static.ts does not support 301 and 206?","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1747579494},{"id":1747661533,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1171","title":"Create constant response objects without using Context","body":"I'm trying to define some constant responses for common API responses e.g (created successfully, no permissions, etc).\r\n\r\nthere doesn't seem to be a not-context-bound .json, .body method alternatives, is that on purpose? I know they return the default node Response interface, but building my own object to Response seems a lot of repeated code that is already done by Hono in the Context object.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1747661533},{"id":1750649438,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1173","title":"itty-durable like utility?","body":"Maybe this is too Cloudflare-specific for Hono, but it would be awesome to have something like [itty-durable](https://github.com/kwhitley/itty-durable) that makes integrating with Durable Objects type-safe and seamless, then Hono would truely be a full stack framework! (hono client + rpc + hono-do 😄 )","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1750649438},{"id":1754508081,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1175","title":"`deleteCookie()`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1754508081},{"id":1755023087,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1176","title":"Feature Req: Otel middleware","body":"Since Otel Telemetry is becoming the standard, it would be good to have a middleware that also plays well with Hono logger","state":"open","labels":"[\"middleware\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1755023087},{"id":1755301996,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1177","title":"Allow setting cookie's maxAge to 0.","body":"0 tells the browser to delete the cookie right away, and is a valid value. =) ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1755301996},{"id":1757517701,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1179","title":"Form validator receives empty value on Bun","body":"I've tested the same code with Node and there's no issue.\r\n\r\nUnder bun, `req.formData()` returns a promise, which Hono doesn't `await`. I don't know why the promise has a `forEach()` method, that seems pretty weird, but it performs zero iterations.\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { validator } from \"hono/validator\";\r\n\r\nconst app = new Hono();\r\n\r\napp.post(\r\n  \"/\",\r\n  validator(\"form\", (value, ctx) => console.log(value)),\r\n  (c) => c.text(\"Hello Hono!\")\r\n);\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n$ curl 'http://localhost:3000' -X POST  -H 'Content-Type: application/x-www-form-urlencoded' --data-raw 'foo=bar'\r\n```\r\n\r\nResult: \r\n```\r\n{}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1757517701},{"id":1758517776,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1180","title":"Using zValidator raises a warning","body":"### version\r\n\r\nhono 3.2.5\r\n@hono/zod-validator 0.1.3\r\n\r\n### warning\r\nYour worker created multiple branches of a single stream (for instance, by calling `response.clone()` or `request.clone()`) but did not read the body of both branches. This is wasteful, as it forces the system to buffer the entire stream of data in memory, rather than streaming it through. This may cause your worker to be unexpectedly terminated for going over the memory limit. If you only meant to copy the request or response headers and metadata (e.g. in order to be able to modify them), use the appropriate constructors instead (for instance, `new Response(response.body, response)`, `new Request(request)`, etc).\r\n\r\n### code\r\n\r\n```js\r\nconst CompletionValidator = zValidator('json', CompletionScheme)\r\napp.post('/api/completions', CompletionValidator, Completions)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1758517776},{"id":1761043238,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1182","title":"Update server-static-module.ts","body":"`__STATIC_CONTENT_MANIFEST` can not be resolved when compiling outside of CloudFlares worker, however it is available at run time.\r\n\r\nCompiling from ESbuild:\r\n```\r\n✘ [ERROR] Could not resolve \"__STATIC_CONTENT_MANIFEST\"\r\n\r\n    node_modules/hono/dist/adapter/cloudflare-workers/server-static-module.js:2:21:\r\n      2 │ import manifest from \"__STATIC_CONTENT_MANIFEST\";\r\n        ╵                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n  You can mark the path \"__STATIC_CONTENT_MANIFEST\" as external to exclude it from the bundle, which\r\n  will remove this error.\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1761043238},{"id":1761193405,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1183","title":"Support AWS Function URL Streaming","body":"AWS Lambda recently added support for Response Streaming (https://docs.aws.amazon.com/lambda/latest/dg/configuration-response-streaming.html).\r\n\r\nThis is a much more natural fit for Hono as most environments it supports do response streaming by default. The catches are:\r\n\r\n1. It uses a magic global \"awslambda.streamifyResponse\" to handle the streamification\r\n2. It uses NodeJS writable instead of web streams","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1761193405},{"id":1761660661,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1184","title":"Is there a bodyParser.urlencoded({ extended: true } equivalent in Hono?","body":"Hello,\r\nI'm making my move from `Express`/`node.js` to `Hono`/`Bun`, and it feels refreshing!\r\nSome stuff are really nice and useful: for example: `set()`/`get()`!\r\nBut sometimes, I'm struggling...\r\n\r\nConsider the simple `c.req.parseBody()` below:\r\n\r\n```\r\n{\r\n  id: \"123456\"\r\n  \"timeslots[0][start]\": \"\",\r\n  \"timeslots[0][end]\": \"\",\r\n  \"timeslots[1][start]\": \"\",\r\n  \"timeslots[1][end]\": \"\",\r\n  \"timeslots[2][start]\": \"\",\r\n  \"timeslots[2][end]\": \"\",\r\n}\r\n```\r\nWith `express`, it is automatically parsed using `bodyParser.urlencoded({ extended: true }`, and `timeslots` is returned as an array.\r\n\r\nMaybe I'm missing something, but is there something equivalent in `hono`? Thanks.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1761660661},{"id":1761992043,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1185","title":"TypeError: Do not know how to serialize a BigInt","body":"using deno, deno-postgres and neontech database;\r\n\r\nwhen i trying to c.json(result)  where \"result\" is the rows from database","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1761992043},{"id":1762049539,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1186","title":" React hooks not working inside TSX/JSX file.","body":"(I also posted this issue on [bun.sh repo](https://github.com/oven-sh/bun/issues/3346)).\r\n\r\n### What version of Bun is running?\r\n\r\n0.6.10\r\n\r\n### What platform is your computer?\r\n\r\nLinux 6.2.6-76060206-generic x86_64 x86_64\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Init project\r\n``` sh\r\nbun create hono hono-app           # Init app\r\ncd hono-app                        # Go to dir\r\nbun add react react-dom @types/react hono     # Install react packages and update hono\r\n```\r\n\r\n2. Delete `src/index.ts` and add `src/index.tsx`\r\n\r\n```tsx\r\n// index.tsx\r\n\r\nimport { Hono } from \"hono\";\r\nimport { serveStatic } from \"hono/bun\";\r\n\r\nimport LoginPage from \"./LoginPage\";\r\n\r\nconst port = process.env.PORT ?? 8000;\r\nconst app = new Hono();\r\n\r\napp.get(\"/login\", (c) => {\r\n  return c.html(<LoginPage />);\r\n});\r\n\r\nconsole.log(`Server on http://localhost:${port}`);\r\n\r\nexport default {\r\n  port,\r\n  fetch: app.fetch,\r\n};\r\n```\r\n\r\n3. Create Login component `src/LoginView.tsx`\r\n\r\n```tsx\r\n// LoginPage.tsx\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst LoginPage = () => {\r\n  const [id, setId] = useState(1); // <------- Error right here\r\n  return (\r\n      <div>\r\n        <h1>LoginView</h1>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n\r\n```\r\n\r\n4. Update `tsconfig.json`\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    // React (JSX)\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxFactory\": \"jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\",\r\n\r\n    \"lib\": [\"ESNext\"],\r\n    \"module\": \"esnext\",\r\n    \"target\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"strict\": true,\r\n    \"skipLibCheck\": true,\r\n    \"allowJs\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n\r\n    // \"bun-types\" is the important part\r\n    \"types\": [\"bun-types\"]\r\n  }\r\n}\r\n\r\n```\r\n\r\n5. Run `bun run src/index.tsx`\r\n\r\n6. Navigate to page `localhost:<port>/login`\r\n\r\n7. Expect an error now!\r\n\r\n### What is the expected behavior?\r\n\r\nTo see a rendered page.\r\n\r\n### What do you see instead?\r\n\r\nAn error (Internal Server Error).\r\n```\r\nWarning: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\r\n1. You might have mismatching versions of React and the renderer (such as React DOM)\r\n2. You might be breaking the Rules of Hooks\r\n3. You might have more than one copy of React in the same app\r\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\r\n1617 | \r\n1618 |   return dispatcher.useContext(Context);\r\n1619 | }\r\n1620 | function useState(initialState) {\r\n1621 |   var dispatcher = resolveDispatcher();\r\n1622 |   return dispatcher.useState(initialState);\r\n             ^\r\nTypeError: null is not an object (evaluating 'dispatcher.useState')\r\n      at useState (/home/user/desktop/dev/bun/hono-app/node_modules/react/cjs/react.development.js:1622:9)\r\n      at /home/user/desktop/dev/bun/hono-app/src/LoginPage.tsx:6:22\r\n      at toStringToBuffer (/home/user/desktop/dev/bun/hono-app/node_modules/hono/dist/middleware/jsx/index.js:123:16)\r\n      at toString (/home/user/desktop/dev/bun/hono-app/node_modules/hono/dist/middleware/jsx/index.js:72:4)\r\n      at /home/user/desktop/dev/bun/hono-app/node_modules/hono/dist/context.js:66:15\r\n      at dispatch (/user/desktop/Bureau/dev/bun/hono-app/node_modules/hono/dist/hono-base.js:200:14)\r\n\r\n      at /home/user/desktop/dev/bun/hono-app/node_modules/hono/dist/hono-base.js:18:2\r\n```\r\n\r\n\r\n### Additional information\r\n\r\nCommenting `const [id, setId] = useState(1);` in `LoginPage.tsx` removes the error. Using other hooks such as `useEffect` gives the same error.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1762049539},{"id":1767488684,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1189","title":"fix: application/x-www-form-urlencoded decoding","body":"The current logic for decoding application/x-www-form-urlencoded is overly restrictive and misses `Content-Type` headers with a character encoding set, i.e., `application/x-www-form-urlencoded; charset=UTF-8`.\r\n\r\nThis fix harmonizes the logic for handling `multipart/form-data` and `application/x-www-form-urlencoded` in the `parseBody` method of request objects.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1767488684},{"id":1767963489,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1190","title":"add deleteCookie","body":"fixes #1175\r\n\r\nThis implementation is based on `cookies.delete` in sveltekit (https://github.com/sveltejs/kit/blob/842e6abc7f32b228dc441c78d5636b1fbb1bae48/packages/kit/src/runtime/server/cookie.js#L117-L122)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1767963489},{"id":1768209944,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1191","title":"refactor(basic-auth): achieving 100% coverage and improving performance","body":"Initially, I intended to reach **100% coverage** and improve **code readability.**\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1768209944},{"id":1768328757,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1193","title":"Comments in JSX Causing \"Type 'undefined' is not assignable to type 'Child'.\" Error","body":"When I comment out any JSX HTML (using key combination Ctrl+/) in VS Code, it inserts `{/*` around the line `*/}`. In most places this is fine, but it causes this error when a comment is a direct child of a div or table:\r\n\r\n```\r\nType 'undefined' is not assignable to type 'Child'.\r\n```\r\n\r\nExample:\r\n\r\n```jsx\r\n<div>\r\n    <p>Any other tag</p>\r\n    {/* This comment causes an error */}\r\n</div>\r\n```\r\n```jsx\r\n<table>\r\n    <thead>\r\n        {/* This comment is okay */}\r\n    </thead>\r\n    <tbody>\r\n        {/* This comment is fine */}\r\n    </tbody>\r\n    {/* This comment causes an error */}\r\n</table>\r\n```\r\n\r\nApparently `{/* ... */}` has a type of undefined (makes sense), but JSX div and table elements are not set up to take undefined values. The 'Child' type should probably include `undefined` to account for this situation. I only see this occur with div and table elements, and haven't come across any other instances of this happening.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1768328757},{"id":1768864042,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1194","title":"fix(cookie): `maxAge` should be positive","body":"This is based on #1177","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1768864042},{"id":1768902606,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1195","title":"ETag middleware wastefully overwrites ETags","body":"The `etag` middleware currently has this logic:\r\n\r\n```ts\r\nconst res = c.res as Response\r\nconst clone = res.clone()\r\nconst hash = await sha1(res.body || '')\r\n```\r\n\r\nIf `c.res` already has an `ETag` header, this wastefully clones the response and computes the SHA1 hash of the body.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1768902606},{"id":1771042220,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1196","title":"fix(utils/cookie): allow 0 to maxAge","body":"With #1194 fix, it doe's not allow `0` for the maxAge option. `0` can be set.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1771042220},{"id":1771189073,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1197","title":"AWS Lambda: No access to custom request context","body":"AWS API Gateway allows adding custom request context values, such as [through lambda authorizers](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-lambda-authorizer-output.html). However, Hono's `aws-lambda` authorizer throws away all context values other than the ones it needs to create the `Request` passed to the app.\r\n\r\nIt would be great if there were some way for the adapter to preserve and make available the custom context somehow - perhaps by offering a `getLambdaContext` function from the `'hono/aws-lambda'` module. ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1771189073},{"id":1771682498,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1198","title":"Update cookie.ts to include CHIPS support.","body":"https://developer.mozilla.org/en-US/docs/Web/Privacy/Partitioned_cookies","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1771682498},{"id":1771920274,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1199","title":"fix(etag): support multi-value If-None-Match","body":"* chore(etag): reduce global state in tests\r\n* perf(etag): don't override ETags from upstream\r\n* perf(etag): 304s include only necessary headers\r\n* fix(etag): Support multi-value If-None-Match\r\n* perf(etag): prefer Header.prototype.get\r\n\r\nI recommend reviewing commit-by-commit as each commit has detailed rationale, including references to the relevant specs.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1771920274},{"id":1773012789,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1200","title":"using hono requires skipLibCheck","body":"Hi,\r\n\r\nI've just tried adding your library to my project. However, simply running `new Hono();` breaks my typescript project due to numerous type issues with your bundled types; some of your types expect the global `Request` to be a DOM request object, but this is not true in the workers environment.\r\n\r\nPassing `skipLibCheck: true` to my tsconfig suppresses the errors, which I notice is what the [hono repo itself does in its own tsconfig](https://github.com/honojs/hono/blob/4b2dfb824ba68c6dd03ea93ba60649a95d370e80/tsconfig.json#L10).\r\n\r\nHowever, this is definitely not a good thing to do, as it disables ALL type checking for all dependencies.\r\n\r\nHere is a demonstration. Any ideas? I've also included my tsconfig below. \r\n\r\n```\r\n~/P/server main• 1s ❱ tsc --noEmit --project .\r\n~/P/server main• ❱ echo \"Note: no type errors in my project prior to adding hono\"\r\nNote: no type errors in my project prior to adding hono\r\n~/P/server main• ❱ npm install hono\r\n\r\nadded 1 package, and audited 915 packages in 883ms\r\n\r\n152 packages are looking for funding\r\n  run `npm fund` for details\r\n\r\n1 moderate severity vulnerability\r\n\r\nTo address all issues, run:\r\n  npm audit fix\r\n\r\nRun `npm audit` for details.\r\n~/P/server main• 1s ❱ echo -e \"import { Hono } from 'hono';\\n const app = new Hono();\" >> src/worker.ts\r\n~/P/server main• ❱ tsc --noEmit --project .\r\n../node_modules/hono/dist/types/client/types.d.ts:22:18 - error TS2430: Interface 'ClientResponse<T>' incorrectly extends interface 'Response'.\r\n  The types returned by 'json()' are incompatible between these types.\r\n    Type 'Promise<T>' is not assignable to type 'Promise<T>'. Two different types with this name exist, but they are unrelated.\r\n      Type 'T' is not assignable to type 'T'. Two different types with this name exist, but they are unrelated.\r\n        'T' could be instantiated with an arbitrary type which could be unrelated to 'T'.\r\n\r\n22 export interface ClientResponse<T> extends Response {\r\n                    ~~~~~~~~~~~~~~\r\n\r\n  ../node_modules/hono/dist/types/client/types.d.ts:22:33\r\n    22 export interface ClientResponse<T> extends Response {\r\n                                       ~\r\n    This type parameter might need an `extends T` constraint.\r\n\r\n../node_modules/hono/dist/types/request.d.ts:51:21 - error TS2304: Cannot find name 'RequestRedirect'.\r\n\r\n51     get redirect(): RequestRedirect;\r\n                       ~~~~~~~~~~~~~~~\r\n\r\n../node_modules/hono/dist/types/request.d.ts:54:18 - error TS2304: Cannot find name 'RequestCache'.\r\n\r\n54     get cache(): RequestCache;\r\n                    ~~~~~~~~~~~~\r\n\r\n../node_modules/hono/dist/types/request.d.ts:55:24 - error TS2304: Cannot find name 'RequestCredentials'.\r\n\r\n55     get credentials(): RequestCredentials;\r\n                          ~~~~~~~~~~~~~~~~~~\r\n\r\n../node_modules/hono/dist/types/request.d.ts:58:17 - error TS2304: Cannot find name 'RequestMode'.\r\n\r\n58     get mode(): RequestMode;\r\n                   ~~~~~~~~~~~\r\n\r\n../node_modules/hono/dist/types/request.d.ts:60:26 - error TS2304: Cannot find name 'ReferrerPolicy'.\r\n\r\n60     get refererPolicy(): ReferrerPolicy;\r\n                            ~~~~~~~~~~~~~~\r\n\r\n\r\nFound 6 errors in 2 files.\r\n\r\nErrors  Files\r\n     1  ../node_modules/hono/dist/types/client/types.d.ts:22\r\n     5  ../node_modules/hono/dist/types/request.d.ts:51\r\n~/P/server main• | 2 ❱\r\n```\r\n\r\n```tsconfig\r\n...\r\n  \"compilerOptions\": {\r\n    \"lib\": [\"es2022\"],\r\n    \"types\": [\"@cloudflare/workers-types\"]\r\n  },\r\n...\r\n  ```\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1773012789},{"id":1774193028,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1201","title":"fix(tsconfig): remove `skipLibCheck`","body":"Fix #1200","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1774193028},{"id":1774889929,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1202","title":"If only Max-Age or Expires specified in SetCookie, calculate the other","body":"For example, if I set only Max-Age to 60, it'd be handy if SetCookie automatically set Expires to 60 seconds from now.","state":"open","labels":"[\"enhancement\",\"middleware\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1774889929},{"id":1774956441,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1203","title":"Add SetCookie prefixing feature for `__Secure-` and `__Host-`","body":"https://www.sjoerdlangkemper.nl/2017/02/09/cookie-prefixes/\r\n\r\nSo for `__Secure-`, the usage would look like:\r\n\r\n```typescript\r\nsetCookie(c, 'example', 'secret_example', {\r\n  path: '/api/demo',\r\n  httpOnly: true,\r\n  sameSite: 'Strict',\r\n  securePrefix: true,\r\n  secure: true // if omitted, set to true. If set to false, throw an error\r\n})\r\n```\r\n\r\nThis would result in the cookie name actually being set to `__Secure-example`.\r\n\r\n```typescript\r\nconst incoming_cookie = getCookie(c, 'example', {\r\n  securePrefix: true\r\n})\r\n```\r\n\r\nAnd for `__Host-`, the usage would look like:\r\n\r\n```typescript\r\nsetCookie(c, 'example', 'secret_example', {\r\n  path: '/', // if omitted, set to /. If set to anything other than /, then throw an error.\r\n  httpOnly: true,\r\n  sameSite: 'Strict',\r\n  hostPrefix: true,\r\n  secure: true // if omitted, set to true. If set to false, throw an error\r\n  // If domain is set, throw an error\r\n})\r\n```\r\n\r\n```typescript\r\nconst incoming_cookie = getCookie(c, 'example', {\r\n  hostPrefix: true\r\n})\r\n```\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie_prefixes","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1774956441},{"id":1775586960,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1204","title":"perf(Request) optimize Request.prototype.header","body":"`Request.prototype.header` has two overloads:\r\n\r\n 1. with a string name, it returns that header value if present\r\n 2. with no argument, it returns all the headers as an object\r\n\r\nPreviously, the implementation built the whole object for (2) even when returning a single header. This was wasteful. This commit changes it to return the header by name if specified and only iterate over all the headers when the caller asks for the whole object.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1775586960},{"id":1776448376,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1205","title":"ci(bun): fix Bun version","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1776448376},{"id":1776590703,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1206","title":"fix(types): allow not to set `skipLibCheck`","body":"Currently, if a user doesn't set `skipLibCheck` to `true` in `tsconfig.json`, it throws the error as shown below:\r\n\r\n<img width=\"1108\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/19bead2f-6b58-4232-baba-1ecbe744a2ce\">\r\n\r\nTo fix it, in this PR, I've done the following:\r\n\r\n1. Removed unnecessary properties that are not in `@cloudflare/workers-types` and `DOM` from `Request`.\r\n2. Created `FetchEventLike` to ensure compatibility between environments where there is `FetchEvent` and where there isn't.\r\n3. Added the properties in `Response` to `ClientResponse`.\r\n\r\nThis change allows it to pass `tsc` and simplifies `tsconfig.json`:\r\n\r\n<img width=\"428\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/f8cc2900-9492-4aa0-9826-d4e65d76c2ff\">\r\n\r\n```ts\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"strict\": true,\r\n    \"lib\": [\r\n      \"esnext\"\r\n    ],\r\n    \"types\": [\r\n      \"@cloudflare/workers-types\",\r\n    ],\r\n  },\r\n}\r\n```\r\n\r\nAnd if you don't want to use `@cloudflare/workers-types`:\r\n\r\n```ts\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"strict\": true,\r\n    \"lib\": [\r\n      \"esnext\",\r\n      \"DOM\"\r\n    ],\r\n    \"types\": [\r\n      \"node\"\r\n    ],\r\n  },\r\n}\r\n```\r\n\r\nFixes #1200","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1776590703},{"id":1778137074,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1207","title":"Support for returning `jsonT` with multiple structures","body":"If the value returned by `jsonT` has several different structures, a type error will occur.\r\n\r\nFor example, if an early return returns a `jsonT` of exactly the same type, this is not a type error\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\nconst route = app.get(\"/message\", (c) => {\r\n  const ok = Math.random() > 0.5;\r\n\r\n  if (ok) {\r\n    return c.jsonT({\r\n      message: \"success\",\r\n    });\r\n  }\r\n\r\n  return c.jsonT({\r\n    message: \"failed\",\r\n  });\r\n});\r\n\r\nexport type AppType = typeof route;\r\n```\r\n\r\nHowever, when multiple `jsonT` types are returned by an early return, a type error occurs.\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\nconst route = app.get(\"/message\", (c) => {\r\n  const ok = Math.random() > 0.5;\r\n\r\n  if (ok) {\r\n    return c.jsonT({\r\n      type: \"success\",\r\n      user: {\r\n        name: \"John\",\r\n        age: 20,\r\n      },\r\n    });\r\n  }\r\n\r\n  return c.jsonT({\r\n    type: \"error\",\r\n    message: \"You have to login\",\r\n  });\r\n});\r\n\r\nexport type AppType = typeof route;\r\n```\r\n\r\nIs this usage expected?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1778137074},{"id":1780474507,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1208","title":"fix(`jsonT`): remove overloads from `JSONTRespond`","body":"The code below should not throw an error, but currently, it throws a \"Type\" error:\r\n\r\n```ts\r\nconst route = app.get('/message', (c) => {\r\n  const ok = Math.random() > 0.5\r\n  if (ok) {\r\n    return c.jsonT({\r\n      success: true,\r\n      message: 'Error!',\r\n    })\r\n  }\r\n  return c.jsonT({\r\n    success: false,\r\n    message: 'Success!',\r\n  })\r\n})\r\n```\r\n\r\n<img width=\"521\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/e1bdb544-d9d2-49bd-9220-1a9f587a9c05\">\r\n\r\nThis is because 'success' is \"`true`\", not \"`boolean`\".\r\n\r\n<img width=\"556\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/35d3983f-7513-4bb5-b625-91ab9eb03d36\">\r\n\r\nPR #1162 fixed this bug or something similar, but to maintain backward compatibility, the old pattern remains via overloading.\r\n\r\nHowever, I think it's unnecessary to keep the old code and it's better to change the test code just for that. This is because, it's a bug if 'success' is not considered as \"`boolean`\", rather than maintaining the test code unchanged.\r\n\r\nWith this PR, the code works as expected.\r\n\r\n<img width=\"783\" alt=\"SS\" src=\"https://github.com/honojs/hono/assets/10682/9563858b-6031-451f-9ed6-27676d7c2a54\">","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1780474507},{"id":1780685911,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1209","title":"fix(tests): Lagon env test","body":"This PR fixes the env test of Lagon by using the `-e` (or `--env`) flag of `lagon dev` to load the `.env.lagon` file.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1780685911},{"id":1780911844,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1210","title":"feat(adapter): AWS Lambda Adapter supports requests via Lambda@edge","body":"I'm a little unsure, but I made it.\r\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html#lambda-event-structure-response","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1780911844},{"id":1781144594,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1211","title":"feature request: minify (at runtime ?) template literals?","body":"### Context\r\n\r\n`Hono` is about performance.  \r\n\r\nFor example:\r\n- More requests per sec means more server use efficiency\r\n- a small size means it can fit in very constrained environments...\r\n\r\n### Use case\r\n- I'm all in with server-side rendering and use `c.html()` + template literals for this.  \r\n(If I get it, it's more efficient/faster than `JSX` middleware).\r\n- In the same time, I use `Prettier` to format my code and thus my template literals.  \r\n- Problem is, when it's rendered, all newlines and whitespaces `Prettier` applies are sent over the wire.  \r\nConsequently, my source-code looks like this (see below)\r\n- If it was `html`-minified It would weight - in my case - around 30% less `KB`.  \r\nHence: more speed, less outgress...\r\n\r\n<img width=\"767\" alt=\"Capture d’écran 2023-06-29 à 17 49 55\" src=\"https://github.com/honojs/hono/assets/7513363/af059724-f55c-4dbc-a6b3-d3abf8e127e5\">\r\n\r\n### Questions\r\n- Is it such a small optimization it's not relevant?\r\n- Is it a good thing to do it at runtime and not build time?\r\n- what if `hono` offers this feature?\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1781144594},{"id":1781800156,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1212","title":"Add docs for manual setup","body":"First of all, I want to express my appreciation for Hono. It has greatly simplified the process of working with serverless services and eliminated a lot of tedious work. \r\n\r\nHowever, I encountered some difficulties when setting up the project manually. I overlooked the `vercel.json` file and jumped straight into the code. After spending an hour troubleshooting, I finally managed to get everything up and running. \r\n\r\nI consider myself persistent and determined, but I realize that others may not have the same level of patience. It would be a shame if potential users miss out on this elegant and fast framework simply because the documentation is not clear enough. \r\n\r\nTherefore, I am raising this issue to request an improvement in the documentation. I believe that a more comprehensive and user-friendly version of the documentation will greatly benefit both new and experienced users. Thank you for considering this request.","state":"open","labels":"[\"document\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1781800156},{"id":1783980898,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1213","title":"Inaccurate RPC client requests due to regex patterns in paths","body":"There is a current issue where using regex patterns in paths leads to wrong request path processing by the RPC client. To resolve this, we need to ensure the client ignores regex patterns in paths for proper request handling.\r\n\r\n### Steps to Reproduce\r\nAssume we have a router path like `/post/:id{[0-9]+}`. Under normal circumstances, we should be able to make a request with the RPC client using something like `await client.post[':id{[0-9]}'].$get(...)`.\r\n\r\nHowever, the RPC client currently doesn't ignore the regex pattern, leading it to send a request to `/post/123%7B[0-9]+%7D` when the provided path parameter (in this case, id) is 123. This is not the intended behavior and needs to be addressed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1783980898},{"id":1783996490,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1214","title":"Fix replaceUrlParam to ignore regexp in path","body":"This PR fixes #1213. \r\n\r\nFix Regex pattern in replaceUrlParam to replace regex path correctly.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1783996490},{"id":1784118349,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1215","title":"Add Server-Timing API as middleware","body":"This adds [Server-Timing](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing) as a middleware.\r\n\r\nPlease see honojs/middleware#99 for context.\r\n\r\n\r\nI've replaced `process.hrtime()` with this, since `jest` failed to access performance:\r\n```ts\r\nconst getTime = () => {\r\n  try {\r\n    return performance.now()\r\n  } catch {}\r\n  return Date.now()\r\n}\r\n```\r\n\r\nThis technique may not fully work for cloudflare worker, because they [disallow the use of timers](https://developers.cloudflare.com/workers/learning/security-model/#step-1-disallow-timers-and-multi-threading).\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1784118349},{"id":1784487623,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1216","title":"Type instantiation is excessively deep and possibly infinite deno-ts(2589)","body":"<img width=\"1238\" alt=\"Screenshot 2023-07-01 at 23 41 42\" src=\"https://github.com/honojs/hono/assets/97365498/53c82565-497d-409b-9b17-3d874fe560f2\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1784487623},{"id":1787567809,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1217","title":"docs: add a svg logo image","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1787567809},{"id":1788704457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1218","title":"KV bindings is undefined","body":"I'm using hono version `3.2.7` and wrangler latest beta version. Maybe related with this #896 one I'm not sure.\r\n\r\nMy KV binding on wrangler.toml look like this\r\n```toml\r\nkv_namespaces = [\r\n  { binding = \"TOKEN_STORAGE\", preview_id = <PREVIEW_ID>, id = <ID> }\r\n]\r\n```\r\n\r\nMy bindings\r\n```ts\r\ntype AppContext = {\r\n  Bindings: {\r\n    TOKEN_STORAGE: KVNamespace;\r\n    SECRET: string;\r\n    DATABASE_URL: string;\r\n  };\r\n  Variables: {\r\n    user: User | null;\r\n    db: PrismaClient;\r\n  };\r\n};\r\n\r\nconst app = new Hono<AppContext>().basePath('/api');\r\n```\r\n\r\nI'm trying to check with console.log inside of my middleware\r\n```ts\r\nexport const protection: Middleware = async (c, next) => {\r\n  console.log(c.env.TOKEN_STORAGE);\r\n  console.log(c.env.TOKEN_STORAGE.list());\r\n```\r\n\r\nHere is the log of my app.\r\n![image](https://github.com/honojs/hono/assets/68318936/ed00944d-4ba2-4ab9-803a-468f585894ce)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1788704457},{"id":1789806902,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1219","title":"Idea: Use `AsyncLocalStorage` for context","body":"Could be opt in. \r\n\r\nhttps://developers.cloudflare.com/workers/runtime-apis/nodejs/asynclocalstorage/\r\n\r\nIf the Hono context object would be an AsyncLocalStorage you could retrieve whatever is inside it *without passing `c` around*. If you have a function somewhere and you want to, for example, elegantly handle a failure but log the error to Sentry, you would have to pass `c` potentially very deep down into you stack.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1789806902},{"id":1791740549,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1221","title":"`app.mount` doesn't include query params","body":"# Code\r\n```ts\r\nconst app = new Hono();\r\n\r\n// Middleware to log the actual URL\r\napp.use(\"*\", (c, next) => {\r\n    console.log(`Hono: ${c.req.url}`);\r\n\r\n    return next();\r\n});\r\n\r\n// The mounted path\r\napp.mount(\"/mounted\", (req) => {\r\n    console.log(`Mounted: ${req.url}`);\r\n    \r\n    return new Response();\r\n});\r\n```\r\n# Result\r\n```\r\nHono: http://127.0.0.1:8080/mounted/a?q=hello\r\nMounted: http://127.0.0.1:8080/a\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1791740549},{"id":1792666000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1222","title":"chore(ci): Update Action","body":"While fixing this CI https://github.com/honojs/hono/pull/1210, I noticed that the latest Actions were not being used.\r\n\r\n- actions/checkout@v2 ->actions/checkout@v3\r\n    - https://github.com/actions/checkout\r\n    \r\n- actions/setup-node@v2 ->actions/setup-node@v3\r\n    - https://github.com/actions/setup-node","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1792666000},{"id":1793195431,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1223","title":"Validator: Malformed JSON in request body","body":"I get the error message \"Malformed JSON in request body\" when using zValidator as middleware.\r\n`src/validator/validator.ts` is using `c.req.raw.clone().json()` to parse the json.\r\n`c.req.raw.clone().json()` always returns `SyntaxError: Unexpected end of JSON input` (with bun v0.6.13). \r\n`c.req.raw.json()` or `c.req.json()` is working.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1793195431},{"id":1793197979,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1224","title":"fix(mount): include query params","body":"Fix #1221","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1793197979},{"id":1795026227,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1225","title":"Lambda-edge is unable to continue with the original request","body":"I executed this CDK to set up the environment. \r\n\r\n## CDK(v2.87.0)\r\n\r\n```ts:le/lib/le-stack.ts\r\nimport * as cdk from 'aws-cdk-lib';\r\nimport { Construct } from 'constructs';\r\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront';\r\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins';\r\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\r\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';\r\nimport * as apigw from 'aws-cdk-lib/aws-apigateway';\r\n\r\nexport class EdgeStack extends cdk.Stack {\r\n  public readonly edgeFn: lambda.Function;\r\n\r\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\r\n    super(scope, id, props);\r\n    const edgeFn = new NodejsFunction(this, 'lambda@edge', {\r\n      entry: 'lambda/index_le.ts',  \r\n      handler: 'handler', \r\n      runtime: lambda.Runtime.NODEJS_18_X,\r\n    });\r\n\r\n    const originFn = new NodejsFunction(this, 'lambda', {\r\n      entry: 'lambda/index.ts',  \r\n      handler: 'handler', \r\n      runtime: lambda.Runtime.NODEJS_18_X,\r\n    });\r\n    const originApi = new apigw.LambdaRestApi(this, 'myapi', {\r\n      handler: originFn,\r\n    });\r\n\r\n\r\n    new cloudfront.Distribution(this, 'myDist', {\r\n      defaultBehavior: {\r\n        origin: new origins.RestApiOrigin(originApi),\r\n        edgeLambdas: [\r\n          {\r\n            functionVersion: edgeFn.currentVersion,\r\n            eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\r\n          }\r\n        ],\r\n      },\r\n    });\r\n  }\r\n}\r\n```\r\n\r\n```ts:le/bin/le.ts\r\n#!/usr/bin/env node\r\nimport 'source-map-support/register';\r\nimport * as cdk from 'aws-cdk-lib';\r\nimport { EdgeStack } from '../lib/le-stack';\r\n\r\nconst app = new cdk.App();\r\n\r\nconst edgeStack = new EdgeStack(app, 'Le2Stack', {\r\n  env: {region: \"us-east-1\"},\r\n});\r\n\r\n```\r\n\r\n## Origin(API Gateway + Lambda)\r\n\r\n```ts:ls/lambda/index.ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/aws-lambda'\r\nimport { html } from 'hono/html'\r\n\r\nconst app = new Hono()\r\n\r\n\r\napp.get('/', (c) => c.html(\r\n    html`<!DOCTYPE html>\r\n      <h1>Hello Hono!</h1>`\r\n  )\r\n )\r\nexport const handler = handle(app)\r\n```\r\n\r\n---\r\n\r\nWhen I implemented the request viewer like this, I received a 502 error. \r\n\r\n‘‘‘ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/lambda-edge'\r\nimport { basicAuth } from 'hono/basic-auth'\r\n\r\nconst app = new Hono()\r\n\r\n\r\napp.get('*', basicAuth({\r\n    username: 'yourname',\r\n    password: 'yoursecret',\r\n  }), async (c) => {\r\n  const response = await fetch(c.req.url)\r\n  return response\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nEven when I implemented it in this way, it did not work. \r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/lambda-edge'\r\nimport { basicAuth } from 'hono/basic-auth'\r\n\r\nconst app = new Hono()\r\n\r\n\r\napp.get('*', basicAuth({\r\n    username: 'yourname',\r\n    password: 'yoursecret',\r\n  }), async (c) => {\r\n    const response = await fetch(c.req.url)\r\n\r\n    return new Response(response.body, {\r\n      status: response.status,\r\n      headers: response.headers\r\n    })})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nI think the implementation of other Adaptors or Cloudflare services could serve as a reference.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1795026227},{"id":1795345874,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1227","title":"wrangler 3.1.2 with `local_protocol = \"https\"` errors","body":"Just installed wrangler 3.1.2 so i could use local https, but i'm getting these errors:\r\n\r\n```workerd/util/symbolizer.c++:95: warning: Not symbolizing stack traces because $LLVM_SYMBOLIZER is not set. To symbolize stack traces, set $LLVM_SYMBOLIZER to the location of the llvm-symbolizer binary. When running tests under bazel, use `--test_env=LLVM_SYMBOLIZER=<path>`.\r\nkj/compat/tls.c++:501: error: error accepting tls connection; kj::mv(e) = kj/compat/tls.c++:74: failed: OpenSSL error; message = error:1000009c:SSL routines:OPENSSL_internal:HTTP_REQUEST\r\nstack: 1057cd25f 1057d14ff 1057d1a03 1057d1f88 1057da250 1057db568\r\nkj/compat/tls.c++:501: error: error accepting tls connection; kj::mv(e) = kj/compat/tls.c++:74: failed: OpenSSL error; message = error:1000009c:SSL routines:OPENSSL_internal:HTTP_REQUEST\r\nstack: 1057cd25f 1057d14ff 1057d1a03 1057d1f88 1057da250 1057db568\r\nkj/compat/tls.c++:501: error: error accepting tls connection; kj::mv(e) = kj/compat/tls.c++:74: failed: OpenSSL error; message = error:1000009c:SSL routines:OPENSSL_internal:HTTP_REQUEST\r\nstack: 1057cd25f 1057d14ff 1057d1a03 1057d1f88 1057da250 1057db568```\r\n\r\nIs this something Hono needs to support for?\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1795345874},{"id":1795357328,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1228","title":"Inherit context variables to descendants of `app.route()`","body":"Currently, descendants of `app.route()` don't inherit context get/set values.\r\nI think it's more useful if context values are inherited because context get/set values are often used within the request and route grouping is necessary for large applications.\r\n\r\nExample: use JWT payload in a request\r\n```ts\r\n// root of app\r\nimport { jwt } from 'hono/jwt';\r\nimport userRoute from './user';\r\n\r\n// ...\r\n\r\napp.use('*', jwt({ /* options */ }));\r\n\r\napp.route('/user', userRoute);\r\n```\r\n```ts\r\n// user.ts\r\n// ...\r\n\r\nconst router = new Hono();\r\n\r\nrouter.get('/me', async (c) => {\r\n  // get user ID from JWT payload, but c.get('jwtPayload') is undefined now\r\n  const userId = c.get('jwtPayload').uid;\r\n  const userData = await db.getUserById(userId);\r\n  // ...\r\n})\r\n\r\nexport default router;\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1795357328},{"id":1795377108,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1229","title":"feat(lambda-edge): pass the `context` and `callback` as env","body":"This PR allows the Lambda@Edge Adapter to pass the `callback` method, `context`, and `request` object to handlers as `env` variables. This means it can continue request processing if basic authentication has been verified.\r\n\r\n\r\n```ts\r\nimport { Callback, CloudFrontRequest, handle } from 'hono/lambda-edge'\r\n\r\ntype Bindings = {\r\n  callback: Callback\r\n  request: CloudFrontRequest\r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get(\r\n  '*',\r\n  basicAuth({\r\n    username: 'a',\r\n    password: 'b'\r\n  })\r\n)\r\n\r\napp.get('/index.html', async (c, next) => {\r\n  await next()\r\n  c.env.callback(null, c.env.request)\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nThere's a limitation issue where you cannot add headers such as a specific header value to an origin response. You can only pass through.\r\n\r\nFix #1225","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1795377108},{"id":1796302321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1230","title":"fix(lambda-edge): update schema and refactor ","body":"1. Following this URL, I have aligned it with the correct schema. \r\nhttps://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/lambda-generating-http-responses-in-requests.html#lambda-generating-http-responses-required-fields\r\n\r\n2. Additionally, I have removed unnecessary array checks","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1796302321},{"id":1798981545,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1231","title":"Cache Middleware not compatible with middleware modifying headers","body":"I just upgraded to hono 3 and are observing that cached responses lead to errors when used with other middleware modifying response headers.\r\nAffected Middlewares:\r\n- poweredBy\r\n- Cors\r\n- etag\r\n- .....\r\n\r\nThis error is also reported and the potential solution in this comment:\r\nhttps://github.com/honojs/hono/issues/820#issuecomment-1427331886\r\n\r\nHowever in #820 (the original issue) I think the solution is actually to do a `res.clone()` in user code.\r\nIn the issue I am reporting here, I want to point out that it is vanilla middleware that does not work well together. I think we should probably clone the response that is returned from hono cache middleware, to prevent this category of options. Or maybe give the hono cache middleware an option to configure response cloning.\r\n\r\n\r\nUpdate:\r\nI actually saw there is a PR that addresses the same issue:\r\nhttps://github.com/honojs/hono/pull/686\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1798981545},{"id":1800468766,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1232","title":"fix(cache): clone the response","body":"This PR is based on @brn 's #686, introduces a Cache Middleware that returns a cloned response. And make it does not cache responses with a status of >= 400, such as 404 not found.\r\n\r\nThis will fix #820 #1231","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1800468766},{"id":1804611820,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1233","title":"Consider export `utils`","body":"`utils` have ton of cool things but I can't use it elsewhere.\r\nIt would be nice if `Hono` export it for external use somehow.\r\n\r\nSo I can use it like this.\r\n```js\r\nimport { utils } from 'hono'\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1804611820},{"id":1804739270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1234","title":"perf(deno/middlewares/serveStatic): serve static with stream","body":"In deno, we can use streams to handle static services, which makes the response faster and the program memory usage less under large files。","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1804739270},{"id":1804981652,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1235","title":"fix(lambda): avoid UTF-8-encoding binary data","body":"So far, the AWS Lambda adapter has used `atob` to convert a Base64-encoded request body to a binary. However, `atob` returns a string, and passing that to the `Request` constructor (at least on Node.js, which Lambda runs on) results in the binary string being encoded as UTF-8. This means that if the request body contains bytes which are not in the ASCII range, they are replaced with UTF-8 multi-byte encodings, which leads to `c.req.blob()`, `c.req.formData()`, etc. returning the wrong binary data!\r\n\r\nThis commit fixes the issue by replacing `atob(body)` with `Buffer.from(body, 'base64')`, which does not have that problem. The `Buffer` can be directly passed as body for `new Request()` because it implements the `Uint8Array` interface. While this makes the AWS Lambda adapter depend directly on the \"node:buffer\" module, this should be fine because AWS Lambda functions always run on Node.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1804981652},{"id":1805491493,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1236","title":"Context is not finalized when using Path Parameter with async","body":"Hello,\r\nFirst of all congratulations on this delightful web framework, clean, easy, straightforward and most important without dependencies.\r\nI'm confronting an issue and hope that you can help me solve it.\r\nI have a route file `tagsRoute.js` in a `routes` folder, the `routes` folder is at the root of the Node.js application.\r\nWhen I try the following code in `tagsRoute.js`\r\n\r\n```js\r\n...\r\nimport { Hono } from \"hono\"\r\nimport { Eta } from \"eta\"\r\n\r\nconst tags = new Hono()\r\nconst eta = new Eta({ views: join(process.cwd(), \"views\") })\r\n\r\nexport const tagsRoute = tags\r\n\t.get(\"/\", async (c) => {\r\n\t\tconst res = eta.render(\"layouts/base.html\", {\r\n\t\t\t...\r\n\t\t\tdata: data,\r\n\t\t\ttags: await tags(),\r\n\t\t\t...\r\n\t\t})\r\n\t\treturn c.html(res)\r\n\t})\r\n\t.get(\"/:tag\", async (c) => {\r\n\t\tconst tag = c.req.param(\"tag\")\r\n\t\t// List of posts matching the `:tag` request parameter\r\n\t\tconst postsByTag = postsByTagList(tag)\r\n\t\t\r\n\t\tconst res = eta.render(\"layouts/base.html\", {\r\n\t\t\t...\r\n\t\t\tdata: data,\r\n\t\t\tposts: await postsByTag,\r\n\t\t\t...\r\n\t\t})\r\n\t\treturn c.html(res)\r\n\t})\r\n```\r\n\r\nThen in the application entry file `index.js` I have\r\n\r\n```js\r\n...\r\nconst app = new Hono()\r\napp.use(\"/static/*\", serveStatic({ root: \"./\" }))\r\n...\r\nimport { tagsRoute } from \"./routes/tagsRoute.js\"\r\n...\r\napp.route(\"/tags\", tagsRoute)\r\n```\r\n\r\nThe `/tags` route is working as expected but the `/tags/:tag` route is returning :\r\n**Error: Context is not finalized. You may forget returning Response object or `await next()`**\r\n\r\nI've tried to modify the problematic route with `.get(\"/:tag\", async (c, next)` and adding `await next()` before `return c.html(res)` but this does not solve the issue.\r\nI've also tried to move it as a standalone route in the application entry file `index.js` but the problem persists.\r\n\r\nThanks a lot in advance for your time and help.\r\n\r\nSYA,\r\nLebCit","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1805491493},{"id":1805917400,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1237","title":"fix: Safe modification of Buffer","body":"This modification replaces the use of `atob()` and `new Buffer()` with `Buffer.from()`. As mentioned in [this article](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_class_buffer), I believe that `new Buffer()` should not be used.\r\n\r\nand remove `btoa()`","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1805917400},{"id":1805957209,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1238","title":"fix: Safe modification of Buffer","body":"This modification replaces the use of atob() and new Buffer() with Buffer.from(). As mentioned in [this article](https://nodejs.org/dist/latest-v6.x/docs/api/buffer.html#buffer_class_buffer), I believe that new Buffer() should not be used.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1805957209},{"id":1806011395,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1239","title":"Unexpected value in `c.req.url` when running locally with wildcard routes in `wrangler.toml`","body":"I have defined some simple workers routes in my `wrangler.toml` config:\r\n```ts\r\nroutes = [\r\n\t{ pattern = \"*/signup\", zone_name = \"mydomain.com\" },\r\n        // other routes\r\n]\r\n```\r\nWhen I deploy to Cloudflare, this works as expected: \r\n```ts\r\nconsole.log(\"c.req.url: \", c.req.url)\r\nconst domain = new URL(c.req.url).hostname\r\nconsole.log(\"domain: \", domain)\r\n```\r\n```\r\nc.req.url:  http://mydomain.com/signup\r\ndomain:  mydomain.com\r\n```\r\nWhen developing locally, this does something strange:\r\n```\r\nc.req.url:  http://signup/signup\r\ndomain:  signup\r\n```\r\nThis seems to be returning the path parameter in place of the hostname.\r\n\r\nFor reference, when I remove the routes definition from `wrangler.toml` the return is what I would expect:\r\n```\r\nc.req.url:  http://127.0.0.1:8787/signup\r\ndomain:  127.0.0.1\r\n```\r\n\r\nIs this expected behavior?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1806011395},{"id":1806404381,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1240","title":"Middlewares on a nested root route isn't executed","body":"In my app, a middleware isn't executed on a nested \"root\" route.\r\n\r\nmy routes\r\n\r\n```\r\n  const userRoutes = new Hono<UserRouteContext>();\r\n  userRoutes.use('*', setUserMiddleware());   <---- this is not called on \"/users/:id\" route\r\n  userRoutes.get('/', handleGetPerson);\r\n  userRoutes.get('/inbox', handleGetInbox);\r\n  userRoutes.post('/inbox', handlePostInbox);\r\n  userRoutes.get('/outbox', handleGetOutbox);\r\n  userRoutes.get('/followers', handleGetFollowers);\r\n  userRoutes.get('/following', handleGetFollowing);\r\n  app.route('/users/:id', userRoutes);\r\n```\r\n\r\n`app.showRoutes()`\r\n\r\n```\r\nALL       /users/:id/*         <---- this is not called on \"/users/:id\" route\r\nGET       /users/:id\r\nGET       /users/:id/inbox\r\nPOST      /users/:id/inbox\r\nGET       /users/:id/outbox\r\nGET       /users/:id/followers\r\nGET       /users/:id/following\r\n```\r\n\r\n- on `/users/foobar`, the middleware is **NOT** executed properly.\r\n- on `/users/foobar/inbox` and other non-root handlers in the nested router, the middleware is executed properly.\r\n\r\nQuestion\r\n\r\n- Is this by design?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1806404381},{"id":1806499118,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1241","title":"chore: use `$npm_execpath` when calling package manager","body":"This makes `package.json` scripts work when invoked from either npm, yarn or pnpm.\r\n\r\nNote: I'm not sure if this works from Windows (`$` vs `%%`).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1806499118},{"id":1809023556,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1242","title":"refactor(etag): simplify cloning logic","body":"If the upstream response doesn't include an `ETag` header, the ETag middleware needs to clone the response so it can read the body to compute an ETag. This commit simplifies the management of the original and cloned responses.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1809023556},{"id":1809450761,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1243","title":"Routing `/:id/*`","body":"This is an issue related to routers.\r\n\r\nThe results when handling routes such as `/:id/*` vary between each router. If you have the following app:\r\n\r\n```ts\r\napp.get('/:id/*', (c) => {\r\n  return c.text(`${c.req.param('id')}`)\r\n})\r\n```\r\n\r\nWhat are the results when accessing `/`, `/foo`, and `/foo/bar`? The results are as follows:\r\n\r\n```\r\nGET /\r\nTrieRouter: 404\r\nRegExpRouter: 404\r\nLinearRouter: Error\r\nPatternRouter: 404\r\n\r\nGET /foo\r\nTrieRouter: 404\r\nRegExpRouter: 200 foo\r\nLinearRouter: Error\r\nPatternRouter: 200 undefined\r\n\r\nGET /foo/bar\r\nTrieRouter: 200 foo\r\nRegExpRouter: 200 foo\r\nLinearRouter: Error\r\nPatternRouter: 200 undefined\r\n```\r\n\r\nThese are not expected. Therefore, we need to decide on the behavior for `/:id/*` and fix the implementation.\r\n\r\nI believe we should follow the specification used by *TrieRouter*, which would result in:\r\n\r\n```\r\nGET / => 404\r\nGET /foo => 404\r\nGET /foo/bar => 200 foo\r\n```\r\n\r\nIf we choose this specification, the routes that need fixing are:\r\n\r\n*RegExpRouter*\r\n* GET /foo\r\n\r\n*PatternRouter*\r\n* GET /foo\r\n* GET /foo/bar\r\n\r\n*LinearRouter* throws `UnsupportedPathError` errors for all patterns. If we allow this, we will need to use it with the *SmartRouter* and *TrieRouter* for the preset `hono/quick`.\r\n\r\nThis is an edge case, but we must resolve it as issues like #1240 have been raised.\r\n\r\n### The script\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { type Router } from 'hono/dist/types/router'\r\nimport { LinearRouter } from 'hono/router/linear-router'\r\nimport { PatternRouter } from 'hono/router/pattern-router'\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\nimport { TrieRouter } from 'hono/router/trie-router'\r\n\r\nconst createHono = (router: Router<any>) => {\r\n  const app = new Hono({\r\n    router: router,\r\n  })\r\n  app.get('/:id/*', (c) => {\r\n    return c.text(`${c.req.param('id')}`)\r\n  })\r\n  app.showRoutes()\r\n  return app\r\n}\r\n\r\nconst routers: Router<any>[] = [\r\n  new TrieRouter(),\r\n  new RegExpRouter(),\r\n  new LinearRouter(),\r\n  new PatternRouter(),\r\n]\r\n\r\nconst apps: Record<string, Hono> = {}\r\n\r\nfor (const router of routers) {\r\n  const app = createHono(router)\r\n  apps[router.name] = app\r\n}\r\n\r\nconst request = async (path: string) => {\r\n  console.log(`GET ${path}`)\r\n  for (const [name, app] of Object.entries(apps)) {\r\n    try {\r\n      const res = await app.request(path)\r\n      if (res.ok) {\r\n        console.log(`${name}: ${res.status} ${await res.text()}`)\r\n      } else {\r\n        console.log(`${name}: ${res.status}`)\r\n      }\r\n    } catch (e) {\r\n      console.log(`${name}: Error`)\r\n    }\r\n  }\r\n}\r\n\r\nconsole.log('')\r\nawait request('/')\r\nconsole.log('')\r\nawait request('/foo')\r\nconsole.log('')\r\nawait request('/foo/bar')\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1809450761},{"id":1810828385,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1244","title":"fix(pattern-router): For \"Named param with trailing wildcard\"","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1810828385},{"id":1810840415,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1245","title":"Why is it called hono.fetch?","body":"I never understood why the method to handle the request is **hono.fetch**? shouldn't it be called **hono.handle**?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1810840415},{"id":1811002488,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1246","title":"fix(trie-router-router): For \"Named param with trailing wildcard\"","body":"Related to #1243\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1811002488},{"id":1811814765,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1247","title":"Support Cloudflare Pages advance mode: _worker.js","body":"Hello, \r\n\r\nI just wanted to point that right now hono doesn't support advance mode with cloudflare pages. As you can see in advance mode the signature of function is a bit different so the existing handle function from `hono/cloudflare-pages` won't work here. \r\n\r\nhttps://developers.cloudflare.com/pages/platform/functions/advanced-mode/#set-up-a-function\r\n\r\n```\r\nexport default {\r\n  async fetch(request, env) {\r\n    const url = new URL(request.url);\r\n    if (url.pathname.startsWith('/api/')) {\r\n      // TODO: Add your custom /api/* logic here.\r\n      return new Response('Ok');\r\n    }\r\n    // Otherwise, serve the static assets.\r\n    // Without this, the Worker will error and no assets will be served.\r\n    return env.ASSETS.fetch(request);\r\n  },\r\n}\r\n```\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1811814765},{"id":1813088975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1248","title":"fix(adaptor): Unable to modify headers in lambda@edge","body":"The callback was not handling cloned responses. This has been fixed, and the operation is now possible.\r\n\r\nhttps://zenn.dev/yusukebe/articles/647aa9ba8c1550#1.%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%83%98%E3%83%83%E3%83%80%E3%81%AE%E8%BF%BD%E5%8A%A0","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1813088975},{"id":1813361273,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1249","title":"Handling of lambda@edge response events","body":"I have a problem I'm having trouble solving regarding the Lambda@Edge adapter It is now possible that these simple renovations may not be enough. \r\n\r\n1. the following code you were referring to deals with event.Records[0].cf.response instead of event.Records[0].cf.request\r\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-examples.html#lambda-examples-overriding-response-header\r\n2. there is a case like this where both event.Records[0].cf.request and event.Records[0].cf.response are handled. In the case of viewer-response and origin-response\r\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-examples.html#lambda-examples-update-error-status-examples\r\n\r\nIf only 1. is used, it is fine to create handlers for request and response, or branch, but I don't know the best practice when both are used as in 2. I hope there is an adapter somewhere that uses the two together.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1813361273},{"id":1813467720,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1250","title":"fix(hono/quick): use SmartRouter","body":"As discussed in #1243, the LinearRouter can't handle all route patterns. Therefore, the `hono/quick` preset must use SmartRouter with LinearRouter and TrieRouter.\r\n\r\n```ts\r\nthis.router = new SmartRouter({\r\n  routers: [new LinearRouter(), new TrieRouter()],\r\n})\r\n```\r\n\r\nAs a result of this PR, the bundle size will increase slightly:\r\n\r\n```\r\n// `hono/quick` before this PR\r\nTotal Upload: 13.14 KiB / gzip: 4.89 KiB\r\n\r\n// `hono/quick` with this PR\r\nTotal Upload: 16.85 KiB / gzip: 6.36 KiB\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1813467720},{"id":1813719027,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1251","title":"feat(adaptor): Lambda@Edge supports response callbacks","body":"\r\nadding\r\n\r\n1. Cloudflont response can now be handled.\r\n\r\n```ts\r\ntype Bindings = {\r\n  callback: Callback\r\n  request: CloudFrontRequest\r\n  response: CloudFrontResponse\r\n}\r\n\r\napp.get('/callback/response', async (c, next) => {\r\n  await next()\r\n  c.env.callback(null, c.env.response)\r\n})\r\n\r\n```\r\n\r\n2. Headers can now be added in OriginResponse. (I have a feeling we can do this in a much cooler way)\r\n\r\n```ts\r\n  app.get('/header/add', async (c, next) => {\r\n    c.env.response.headers['Strict-Transport-Security'.toLowerCase()] = [{\r\n      key: 'Strict-Transport-Security',\r\n      value: 'max-age=63072000; includeSubdomains; preload'\r\n    }];\r\n    c.env.response.headers['X-Custom'.toLowerCase()] = [{\r\n      key: 'X-Custom',\r\n      value: 'Foo'\r\n    }];\r\n    await next()\r\n    c.env.callback(null, c.env.response)\r\n  })\r\n```\r\n\r\n3. refactoring. I cut out a lot of the internal header manipulation process.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1813719027},{"id":1815458028,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1252","title":"Hono JSX rendering as [Object object] on fly.io","body":"I have a super simple app using bun and hono. I use `hono/jsx` to render html on the server (like explained in the hono docs: https://hono.dev/middleware/builtin/jsx). When I run `bun src/index.tsx` locally, everything works fine, I see rendered html (see screenshot), but when I deploy the same application to fly.io, the server always responds with `[Object object]` when trying to render JSX. Routes that don't render JSX (but just plain text) render just fine. Maybe this is an issue with fly.io, but I have no idea what could be wrong.\r\n\r\nYou can see my routes and their coresponding urls on fly.io here:\r\n\r\nhttps://bun-hono-htmx.fly.dev/\r\n```jsx\r\napp.get(\"/\", (c) => {\r\n  return c.html(<App />);\r\n});\r\n```\r\n\r\nhttps://bun-hono-htmx.fly.dev/list\r\n```jsx\r\napp.get(\"/list\", (c) => { \r\n  return c.text(<List />)\r\n});\r\n```\r\n\r\nhttps://bun-hono-htmx.fly.dev/hello\r\n```jsx\r\napp.get(\"/hello\", (c) => {\r\n  return c.text(\"Hello World!\");\r\n});\r\n```\r\n\r\nScreenshot of the route `/` working locally:\r\n<img width=\"446\" alt=\"screenshot\" src=\"https://github.com/honojs/hono/assets/1402868/e781e36b-a923-4b53-9b8d-d1bd1c88c251\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1815458028},{"id":1816105691,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1253","title":"ERR_STREAM_PREMATURE_CLOSE","body":"Hello,\r\n\r\nI'm using Node.js Version 18.17.0\r\nI've updated today :\r\n- @hono/node-server from 1.0.2 to 1.1.0\r\n- hono from 3.2.7 to 3.3.2\r\nWhen I start my app I'm getting the following error:\r\n```bash\r\nError [ERR_STREAM_PREMATURE_CLOSE]: Premature close\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at ServerResponse.onclose (node:internal/streams/end-of-stream:154:30)\r\n    at ServerResponse.emit (node:events:526:35)\r\n    at emitCloseNT (node:_http_server:996:10)\r\n    at Socket.onServerResponseClose (node:_http_server:278:5)\r\n    at Socket.emit (node:events:526:35)\r\n    at TCP.<anonymous> (node:net:323:12) {\r\n  code: 'ERR_STREAM_PREMATURE_CLOSE'\r\n}\r\n```\r\nThe app continues to work but once in a while this error pops up without stopping the app.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1816105691},{"id":1816645970,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1254","title":"`strict` option is ignored when specified with `getPath`.","body":"To reproduce:\r\n```javascript\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono({\r\n  strict: false,\r\n  getPath: (req) => req.url.slice(req.url.indexOf('/', 8))\r\n})\r\n\r\napp.get('/foo', (c) => c.text('no slash'))\r\napp.get('/foo/', (c) => c.text('slash'))\r\n\r\nfunction assert(x: boolean) { if(!x) throw new Error(\"assertion failed\") }\r\n\r\nasync function test() {\r\n  const noSlash = await app.request('/foo')\r\n  assert(await noSlash.text() === 'no slash')\r\n\r\n  const slash = await app.request('/foo/')\r\n  assert(await slash.text() === 'slash')\r\n}\r\n\r\ntest()\r\n```\r\n\r\nThere is some options to fix it:\r\n\r\n* Strip trailing slash of custom `getPath` result when `strict: false`\r\n* Specify it as intended:\r\n  * Add jsdoc to `Hono` constructor\r\n  * Fix `Hono` constructor type to prevent simultaneous specification of `getPath` and `strict`(if possible)\r\n  * Add a note about the restriction to document([1](https://hono.dev/api/routing#routing-with-with-hostname), [2](https://hono.dev/api/hono#strict-mode))","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1816645970},{"id":1816826339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1255","title":"\"Routing with with hostname\" example is broken","body":"* https://hono.dev/api/routing#routing-with-with-hostname\r\n* https://hono.dev/api/routing#routing-with-host-header-value\r\n\r\nThere are two problems:\r\n\r\n## 1. Root path not matches\r\n\r\n```typescript\r\n// Matches `http://www1.example.com/hello`\r\napp.get('www1.example.com/hello', (c) => c.text('hello www1'))\r\n\r\n// Not matches `http://www1.example.com/`\r\napp.get('www1.example.com', (c) => c.text('hello www1 root'))\r\n```\r\n\r\nTo deal with this, `getPath` should remove the trailing slash from the path.\r\n(Or add trailing slash to the pattern like `app.get('www1.example.com/', ...)`; it's not very instinctive)\r\n\r\n## 2. Grouping route does not matches\r\nFor some unknown reason, grouping is not works when path pattern have no preceding slash.\r\n```typescript\r\nsub.get('/', ...)\r\n\r\n// Not matches `http://www1.example.com/sub`\r\napp.route('www1.example.com/sub', sub)\r\n```\r\n\r\nTo deal with this, `getPath` should add preceding slash to path. And path patterns should start with a `/`.\r\n\r\n## Solution\r\n\r\nUse `getPath: (req) => req.url.replace(/^https?:\\//, '').replace(/(.)\\/$/, '$1')` with slash-preceded patterns .\r\n\r\nTest code is here:\r\n<details>\r\n\r\n```typescript\r\nimport { Hono } from \"hono\";\r\n\r\nasync function assert404(resPromise: Promise<Response>): Promise<void> {\r\n  const res = await resPromise\r\n  if(res.status !== 404) throw new Error(`assertion failed: expected 404, actual=${res.status}`)\r\n}\r\n\r\nasync function assertOk(resPromise: Promise<Response>, expectedBody: string): Promise<void> {\r\n  const res = await resPromise\r\n  const body = await res.text()\r\n  if(res.status !== 200 || body !== expectedBody) {\r\n    throw new Error(`assertion failed: expected 200(body=${expectedBody}), actual=${res.status}(body=${body})`)\r\n  }\r\n}\r\n\r\nasync function testCurrentBehavior() {\r\n  const app = new Hono({\r\n    getPath: (req) => req.url.replace(/^https?:\\/\\//, ''),\r\n  })\r\n\r\n  const sub = new Hono()\r\n  sub.get('/', (c) => c.text('hello sub'))\r\n  sub.get('/foo', (c) => c.text('hello sub foo'))\r\n\r\n  app.get('www1.example.com/hello', (c) => c.text('hello www1'))\r\n  app.get('www1.example.com', (c) => c.text('hello www1 root'))\r\n  app.route('www1.example.com/sub', sub)\r\n\r\n  await assertOk(app.request('http://www1.example.com/hello'), 'hello www1')\r\n  await assert404(app.request('http://www1.example.com/'))\r\n  await assert404(app.request('http://www1.example.com/sub'))\r\n  await assert404(app.request('http://www1.example.com/sub/foo'))\r\n}\r\ntestCurrentBehavior()\r\n\r\nasync function testNotStrictMod() {\r\n  const app = new Hono({\r\n    // original + remove trailing slash(i.e. not strict mode)\r\n    getPath: (req) => req.url.replace(/^https?:\\/\\//, '').replace(/(.)\\/$/, '$1'),\r\n  })\r\n\r\n  const sub = new Hono()\r\n  sub.get('/', (c) => c.text('hello sub'))\r\n  sub.get('/foo', (c) => c.text('hello sub foo'))\r\n\r\n  app.get('www1.example.com/hello', (c) => c.text('hello www1'))\r\n  app.get('www1.example.com', (c) => c.text('hello www1 root'))\r\n  app.route('www1.example.com/sub', sub)\r\n\r\n  await assertOk(app.request('http://www1.example.com/hello'), 'hello www1')\r\n  await assertOk(app.request('http://www1.example.com/'), 'hello www1 root')\r\n  await assert404(app.request('http://www1.example.com/sub'))\r\n  await assert404(app.request('http://www1.example.com/sub/foo'))\r\n}\r\ntestNotStrictMod()\r\n\r\nasync function testNotStrictSlashMod() {\r\n  const app = new Hono({\r\n    // original + remove trailing slash(i.e. not strict mode) + add preceding slash\r\n    getPath: (req) => req.url.replace(/^https?:\\//, '').replace(/(.)\\/$/, '$1'),\r\n  })\r\n\r\n  const sub = new Hono()\r\n  sub.get('/', (c) => c.text('hello sub'))\r\n  sub.get('/foo', (c) => c.text('hello sub foo'))\r\n\r\n  // Add preceding slash to pattern\r\n  app.get('/www1.example.com/hello', (c) => c.text('hello www1'))\r\n  app.get('/www1.example.com', (c) => c.text('hello www1 root'))\r\n  app.route('/www1.example.com/sub', sub)\r\n\r\n  await assertOk(app.request('http://www1.example.com/hello'), 'hello www1')\r\n  await assertOk(app.request('http://www1.example.com/'), 'hello www1 root')\r\n  await assertOk(app.request('http://www1.example.com/sub'), 'hello sub')\r\n  await assertOk(app.request('http://www1.example.com/sub/foo'), 'hello sub foo')\r\n}\r\ntestNotStrictSlashMod()\r\n```\r\n\r\n</details>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1816826339},{"id":1816904673,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1256","title":"Deploying to Vercel Serverless Functions","body":"Is there any official way of deploying a hono app to Vercel serverless functions? I am not talking about edge. I am using prisma with Hono and it would be nice to deploy to serverless functions. As far as I know Prisma is not supported on edge runtimes, it seems like Vercel serverless functions are my only option. I could not find documentation on the website relating to this topic.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1816904673},{"id":1817015177,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1258","title":"app.mount doesn't seem to copy over env","body":"Hey all, \r\n\r\nI think I found a bug in the current experimental implementation of `mount`\r\n\r\nUsing it as \r\n\r\n```\r\nimport { Hono } from \"hono\";\r\nimport type { MiddlewareHandler } from \"hono\";\r\n\r\nimport { router as authRouter } from \"../api/auth\";\r\n\r\nconst app = new Hono();\r\napp.mount(\"/api/auth/me\", authRouter.request);\r\n\r\nexport default app;\r\n```\r\n\r\nInside the api/auth router(which is another Hono instance), the ctx.env variable is undefined(not {}).\r\n\r\nIs this a bug or am I using it wrong?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1817015177},{"id":1817015507,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1259","title":"fix(hono-base): enable `strict` with `getPath` option","body":"Fix #1254","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1817015507},{"id":1817063875,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1260","title":"Draft: decouple response creation from Context class","body":"split creating Responses to its own class, and let Context class extend the response creator class, this allows the current header objects init optimizations to remain unchanged","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1817063875},{"id":1817099473,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1261","title":"Reasoning behind deprecating context.req.cookie","body":"You appear to be deprecating `context.req.cookie` and moving the methods into their own **middleware** ~ yet its not really a **middleware**? \r\n\r\nit adds a little **weirdness/clairty** to the **url import** `import { ... } from \"https://deno.land/x/hono/middleware.ts\"`\r\n\r\nIs there any reason why people wouldn't want this functionality already in the request context? Maybe it's just me, but this change seems like more bad than good.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1817099473},{"id":1818713369,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1263","title":"fix(lambda-edge) Adding Export Type CloudFrontResponse and CloudFrontConfig","body":"- CloudFrontResponse: \r\n    - I simply forgot to export it. My apologies!\r\n- CloudFrontConfig: \r\n    - At first, I thought it wasn't necessary. However, I found a sample online that requires it, so I've included it: https://www.withcoherence.com/post/aws-spa-routing-the-bad-the-ugly-and-the-uglier.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1818713369},{"id":1819813064,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1264","title":"Add `serveStatic()` for Cloudflare Pages adapter","body":"The following code is useful. We can implement it in `hono/cloudflare-pages`. Ref: [Advanced mode · Cloudflare Pages docs](https://developers.cloudflare.com/pages/platform/functions/advanced-mode/#set-up-a-function) \r\n\r\n```ts\r\nconst serveStatic = (): MiddlewareHandler => {\r\n  return async (c, _next) => {\r\n    const env = c.env as { ASSETS: Fetcher }\r\n    const res = await env.ASSETS.fetch(c.req.raw)\r\n    if (res.status === 404) {\r\n      return c.notFound()\r\n    }\r\n    return res\r\n  }\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1819813064},{"id":1820075965,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1265","title":"Type issue with aws-lambda handler","body":"When adding variables to the context object as demonstrated https://hono.dev/api/context#set-get and using the lambda-handler from 'hono/aws-lambda' e.g.:\r\n\r\n```\r\nimport { handle } from 'hono/aws-lambda';\r\nimport { Hono } from 'hono';\r\n\r\ntype Test = string\r\n\r\nexport const app = new Hono<{  Variables: { test?: Test } }>();\r\n\r\nexport const lambdaHandler = handler(app);\r\n\r\n```\r\n\r\n\r\nyou get a type error when passing the app to the handle:\r\n\r\n```\r\nArgument of type 'Hono<{ Variables: { test?: string | undefined; }; }, {}, \"/\">' is not assignable to parameter of type 'Hono<Env, {}, \"/\">'.\r\n  The types of 'route(...).basePath(...).onError' are incompatible between these types.\r\n    Type '(handler: ErrorHandler<{ Variables: { test?: string | undefined; }; }>) => Hono<{ Variables: { test?: string | undefined; }; }, Record<string, unknown>, any>' is not assignable to type '(handler: ErrorHandler<Env>) => Hono<Env, Record<string, unknown>, any>'.\r\n      Types of parameters 'handler' and 'handler' are incompatible.\r\n        Types of parameters 'c' and 'c' are incompatible.\r\n          Type 'Context<{ Variables: { test?: string | undefined; }; }, any, {}>' is not assignable to type 'Context<Env, any, {}>'.\r\n            Types of property 'env' are incompatible.\r\n              Type 'unknown' is not assignable to type 'Bindings | undefined'.ts(2345)\r\n```\r\n\r\nI think it's fixed by adding the Hono generics to the handle function to pass them through?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1820075965},{"id":1820326721,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1266","title":"fix escapeToBuffer vulnerability","body":"Escape single quote (0x27) to limit execution capabilities under certain conditions.\r\n\r\nExample, using JSX:\r\n```tsx\r\nconst value = \"alert('works')\"\r\nserver.get(\"/*\", c => c.html(<script>{value}</script>))\r\n```\r\n```tsx\r\nconst value = \"alert('bar!')\"\r\nserver.get(\"/*\", c => {\r\n  return c.html(<Html><div onmouseover={value}>foo</div></Html>)\r\n})\r\n```\r\n\r\nThe condition under which it works are limited and should be avoided, but in reality its never as straightforward as in this simple example. Adjusted behavior mimics that of react-dom escaping single quotes.\r\n\r\n\r\nHere without jsx. More dangerous, you can escape properties and inject script, because single quotes are valid attribute value delimiters and in this example are not enforced like they are in jsx:\r\n```ts\r\nconst value = \"' onmouseover='alert(`bar!`)' data-x='\"\r\nserver.get(\"/*\", c => {\r\n  return c.html(html`<html><div class='${value}'>foo</div></html>`)\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1820326721},{"id":1820668241,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1267","title":"Allow non errors into onError handler","body":"currently rejected promises or throws that have values that are not instances of Error are not handled by `onError` hooks and are instead thrown.\r\n\r\nMy usecase is using promise rejections to exit handlers early on, with predefined responses, e.g:\r\n```ts\r\nconst errMessage = (message: string, httpCode = 400) => Pormise.reject({\r\n    httpCode, \r\n    message\r\n});\r\n\r\napp.get('/', (ctx) => {\r\n   if (condition) { return errMessage(\"bad\") }\r\n})\r\n\r\napp.onError((err, ctx) => {\r\n   if (err.httpCode) {\r\n      return ctx.json({status: \"error\", message: err.message}, err.httCode);\r\n   }\r\n   return ctx.json({ status: \"error\", message: \"internal server error\" }, 500);\r\n})\r\n```\r\n\r\nThe reason I want to avoid using Errors is that I do not need the stack trace here, and would rather avoid the overhead of instantiating new Error objects.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1820668241},{"id":1820935877,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1268","title":"ServeStaticOptions","body":"The documentation talks about `rewriteRequestPath`that can be set as a ServeStaticOptions, but the type doesn't seem to support it.\r\n```typescript\r\n(alias) type ServeStaticOptions = {\r\n    root?: string;\r\n    path?: string;\r\n}\r\nimport ServeStaticOptions\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1820935877},{"id":1822009444,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1269","title":"added generic parameters to aws-lambda handler to fix #1265","body":"fixes [#1265](https://github.com/honojs/hono/issues/1265)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1822009444},{"id":1822730812,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1270","title":"fix(trie-router): don't allow dot segments","body":"It should not allow don segments in URL path: `/../hello` to avoid a directory traversal attack.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1822730812},{"id":1823354305,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1271","title":"fix(utils/filepath): don't allow dot segments","body":"Security fix for ServeStatic of Bun. Bun's Request object doesn't remove dot segments `..` in URL path. So, we have to remove it in our framework.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1823354305},{"id":1823386490,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1272","title":"fix(utils/filepath): allow `..` in filename","body":"It can allow `foo/bar....buzz.jpg` and `foo../bar.jpg` as filepath.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1823386490},{"id":1823534274,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1273","title":"feat(cloudflare-pages): add `serveStatic()`","body":"Resolve #1264","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1823534274},{"id":1825851847,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1274","title":"chore: tweak `jest.config.js`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1825851847},{"id":1825991147,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1275","title":"refactor(hono-base): remove async/await from `app.request`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1825991147},{"id":1827504265,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1276","title":"perf(utils/url): use regexp instead of `indexOf()`","body":"RegExp is faster than `indexOf()` + `slice()` on Bun:\r\n\r\n```ts\r\nbench('regexp', async () => {\r\n  const match = request.url.match(/^https?:\\/\\/[^/]+(\\/[^?]*)/)\r\n  match ? match[1] : ''\r\n})\r\n\r\nbench('indexOf', async () => {\r\n  const url = request.url\r\n  const queryIndex = request.url.indexOf('?', 8)\r\n  url.slice(url.indexOf('/', 8), queryIndex === -1 ? undefined : queryIndex)\r\n})\r\n```\r\n\r\n<img width=\"665\" alt=\"Screenshot 2023-07-29 at 23 30 40\" src=\"https://github.com/honojs/hono/assets/10682/abbcbfad-dd18-4a01-818a-e6565b419f42\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1827504265},{"id":1828173846,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1277","title":"File-base routing","body":"It would be nice to have official middleware to easily apply file-base routing like Next.js.\n\nWhat do you think?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1828173846},{"id":1828530959,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1278","title":"doc: Adding a Supported Runtime - Lambda@Edge","body":"I've finished writing the 'GetStarted' section; may I add it?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1828530959},{"id":1828988470,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1279","title":"feat(middleware): Simple cookie signing functionality","body":"Relates issue: https://github.com/honojs/hono/issues/1164\r\n\r\nRelated PR for website/docs: https://github.com/honojs/website/pull/77\r\n\r\nTried to be backwards compatible with the current `setCookie`/`getCookie` API, so decided to introduce new functions for this instead (similar to how express cookie-parser would do that).\r\n\r\nSome things I wasn't sure about:\r\n* If a cookie signature is not valid, what should happen with the cookie. At the moment it would return `undefined` in the `getSignedCookie` method. This might be misleading and hiding errors though, but throwing an error here instead might be too invasive. How would you handle this and at notify that the cookie was tampered with?\r\n* Thinking about this a bit more, `getSignedCookie` should probably just work exactly like `getCookie` for multiple cookies (`key` not specified) and return all cookies, but only compare the signature for cookies where a signature is provided (and otherwise ignore).\r\n* Somehow related to previous concern, `getCookie` without a `key` specified does return the signed cookie as well (without checking and removing the signature, so the value of the cookie would be the actual value + signature. Would that be intended behaviour or should signed cookies be removed from a `getCookie` result?\r\n\r\nPlease let me know if changes are needed.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1828988470},{"id":1830683743,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1280","title":"Return empty 200 Response as default","body":"Like `itty-router`, just return an empty 200 Response as default if there's no response specified.\r\n\r\n`http` methods include GET/POST/PUT/PATCH/DELETE. Most of the time only the `GET` method return a details response, other methods return an empty 200 Response.\r\n\r\nSo that, by implementing this feature, we can remove redundant `return c.body()` from the routes.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1830683743},{"id":1831977039,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1281","title":"Netlify adapter","body":"Can an adapter for [Netlify](https://www.netlify.com/) be added? It's another popular platform people use.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1831977039},{"id":1832317904,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1282","title":"test(app): add more tests for hostname-routing","body":"Related #1255","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1832317904},{"id":1835125393,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1283","title":"fix(types): add a missing handler type","body":"Added a missing handler type: `app.get(path, handler)`.\r\n\r\n<img width=\"285\" alt=\"Screenshot 2023-08-03 at 22 58 02\" src=\"https://github.com/honojs/hono/assets/10682/9fa6494b-41bc-4941-8e1b-27545f37f6ec\">\r\n\r\nWill be:\r\n\r\n<img width=\"355\" alt=\"Screenshot 2023-08-03 at 22 58 07\" src=\"https://github.com/honojs/hono/assets/10682/ff9c980f-7643-4bc7-a655-611618e3071f\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1835125393},{"id":1835247129,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1284","title":"perf(context): add `init` flag","body":"I've measured the benchmark roughly, but it may be a little bit faster.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1835247129},{"id":1835515453,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1285","title":"NodeJS listening port","body":"Sorry if this is a basic question but, how can I print the port that the server is using once the server started with nodejs?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1835515453},{"id":1835526850,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1286","title":"`c.json()` but my Date is stringify with 3 digits of `ms`","body":"When I using `itty-router`, the date is stringified correctly with 6 digits of `ms`.\r\nThis loss of information break my api 🩴🩴🩴","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1835526850},{"id":1836025846,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1288","title":"refactor(json-pretty): don't use `c.pretty()`","body":"This PR refactors the Pretty JSON Middleware. It previously used the `c.pretty()` function, but this PR no longer relies on it. The middleware retrieves the JSON object with `c.res.json()` from the `Response`, stringifies it, and creates a new Response object.\r\n\r\nThough this may seem to increase performance overhead, I've measured the benchmark, and the results are the same.\r\n\r\nAdditionally, this PR removes the `c.pretty()` method from the Context. This might seem like a breaking change, but since `c.pretty()` is not officially documented, and the users are very few, we can remove it right now.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1836025846},{"id":1836127302,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1289","title":"feat(parseBody): allow passing generics to `parseBody()`","body":"This allows to write like the following:\r\n\r\n```ts\r\napp.post('/', async (c) => {\r\n  const { foo } = await c.req.parseBody<{ foo: string }>()\r\n  // foo is string\r\n})\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1836127302},{"id":1836277216,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1290","title":"feat(adapter): add Netlify adapter","body":"This PR introduces Netfliy adapter. Hono runs on Netlify Edge Functions. Fix #1281\r\n\r\n[Netlify Edge Functions](https://www.netlify.com/products/#netlify-edge-functions) is a Deno-based platform. So, you can use the Hono's Deno module on `deno.land/x`.\r\n\r\nUsage:\r\n\r\n```ts\r\n// netlify/edge-functions/index.ts\r\nimport { Hono } from 'https://deno.land/x/hono/mod.ts'\r\nimport { prettyJSON } from 'https://deno.land/x/hono/middleware.ts'\r\n\r\nimport { handle } from 'https://deno.land/x/hono/adapter/netlify/mod.ts'\r\nimport type { Env } from 'https://deno.land/x/hono/adapter/netlify/mod.ts'\r\n\r\nconst app = new Hono<Env>()\r\n\r\napp.get('/country', prettyJSON(), (c) =>\r\n  c.json({\r\n    'You are in': c.env.context.geo.country?.name\r\n  })\r\n)\r\n\r\nexport default handle(app)\r\n```\r\n```toml\r\n# netlify.toml\r\n[[edge_functions]]\r\n  function = \"index\"\r\n  path = \"/*\"\r\n```\r\n\r\nYou can develop and deploy your application with [Netlify CLI](https://www.netlify.com/products/cli/).\r\n\r\nDev:\r\n\r\n```\r\nnetlify dev\r\n```\r\n\r\nDeploy:\r\n\r\n```\r\nnetlify deploy --prod\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1836277216},{"id":1836503557,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1291","title":"`notFound` requires a `Response` when returning `jsonT`","body":"### What is the issue?\r\n\r\nCurrently when using the `.notFound` method returning `.json` is typed correctly & works fine.\r\nHowever `.jsonT` can be used as well but this returns the following type error:\r\n```\r\nType 'TypedResponse<{ success: boolean; }>' is not assignable to type 'Response | Promise<Response>'.(2322)\r\n```\r\nIt seems that `.jsonT` does not return the correct type when used inside a `.notFound` method.\r\n\r\n### Ways to fix it.\r\n\r\nRealistically I am unsure if `.jsonT` is needed to be used inside of the `.notFound` method? So, unless I am missing something, this method could be removed or disallowed?\r\n\r\nHowever if not then it should just be a case of needing to update & fix the required return type(s) for `.notFound`.\r\n\r\n### Playground\r\n\r\n[Link](https://tsplay.dev/mbag2N)\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", (c) => c.text(\"Hono!\"));\r\n\r\n// This works\r\napp.notFound((c) => c.json({ success: false }, 404));\r\n\r\n// This throws a type error\r\napp.notFound((c) => c.jsonT({ success: false }, 404));\r\n\r\nexport default app;\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1836503557},{"id":1836521751,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1292","title":" `zValidator` doesn't work when colocating outside the handler with custom `Bindings`","body":"### What is the issue?\r\n\r\nIf you currently try to use the `zValidator` & extract out the actual resulting validator, maybe to share it across multiple handlers, then it will work fine.\r\n\r\nHowever, if you try & do that while providing custom a custom type argument / generic to the `new Hono` instance then it will throw a type error when trying to pass it to the handler.\r\n\r\nIt seems to be that the `zValidator` function expects or requires a certain `Bindings` and/or `Variables` structure.\r\n\r\n### Ways to fix it\r\n\r\nI don't know if there is a way to instead infer the `Bindings` and/or `Variables` from the parent handler rather than having them fixed & hard coded?\r\n\r\nOr at least allow us to manually pass these `Bindings` and/or `Variables` as a type argument/generic?\r\n\r\n### Playground\r\n\r\n[Link](https://tsplay.dev/mAg41w)\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { zValidator } from \"@hono/zod-validator\";\r\nimport { z } from \"zod\";\r\n\r\n// This will work fine\r\nconst foo = zValidator(\r\n  \"form\",\r\n  z.object({\r\n    body: z.string(),\r\n  })\r\n);\r\nnew Hono().post(\"/posts\", foo, (c) =>\r\n  c.json({\r\n    success: true,\r\n  })\r\n);\r\n\r\n// This will throw a type error when trying to pass it to `app.post`\r\nconst bar = zValidator(\r\n  \"form\",\r\n  z.object({\r\n    body: z.string(),\r\n  })\r\n);\r\nnew Hono<{\r\n  Bindings: { foo: string };\r\n}>().post(\"/posts\", bar, (c) =>\r\n  c.json({\r\n    success: true,\r\n  })\r\n);\r\n\r\n// But if you inline it it works fine\r\nnew Hono<{\r\n  Bindings: { foo: string };\r\n}>().post(\r\n  \"/posts\",\r\n  zValidator(\r\n    \"form\",\r\n    z.object({\r\n      body: z.string(),\r\n    })\r\n  ),\r\n  (c) =>\r\n    c.json({\r\n      success: true,\r\n    })\r\n);\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1836521751},{"id":1836786207,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1293","title":"How to make Hono work with `json-server`?","body":"I have this simple `server.js` file and I am trying to make it work with Hono:\r\n```js\r\nconst jsonServer = require('json-server')\r\nconst auth = require('json-server-auth')\r\n\r\nconst app = jsonServer.create()\r\nconst router = jsonServer.router('db.json')\r\nconst middlewares = jsonServer.defaults({ noCors: false })\r\n\r\nconst port = process.env.PORT || 3333\r\n\r\napp.db = router.db\r\n\r\napp.use(middlewares)\r\napp.use(auth)\r\napp.use(router)\r\napp.listen(port)\r\n```\r\n\r\nHow can I integrate this with `const app = new Hono()`?\r\n\r\nps.: Here is an example of JSON Server running in production: https://jsonplaceholder.typicode.com/","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1836786207},{"id":1837010439,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1294","title":"aws-lambda + compress: not working","body":"In compress middleware, `content-encoding` header used.\r\n`ctx.res.headers.set('Content-Encoding', encoding)`\r\n\r\nIn aws-lambda adapter, `content-encoding` is not used.\r\n`isBase64Encoded` is incorrect\r\n\r\n```ts\r\nconst createResult = async (res: Response): Promise<APIGatewayProxyResult> => {\r\n  const contentType = res.headers.get('content-type')\r\n  const isBase64Encoded = contentType && isContentTypeBinary(contentType) ? true : false\r\n  ...\r\n```\r\n\r\nPR: https://github.com/honojs/hono/pull/1295\r\n\r\n```ts\r\nconst createResult = async (res: Response): Promise<APIGatewayProxyResult> => {\r\nconst contentType = res.headers.get('content-type')\r\n  const isBase64Encoded_contentType = contentType && isContentTypeBinary(contentType) ? true : false\r\n\r\n  const contentEncoding = res.headers.get('content-encoding')\r\n  const isBase64Encoded_contentEncoding = isContentEncodingBinary(contentEncoding)\r\n\r\n  const isBase64Encoded = isBase64Encoded_contentType || isBase64Encoded_contentEncoding\r\n```\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1837010439},{"id":1837020031,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1295","title":"fix(adapter/aws-lambda): use content-encoding to determine isBase64Encoded","body":"https://github.com/honojs/hono/issues/1294","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1837020031},{"id":1837780973,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1296","title":"docs(jsdoc): fix a `app.route()` JSDoc description","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1837780973},{"id":1837787486,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1297","title":"chore(benchmark): update the handle-event benchmark","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1837787486},{"id":1837790661,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1298","title":"refactor(app): add \"deprecate message\" for `app.handleEvent()`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1837790661},{"id":1838020630,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1299","title":"match on `/foo` and `foo.json`","body":"I was wondering if there is a way to achieve similar results to this Go middleware where you are able to match on `foo` as well as anything that matches beyond the dot delimiter `foo.json`, `foo.img` [chi/middleware/url\\_format.go at master · go-chi/chi (github.com)](https://github.com/go-chi/chi/blob/master/middleware/url_format.go)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1838020630},{"id":1838186689,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1300","title":"File uploads?","body":"Hello, first of thank you for this wonderful piece of software. I am very new here but I'm quickly falling in love with this tiny thing that does a lot.\r\nI am sorry if this was already discussed before, how do we do file uploads in Hono, do we have any examples?\r\nThanks for your help in advance.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1838186689},{"id":1838229472,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1301","title":"How to escape colon in path","body":"Hi! I'm using hono for building a rest API following the [google aip guidelines](https://google.aip.dev/136), they say that when you need to run a non standard method, you use colon for define the method name, for example:\r\n\r\n`publishers/juan/books/123:archive`\r\n\r\nI've tried scaping colon with bach slash, like this:\r\n\r\n```\r\nget\"/publisher/:publisherId/books/:bookId\\\\:archive\", handler) \r\n```\r\n\r\nBut it does not work, what's the right way to escape colon?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1838229472},{"id":1839059412,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1302","title":"Does /a fall under the condition of /a/*?","body":"In the case of the code below, /a/* and /a seem to be evaluated in the same way. I'm not sure if this is an issue specific to Lambda@edge or a fundamental problem.\r\n\r\n- index.ts\r\n\r\n```ts\r\nimport type {\r\n  Callback,\r\n  CloudFrontRequest,\r\n  CloudFrontEdgeEvent,\r\n} from \"hono/lambda-edge\";\r\n\r\nimport { Hono } from \"hono\";\r\nimport { handle } from \"hono/lambda-edge\";\r\nimport { logger } from 'hono/logger'\r\n\r\ntype Bindings = {\r\n  callback: Callback;\r\n  request: CloudFrontRequest;\r\n};\r\n\r\nconst app = new Hono<{ Bindings: Bindings}>();\r\napp.use('*', logger())\r\n\r\napp.all(\"/a/\", async (c, next) => {\r\n  await next()  \r\n  c.env.request.uri = c.env.request.uri + \"index.html\";\r\n  c.env.callback(null, c.env.request);\r\n});\r\n\r\napp.all(\"/a/*\", async (c, next) => {\r\n  await next()  \r\n  c.env.callback(null, c.env.request);\r\n});\r\n\r\nexport const handler = handle(app);\r\n\r\n```\r\n\r\n- index.test.ts\r\n\r\n```ts\r\nimport type {\r\n  Callback,\r\n  CloudFrontRequest,\r\n  CloudFrontEdgeEvent,\r\n} from \"hono/lambda-edge\";\r\nimport { handle } from \"hono/lambda-edge\";\r\nimport { Hono } from \"hono\";\r\nimport { handler } from \"./index\";\r\n\r\ntype Bindings = {\r\n  callback: Callback;\r\n  request: CloudFrontRequest;\r\n};\r\n\r\ndescribe(\"Lambda@Edge Adapter for Hono\", () => {\r\n\r\nconst testCases = [\r\n  { uri: \"/a\", expectUri: undefined },\r\n  { uri: \"/a/\", expectUri: \"/a/index.html\" },\r\n];\r\n\r\n  testCases.forEach(({ uri, expectUri }) => {\r\n    it(`should respond correctly for path: ${uri}`, async () => {\r\n      const event = createCloudFrontEvent(uri);\r\n      let result;\r\n\r\n      await handler(event, {}, (_err, res) => {\r\n        result = res;\r\n      });\r\n\r\n      expect(result?.uri).toBe(expectUri);\r\n    });\r\n  });\r\n});\r\n\r\nfunction createCloudFrontEvent(uri: string): CloudFrontEdgeEvent {\r\n  return {\r\n    Records: [\r\n      {\r\n        cf: {\r\n          config: {\r\n            distributionDomainName: \"example.com\",\r\n            distributionId: \"EDFDVBD6EXAMPLE\",\r\n            eventType: \"viewer-response\",\r\n            requestId:\r\n              \"4TyzHTaYWb1GX1qTfsHhEqV6HUDd_BzoBZnwfnvQc_1oF26ClkoUSEQ==\",\r\n          },\r\n          request: {\r\n            clientIp: \"203.0.113.178\",\r\n            headers: {\r\n              host: [\r\n                {\r\n                  key: \"Host\",\r\n                  value: \"example.com\",\r\n                },\r\n              ],\r\n            },\r\n            method: \"GET\",\r\n            querystring: \"\",\r\n            uri,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n```\r\n\r\n```bash\r\n ● Lambda@Edge Adapter for Hono › should respond correctly for path: /a\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: undefined\r\n    Received: \"/a\"\r\n\r\n      47 |       });\r\n      48 |\r\n    > 49 |       expect(result?.uri).toBe(expectUri);\r\n         |                           ^\r\n      50 |     });\r\n      51 |   });\r\n      52 | });\r\n\r\n      at src/index.test.ts:49:27\r\n      at fulfilled (src/index.test.ts:5:58)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1839059412},{"id":1839341266,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1303","title":"fix(validator): support async validator func","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1839341266},{"id":1840376587,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1304","title":"fix(netlify): fix import paths","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1840376587},{"id":1840552555,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1305","title":"fix(adaptor): Access to custom request context on AWS Lambda Adaptor ","body":"fixed: https://github.com/honojs/hono/issues/1197\r\n\r\nWe have revised the approach by opting to retrieve it as c.env, rather than the method of the function we were discussing.\r\n\r\nusage:\r\n\r\n```typescript\r\nimport { handle, getLambdaContext } from 'hono/aws-lambda'\r\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\r\nimport { Hono } from 'hono'\r\n\r\ntype Bindings = {\r\n  requestContext: ApiGatewayRequestContext \r\n}\r\n\r\napp.get('/custom-context/apigw', (c) => {\r\n  const lambdaContext = c.env.requestContext\r\n  return c.json(lambdaContext)\r\n})\r\n\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1840552555},{"id":1841647780,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1306","title":"Optional path characters with wildcards","body":"Is it possible to capture optional path characters as well as wildcards in middleware paths? I am trying to allow for path pluralisation.\r\n\r\n```\r\napp.use('/cars?/*', middlewareHandler);\r\napp.get('/cars?/:brand', routeHandler);\r\napp.get('/cars?/:brand/:model', routeHandler);\r\n```\r\n\r\nWhile the route matches for e.g.`/car/ford`, `/cars/ford`, `/car/ford/escort` and `/cars/ford/escort`, the middleware is not called at all.\r\n\r\nIs this unsupported, or have I just got the syntax wrong?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1841647780},{"id":1842274947,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1307","title":"Add missing wasm mime type","body":"Wasm wont load in the browser without a corect Content-Type!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1842274947},{"id":1842306833,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1308","title":"TypeScript cannot name route type in declaration files","body":"### Problem\r\n\r\nWhen exporting a Hono route with the compiler option  `declaration: true` inside a module's `tsconfig.json`, the TypeScript compiler complains that the route cannot be named without referencing `node_modules/hono/dist/types/types`:\r\n\r\n```\r\nThe inferred type of 'route' cannot be named without a reference to './node_modules/hono/dist/types/types'. This is likely not portable. A type annotation is necessary.ts(2742)\r\n```\r\n\r\nThe infered type of the route references Hono's `Schema` type, which can be found at `node_modules/hono/dist/types/types` but isn't exported anywhere and therefore cannot be named in a TypeScript declaration file.\r\n\r\n### Example\r\n\r\n**index.ts**\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\nexport const route = app.get(\"/\", (c) => c.json({}));\r\n```\r\n\r\n**tsconfig.json:**\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n   ...\r\n    \"declaration\": true\r\n   ...\r\n  }\r\n}\r\n```\r\n\r\nIn the above example, the infered type of `route` is `Hono<Env, Schema<\"get\", \"/\", unknown, {}>, \"/\">`.\r\nThe types `Hono` and `Env` are exported in 'src/index.ts', but `Schema` isn't exported anywhere and therefore cannot be named in TypeScript declaration files.\r\n\r\n### Impact\r\n\r\nExporting Hono routes and their type is particularly relevant when using Hono's RPC feature in a monorepo since the route types can be separated into their own module and imported by other packages to be used in conjunction with `hono/client` (see [create-t3-turbo](https://github.com/t3-oss/create-t3-turbo/blob/main/packages/api/index.ts) for an example of such an architecture).\r\n\r\n### Solution\r\n\r\nAdding `Schema` to the exported types in `src/index.ts` resolves the issue since all referenced types can then be imported in a TypeScript declaration file.\r\n\r\nSee #1309","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1842306833},{"id":1842308354,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1309","title":"Export Schema type to allow route exports in declaration files","body":"Fixes #1308 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1842308354},{"id":1842387260,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1310","title":"jsonT response type is infered incorrectly when adding lib option to tsconfig.json","body":"### Problem\r\n\r\nWhen adding the `lib` option under `compilerOptions` of either tsconfig.json or deno.jsonc, the response type of a route which returns a jsonT response is incorrectly infered as `{}`. This issue occurs in both node and deno environments.\r\n\r\n### Steps to reproduce\r\n\r\nThe example below throws the following TypeScript error:\r\n```\r\nProperty success does not exist on type {}\r\n```\r\n\r\nThat's because TypeScript incorrectly infers the route's type as `{}`:\r\n\r\n```ts\r\nHono<Env, Schema<\"get\", \"/\", {\r\n    json: {\r\n        id?: string;\r\n    };\r\n}, {}>, \"/\">\r\n```\r\n\r\nWhen removing the lib option, the type is correctly inferred as `{success: boolean}`:\r\n\r\n```ts\r\nHono<Env, Schema<\"get\", \"/\", {\r\n    json: {\r\n        id?: string;\r\n    };\r\n}, {\r\n    success: boolean;\r\n}>, \"/\">\r\n```\r\n\r\nAt least in node environments, the error occurs regardless of the lib option set. I have tested this with numerous lib options.\r\n\r\n**Code:**\r\n\r\n```ts\r\n// index.ts\r\n\r\nimport { zValidator } from \"@hono/zod-validator\";\r\nimport { Hono } from \"hono\";\r\nimport { hc } from \"hono/client\";\r\nimport z from \"zod\";\r\n\r\nconst app = new Hono();\r\nconst route = app.get(\r\n  \"/\",\r\n  zValidator(\r\n    \"json\",\r\n    z.object({\r\n      id: z.string(),\r\n    })\r\n  ),\r\n  (c) =>\r\n    c.jsonT({\r\n      success: true,\r\n    })\r\n);\r\n\r\nconst client = hc<typeof route>(\"\");\r\nconst response = await client.index.$get({ json: { id: \"1\" } });\r\nconst { success } = await response.json();\r\n```\r\n\r\n```ts\r\n// tsconfig.json\r\n\r\n{\r\n  \"compilerOptions\": {\r\n    \"lib\": [\"es2023\"],\r\n    \"target\": \"es2022\",\r\n    \"module\": \"Node16\",\r\n    \"skipLibCheck\": true\r\n  },\r\n  \"include\": [\"index.ts\"],\r\n  \"exclude\": [\"node_modules/\"]\r\n}\r\n```\r\n\r\nIn deno environments:\r\n```ts\r\n// deno.jsonc\r\n\r\n{\r\n  \"compilerOptions\": {\r\n    \"lib\": [\"es2023\"]\r\n  }\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1842387260},{"id":1842448482,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1311","title":"perf(hono-base): use `constructor.name` instead of `instanceof`","body":"To detect the class name of the instance, `res.contructor.name === 'Response'` is faster than `res instanceof Response` on Bun.\r\n\r\n<img width=\"709\" alt=\"Screenshot 2023-08-09 at 13 38 42\" src=\"https://github.com/honojs/hono/assets/10682/975e386e-a463-42cd-8147-462294372712\">\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1842448482},{"id":1842490140,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1312","title":"refactor(context): allow passing `HonoRequest` as 1st arg","body":"This does not cause performance degradation, but it makes the code cleaner.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1842490140},{"id":1843422053,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1313","title":"chore: fix linter","body":"Fix the reasons that the linter did not notice.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1843422053},{"id":1844222922,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1314","title":"chore: add github issue/PR templates","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1844222922},{"id":1844469758,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1315","title":"refactor(utils/url): remove unnecessary code","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1844469758},{"id":1845432410,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1316","title":"perf: make parsing a query fast","body":"For Hono, being \"fast\" is paramount.\r\n\r\nBelow is a link to one of the benchmark projects for Bun's web frameworks:\r\n\r\n[https://github.com/SaltyAom/bun-http-framework-benchmark](https://github.com/SaltyAom/bun-http-framework-benchmark)\r\n\r\nA benchmark is just a benchmark, but it's important as many users refer to it as a guideline to determine which framework is better.\r\n\r\nIn this benchmark, the fastest frameworks are overly optimized for benchmarking, making them nonsensical to compare with Hono. However, \"Elysia\" is a good framework for practical use cases. Elysia is also optimized for Bun, making its benchmark scores fast. Moreover, it now supports the \"`fetch`\" interface, as seen in applications like Cloudflare Workers:\r\n\r\n```ts\r\nconst app = new Elysia({\r\n  aot: false,\r\n}).get('/', () => 'Hi')\r\n\r\nexport default {\r\n  fetch: app.fetch,\r\n}\r\n```\r\n\r\nWith this syntax, the conditions between Hono and Elysia are the same, so I want Hono to outperform Elysia using this approach.\r\n\r\nTo that end, I've revised the parsing of query parameters since Hono's score for \"Params, query & header\" was low. Then the result was:\r\n\r\n![Screenshot 2023-08-11 at 0 17 39](https://github.com/honojs/hono/assets/10682/32729c5c-6793-431a-8852-d9928ff27765)\r\n\r\nThe score for \"Get (/)\" may be slower, but it will be faster in \"Params, query & header,\" even though it's still slower than Elysia's.\r\n\r\nThe strategy behind this change is to retrieve the first query parameter `{ name: \"bun\" }` at the same time as `getPathWithFirstQuery()`. I'm not sure if this is the best or even a better solution, but the score should be improved.\r\n\r\nFor performance measurement, I'm using this script: \r\n\r\n```ts\r\nimport { Elysia } from 'elysia'\r\nimport { Hono as CurrentHono } from 'hono'\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\nimport { run, bench, group } from 'mitata'\r\nimport { Hono } from '../../../dist'\r\n\r\nconst appHono = new Hono({ router: new RegExpRouter() })\r\n  .get('/', (c) => c.text('Hi'))\r\n  .get('/id/:id', (c) => {\r\n    const id = c.req.param('id')\r\n    const name = c.req.query('name')\r\n    return c.text(`${id} ${name}`, {\r\n      headers: {\r\n        'x-powered-by': 'benchmark',\r\n      },\r\n    })\r\n  })\r\n  .post('/json', (c) => c.req.json().then(c.json))\r\n\r\nconst currentHono = new CurrentHono({ router: new RegExpRouter() })\r\n  .get('/', (c) => c.text('Hi'))\r\n  .get('/id/:id', (c) => {\r\n    const id = c.req.param('id')\r\n    const name = c.req.query('name')\r\n    return c.text(`${id} ${name}`, {\r\n      headers: {\r\n        'x-powered-by': 'benchmark',\r\n      },\r\n    })\r\n  })\r\n  .post('/json', (c) => c.req.json().then(c.json))\r\n\r\nconst appElysia = new Elysia({\r\n  aot: false,\r\n})\r\n  .get('/', () => 'Hi')\r\n  .get('/id/:id', (c) => {\r\n    c.set.headers['x-powered-by'] = 'benchmark'\r\n    return `${c.params.id} ${c.query.name}`\r\n  })\r\n  .post('/json', (c) => c.body)\r\n\r\nbench('noop', () => {})\r\n\r\ngroup({ name: 'Get (/)' }, () => {\r\n  const request = new Request('http://localhost/')\r\n\r\n  bench('Hono - next', async () => {\r\n    await appHono.fetch(request)\r\n  })\r\n\r\n  bench('Hono - current', async () => {\r\n    await currentHono.fetch(request)\r\n  })\r\n\r\n  bench('Elysia', async () => {\r\n    await appElysia.fetch(request)\r\n  })\r\n})\r\n\r\ngroup({ name: 'Params, query & header' }, () => {\r\n  const request = new Request('http://localhost/id/1?name=bun')\r\n\r\n  bench('Hono - next', async () => {\r\n    await appHono.fetch(request)\r\n  })\r\n\r\n  bench('Hono - current', async () => {\r\n    await currentHono.fetch(request)\r\n  })\r\n\r\n  bench('Elysia', async () => {\r\n    await appElysia.fetch(request)\r\n  })\r\n})\r\n\r\nconst createRequest = () => {\r\n  return new Request('http://localhost/json', {\r\n    method: 'POST',\r\n    body: `{\r\n      \"hello\": \"world\"\r\n    }`,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n}\r\n\r\ngroup({ name: 'Post JSON' }, () => {\r\n  bench('Hono - next', async () => {\r\n    const request = createRequest()\r\n    await appHono.fetch(request)\r\n  })\r\n\r\n  bench('Hono - current', async () => {\r\n    const request = createRequest()\r\n    await currentHono.fetch(request)\r\n  })\r\n\r\n  bench('Elysia', async () => {\r\n    const request = createRequest()\r\n    await appElysia.fetch(request)\r\n  })\r\n})\r\n\r\nawait run()\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1845432410},{"id":1845461516,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1317","title":"Cache the request body content","body":"### What is the feature you are proposing?\n\nI think it's better to cache the content retrieved by like `c.req.json()` in `HonoRequest`. If we do so, we don't have to `clone()` response object.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1845461516},{"id":1845470861,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1318","title":"`yarn format` command","body":"### What is the feature you are proposing?\n\nAdd `yarn format` command for `prettier` in `package.json`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1845470861},{"id":1845472828,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1319","title":"Export `hono/context` in `package.json`","body":"### What is the feature you are proposing?\n\n`hono/context` is not exported in `package.json` now. It should be exported for extending `ContextVariableMap`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1845472828},{"id":1846258396,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1320","title":"Make `env` values available in custom `getPath` functions","body":"### What is the feature you are proposing?\n\nOne common use-case for custom `getPath` functions is to allow routing based on the host ([docs](https://hono.dev/api/routing#routing-with-host-header-value)). For example, when using Hono with Cloudflare Workers, it's possible to handle multiple subdomains within a single worker (as long as they belong to the same zone). However, workers are usually deployed to multiple environments (e.g. prod/staging) which could use different subdomain names for the same parts of the app, so it'd be really great if it was possible to specify those subdomain names as bindings and be able to access these bindings in the custom `getPath` function to avoid hardcoding ([here's](https://github.com/honojs/hono/issues/1240#issuecomment-1674100371) an example of such hardcoding).","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1846258396},{"id":1848883927,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1321","title":"fix misspell","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1848883927},{"id":1849143381,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1323","title":"Add status to `TypedResponse`","body":"### What is the feature you are proposing?\n\nMaybe it will be useful `TypedResponse` has `status`:\r\n\r\n```ts\r\nexport type TypedResponse<T = unknown> = {\r\n  response: Response | Promise<Response>\r\n  data: T\r\n  format: 'json'\r\n  status: number // <--- add\r\n}\r\n```\r\n\r\nFor example, we can change the type validation rule whether depends on status code.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849143381},{"id":1849327144,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1324","title":"test(routing): add tests for routing without path","body":"We have to test patterns like the following:\r\n\r\n```ts\r\napp.get((c) => {\r\n  return c.text('Hello')\r\n})\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849327144},{"id":1849443819,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1325","title":"Fix reflecting basePath when no path in handler","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849443819},{"id":1849528084,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1327","title":"Feature Request: Components for html middleware","body":"### What is the feature you are proposing?\r\n\r\nI really like the `html` middelware for templating. It's faster than `jsx` and the code is more readable in my opinion. But can we extend this to support components like in other frameworks like astro or svelte? I imagine something like this:\r\n\r\nInstead of writing this:\r\n\r\n```js\r\nconst home = () => html`\r\n  <h1>Homepage</h1>\r\n  ${card('<p>card content</p>')}\r\n`\r\n\r\nconst card = (content: string) => html`\r\n  <div>${raw(content)}</div>\r\n`\r\n```\r\nwe can write:\r\n\r\n```js\r\nconst home = () => html`\r\n  <h1>Homepage</h1>\r\n  <card>\r\n    <p>card content</p>\r\n  </card>\r\n`\r\n\r\nconst card = () => html`\r\n  <div>\r\n    <slot></slot>\r\n  </div>\r\n`\r\n```\r\nand with props:\r\n\r\n```js\r\nconst home = () => html`\r\n  <h1>Homepage</h1>\r\n  <card title=\"Card title\">\r\n    <p>card content</p>\r\n  </card>\r\n`\r\n\r\nconst card = (title: string) => html`\r\n  <div>\r\n    <h2>${title}</h2>\r\n    <slot></slot>\r\n  </div>\r\n`\r\n```\r\nTo distinguish server-side components from native web components, I would personally consider three approaches:\r\n\r\n1. server-side components always start with a capital letter, as in svelte or astro.\r\n2. server side components are lowercase, but must not contain a hyphen, which is the requirement for web components\r\n3. since web components need js, you could for example check if there is a script tag in the template string to register a new web component\r\n\r\nunfortunately i don't know how complex it is to add such a feature to the html middleware or whether this will cause performance problems. Of course you can argue that we already got this feature through jsx middleware. However, jsx is slower and the writing doesn't feel as clean and native as html in my opinion. Also, it is easier for me to add `<style />` and `<script />` tags, because you don't need to add the `html` wrapper around this, also you do not need a fragment.\r\n\r\nHope you like the idea. Am curious about your feedback","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849528084},{"id":1849780850,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1328","title":"fix(types): fix handler types","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849780850},{"id":1849902201,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1329","title":"feat(req): allow passing generics to `c.req.param()`","body":"You can do like this:\r\n\r\n<img width=\"619\" alt=\"Screenshot 2023-08-14 at 23 28 36\" src=\"https://github.com/honojs/hono/assets/10682/ba34723b-c846-47a2-aacc-954070d0c0da\">\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849902201},{"id":1849971177,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1330","title":"fix(app): set `/` for `path` as default","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1849971177},{"id":1850855580,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1332","title":"feat(`package.json`): export `hono/context`","body":"This PR enables to export `hono/context`. With this feature, you can set the variables types for `c.get()`/`c.set()` using `ContextVariableMap`.\r\n\r\n```ts\r\ndeclare module 'hono/context' {\r\n  interface ContextVariableMap {\r\n    message: string\r\n  }\r\n}\r\n```\r\n\r\n<img width=\"496\" alt=\"Screenshot 2023-08-15 at 12 22 57\" src=\"https://github.com/honojs/hono/assets/10682/2aabd96e-4695-4dfa-8e2e-23ae03a0b429\">\r\n\r\nFix #1319","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1850855580},{"id":1850972904,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1333","title":"feat(req): cache body content","body":"This PR allows `HonoRequest` to cache its body content retrieved from methods like `req.raw.json()`. The following methods will have their results cached:\r\n\r\n* `json()`\r\n* `text()`\r\n* `arrayBuffer()`\r\n* `blob()`\r\n* `formData()`\r\n\r\nBefore this feature, if we needed to call `req.json()` more than once, we would have to use `clone()`. In validators, `clone()` was used to preserve the request for subsequent uses:\r\n\r\n```ts\r\nvalue = await c.req.raw.clone().json()\r\n```\r\n\r\nHowever, this approach triggered warnings in Cloudflare/Wrangler:\r\n\r\n```\r\nYour worker created multiple branches of a single stream (for instance, by calling `response.clone()` or `request.clone()`) but did not consume the body of both branches. This behavior is inefficient since it requires the entire stream of data to be buffered in memory rather than being streamed. As a result, your worker might be unexpectedly terminated for exceeding the memory limit. If your intention was only to copy the request or response headers and metadata (e.g., to modify them), consider using the appropriate constructors (e.g., `new Response(response.body, response)`, `new Request(request)`, etc.).\r\n```\r\n\r\nWith this PR, the content is cached within the `HonoRequest` object, preventing such warnings.\r\n\r\nThis change does not degrade performance and involves minimal code adjustments. I believe it's a valuable enhancement.\r\n\r\n--- \r\n\r\nFix #1317 #1179 #567 https://github.com/honojs/middleware/issues/62\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1850972904},{"id":1851336825,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1334","title":"chore: add `format` script","body":"add new script `format`\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\nFix: #1318","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1851336825},{"id":1851587709,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1336","title":"docs: support change of escapeTextForBrowser path in react","body":"Hello!\r\n\r\nSorry for the very minor changes.\r\n\r\nOn Sep 29, 2022, \r\nhttps://github.com/facebook/react/commit/97d75c9c8bcddb0daed1ed062101c7f5e9b825f4\r\nIt appears that the implementation detail portion of  React-DOM implementation details has been moved from `. /packages/react-dom` to `. /packages/react-dom-bindings`.\r\nThe link was thereby broken and has been corrected to the correct link.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1851587709},{"id":1852259854,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1337","title":"Cookie helper can't handle with `.`","body":"### What version of Hono are you using?\n\n3.4.1\n\n### What runtime/platform is your app running on?\n\nCloudflare and others\n\n### What steps can reproduce the bug?\n\nUsing the code below:\r\n\r\n```ts\r\nimport { getCookie, setCookie } from 'hono/cookie'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  setCookie(c, 'width', '375')\r\n  setCookie(c, 'ratio', '2.5')\r\n\r\n  const width = getCookie(c, 'width')\r\n  const ratio = getCookie(c, 'ratio')\r\n\r\n  return c.json({\r\n    width,\r\n    ratio,\r\n  })\r\n})\r\n```\r\n\r\nAnd access to `GET /`.\n\n### What is the expected behavior?\n\n```json\r\n{\"width\":\"375\",\"ratio\":\"2.5\"}\r\n```\n\n### What do you see instead?\n\n```json\r\n{}\r\n```\n\n### Additional information\n\nThe reason causes this problem is using `.` to separate a signed string:\r\n\r\nhttps://github.com/honojs/hono/blob/954c06ed4bc25680c46d0ef51959aeb7031ca353/src/utils/cookie.ts#L38","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1852259854},{"id":1852302288,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1338","title":"JSDoc","body":"### What is the feature you are proposing?\n\nWe haven't written JSDoc for the Hono code. I used to think that maintaining JSDoc would be troublesome, especially since we also have a website. However, now that the API is mostly stable, it's a good time to start. We don't need to write extensively in JSDoc, but including the basics would be beneficial.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1852302288},{"id":1852306436,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1339","title":"refactor: lint","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1852306436},{"id":1852432292,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1340","title":"Web query undefined check","body":"### Notes\r\n- Opened this PR after I was confused why conditional code was being ran in my API when using the RPC client. Realized that I had a query string that contained `&filter=undefined` that was then parsed into `{ filter: 'undefined'}`\r\n- Added check for undefined value in query to prevent API receiving values of `undefined`. \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1852432292},{"id":1852944091,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1341","title":"feat(middleware): Alternative middleware equivalent to Helmet","body":"I created this middleware as an experimental equivalent to Helmet. Originally made for my own use, I've opened a PR in this repository because there was a request for Helmet in the Github Issues. One difference from the official Helmet is that this middleware only adopts headers that can be set with fixed values, and users can only set each header to true/false.\r\n\r\nI'm still undecided about the name of the middleware. It's not a pure Helmet. Names like 'mini-helmet' or 'kabuto' could be interesting, but for now, I've opted for a straightforward naming.\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n## Doc(sample)\r\n\r\n---\r\n### Secure Header Middleware\r\nThis middleware simplifies the setup of security headers. Inspired in part by the capabilities of Helmet, it allows you to control the activation and deactivation of specific security headers.\r\n\r\n#### Installation\r\nThe middleware is built into the Hono framework, so no additional installation is required.\r\n\r\n#### Usage\r\n```ts\r\nimport { secureHeader } from 'hono/secure-header';\r\n\r\napp.use('*', secureHeader({ xFrameOptions: false, xXssProtection: false }));\r\n\r\n```\r\n\r\nfix: https://github.com/honojs/hono/issues/798\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1852944091},{"id":1853020806,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1342","title":"fix(middleware): signed cookie misinterpretation of cookie values with dot","body":"Related issue: https://github.com/honojs/hono/issues/1337\r\n\r\nDone the following:\r\n- [x] Modified tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1853020806},{"id":1855321817,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1343","title":"refactor(compress-middleware): resolve type assertion using const assertion","body":"Hello. Please merge it if you like!\r\nI could not remove ts-ignore because Nodejs globalThis does not have a CompressionStream type...\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1855321817},{"id":1856180052,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1344","title":"refactor: denoify","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1856180052},{"id":1856377946,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1345","title":"feat(app): pass `env` to `getPath()`","body":"Resolve #1320\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1856377946},{"id":1857427098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1347","title":"New concept \"Helpers\"","body":"### What is the feature you are proposing?\r\n\r\nFor example, the current Cookie \"Middleware\" offers these functions:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { getCookie, getSignedCookie, setCookie, setSignedCookie, deleteCookie } from 'hono/cookie'\r\n```\r\n\r\nUsage:\r\n\r\n```ts\r\napp.get('/cookie', (c) => {\r\n  const yummyCookie = getCookie(c, 'yummy_cookie')\r\n  // ...\r\n  setCookie(c, 'delicious_cookie', 'macha')\r\n  // ...\r\n})\r\n```\r\n\r\nHowever, since these are essentially just methods and not true middlewares or handlers, they seem more aptly termed as \"Helpers\". This was highlighted in [this issue comment](https://github.com/honojs/hono/issues/965#issuecomment-1646830031).\r\n\r\nHere's a proposal for defining Helpers:\r\n\r\n- They offer utility functions accessible via `hono/{helper-name}`.\r\n- Most of these functions will take the `Context` instance as the first argument, like `getCookie(c, 'yummy_cookie')`.\r\n- Helpers will reside in the `src/helpers/*` directory.\r\n- For Cookie Helpers, the import path `hono/cookie` will remain unchanged, ensuring no breaking changes.\r\n\r\nI plan to reclassify the following as Helpers:\r\n\r\n- Convert `c.runtime()` to the `getRuntimeKey(c)` helper.\r\n- The `html` Middleware should be repositioned as the `html` helper.\r\n- The [hono/adapter](https://hono.dev/api/adapter) would be better suited as a helper.\r\n- Moreover, since `jsx` is neither a Middleware nor a helper, it should be placed under `src/jsx/*`.\r\n\r\nAll we need to do is realign them; no new functionalities are being added. As these aren't breaking changes, we can introduce this new \"Helper\" concept in a minor release.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857427098},{"id":1857604105,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1348","title":"Support validating `headers` and `cookies`","body":"### What is the feature you are proposing?\n\n[Swagger](https://swagger.io/) supports validation for header values and cookies. It's better to follow it for such as [Zod OpenAPI Hono](https://github.com/honojs/middleware/tree/main/packages/zod-openapi).","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857604105},{"id":1857605365,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1349","title":"Deprecate validate type `queries` (not `query`)","body":"### What is the feature you are proposing?\n\nValidation type `queries` is no longer needed because `query` covers an array cookie values.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857605365},{"id":1857622818,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1350","title":"feat(validator): deprecate `queries` (use `query` instead)","body":"Fixes #1349 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857622818},{"id":1857639417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1351","title":"fix(req): fix inferring types in `req.valid()`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857639417},{"id":1857646312,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1352","title":"feat(validator): supports `header` and `cookie`","body":"Resolve #1348\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857646312},{"id":1857657271,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1353","title":"feat: introduce \"Helpers\"","body":"Resolve #1347\r\n\r\nWhat I've done:\r\n\r\n* Create `src/helper`.\r\n* Make Cookie Middleware and html Middleware as helpers.\r\n* Move `src/adapter` to `src/helper/adapter`.\r\n* Deprecate `c.runtime()` and make `getRuntimeKey()` func in `hono/adapter`. `c.runtime()` will be obsolete in v4.\r\n* Move `src/middleware/jsx` to `src/jsx`\r\n* Add `src/helper.ts` for Deno.\r\n\r\nChanged the structures but, import paths like `import { getCookie } from 'hono/cookie'` are not changed.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857657271},{"id":1857697783,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1354","title":"fix(type): add missing S to RemoveBlankRecord","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1857697783},{"id":1858036954,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1356","title":"Add DigitalOcean Function","body":"### What is the feature you are proposing?\n\nAdd DigitalOcean Function support in hono.js","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1858036954},{"id":1858131150,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1357","title":"fix(types): corrected argument types for `Context` methods","body":"Each method is typed by Interface and doesn't affect the type of function arguments as seen by the caller, but wouldn't it be healthier to modify it?\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1858131150},{"id":1858149791,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1358","title":"Support for Firebase Functions","body":"### What is the feature you are proposing?\n\nI think Deno is a perfect to be used as a dynamic router in Firebase functions. Currently Express is the main choise. \r\n\r\nFirebase function expect `(request, reponse)=>void` function which should not be so difficult to provide from Deno. I have looked into _nodejs-server_ implementaion but I might need some more hints.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1858149791},{"id":1858156172,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1359","title":"fix(client): ignore `header` and `cookie` types","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1858156172},{"id":1858195522,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1360","title":"`Type instantiation is excessively deep and possibly infinite` with RPC","body":"### What version of Hono are you using?\n\n3.2.5\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nWhen the routes are separated into different files and the endpoints are defined using the builder pattern, for a route that has 17 methods and 378 lines of code\r\n\r\n```\r\nconst organizationRoute = organizationController\r\n\r\n.get(\"/layout\", async (c, next) => {\r\n    const response = await getOrganizationLayout(c);\r\n    return controllerResponse(response, c);\r\n})\r\n\r\n.get(\"/link\", checkAccess(), async (c) => {\r\n\r\n})\r\n\r\nexport { organizationRoute };\r\n```\r\n\r\nTypescript gives this compile time error.\n\n### What is the expected behavior?\n\nThe generated types should be simplified to avoid the error.\n\n### What do you see instead?\n\n<img width=\"860\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/5727516/4f1ab7fa-7070-4f8b-bf6c-0ad232643ea5\">\r\n\r\nNested types generated cause the problem.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1858195522},{"id":1858697416,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1361","title":"fix(`middleware.ts`): export secure-headers for Deno","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1858697416},{"id":1861180559,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1362","title":"chore: Adding denoify check to CI","body":"### Author should do the followings, if applicable\r\n\r\nAdding denoify check to CI\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861180559},{"id":1861235880,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1363","title":"Parameters of routes with higher priority are polluted","body":"### What version of Hono are you using?\n\n3.4.3\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\n```js\r\napp.get(\"/foo/bar\", (c) => {\r\n  const param = c.req.param();\r\n  return c.text(JSON.stringify(param));\r\n});\r\n\r\napp.get(\"/foo/:id\", (c) => {\r\n  const param = c.req.param();\r\n  return c.text(JSON.stringify(param));\r\n});\r\n```\n\n### What is the expected behavior?\n\nThe first route `/foo/bar` should respond `{}` as the param, cause there is no `:id` route pattern for it.\n\n### What do you see instead?\n\n`{\"id\":\"bar\"}`\n\n### Additional information\n\nI'm not sure if it's a bug or feature?","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861235880},{"id":1861673889,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1364","title":"Add gitignore to all examples and generated from cli","body":"### What is the feature you are proposing?\n\nIts better if you provide a default gitignore files, sometimes I forgot I didnt gitignore node_modules and some env files. ","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861673889},{"id":1861709892,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1365","title":"Automatically `denoify` or check if it is `denoified` in CI.","body":"### What is the feature you are proposing?\n\nMost developers forget `denoify` in there PRs.\r\n\r\nRelated #1362","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861709892},{"id":1861895098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1366","title":"fix(compress): delete `content-length` header","body":"It should be deleted. Fix https://github.com/honojs/node-server/issues/79\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861895098},{"id":1861896069,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1367","title":"Should be `continue`","body":"https://github.com/honojs/hono/blob/2685a9b01754515adc2da358d42e05cfe76434d0/src/client/client.ts#L41-L46","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861896069},{"id":1861913418,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1368","title":"fix(client): `continue` if query value is `undefined`","body":"Fix #1367 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1861913418},{"id":1862450664,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1369","title":"How do I remove x-served-by header?","body":"### What version of Hono are you using?\n\n3.5.1\n\n### What runtime/platform is your app running on?\n\nNodejs\n\n### What steps can reproduce the bug?\n\nJust simple hono server setup with node.js and then use `secureHeader()` middleware.\n\n### What is the expected behavior?\n\nx-served-by header should not come\n\n### What do you see instead?\n\n\"x-served-by\" header is coming with my domain name.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1862450664},{"id":1864420589,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1371","title":"fix(types): remove type-errors for routes","body":"This PR prevents infinite loops in type inference for routes. With this update, you can use many routes in RPC mode.\r\n\r\nCurrent:\r\n<img width=\"694\" alt=\"Screenshot 2023-08-24 at 14 55 47\" src=\"https://github.com/honojs/hono/assets/10682/17726680-27ef-4fdb-a745-ad58bf43cfe4\">\r\n\r\nWith this PR:\r\n<img width=\"784\" alt=\"Screenshot 2023-08-24 at 14 54 46\" src=\"https://github.com/honojs/hono/assets/10682/bf9d73a9-13bd-4e9e-b58d-b8b72b58bc64\">\r\n\r\nMay fix #1360\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1864420589},{"id":1864547726,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1372","title":"fix(types): export `ToSchema`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1864547726},{"id":1864616637,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1373","title":"fix(types): fix `AddDollar`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1864616637},{"id":1865325426,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1374","title":"chore: check if it is denoified","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\nfixed: https://github.com/honojs/hono/issues/1365","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1865325426},{"id":1868265977,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1377","title":"TypeScript error when using two different response types (error or success) using c.jsonT","body":"### What version of Hono are you using?\r\n\r\n3.5.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\nCreate a simple route, in one case it should return one type (in my case, an error), and in another case, some other data (which is the actual data in my case). \r\n\r\nThese are the types:\r\n\r\n```\r\ntype Success<T> = {\r\n    success: true;\r\n    data: T;\r\n};\r\n\r\ntype Error = {\r\n    success: false;\r\n    message: string;\r\n};\r\n\r\ntype ResultType<T> = Success<T> | Error;\r\n```\r\n\r\nThis is the simplest possible example:\r\n\r\n```\r\nendpoint.get(\"/all\", c => {\r\n    const data = getData();\r\n\r\n    if (!data.success) {\r\n        return c.jsonT({\r\n            success: false,\r\n            message: \"Could not fetch data\"\r\n        });\r\n    }\r\n\r\n    return c.jsonT({\r\n        success: true,\r\n        data: data.data,\r\n    });\r\n});\r\n```\r\n\r\nIn this example, it renders this very long error:\r\n\r\n```\r\nNo overload matches this call.\r\n  The last overload gave the following error.\r\n    Argument of type '(c: Context<{ Variables: AuthVariables; }, \"/all\", {}>) => TypedResponse<{ success: boolean; message: string; status: number; }> | TypedResponse<{ success: boolean; data: {}; }>' is not assignable to parameter of type 'H<{ Variables: AuthVariables; }, \"/all\", {}, { success: boolean; message: string; status: number; }>'.\r\n      Type '(c: Context<{ Variables: AuthVariables; }, \"/all\", {}>) => TypedResponse<{ success: boolean; message: string; status: number; }> | TypedResponse<{ success: boolean; data: {}; }>' is not assignable to type 'MiddlewareHandler<{ Variables: AuthVariables; }, \"/all\", {}>'.\r\n        Type 'TypedResponse<{ success: boolean; message: string; status: number; }> | TypedResponse<{ success: boolean; data: {}; }>' is not assignable to type 'Promise<void | Response>'.\r\n          Type 'TypedResponse<{ success: boolean; message: string; status: number; }>' is missing the following properties from type 'Promise<void | Response>': then, catch, finally, [Symbol.toStringTag]ts(2769)\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nI would like to be able to return two different json bodies depending on the circumstances, and still be able to get type safety.\r\n\r\n### What do you see instead?\r\n\r\nI'm not sure for now, thinking about using normal c.json for the error response, but that would probably mean I would lose some type safety I presume. \r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1868265977},{"id":1868386475,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1378","title":"ci: check if it is denoified","body":"The original PR: #1374\r\n\r\nI've separated 'denoify' from the 'main'.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1868386475},{"id":1868392104,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1379","title":"fix(context): different types using `jsonT()`","body":"With this PR, `c.jsonT()` can now handle two or more distinct types:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst routes = app.get('/all', (c) => {\r\n  const data: Data = { success: true, data: {} }\r\n\r\n  if (!data.success) {\r\n    return c.jsonT({\r\n      success: false,\r\n      message: 'Could not fetch data',\r\n    })\r\n  }\r\n\r\n  return c.jsonT({\r\n    success: true,\r\n    data: data.data,\r\n  })\r\n})\r\n```\r\n\r\nThe returned types are as follows:\r\n\r\n```ts\r\n{\r\n    success: boolean;\r\n    message: string;\r\n} & {\r\n    success: boolean;\r\n    data: any;\r\n}\r\n```\r\n\r\n<img width=\"372\" alt=\"Screenshot 2023-08-27 at 16 19 41\" src=\"https://github.com/honojs/hono/assets/10682/c430685f-9e7d-4a90-9452-44579861a965\">\r\n\r\nFix #1377.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1868392104},{"id":1869108114,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1380","title":"Revert #1332","body":"Reverting #1332\r\n\r\nIt does not have to export `hono/context`. We can use `ContextVariableMap` without it:\r\n\r\n```ts\r\ndeclare module \"hono\" {\r\n  interface ContextVariableMap {\r\n    sentry: Toucan;\r\n  }\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1869108114},{"id":1869718866,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1381","title":"fix: Revert \"feat(`package.json`): export `hono/context`\"","body":"This reverts commit 29fe930b676cef3e67636574630d8144349c2928.\r\n\r\nFix #1380\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1869718866},{"id":1870426079,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1383","title":"Return type of route has \"unknown\" as response type for async handler","body":"### What version of Hono are you using?\n\n3.5.5\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nThe type of the route has a different return type whether the handler is async or not.\r\n\r\nWhen it is sync, it has the correct return type:\r\n\r\n```\r\nconst route = app.get(\"/test\", c => {\r\n    return c.jsonT({ test: \"test\" });\r\n});\r\n```\r\n<img width=\"525\" alt=\"CleanShot 2023-08-28 at 22 06 25@2x\" src=\"https://github.com/honojs/hono/assets/21983557/1052285c-27e4-453f-aca2-3daf3d4fa6d3\">\r\n\r\nWhen it is async, it has `unknown` as return type:\r\n\r\n```\r\nconst route = app.get(\"/test\", async c => {\r\n    return c.jsonT({ test: \"test\" });\r\n});\r\n```\r\n\r\n<img width=\"641\" alt=\"CleanShot 2023-08-28 at 22 06 37@2x\" src=\"https://github.com/honojs/hono/assets/21983557/9bec464b-d410-47df-b125-35876aeb61d5\">\r\n\n\n### What is the expected behavior?\n\nIt should always show the inferred type, instead of `unknown`\n\n### What do you see instead?\n\n`unknown`\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1870426079},{"id":1870874859,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1384","title":"Add $url method to hono client to extract an endpoint's url","body":"Hello,\r\n\r\nThis change is a proof of concept of a simple feature request. In our project, we are using Hono RPC and need to extract the URL of a Hono router endpoint for mocking in tests.\r\n```\r\nlet fetchMock = getMiniflareFetchMock()\r\n\r\nconst { pathname, hostname } = hono.client.api.bar.$url()\r\n\r\nfetchMock\r\n        .get(hostname)\r\n        .intercept({\r\n          method: \"POST\",\r\n          path: pathname,\r\n        })\r\n        .reply(200, {}, { headers: { \"content-type\": \"application/json\" } }),\r\n```\r\n\r\nThis will mock the request to `http://localhost:8777/api/bar` by using the proposed `$url` method of the Hono client.\r\n\r\nThe `$url` method returns a URL representing the full url of the configured client request.\r\n\r\nDo you think this is good to add to the client? If so, can you guide me in improving the type definitions to include `$url`?\r\n\r\n<img width=\"456\" alt=\"Screenshot 2023-08-28 at 10 48 12 PM\" src=\"https://github.com/honojs/hono/assets/117486829/92805fff-565d-43e0-b3ff-3df24aac7cd1\">\r\n\r\nAnd also to let me know if I should write more tests and if they are in the right file. Thank you for your amazing library!\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1870874859},{"id":1871734508,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1385","title":"fix(types): infer a response type for async handler","body":"Degraded by the PR #1379\r\n\r\nFixes #1383\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1871734508},{"id":1872592031,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1386","title":"fix: error to retrieve cookie","body":"TypeError: Cannot read properties of undefined (reading 'split')\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1872592031},{"id":1873240995,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1387","title":"(bug): Unable to read raw request body after hono 3.5.0","body":"### What version of Hono are you using?\n\n3.5.6\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n1. I've made a minimal reproduction repository, please clone it from here - https://github.com/AdiRishi/hono-body-read-bug\r\n2. Run `pnpm install`\r\n3. Run `pnpm dev`. This will start a http server at port `8787`\r\n4. Make a curl POST request to `http://localhost:8787/read-body`. Here is a sample request\r\n```Shell\r\ncurl --location 'http://localhost:8787/read-body' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{}'\r\n```\r\nFor ease, here is the code snippet that the `/read-body` endpoint runs\r\n```typescript\r\napp.post('/read-body', zValidator('json', z.object({})), async (c) => {\r\n  const rawBody = await c.req.text(); // the same happens with c.req.raw.text()\r\n  return c.json({ rawText: rawBody });\r\n})\r\n```\r\n5. On the console, you will see the endpoint return a 500 error response rather than 200, triggering the bug.\n\n### What is the expected behavior?\n\nThe expected behaviour is that this request returns a successful 200 response and succeeds.\r\n\r\n**NOTE** This piece of code worked in hono `3.4.3`. From what I can tell this behaviour changed in `3.5.0` and still persists in the latest version. To see a working version of this, I've made a [branch with Hono 3.4.3](https://github.com/AdiRishi/hono-body-read-bug/tree/hono%403.4.3) in the reproduction repository. You can see the exact same code working just fine.\n\n### What do you see instead?\n\n```Shell\r\nTypeError: Body has already been used. It can only be used once. Use tee() first if you need to read it twice.\r\n    at HonoRequest.cachedBody (index.js:596:39)\r\n    at HonoRequest.text (index.js:654:17)\r\n    at index.js:5348:31\r\n    at dispatch (index.js:512:17)\r\n    at index.js:513:33\r\n    at index.js:1684:11\r\n    at async index.js:1591:7\r\n    at async index.js:938:62\r\n    at async jsonError (index.js:5370:12) {\r\n  stack: TypeError: Body has already been used. It can only…:938:62\r\n    at async jsonError (index.js:5370:12),\r\n  message: Body has already been used. It can only be used once. Use tee() first if you need to read it twice.\r\n}\r\n```\n\n### Additional information\n\nNow, this may not be considered a \"bug\", since I'm sure at some point before we handle the request Hono's zodValidator reads the request body to parse it. However, this leads to it being impossible for us to read the raw request body again in the endpoint definition.\r\n\r\nI have a specific use case my code was running before, which broke in `3.5.0` onwards. Specifically, my project had an endpoint that would read the contents of `c.req.raw.text()` and run it through HMAC hashing, checking the result against a signature header. e.g `x-razorpay-signature`. This is a common pattern needed to validate requests by payment providers, which often provide an integrity header to check the body against.\r\n\r\nIn the latest version of Hono, there seems to be no way of doing this due to the exception I've shown above.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1873240995},{"id":1873538979,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1389","title":"feat: body parser helper","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n\r\n## What this PR do?\r\nAdding `BodyParser.parse` helper just like the one we have on `qs` so we could have some sort of (`bodyParser.urlencoded({ extended: true })`)[#1184] in `hono`\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1873538979},{"id":1873777640,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1390","title":"Use Vitest","body":"It's fast.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1873777640},{"id":1873779244,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1391","title":"Show the coverage after testing","body":"This seems to be good:\r\n\r\nhttps://vitest.dev/guide/coverage.html\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1873779244},{"id":1873783262,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1392","title":"`pnpm`","body":"Just trend? But, seems good.","state":"closed","labels":"[\"enhancement\",\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1873783262},{"id":1874445413,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1393","title":"fix(validator): cache `arrayBuffer` to use after validation","body":"This PR enhances the handling of request bodies post-validation. After validating a JSON with the validator, you can now invoke `c.req.text()` to access the request body. Additionally, `c.req.text()` is now available `body` validation. We achieve this by caching the `arrayBuffer` in `c.req.bodyCache` and reusing it when calling `c.req.text()`.\r\n\r\nNote, if you attempt to use `c.req.raw.text()` after validating the `json` or `body`, you will encounter an error. Instead, always use `c.req.text()` in this context.\r\n\r\nFix #1387\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1874445413},{"id":1877984297,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1395","title":"improvements to secure headers middleware","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Improvements\r\n- fix CSP directive names (e.g. `defaultSrc ` should be `default-src`)\r\n- add more CSP directives (e.g. `child-src`, `connect-src`, `form-action`, etc...)\r\n- add new `Report-To` and `Reporting-Endpoints` headers in support of the `report-to` CSP directive\r\n- pre-calculate CSP header once at setup instead of per request\r\n- allow overriding header values (e.g. `xFrameOptions: true` or `xFrameOptions: 'DENY'`)\r\n\r\nI'd be happy to update the [docs](https://hono.dev/middleware/builtin/secure-headers) as well once this PR is accepted.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1877984297},{"id":1878797360,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1396","title":"LiveviewJS integration","body":"### What is the feature you are proposing?\r\n\r\nDurable object class for doing liveview. https://www.liveviewjs.com/docs/overview/introduction","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1878797360},{"id":1878899184,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1397","title":"feat(context): introduce `c.render()`","body":"This PR introduces `c.render()` and `c.setRenderer()` functions. These functions enhance Hono's response handling, allowing for more flexible and modular response structures, especially useful for defining common parts of responses, like HTML layouts.\r\n\r\nYou can set a layout using `c.setRenderer()` within a custom middleware, as shown below:\r\n\r\n```tsx\r\napp.use('*', async (c, next) => {\r\n  c.setRenderer((content) => {\r\n    return c.html(\r\n      <html>\r\n        <body>\r\n          <p>{content}</p>\r\n        </body>\r\n      </html>\r\n    )\r\n  })\r\n  await next()\r\n})\r\n```\r\n\r\nSubsequently, you can utilize `c.render()` to create responses within this layout:\r\n\r\n```tsx\r\napp.get('/', (c) => {\r\n  return c.render('Hello!')\r\n})\r\n```\r\n\r\nThe output of which will be:\r\n\r\n```html\r\n<html><body><p>Hello!</p></body></html>\r\n```\r\n\r\nAdditionally, this feature offers the flexibility to customize arguments. To ensure type safety, types can be defined as:\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  interface ContextRenderer {\r\n    (content: string, head: { title: string }): Response\r\n  }\r\n}\r\n```\r\n\r\nHere's an example of how you can use this:\r\n\r\n```tsx\r\napp.use('/pages/*', async (c, next) => {\r\n  c.setRenderer((content, head) => {\r\n    return c.html(\r\n      <html>\r\n        <head>\r\n          <title>{head.title}</title>\r\n        </head>\r\n        <body>\r\n          <header>{head.title}</header>\r\n          <p>{content}</p>\r\n        </body>\r\n      </html>\r\n    )\r\n  })\r\n  await next()\r\n})\r\n\r\napp.get('/pages/my-favorite', (c) => {\r\n  return c.render(<p>Ramen and Sushi</p>, {\r\n    title: 'My favorite',\r\n  })\r\n})\r\n\r\napp.get('/pages/my-hobbies', (c) => {\r\n  return c.render(<p>Watching baseball</p>, {\r\n    title: 'My hobbies',\r\n  })\r\n})\r\n```\r\n\r\nAlthough this feature is set to debut as experimental, its transition to general availability will be swift, contingent upon no significant issues arising.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1878899184},{"id":1878954899,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1398","title":"Avoid `denoify` API rate limit","body":"### What is the feature you are proposing?\n\nIf call `denoify` many times in CI at once, it will throw ther error:\r\n\r\n> API rate limit exceeded for 13.88.99.209. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more **details.**\r\n\r\nhttps://github.com/honojs/hono/actions/runs/6062770394/job/16449345495#step:6:18\r\n\r\nWe can fix it by setting a GitHub token.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1878954899},{"id":1879007073,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1399","title":"Deprecate `c.req.headers` (not `c.req.header`) and others","body":"Sometimes it's good to have options, but at other times too many options can confuse users.\r\n\r\nIn the case of Hono, `c.req.header` and `c.req.headers` have similar names and are used in similar contexts:\r\n\r\n```ts\r\nconst contentType = c.req.header('Content-Type')\r\n// Or\r\nconst contentType = c.req.headers.get('Content-Type')\r\n```\r\n\r\nI've felt for a while that this isn't ideal. There are redundant properties in `HonoRequest` that aren't frequently used or particularly significant.\r\n\r\nThe reason `HonoRequest` has so many properties is that `c.req` was previously defined as `Request`. To maintain backward compatibility, we haven't removed these properties:\r\n\r\n```ts\r\nget headers() {\r\n  return this.raw.headers\r\n}\r\nget body() {\r\n  return this.raw.body\r\n}\r\nget bodyUsed() {\r\n  return this.raw.bodyUsed\r\n}\r\nget integrity() {\r\n  return this.raw.integrity\r\n}\r\nget keepalive() {\r\n  return this.raw.keepalive\r\n}\r\nget referrer() {\r\n  return this.raw.referrer\r\n}\r\nget signal() {\r\n  return this.raw.signal\r\n}\r\n```\r\n\r\nWith this issue, I propose that we deprecate these methods and remove them in v4, recommending instead that properties be accessed directly from `c.req.raw`, like `c.req.raw.body`.\r\n\r\nThis is a significant change, but it's necessary to make Hono cleaner and more intuitive.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879007073},{"id":1879062670,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1400","title":"Type error","body":"### What version of Hono are you using?\n\n3.5.4\n\n### What runtime/platform is your app running on?\n\ncloudflare workers\n\n### What steps can reproduce the bug?\n\nimport { Context, Hono } from 'hono'\r\nimport { logger } from 'hono/logger'\r\nimport { HtmlEscapedString } from 'hono/utils/html'\r\nimport { DrizzleD1Database, drizzle } from 'drizzle-orm/d1';\r\nimport * as schema from './schema';\r\n\r\nexport interface Env {\r\n  DB: D1Database;\r\n}\r\ntype Variables ={\r\n  db: DrizzleD1Database\r\n}\r\ntype Bindings = {\r\n  DB: D1Database;\r\n}\r\nconst {log} = console\r\nconst app = new Hono<{ Variables: Variables, Bindings: Bindings}>()\r\n\r\n\r\napp.use('*', async (c: Context, next)=>{\r\n  const db = drizzle(c.env.DB, {schema} );  \r\n  c.set('db', db)\r\n  await next()\r\n})\r\n\r\nfunction dbc (c: Context){\r\n  return drizzle(c.env.DB, {schema} )\r\n}\r\n\r\napp.use('*', logger())\r\n\r\napp.get('/', (c) => {\r\n  return c.html(<Index />)\r\n})\r\n\r\napp.get('/search', async (c) => {\r\n  const keywords = c.req.query(\"keywords\")\r\n  // const db = c.get('db');  \r\n\r\n  const result = await db.query.apis.findMany()\r\n  log(result)\r\n  return c.html(<Search />)\r\n})\r\n\n\n### What is the expected behavior?\n\nNo type errors\n\n### What do you see instead?\n\nTypeerror that the db instance is missing a generic.\n\n### Additional information\n\nUsing dbc function within a route will not have the same error.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879062670},{"id":1879261663,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1401","title":"fix(rpc): infer path with `route()` and `basePath()`","body":"This PR will make the RPC-mode infers the path type correctly, with `app.basePath()` and `app.route()`:\r\n\r\n```ts\r\nconst book = new Hono().post('/create', (c) => c.jsonT('test root'))\r\nconst api = new Hono().basePath('/v1').route('/book', book)\r\n```\r\n\r\nWill be handled as:\r\n\r\n```ts\r\nconst res = await client.v1.book.create.$post()\r\n// ...\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879261663},{"id":1879276124,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1402","title":"'Fragment' cannot be used as a JSX component","body":"### What version of Hono are you using?\r\n\r\n3.5.7\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNone, typescript issue.\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Clone https://github.com/honojs/examples\r\n2. `cd jsx-ssr && npm i`\r\n3. Open `top.tsx`, try placing a `hono/jsx` Fragment as such:\r\n```tsx\r\nimport { Fragment } from \"hono/jsx\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport type { Post } from \"../index\";\r\n\r\nconst List = (props: { post: Post }) => (\r\n  <li>\r\n    <a href={`/post/${props.post.id}`}>{props.post.title}</a>\r\n  </li>\r\n);\r\n\r\nexport const Top = (props: { posts: Post[] }) => {\r\n  return (\r\n    <Layout title={\"Top\"}>\r\n      <main>\r\n        <h2>Posts</h2>\r\n        <ul>\r\n          {props.posts.map((post) => (\r\n            <List post={post} />\r\n          ))}\r\n        </ul>\r\n        <Fragment>\r\n          <p>Hello world</p>\r\n        </Fragment>\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nPlacing Fragments inside JSX should not result in type errors.\r\n\r\n### What do you see instead?\r\n\r\n<img width=\"990\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/36046024/070d8a35-8bf4-40a6-b0e4-80625a4a3be8\">\r\n\r\nHappens on vscode and vim.\r\n\r\n### Additional information\r\n\r\nThis also happens in another project of mine, but I used the examples repo for easier reproduction.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879276124},{"id":1879345448,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1403","title":"feat(context): add `status` to `TypedResponse`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n## About the PR\r\nVery simple, just adds a `status` prop to `TypedResponse` like mentioned in the issue.\r\n\r\nCloses #1323.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879345448},{"id":1879426672,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1404","title":"test(vitest): replace `jest` with `vitest`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n## What this PR does\r\nReplaces `jest` with `vitest` and cleans up dependencies. \r\n\r\n~~I did notice one failing test in `lagon` suite, but I think it's unrelated to this PR.~~ EDIT: Tests not failing on CI, so seems ok.\r\n\r\nCloses #1390.\r\n\r\n## TODO\r\n\r\nEDIT: One last test failing on `Fastly Compute@Edge`...\r\n- [x] Get last test running on `Fastly`\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879426672},{"id":1879552170,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1405","title":"chore(pnpm): move from `yarn` to `pnpm`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] Run `denoify`\r\n\r\n## What this PR does\r\n* Replaces `yarn.lock` with `pnpm-lock.yaml`\r\n* Replaces references to `yarn` with `pnpm` in the `scripts` section in `package.json`.\r\n* Replaces `yarn` with `pnpm` and adds installation step to CI for `pnpm`\r\n* Fixes missing `glob` devDependency, probably was just in `yarn.lock` so it was always installed 😅 \r\n\r\nCloses #1392 \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1879552170},{"id":1880321746,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1406","title":"feat(context): introduce `c.var`","body":"This PR introduces two new features: the ability to set variables using `Middleware` generics and accessing them via `c.var`.\r\n\r\nCurrently, you can globally define variable types using generics for `Hono`.\r\n\r\n```ts\r\ntype Client = 'foo client'\r\n\r\nconst app = new Hono<{\r\n  Variables: {\r\n    client: Client\r\n  }\r\n}>()\r\n```\r\n\r\nAlternatively, you can specify them for a specific middleware using `ContextVariableMap`:\r\n\r\n```ts\r\n// JWT middleare\r\ndeclare module '../../context' { // Or you can write `declare module 'hono'`\r\n  interface ContextVariableMap {\r\n    jwtPayload: any\r\n  }\r\n}\r\n```\r\n\r\nThe challenge here is that using `ContextVariableMap` makes it globally available. For instance, after importing the JWT middleware, you can access `jwtPayload` in any handler.\r\n\r\nWith this PR, you can confine middleware-defined variables to specific handlers where the middleware is applied.\r\n\r\n```ts\r\nconst oneApiMiddleware: MiddlewareHandler<{\r\n  Variables: {\r\n    client: Client\r\n  }\r\n}> = async (c, next) => {\r\n  c.set('client', new Client())\r\n  await next()\r\n}\r\n\r\napp.get('/foo', oneApiMiddleware, (c) => {\r\n  const client = c.get('client') // `client` is accessible only in this handler\r\n  // ...\r\n  return c.json({})\r\n})\r\n```\r\n\r\nThis offers a scoped approach to variable type availability.\r\n\r\nThe second feature is `c.var`. While the conventional method to access the actual value of a variable is `c.get()`:\r\n\r\n```ts\r\nconst client = c.get('client')\r\n```\r\n\r\nWith `c.var`, you can use a more intuitive syntax:\r\n\r\n```ts\r\nconst result = c.var.client.oneMethod()\r\n```\r\n\r\nThe combination of these two features will provide a powerful tool for developers:\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst echoMiddleware: MiddlewareHandler<{\r\n  Variables: {\r\n    echo: (str: string) => string\r\n  }\r\n}> = async (c, next) => {\r\n  c.set('echo', (str) => str)\r\n  await next()\r\n}\r\n\r\napp.get('/echo', echoMiddleware, (c) => {\r\n  return c.text(c.var.echo('Hello!'))\r\n})\r\n```\r\n\r\n<img width=\"479\" alt=\"Screenshot 2023-09-04 at 22 54 18\" src=\"https://github.com/honojs/hono/assets/10682/b7b18848-cb69-4080-8a9c-3ee9bdfc1f92\">\r\n\r\nThis was discussed in issue #414 and is now being realized.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1880321746},{"id":1880574077,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1407","title":"chore(ci): Avoid denoify API rate limit","body":"For now, we'll attempt to mitigate the issue using a GitHub Token.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\nclose #1398 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1880574077},{"id":1881035975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1408","title":"chore(ci): checkout@v4","body":"Updated!\r\nhttps://github.com/actions/checkout/releases/tag/v4.0.0\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1881035975},{"id":1881156081,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1409","title":"Request for Enhanced Type Annotations for JSX Elements","body":"### What is the feature you are proposing?\n\n#### Overview\r\n\r\nThe current implementation of Hono JSX offers only minimal type annotations for JSX elements. This limitation impedes the developer experience by offering no code completion or error checking capabilities related to element properties (props). This document serves as a formal request to introduce comprehensive type annotations for JSX elements in Hono JSX to enrich both code quality and developer productivity.\r\n\r\n#### Rationale\r\n\r\nThe lack of extensive type annotations hinders developers from leveraging the full capabilities of modern IDEs. This deficit could lead to:\r\n- Missed opportunities for catching bugs at compile-time\r\n- Reduced code maintainability due to a lack of clarity and code insights\r\n- Hindered productivity as developers cannot make use of code completions or other intelligent IDE features.\r\n\r\n#### Proposed Solution\r\n\r\nIntegrate exhaustive type annotations for element props, conforming to established best practices in the TypeScript community. This should involve defining interfaces or types that encapsulate the expected prop structures for each JSX element.\r\n\r\n#### Expected Benefits\r\n\r\n1. Improved Code Reliability: Comprehensive type checking will help in identifying issues early in the development cycle.\r\n2. Enhanced Developer Experience: Code completion suggestions will speed up development and reduce context-switching.\r\n3. Greater Maintainability: Explicit types will make the code more readable and easier to refactor.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1881156081},{"id":1881373286,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1410","title":"feat(req): deprecate `c.req.headers` (not `c.req.header`) and others","body":"This PR makes these properties in `HonoRequest` deprecated:\r\n\r\n```ts\r\nget headers() {\r\n  return this.raw.headers\r\n}\r\nget body() {\r\n  return this.raw.body\r\n}\r\nget bodyUsed() {\r\n  return this.raw.bodyUsed\r\n}\r\nget integrity() {\r\n  return this.raw.integrity\r\n}\r\nget keepalive() {\r\n  return this.raw.keepalive\r\n}\r\nget referrer() {\r\n  return this.raw.referrer\r\n}\r\nget signal() {\r\n  return this.raw.signal\r\n}\r\n```\r\n\r\nThese will be obsolete in v4.\r\n\r\n\r\nClose #1399\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1881373286},{"id":1881461668,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1411","title":"fix(`utils/buffer`): don't decode space as `+`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1881461668},{"id":1881545596,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1412","title":"fix(jsx): enable `Fragment`","body":"Fix #1402\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1881545596},{"id":1882116308,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1413","title":"RPC client signature has changed after v3.5.2","body":"### What version of Hono are you using?\r\n\r\n3.5.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { hc } from \"hono/client\";\r\n\r\nconst app = new Hono();\r\nconst tagRoutes = new Hono().get(\"/\", (c) => {\r\n  return c.jsonT({ message: \"Hello, world!\" });\r\n});\r\nconst instance = app.route(\"/tags\", tagRoutes);\r\nexport type AppType = typeof instance;\r\n\r\nconst client = hc<AppType>(\"\");\r\n```\r\n\r\n`GET /tags` is generated as:\r\n- 3.5.1: `client.tags.$get`\r\n- 3.5.2: `client.tags.index.$get`\r\n\r\nI checked out release changelogs, but I failed to find out breaking changes about this behavior. Is this change intended?\r\n[RPC guide](https://hono.dev/guides/rpc) example code does not include `index`.\r\n\r\n### What is the expected behavior?\r\n\r\nWorking as same as previous versions, or [RPC guide](https://hono.dev/guides/rpc) example code including latest changes.\r\n\r\n### What do you see instead?\r\n\r\nThere are breaking changes, and document has not changed.\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1882116308},{"id":1882625016,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1414","title":"Modify Req for Proxy scenario","body":"### What is the feature you are proposing?\r\n\r\nIn this example it takes the request and passes it to the url:\r\nhttps://hono.dev/guides/examples#proxy\r\n\r\nIn order to make the proxy functionality more useful, it would be helpful to be able to modify or replace the req via the Middleware in order to add headers, santize/transform the url, etc.. \r\n\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1882625016},{"id":1882997470,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1415","title":"Swagger Editor middleware","body":"### What is the feature you are proposing?\n\nLike this:\r\n\r\nhttps://editor.swagger.io/\r\n\r\nWe may make it without depending external libraries, but I think it should be a 3rd party middleware.","state":"open","labels":"[\"enhancement\",\"middleware\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1882997470},{"id":1883037186,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1416","title":"vercel pass RequestContext","body":"waitUntil doesn't work with hono/vercel\r\n\r\nhttps://vercel.com/docs/functions/edge-functions/vercel-edge-package#requestcontext\r\n\r\nNot sure about name/types. Do we want to add a dependency to @vercel/edge?","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1883037186},{"id":1884782758,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1419","title":"JSX usage example not working","body":"### What version of Hono are you using?\r\n\r\n3.5.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nlocal\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Create a project in a file with JSX enabled according to the [documentation](https://hono.dev/guides/jsx).\r\n2. Copy the [example code](https://hono.dev/guides/jsx#usage) from the JSX documentation and paste it in index.tsx. \r\n\r\nResult: the typescript compiler indicates that there is a type error for the `<Layout>` component because Layout only accepts children as a `string`  and not a `string[]`.\r\n\r\n### What is the expected behavior?\r\n\r\nFor the documented example to have correct typing.\r\n\r\n### What do you see instead?\r\n\r\nThe opposite.\r\n\r\n### Additional information\r\n\r\nI think the solution isn't to type Layout with `string[]`. Instead, I think the fundamental problem should be solved: JSX Elements should be able to take either one or multiple child nodes, as if they had `<Fragment>` baked in. That way I could create a functional component that can either return a node or returns its children directly. There shouldn't be any distinction.\r\n\r\nConsider:\r\n\r\n```typescript\r\nconst Example = ({ children, value }: { children: HtmlEscapedString; value: boolean }) => {\r\n  if (value) return children;\r\n  return <div>{children}</div>;\r\n};\r\n\r\nconst Test1 = (\r\n  <Example value={true}>\r\n    <h1>Foo</h1>\r\n  </Example>\r\n);\r\n\r\nconst Test2 = (\r\n  <Example value={true}>\r\n    <h2>Foo</h2>\r\n    <h3>Bar</h3>\r\n  </Example>\r\n);\r\n```\r\n\r\nIn this example, Test2 will throw a type error. However, if changing the component children type to `HtmlEscapedString[]`, then both Tests will throw an error.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1884782758},{"id":1884992633,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1420","title":"feat(jsx): export `FC`","body":"This PR makes JSX supports exporting `FC`. You can use it for specifying types to the function component.\r\n\r\n```tsx\r\nimport { FC } from 'hono/jsx'\r\n\r\nconst Layout: FC<{ title: string }> = (props) => {\r\n  return (\r\n    <html>\r\n      <head>\r\n        <title>{props.title}</title>\r\n      </head>\r\n      <body>{props.children}</body>\r\n    </html>\r\n  )\r\n}\r\n\r\nconst Top = (\r\n  <Layout title='Home page'>\r\n    <h1>Hono</h1>\r\n    <p>Hono is great</p>\r\n  </Layout>\r\n)\r\n```\r\n\r\nFix #1419\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1884992633},{"id":1885027307,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1421","title":"feat(vercel): pass `RequestContext`","body":"PR with implementation added to #1416.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1885027307},{"id":1885768404,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1423","title":"This context has no FetchEvent","body":"### What version of Hono are you using?\n\n3.5.8\n\n### What runtime/platform is your app running on?\n\nUnpublished Worker\n\n### What steps can reproduce the bug?\n\nWhen I use `c.event`, it throws `This context has no FetchEvent`.\n\n### What is the expected behavior?\n\nGet the `FetchEvent`.\n\n### What do you see instead?\n\nAn error thrown.\n\n### Additional information\n\nI found that a PR of 3 months ago: https://github.com/honojs/hono/pull/1206\r\n\r\nThis PR changed the behavior of `c.event`.\r\n\r\n`instanceof FetchEvent` -> `instanceof FetchEventLike`. And I found that the JavaScript dist of `FetchEventLike` is:\r\n\r\n```js\r\nvar FetchEventLike = class {\r\n};\r\n```\r\n> /dist/types.js","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1885768404},{"id":1887253054,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1424","title":"test: ignore `sandbox` dir","body":"I always create a directory called `sandbox` for my experiments.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1887253054},{"id":1887283983,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1425","title":"ci: add `--no-warnings` option for `main`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1887283983},{"id":1887677016,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1426","title":"fix(types): fix `MergeSchemaPath` correct","body":"Fix #1413\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1887677016},{"id":1887696741,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1427","title":"test: `tsc` before `vitest`","body":"After replacing Jest with Vitest, I noticed that types are not being checked. So, adding `tsc` before running `vitest`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1887696741},{"id":1887982200,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1428","title":"cookie parsing improvements","body":"### Author should do the followings, if applicable\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Improvements\r\n- validate cookie names and values during parsing per rfc6265 to mitigate various security threats\r\n- protect signed cookies against timing attacks (i.e. utilize `crypto.subtle.verify` instead of comparing strings)\r\n- fix bug where unsigned cookie values that match the shape of signed values are not returned\r\n- remove constraints on signed cookie values (e.g. signed values can contain period now)\r\n- allow use of binary secret for signed cookies\r\n- improved efficiency (e.g. remove duplicated logic / cache secret key when verifying multiple signed values)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1887982200},{"id":1888510000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1429","title":"Use `ExpectTypeOf` to test types","body":"We are now using Vitest. There is an [ExceptTypeOf API](https://vitest.dev/api/expect-typeof.html) in Vitest which can be used for testing types instead of `Expect` and `Equal` in `utils/types.ts`","state":"closed","labels":"[\"test\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1888510000},{"id":1888614321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1430","title":"fix(client): remove async from `$url()`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1888614321},{"id":1888977152,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1431","title":"Hono client ignores route with middleware","body":"### What version of Hono are you using?\r\n\r\n3.5.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nWeb and Bun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```typescript\r\n// server.ts\r\nimport { Hono } from 'hono';\r\nimport { jwt } from 'hono/jwt';\r\n\r\nconst app = new Hono()\r\n  .get('/users', (c) => c.jsonT({ users: [] }))\r\n  .get('/posts', jwt({ secret: 'my-secret' }), (c) => c.jsonT({ posts: [] }));\r\n\r\nexport type AppType = typeof app;\r\n```\r\n\r\n```typescript\r\n// client.ts\r\nimport { hc } from 'hono/client';\r\nimport type { AppType } from './server';\r\n\r\nconst client = hc<AppType>('/api');\r\nclient. // auto complete doesnt works\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nHono client working\r\n\r\n### What do you see instead?\r\n\r\nTypes not working\r\n\r\n### Additional information\r\n\r\nI initially had this error with Bun, but I was able to reproduce the error on StackBlitz as well.\r\nhttps://stackblitz.com/edit/typescript-cc7vpy?file=index.ts\r\n\r\nThis error is for middleware in method function only, when I use `.use('*', middleware)` works well\r\n```typescript\r\n// working\r\nconst postsRoute = new Hono()\r\n  .use('*', jwt({ secret: 'my-secret' }))\r\n  .get('/', (c) => c.jsonT({ posts: [] }));\r\n\r\nconst app = new Hono()\r\n  .get('/users', (c) => c.jsonT({ users: [] }))\r\n  .route('/', postsRoute);\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1888977152},{"id":1889125830,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1432","title":"Improvement of Parse Body","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR does\r\n- Enhanced the parsing functionality in the Hono framework to properly handle multiple checkboxes.\r\n- Resulting selections in the request body are now formatted as `selections[] = string[]`, which aligns with common conventions for handling multiple selections.\r\n\r\nThis improvement enhances the usability and clarity of the Hono framework when dealing with multiple checkboxes in user requests. Your feedback and review on this pull request are highly appreciated. Thank you!\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1889125830},{"id":1889229799,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1433","title":"Can't access context.env on vercel edge runtime","body":"### What version of Hono are you using?\r\n\r\n3.5.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nVercel\r\n\r\n### What steps can reproduce the bug?\r\n\r\nOn vercel edge runtime, `context.env` isn't a thing. \r\nEnv variables can be accessed via `process.env` - Or - using `import { env } from 'hono/adapter'`\r\n\r\nThe vercel adaptor needs a fix, and should have this baked in so `ctx.env` should work as documented here https://hono.dev/api/context#env\r\n\r\nSample code below:\r\n\r\n```js\r\napp.get('/', async function (c) {\r\n  console.log(c.env, process.env);\r\n  return c.json({ message: 'Hello Hono!' });\r\n});\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1889229799},{"id":1889344987,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1434","title":"feat(helper): introduce `factory` helper","body":"This PR introduces `factory` helper. Now, this provides a `middleware` factory method to create a middleware handler.\r\n\r\n```ts\r\nconst mw = (message: string) =>\r\n  middleware(async (c, next) => {\r\n    await next()\r\n    c.header('X-Message', message)\r\n  })\r\n```\r\n\r\nIf define your middleware with `middleware`, the appropriate types will be added.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1889344987},{"id":1889388987,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1436","title":"Next","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1889388987},{"id":1889609153,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1437","title":"feat: Add `c.stream()`","body":"Hi, @yusukebe, @ geelen\r\n\r\nI implemented `c.stream()` according to #914. I'd like to see @ geelen added as a co-author as well, since I'm pretty much quoting the code from the issue.\r\n\r\nThis is the first time I've use a StreamAPI, so feel free to point out any mistakes.\r\n\r\n@yusukebe asked me to give some examples of using `c.stream()`.\r\nBelow are some examples.\r\n\r\n## Usecase\r\n\r\n### 1: ChatGPT Proxy\r\nEnable rate limiting to protect or hide external APIs\r\n\r\n<details>\r\n<summary>Code</summary>\r\n\r\n```ts\r\nimport OpenAI from 'openai'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono<{\r\n  Bindings: {\r\n    OPENAI_API_KEY: string\r\n  }\r\n}>()\r\n\r\nconst PROMPT = (message: string) => [\r\n  {\r\n    role: 'system' as const,\r\n    content:\r\n      'You are an Web developer. If you receive a question about Web-related technologies, you can answer it.',\r\n  },\r\n  {\r\n    role: 'user' as const,\r\n    content: message,\r\n  },\r\n]\r\n\r\napp.post('/', async (c) => {\r\n  const body = await c.req.json()\r\n  const openai = new OpenAI({ apiKey: c.env.OPENAI_API_KEY })\r\n\r\n  return c.stream(async (stream) => {\r\n    const chatStream = await openai.chat.completions.create({\r\n      messages: PROMPT(body.message),\r\n      model: 'gpt-3.5-turbo',\r\n      stream: true,\r\n    })\r\n\r\n    for await (const message of chatStream) {\r\n      stream.write(message.choices[0]?.delta.content || '').flush()\r\n    }\r\n  })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n</details>\r\n\r\n### 2: Read some large files using stream\r\n\r\nIn this example, I'm reading a large file from the disk and sending it to the client using stream.\r\neg: [Read Geojson using stream and gradually draw](\r\n    https://gunmagisgeek.com/blog/javascript/6054\r\n)\r\n\r\n<details>\r\n<summary>Code</summary>\r\n\r\n```ts\r\nimport * as fs from 'fs'\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\napp.get('/assets/:key', async (c) => {\r\n  const key = c.req.param('key')\r\n  const path = `./assets/${key}`\r\n  const stream = fs.createReadStream(path)\r\n  return c.stream(async (s) => {\r\n    for await (const chunk of stream) {\r\n      s.write(chunk).flush()\r\n    }\r\n  })\r\n})\r\n\r\nserve(app)\r\n```\r\n\r\n</detail>\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1889609153},{"id":1889748279,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1438","title":"Hono converts headers into SnakeCase instead of passing them untouched","body":"### What version of Hono are you using?\n\n3.6.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nI set new response headers via:\r\n```\r\n    const newRequest = new Request(url,c.req.raw);                  \r\n                    const res = await fetch(newRequest)\r\n                    const newResponse = new Response(res.body, res)\r\n                    newResponse.headers.set('X-Connecting-IP',`${REALIP}`)\r\n                    newResponse.headers.set('X-Custom-Router', 'Hono')\r\n                return newResponse\r\n                })\r\n```\r\n\r\n\n\n### What is the expected behavior?\n\nI expect header names not to be mangled.\r\nExpecting:\r\nX-Connecting-IP:  XXX.XXX.XXX.XXX\n\n### What do you see instead?\n\nWhat I get is:  X-Connecting-Ip:  XXX.XXX.XXX.XXX\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1889748279},{"id":1890892249,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1441","title":"Validator should throw error rather than `return c.json({ success, message })`","body":"### What is the feature you are proposing?\n\nValidator should throw error rather than `return c.json({ success, message })`\r\nSo we can use onError handler to format and send the right response to the client. ","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1890892249},{"id":1891413114,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1442","title":"feat: extend app.request paramters","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\nAdded optional Env?: E['Bindings'] | {} and executionCtx?: ExecutionContext parameters to the app.request method signature.\r\nModified app.request to pass these new parameters to the app.fetch method.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1891413114},{"id":1891423817,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1443","title":"Create a set of JWT helpers ","body":"### What is the feature you are proposing?\n\nThis proposal aims to create a small set of JWT helpers similar to [what is offered for Cookies](https://hono.dev/helpers/cookie).\r\n\r\nI am currently developing an API server with JWT authorization. While the provided JWT middleware is incredibly useful for handling incoming tokens, my application also requires the capability to issue new JWTs.\r\n\r\nHono currently includes some methods within its codebase that serve this purpose, [as discussed in this PR](https://github.com/honojs/hono/pull/169#issuecomment-1714706459). However, these methods lack documentation, and their API is not considered stable.\r\n\r\nBy exposing these functions as an official set of helpers, we can save not only myself but also potentially other developers from the need to add another dependency to our applications or create our own JWT utility functions.\r\n\r\nI propose that these helpers remain small and straightforward, encompassing only three primary functions: `sign`, `verify`, and `decode`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1891423817},{"id":1891504044,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1444","title":"feat: allow the type of app.request","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Changes:\r\n- Defined HonoRequest using type Hono.prototype['request'].\r\n- Updated ClientRequestOptions to optionally accept either the native fetch method or the HonoRequest method.\r\n\r\n### What this PR do?\r\nBy specifying app.request as a custom fetch, users can now write tests through app.request more efficiently while still adhering to type safety.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1891504044},{"id":1891773956,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1445","title":"(bug): Usng hono/cache breaks types for c.env in Hono 3.6.0","body":"### What version of Hono are you using?\r\n\r\n3.6.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. In CF workers, add a few types to the `Env` interface for workers. E.g\r\n```ts\r\nexport type Env = {\r\n  R2_STORE: R2Bucket;\r\n};\r\n```\r\n2. Create a new app instance of Hono with proper env bindings. E.g\r\n```ts\r\nexport const app = new Hono<{ Bindings: Env; }>();\r\n```\r\n3. Setup a route using one of those bindings. E.g\r\n```ts\r\napp.get('/bucket-get', async (c) => {\r\n  // the type of R2_BUCKET is R2Bucket (correct)\r\n  const value = await c.env.R2_BUCKET.get('example.jpg');\r\n  return c.json({ value });\r\n});\r\n```\r\n4. Add the cache middleware to the route. E.g\r\n```ts\r\napp.get(\r\n  '/bucket-get',\r\n  cache({\r\n    cacheName: 'r2-artifacts',\r\n    wait: false,\r\n    cacheControl: 'max-age=86400, stale-while-revalidate=3600',\r\n  }),\r\n  async (c) => {\r\n    // the type of R2_BUCKET is now any\r\n    const value = await c.env.R2_BUCKET.get('example.jpg');\r\n    return c.json({ value });\r\n});\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe type of `c.env.R2_BUCKET` should be `R2Bucket`\r\n\r\n### What do you see instead?\r\n\r\nThe type of `c.env.R2_BUCKET` is `any` because the type of `c.env` is now any\r\n\r\n### Additional information\r\n\r\nIf a reproduction repository helps, you can check the `renovate/hono-3.x` branch on https://github.com/AdiRishi/turborepo-remote-cache-cloudflare\r\n\r\nTo setup the repository, just clone it and run `yarn install`, the specific line which can showcase this error is at https://github.com/AdiRishi/turborepo-remote-cache-cloudflare/blob/renovate/hono-3.x/src/routes/v8/artifacts.ts#L62","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1891773956},{"id":1891869095,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1446","title":"Return type inferred as \"never\" for a route","body":"### What version of Hono are you using?\n\n3.6.0\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nThis code currently returns `never` as a return type:\r\n\r\n<img width=\"414\" alt=\"CleanShot 2023-09-12 at 09 24 55@2x\" src=\"https://github.com/honojs/hono/assets/21983557/33726d07-9a72-4609-9ac2-24474288e3dc\">\r\n\r\n```ts\r\nconst getDraw = drawController.get(\"/draw/:slug\", async c => {\r\n    const slug = c.req.param(\"slug\");\r\n\r\n    const drawing = await DrawRepository.getDrawingBySlug(slug);\r\n\r\n    if (!drawing.success) {\r\n        return c.jsonT(Result.error(drawing.message, drawing.type));\r\n    }\r\n\r\n    return c.jsonT(Result.ok(drawing.data));\r\n});\r\ntype GetDrawRoute = typeof getDraw;\r\n```\r\n\r\nThe `Result` object that causes the error looks like this:\r\n\r\n```ts\r\nexport const Result = {\r\n    ok: <T>(data: T): SuccessResult<T> => ({\r\n        success: true,\r\n        data,\r\n    }),\r\n    okEmpty: (): SuccessResult<void> => ({\r\n        success: true,\r\n        data: undefined,\r\n    }),\r\n    error: (message: string, type: ErrorType): ErrorResult => ({\r\n        success: false,\r\n        type,\r\n        message,\r\n        status: ErrorStatus[type],\r\n    }),\r\n};\r\n```\r\n\r\n---\r\n\r\nIt does however work if I change the return on the error to this:\r\n\r\n```ts\r\nconst getDraw = drawController.get(\"/draw/:slug\", async c => {\r\n    const slug = c.req.param(\"slug\");\r\n\r\n    const drawing = await DrawRepository.getDrawingBySlug(slug);\r\n\r\n    if (!drawing.success) {\r\n        return c.jsonT({ hello: \"world\" });\r\n    }\r\n\r\n    return c.jsonT(Result.ok(drawing.data));\r\n});\r\n```\r\n<img width=\"334\" alt=\"CleanShot 2023-09-12 at 09 27 30@2x\" src=\"https://github.com/honojs/hono/assets/21983557/c4f4c6a7-13dc-4719-9f17-1f8d586e8584\">\r\n\r\n---\r\n\r\nI guess it somehow messes up when `Result.ok` and `Result.error` is returned in the same method?\r\n\r\n---\r\n\r\nHere is the model for result:\r\n\r\n```ts\r\nexport type SuccessResult<T> = {\r\n    success: true;\r\n    data: T;\r\n};\r\n\r\nexport type ErrorResult = {\r\n    success: false;\r\n    type: ErrorType;\r\n    message: string;\r\n    status: number;\r\n};\r\n\r\n\r\nexport type ResultType<T> = SuccessResult<T> | ErrorResult;\r\n\r\n```\r\n\n\n### What is the expected behavior?\n\nIt should infer the correct type\n\n### What do you see instead?\n\n`never`\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1891869095},{"id":1892258944,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1447","title":"fix(adapter): types for env function","body":"This PR creates a fix for `env` function types from `hono/adapter`. This function did not respect `env` that the `hono` server could accept and it was impossible to use `Bindings` and `Variables`. This could be made even more generic, but this would require making the server even more generic. I didn't add any tests, because there are no tests for this `env` function, so I didn't want to scaffold a new suite.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1892258944},{"id":1892470681,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1448","title":"fix(hono-base): `deprecate` should be `deprecated`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1892470681},{"id":1893496906,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1449","title":"fix(types): fix the type error in `MiddlewareHandlerInterface`","body":"Fix #1445\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1893496906},{"id":1893991210,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1450","title":"Run denoify and fix:format on Improvement of Parse Body","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR does\r\n\r\n- Enhanced the parsing functionality in the Hono framework to properly handle multiple checkboxes.\r\n- Resulting selections in the request body are now formatted as selections[] = string[], which aligns with common conventions for handling multiple selections.\r\n\r\nThis improvement enhances the usability and clarity of the Hono framework when dealing with multiple checkboxes in user requests. Your feedback and review on this pull request are highly appreciated. Thank you!\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1893991210},{"id":1894051096,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1451","title":"feat: add Hono test client (RPC)","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\nBy using the hc test client, we can easily write tests. This utility enables efficient integration and unit testing by allowing manipulation of the Hono application object rather than making actual HTTP requests.\r\n\r\n### Usage Example\r\n```ts\r\nit('test', async() => {\r\n  const app = new Hono().get('/search', (c) => c.jsonT({ hello: 'world' }))\r\n  const res = await hc(app).search.$get()\r\n\r\n  expect(await res.json()).toEqual({ hello: 'world' })\r\n})\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1894051096},{"id":1894518873,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1452","title":"Use `getRuntimeKey()` in `env` function","body":"### What is the feature you are proposing?\n\n`c.runtime` is deprecated , so it should use `getRuntimeKey()`.\r\n\r\nhttps://github.com/honojs/hono/blob/9cb6b37fa3484eda479f9fb5f9c16757009c841a/src/helper/adapter/index.ts#L9-L28\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1894518873},{"id":1894683756,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1453","title":"Multiple use of `new Hono()` leads to a type error","body":"### What version of Hono are you using?\r\n\r\n3.6.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```\r\n// main.ts/index.ts \r\nimport { Hono } from 'hono';\r\nimport { app as router } from './router';\r\n\r\nconst app = new Hono();\r\n\r\napp.route('/route', router)\r\n```\r\n\r\n```\r\n// router.ts \r\nimport { Hono } from 'hono':\r\n\r\nexport const app = new Hono();\r\n```\r\n\r\nAfter creating multiple sub apps (around 5-6) when I try to create more I get a wierd type error \r\n```\r\nThe inferred type of 'app' cannot be named without a\r\n\r\nreference to '../../../node_modules/hono/dist/types/types'. This is likely not portable. A type annotation is necessary.\r\n```\r\n\r\nI found a temp fix to use `moduleResolution` in `tsconfig.json` as `node` \r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1894683756},{"id":1894698298,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1454","title":"refactor(helper):  Use getRuntimeKey() in env function","body":"I've removed the logic that depends on c.runtime. I've also refactored the code to map behavior for each runtime to an object. If this is overkill, I can revert it back to the original code.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nfixed: https://github.com/honojs/hono/issues/1452","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1894698298},{"id":1894905106,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1455","title":"Can't infer the \"path\" type if chaining","body":"### What version of Hono are you using?\n\n3.6.0\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n\r\n```ts\r\nconst mw = middleware(async () => {})\r\n\r\nconst r = app\r\n  .get('/books/:id', mw, (c) => {\r\n    const id = c.req.param('id')\r\n    return c.json({ id })\r\n  })\r\n  .post(mw, (c) => {\r\n    const id = c.req.param('id')\r\n    return c.json({ id })\r\n  })\r\n```\r\n\r\n<img width=\"336\" alt=\"Screenshot 2023-09-14 at 1 41 11\" src=\"https://github.com/honojs/hono/assets/10682/02ffd662-5263-4efc-acdc-f8fd96d3293c\">\r\n\n\n### What is the expected behavior?\n\nIt does not throw an error.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nWe have to add the type definitions like the followings:\r\n\r\n```diff\r\ndiff --git a/src/types.ts b/src/types.ts\r\nindex 4bcc88d..52071fb 100644\r\n--- a/src/types.ts\r\n+++ b/src/types.ts\r\n@@ -88,13 +88,15 @@ export interface HandlerInterface<\r\n   // app.get(handler, handler)\r\n   <\r\n     P extends string = ExtractKey<S> extends never ? BasePath : ExtractKey<S>,\r\n+    P2 extends string = P,\r\n+    P3 extends string = P,\r\n     I extends Input = {},\r\n     R extends HandlerResponse<any> = any,\r\n     E2 extends Env = E,\r\n     E3 extends Env = E,\r\n     Temp extends Env = E & E2\r\n   >(\r\n-    ...handlers: [H<E2, P, I, E2, R>, H<E3, P, I, Temp, R>]\r\n+    ...handlers: [H<E2, P2, I, E2, R>, H<E3, P3, I, Temp, R>]\r\n   ): Hono<E, S & ToSchema<M, P, I['in'], MergeTypedResponseData<R>>, BasePath>\r\n\r\n   // app.get(handler x 3)\r\n@@ -193,6 +195,8 @@ export interface HandlerInterface<\r\n   // app.get(path, handler, handler)\r\n   <\r\n     P extends string,\r\n+    P2 extends string = P,\r\n+    P3 extends string = P,\r\n     R extends HandlerResponse<any> = any,\r\n     I extends Input = {},\r\n     E2 extends Env = E,\r\n@@ -201,8 +205,8 @@ export interface HandlerInterface<\r\n   >(\r\n     path: P,\r\n     ...handlers: [\r\n-      H<E2, MergePath<BasePath, P>, I, E2, R>,\r\n-      H<E3, MergePath<BasePath, P>, I, Temp, R>\r\n+      H<E2, MergePath<BasePath, P2>, I, E2, R>,\r\n+      H<E3, MergePath<BasePath, P3>, I, Temp, R>\r\n     ]\r\n   ): Hono<E, S & ToSchema<M, MergePath<BasePath, P>, I['in'], MergeTypedResponseData<R>>, BasePath>\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1894905106},{"id":1895407492,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1456","title":"feat: Add CHIP support - supersedes #1198","body":"This pull request does a few things, namely:\r\n- Adds the code from #1198 (and supersedes #1198 due to there being radio silence in the aforementioned PR); I've added the code from that commit with the PR creator as the commit author (and myself as the committer) so as to credit that user\r\n- Adds the requested applicable tests from said pull request - the helper doesn't seem to have anything applicable for test addition/update\r\n- Fixes a spelling error in the helper test regardless\r\n- Makes string templating consistent in `cookies.ts` as it inconsistently alternated between string templating and concatenation with the `+` operator\r\n- Deno-ifies said changes\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1895407492},{"id":1895852150,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1457","title":"Can't create project via bunjs 0.7.3 installed via snapd on CentOS 7.9","body":"### What version of Hono are you using?\r\n\r\nlatest\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nyum install snapd\r\nsystemctl enable --now snapd.socket\r\nln -s /var/lib/snapd/snap /snap\r\n#### Relogin and wait for snap to be ready\r\nsnap install bunjs\r\nbunjs create hono myapp\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nProject created\r\n\r\n### What do you see instead?\r\n\r\nerror: Unexpected\r\n\r\n----- bun meta -----\r\nBun v0.7.3 (a9b3d583) Linux x64 #1 SMP Wed Oct 13 17:20:51 UTC 2021\r\nCreateCommand:\r\nElapsed: 1ms | User: 12ms | Sys: 14ms\r\nRSS: 33.55MB | Peak: 10.47MB | Commit: 33.55MB | Faults: 0\r\n----- bun meta -----\r\nIllegal instruction\r\n\r\n\r\n### Additional information\r\n\r\nThis is just bare test of creating a project via BunJs","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1895852150},{"id":1896835149,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1458","title":"fix(types): Use ExpectTypeOf from vitest to test types","body":"before we used custom type to test types but now we choose to use ExpectTypeOf from vitest to test types\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1896835149},{"id":1897917475,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1460","title":"Using middlewares with different env variables","body":"### What version of Hono are you using?\n\n3.6.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nCreate two middlewares that have different ﻿`env` variables, as shown in\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport type { MiddlewareHandler } from 'hono'\r\n\r\nconst mw1: MiddlewareHandler<{\r\n  Bindings: {\r\n    ENVIRONMENT: 'prod' | 'staging' | 'dev'\r\n  }\r\n}> = async (c, next) => await next()\r\n\r\nconst mw2: MiddlewareHandler<{\r\n  Bindings: {\r\n    CLOUDFLARE_WORKER_SHA: string\r\n  }\r\n}> = async (c, next) => await next()\r\n\r\nconst app = new Hono<{\r\n  Bindings: {\r\n    ENVIRONMENT: 'prod' | 'staging' | 'dev'\r\n    CLOUDFLARE_WORKER_SHA: string\r\n  }\r\n}>()\r\n\r\napp.use(mw1)\r\napp.use(mw2)\r\n```\r\nWhen defining both `env` variables inside `Hono` app, it should have no TS error. We would need to define each missing variable inside middleware, but these middleware should be independent. \n\n### What is the expected behavior?\n\nHaving multiple different middlewares with different `env` variables should work. Merged types from the `Hono` app should work out of the box.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1897917475},{"id":1897948532,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1461","title":"feat: Improvement of Parse Body","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nWhat this PR does\r\n\r\n   - Enhanced the parsing functionality in the Hono framework to properly handle multiple checkboxes.\r\n   - Resulting selections in the request body are now formatted as selections[] = string[], which aligns with common conventions for handling multiple selections.\r\n\r\nThis improvement enhances the usability and clarity of the Hono framework when dealing with multiple checkboxes in user requests. Your feedback and review on this pull request are highly appreciated. Thank you!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1897948532},{"id":1898024127,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1462","title":"feat: Refactor ClientRequest Type for header validation","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\n\r\nThe changes are aimed at improving the type safety when dealing with client requests that include headers. \r\nBy enforcing the validation at the type level, we can catch potential issues earlier in the development process, reducing the risk of runtime errors.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1898024127},{"id":1898171881,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1463","title":"Add support for Stormkit","body":"### What is the feature you are proposing?\n\nHi 🙌🏻\r\n\r\nFounder of [Stormkit](https://www.stormkit.io) here.\r\n\r\nWe are a platform as a service for Javascript applications. We support serverless functions and static websites. \r\n\r\nRecently, I was playing with Hono and when I run `npm create hono@latest my-app`  I receive the following options:\r\n\r\n- aws-lambda\r\n- bun\r\n- cloudflare-pages\r\n- cloudflare-workers\r\n- deno\r\n- fastly\r\n- lagon\r\n- lambda-edge\r\n- netlify\r\n- nextjs\r\n\r\nWould it be possible to include Stormkit here? Our cloud platform runs on AWS Lambdas. ","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1898171881},{"id":1898895003,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1464","title":"Shortcomings with client `$url` method","body":"### What is the feature you are proposing?\r\n\r\nHi @yusukebe, I recently added this feature. https://github.com/honojs/hono/pull/1384\r\n\r\nHowever, the `URL` type doesn't include the route `method` (e.g. GET, POST, ...), a critical part of the shape of a route.  For example, when mocking responses using this new `$url` method:\r\n\r\n```\r\nconst fetchMock = getMiniflareFetchMock()\r\n\r\nconst { hostname, pathname } = hc<AppType>('http://localhost:3000').v1.deployment.$url()\r\n\r\nfetchMock\r\n        .get(hostname)\r\n        .intercept({\r\n          method: \"POST\", <-- there's no way to get this from the $url 😢 \r\n          path: pathname,\r\n        })\r\n        .reply(200)\r\n```\r\n\r\nWanted to get your thoughts on possibly improving `$url` to include `method`, or possibly adding a `$request` method that returns the `Request` type\r\n\r\n```\r\nconst { method } = hc<AppType>('http://localhost:3000').v1.deployment.$request()\r\nconsole.log(method) // POST\r\n```\r\n\r\nInterested in your thoughts on this. I'd be happy to make any desired changes.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1898895003},{"id":1899368808,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1466","title":"fix(types): middleware with different env types","body":"Fix #1445 #1460\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899368808},{"id":1899376568,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1467","title":"Commitlint CI","body":"### What is the feature you are proposing?\n\nAlmost of Hono community's commit messages and pull request titles are following [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) format.\r\nAs for the title of the PR, how about making sure to include a Commitlint CI at this time?","state":"open","labels":"[\"enhancement\",\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899376568},{"id":1899413118,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1470","title":"fix(type): check 1st arg of middleware is `string`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899413118},{"id":1899427892,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1471","title":"fix(types): return types of `jsonT()` should be union","body":"Fix #1446\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899427892},{"id":1899430455,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1472","title":"feat: expose the Jwt fucntions under the 'hono/jwt' path","body":"Expose the `sign`, `verify` and `decode` functions under `hono/jwt`\r\n\r\nUsage: \r\n\r\n```js\r\nimport { decode, sign, verify } from 'hono/jwt'\r\n```\r\n\r\nCloses #1443","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899430455},{"id":1899441938,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1473","title":"fix(types): support infering path types for multiple handlers","body":"Fix #1431\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899441938},{"id":1899603539,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1474","title":"chore(benchmark): add memoirist router","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899603539},{"id":1899663274,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1475","title":"Single route router","body":"### What is the feature you are proposing?\r\n\r\nI'm building a CloudFlare Worker that only does a single task (sends email) and therefore doesn't really need a router. I'm using Hono because I want nicer request/response handling and middleware.\r\n\r\nI'm proposing a \"no router\" or \"single route router\" to keep things even lighter.\r\n\r\nIf something like this is already possible, then documenting it would be useful since I'm not the only one who would want to use Hono for their single-task workers.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899663274},{"id":1899777503,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1476","title":"feat(client) add cookie type validate","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### What this PR do?\r\n1. Implemented type checking for Cookies using the Hono client.\r\n2. Modified the args arguments to also handle cookie and header.\r\n\r\nBy incorporating type checking for Cookies through the Hono client, \r\nwe aim to improve security and data integrity. \r\nAdditionally, by allowing args to handle both cookie and header, \r\nwe expand our capacity to address a broader range of validation scenarios.\r\n\r\nThis branch is branched off from the fixes in #1462\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899777503},{"id":1899922908,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1477","title":"Select which endpoint is protected with jwt","body":"### What is the feature you are proposing?\r\n\r\nBasicaly, I see [here](https://hono.dev/middleware/builtin/bearer-auth) how to protect a single endpoint with a bearer token. In addition, I see [this](https://hono.dev/middleware/builtin/jwt) to implement authentication by verifying the token with JWT. \r\nHowever, while in the first case you can select one by one the endpoints that you want to protect, in the second case it is established that all endpoints with a route `/auth/*` will be protected, It would be nice to implement jwt token verification as in the first case.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1899922908},{"id":1900024697,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1478","title":"make context available within JSX similar to children","body":"### What is the feature you are proposing?\n\nUnless there is already a way to manage globals that isn't just an actual global `let`, I'm thinking it might be nice to have things like`c.get` within JSX for shared variables to get around things like prop-drilling that would normally be handled by React's Context API.\r\n\r\nInterested to hear what others think about this idea, or if this is an obviously bad idea.  There are probably other ways to achieve this result, but I thought it could be handled by the JSX middleware.\r\n\r\nexample typedef: `type FC<T = Props> = (props: T & { children?: Child; c: Context }) => HtmlEscapedString`","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1900024697},{"id":1900159340,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1479","title":"Request for Next.js App router mode support","body":"### What is the feature you are proposing?\n\n## Overview\r\nThe current `hono/vercel` doesn't appear to support the App Router mode of Next.js 13.\r\nApp Router is recommended by Vercel and should be supported.\r\n\r\n## Detail\r\nIn App router mode in Next.js 13, I got this error with `/api` route created as [documented](https://hono.dev/getting-started/vercel).\r\n```\r\n- error Detected default export in '{MASKED}/hono-next13-support-repro/src/app/api/[...route]/route.ts'. Export a named export for each HTTP method instead.\r\n- error No HTTP methods exported in '{MASKED}/hono-next13-support-repro/src/app/api/[...route]/route.ts'. Export a named export for each HTTP method.\r\n```\r\n(but moved the file location from `/pages/api/[...route].ts` to `/app/api/[...route]/route.ts`. See [this document](https://nextjs.org/docs/app/building-your-application/routing/route-handlers) for details.)\r\n\r\nI think this error is caused by the transition from App Routes to Route Handlers, where the function that does the export has been changed from handler() to GET(), etc.\r\n\r\nKeep in mind that if this problem is corrected, it will no longer be compatible with Page Router.\r\n\r\nI've created a [repository](https://github.com/nabeken5/hono-next13-support-repro) that reproduces this issue, please refer to it.\r\n\r\n## Proposed Solution\r\n\r\n- Rename the current `handle` function to something like `legacyHandle`.\r\n- Create a new `handle` function that exports a function that resolves requests per mesot.\r\n  I don't think it is very cool to import & export handle functions separately for each method used.\r\n  It would be nice if it could be solved with one function as it is now, but I don't know of any way to do that.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1900159340},{"id":1900282572,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1480","title":"Server stops if client interrupts during c.stream response","body":"### What version of Hono are you using?\n\nv3.7.0-rc.1\n\n### What runtime/platform is your app running on?\n\nnodejs\n\n### What steps can reproduce the bug?\n\nThe following error occurs when disconnecting on the client side\r\n\r\n```bash\r\nnpm run start\r\n\r\n> start\r\n> tsx src/index.ts\r\n\r\nError [ERR_STREAM_PREMATURE_CLOSE]: Premature close\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:496:5)\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at ServerResponse.onclose (node:internal/streams/end-of-stream:154:30)\r\n    at ServerResponse.emit (node:events:526:35)\r\n    at ServerResponse.emit (node:domain:489:12)\r\n    at emitCloseNT (node:_http_server:996:10)\r\n    at Socket.onServerResponseClose (node:_http_server:278:5)\r\n    at Socket.emit (node:events:526:35)\r\n    at Socket.emit (node:domain:489:12)\r\n    at TCP.<anonymous> (node:net:323:12) {\r\n  code: 'ERR_STREAM_PREMATURE_CLOSE'\r\n}\r\nnode:internal/errors:496\r\n    ErrorCaptureStackTrace(err);\r\n    ^\r\n\r\nTypeError [ERR_INVALID_STATE]: Invalid state: WritableStream is closed\r\n    at __node_internal_captureLargerStackTrace (node:internal/errors:496:5)\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at writableStreamClose (node:internal/webstreams/writablestream:696:7)\r\n    at writableStreamDefaultWriterClose (node:internal/webstreams/writablestream:1076:10)\r\n    at WritableStreamDefaultWriter.close (node:internal/webstreams/writablestream:472:12)\r\n    at StreamingApi.close (/home/ubuntu/environment/my-app/node_modules/hono/dist/cjs/utils/stream.js:45:23)\r\n    at <anonymous> (/home/ubuntu/environment/my-app/node_modules/hono/dist/cjs/context.js:182:39)\r\n    at <anonymous> {\r\n  code: 'ERR_INVALID_STATE'\r\n}\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nChatGPT has asked about the following issues. Reference.\r\n\r\n```text\r\n1. Add a property to the StreamingApi class to track if the stream is closed.\r\n2. In the write and writeln methods, skip writing if the stream is closed.\r\n3. In the stream method, call stream.close() when the execution of cb(stream) completes (or if an error occurs).\r\n```\r\n\r\n```ts\r\nexport class StreamingApi {\r\n  private writer: WritableStreamDefaultWriter<Uint8Array>;\r\n  private encoder: TextEncoder;\r\n  private writable: WritableStream;\r\n  private closed: boolean = false; // Added: Track whether the stream is closed\r\n\r\n  constructor(writable: WritableStream) {\r\n    this.writable = writable;\r\n    this.writer = writable.getWriter();\r\n    this.encoder = new TextEncoder();\r\n  }\r\n\r\n  async write(input: Uint8Array | string) {\r\n    if (this.closed) return; // Added: Skip writing if the stream is closed\r\n    if (typeof input === 'string') {\r\n      input = this.encoder.encode(input);\r\n    }\r\n    await this.writer.write(input);\r\n    return this;\r\n  }\r\n\r\n  async writeln(input: string) {\r\n    if (this.closed) return; // Added: Skip writing if the stream is closed\r\n    await this.write(input + '\\n');\r\n    return this;\r\n  }\r\n\r\n  close() {\r\n    this.closed = true; // Added: Close the stream\r\n    this.writer.close();\r\n  }\r\n\r\n  // ... (streamText and stream methods remain the same)\r\n\r\n  stream = (\r\n    cb: (stream: StreamingApi) => Promise<void>,\r\n    arg?: StatusCode | ResponseInit,\r\n    headers?: HeaderRecord\r\n  ): Response => {\r\n    const { readable, writable } = new TransformStream();\r\n    const stream = new StreamingApi(writable);\r\n    cb(stream).catch((err) => {\r\n      console.error('Stream error:', err);\r\n    }).finally(() => {\r\n      stream.close(); // Added: Close the stream once cb execution is complete\r\n    });\r\n\r\n    // ... (rest of the code remains the same)\r\n  };\r\n}\r\n\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1900282572},{"id":1902571043,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1482","title":"fix(context): fix `c.stream()` and `c.streamText()` matters","body":"This PR includes these fixes:\r\n\r\n* Make the response headers of `c.streamText()` correct.\r\n* Make `text/plain; charset=UTF-8` as the variable to reduce bundle size.\r\n* Handling errors and ignoring them. If there is an error throw, the process may stop. And also, tracing an error may get in the way. So, I decided to do nothing in the catch.\r\n\r\nErrors are as follows. Occurs when accessing while it is streaming.\r\n\r\n<img width=\"708\" alt=\"Screenshot 2023-09-19 at 18 28 02\" src=\"https://github.com/honojs/hono/assets/10682/fe321cef-712d-4351-bbc0-44f38847cb5d\">\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1902571043},{"id":1903505851,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1484","title":"Type Error in JWT util","body":"### What version of Hono are you using?\r\n\r\n3.6.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nAdding\r\n`const token = await Jwt.sign(payload, secretKey, 'HS384')`\r\nThere is an error for the alg parameter stating\r\n`Argument type \"HS384\" is not assignable to parameter type AlgorithmTypes | undefined`\r\n\r\nDue to the fact it is expecting a enum. The enum is not exported as well, so `Jwt.AlgorithmTypes.HS384` will not work\r\n\r\n### What is the expected behavior?\r\n\r\nA string parameter should still work, which seems to be the intended use.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nI have a fix for this and am willing to implement it. But it depends if you want to allow string input or export the enum and be called with `Jwt.AlgorithmTypes`","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1903505851},{"id":1904039457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1485","title":"fix(jwt): avoid using `enum`","body":"Fix #1484\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1904039457},{"id":1905625975,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1487","title":"fix(jwt): incorrect error message","body":"### Description\r\n\r\nThe error message is a duplicate of line 14 `JwtTokenInvalid` and is no descriptive to the actual cause of the issue.\r\n\r\n### Updated \r\n\r\nUpdated the error message to align with the name of the error\r\n\r\n### Author should do the followings, if applicable\r\n- N/A: Add test\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1905625975},{"id":1905916714,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1488","title":"feat: include multivalue form data as an array","body":"In a `multipart/form-data` or a `application/x-www-form-urlencoded` POST request, if there are multiple values for a given field name (key), `c.req.parseBody()` will not only include one of them.\r\n\r\nThis makes it so that when using `c.req.parseBody()`, if there are multiple values for a given key, they'll be included in an array.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1905916714},{"id":1905984278,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1489","title":"Next","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1905984278},{"id":1906025609,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1491","title":"Add support for reverse proxy","body":"### What is the feature you are proposing?\n\nI hope to add support for reverse proxy. It supports functions similar to http-proxy-middilware in hono app.use. If someone can tell me how hono implements the reverse proxy function of cfworkers, it would also be great.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1906025609},{"id":1906037410,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1492","title":"Export Testing Helper and JWT Helper for **Deno**","body":"### What is the feature you are proposing?\n\nWe forgot it:\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/helper.ts","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1906037410},{"id":1907795335,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1493","title":"fix(deno): export `testing` helper","body":"Fix #1492\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1907795335},{"id":1908080564,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1495","title":"testClient doesn't quite work with route groupings","body":"### What version of Hono are you using?\n\n3.7.1\n\n### What runtime/platform is your app running on?\n\nLocally\n\n### What steps can reproduce the bug?\n\n```js\r\n// Base server\r\nconst server = new Hono(); \r\n\r\n// Create sub-app (route groupings)\r\nconst routes1 = new Hono().get('/search1/abc', (c) => c.jsonT({ hello: 'world' }));\r\nconst routes2 = new Hono().get('/search2', (c) => c.jsonT({ hello: 'world' }));\r\n\r\n// Attach sub-apps (groupings) to base server\r\nserver.route('/routes1', routes1);\r\nserver.route('/routes2', routes2);\r\n\r\ntestClient(routes1).search1.abc // Works\r\ntestClient(routes2).search2 // Works\r\ntestClient(server).routes1 // Does not work\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1908080564},{"id":1908178377,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1496","title":"Introduce \"Context\" API and \"renderer\" for JSX.","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1908178377},{"id":1909668881,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1499","title":"c.req.json() throws an error if c.req.text() has been called before","body":"### What version of Hono are you using?\n\n3.7.1\n\n### What runtime/platform is your app running on?\n\nNode.js, Cloudflare Workers\n\n### What steps can reproduce the bug?\n\nhttps://github.com/lacolaco/hono-body-reuse-issue-repro/blob/main/index.js\r\n\r\n- Read `c.req.text()` \r\n- Then, read `c.req.json()` \r\n- It throws an error `TypeError: Body is unusable`\r\n\r\n`json()` and `text()` can be swapped. And it is no problem when reading the body by the same method like `text()` -> `text()`. \n\n### What is the expected behavior?\n\nI read the past release note and expected the body content to be cached. But that is wrong.\r\n\r\nhttps://github.com/honojs/hono/pull/1333\r\n\r\nThat behavior, reading the body via different methods is not cached and throws the error, is acceptable to me. But I hope that the use case is supported in another way. \r\n\r\nCurrently, I can avoid the error by using `c.req.raw.clone().text()` but this is verbose. So I propose...\r\n\r\n1. HonoRequest has its own `clone()`-like API to reduce `.req.raw` access.\r\n2. Something like `c.req.text({clone: true})` ? (Honestly, I don't think this is better)\r\n\r\nAnyway, my thought is just \"c.req.raw.clone().text() is verbose\". \r\n\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nMy use case is the verification of HTTP header signatures to implement Discord bot interactions. It requires reading the request body.\r\n\r\nhttps://discord.com/developers/docs/interactions/receiving-and-responding#security-and-authorization\r\n\r\n```ts\r\nconst verifyKeyMiddleware =\r\n  (): MiddlewareHandler<{ Bindings: Env }> => async (c, next) => {\r\n    const signature = c.req.header('X-Signature-Ed25519');\r\n    const timestamp = c.req.header('X-Signature-Timestamp');\r\n    const body = await c.req.raw.clone().text();\r\n    const isValidRequest =\r\n      signature &&\r\n      timestamp &&\r\n      verifyKey(body, signature, timestamp, c.env.DISCORD_PUBLIC_KEY);\r\n    if (!isValidRequest) {\r\n      console.log('Invalid request signature');\r\n      return c.text('Bad request signature', 401);\r\n    }\r\n    return await next();\r\n  };\r\n```","state":"open","labels":"[\"enhancement\",\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1909668881},{"id":1909893739,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1500","title":"fix(utils/buffer): fix `bufferToFormData()`","body":"This PR may fix https://github.com/honojs/node-server/issues/85.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1909893739},{"id":1910424558,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1501","title":"Support for JWT Payload to allow different types of date inputs","body":"### What is the feature you are proposing?\n\nCurrently in the payload you can provide, `iat`, `exp`, and `nbf`. However, the value have to be a unix epoch with no milliseconds. I am proposing support for:\r\n\r\n- `Date.now()` - with milliseconds\r\n- `new Date()`\r\n- A string like `30d`\r\n\r\nTo be able to be converted to the respective time in epoch automatically. \r\n\r\nI will submit a draft PR as a proof on concept and if this is something we can incorporate I will write the test for it as well.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1910424558},{"id":1910424620,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1502","title":"feat(jwt): add support for different date formats","body":"A draft PR for #1501 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1910424620},{"id":1910753529,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1503","title":"Cannot set statusText and default HTTP statusText per status not supplied","body":"### What version of Hono are you using?\n\n3.7.2\n\n### What runtime/platform is your app running on?\n\nBun, Node\n\n### What steps can reproduce the bug?\n\nreturn a new `Response` from any handler, for instance\r\n\r\n```ts\r\nreturn new Response('I am the payload', {\r\n    status: 200,\r\n    statusText: 'OK,\r\n });\r\n```\r\n\r\nmake a request to this endpoint, observe statusText returned as `''`\n\n### What is the expected behavior?\n\nstatusText should be used from the supplied `Response` if available and default to the spec values https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n\n### What do you see instead?\n\nand empty string\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1910753529},{"id":1911148522,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1504","title":"feat(helper): streaming-sse","body":"As I work on supporting SSE for the Lambda Adaptor, I am creating a general-purpose helper. The reason the test code is inadequate is because of the lock error I'm encountering. If you're open to embracing this helper, I would greatly appreciate any insights or ideas you might have on this.\r\n\r\n```bash\r\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\r\n\r\nVitest caught 1 unhandled error during the test run.\r\nThis might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.\r\n\r\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Rejection ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\r\nTypeError: Invalid state: WritableStream is locked\r\n ❯ new NodeError node:internal/errors:405:5\r\n ❯ setupWritableStreamDefaultWriter node:internal/webstreams/writablestream:594:11\r\n ❯ new WritableStreamDefaultWriter node:internal/webstreams/writablestream:402:5\r\n ❯ WritableStream.getWriter node:internal/webstreams/writablestream:264:12\r\n ❯ new StreamingApi src/utils/stream.ts:8:28\r\n      6|   constructor(writable: WritableStream) {\r\n      7|     this.writable = writable\r\n      8|     this.writer = writable.getWriter()\r\n       |                            ^\r\n      9|     this.encoder = new TextEncoder()\r\n     10|   }\r\n ❯ new SSEStreamingApi src/helper/stream/index.ts:12:5\r\n ❯ src/helper/stream/index.ts:38:20\r\n ❯ Context.stream src/context.ts:396:5\r\n ❯ Module.streamAsSSE src/helper/stream/index.ts:37:12\r\n ❯ src/helper/stream/index.test.ts:10:17\r\n\r\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\r\nSerialized Error: { code: 'ERR_INVALID_STATE' }\r\nThis error originated in \"src/helper/stream/index.test.ts\" test file. It doesn't mean the error was thrown inside the file itself, but while it was running.\r\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\r\n\r\n Test Files  52 passed (52)\r\n      Tests  815 passed (815)\r\n     Errors  1 error\r\n   Start at  09:58:26\r\n   Duration  22.17s (transform 7.42s, setup 16ms, collect 23.54s, tests 16.66s, environment 8.90s, prepare 37.28s)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1911148522},{"id":1912170293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1506","title":"Fix for \"Web Framework Benchmark\"","body":"### What is the feature you are proposing?\r\n\r\nThe following benchmark results show a very low score for Hono:\r\n\r\n[Web Frameworks Benchmark](https://github.com/the-benchmarker/web-frameworks)\r\n\r\nThis is because it is failing to fork the process in `pm2`.\r\n\r\n<img width=\"1270\" alt=\"Screenshot 2023-09-26 at 4 38 58\" src=\"https://github.com/honojs/hono/assets/10682/de026573-867c-4873-9b5b-f77efa68a261\">\r\n\r\nOnly one process is up and running because of a port conflict.\r\n\r\n<img width=\"1031\" alt=\"Screenshot 2023-09-26 at 4 40 26\" src=\"https://github.com/honojs/hono/assets/10682/d6941b4b-3aa7-48d6-b7f8-b4179d1bc1a1\">\r\n\r\nI can think of several ways, anyway we have to resolved it.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1912170293},{"id":1912991523,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1508","title":"File Objects posted with `multipart/form-data` are not parsed into a File","body":"### What version of Hono are you using?\n\n3.7.2 (latest)\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers (miniflare)\n\n### What steps can reproduce the bug?\n\nrepro repo: https://github.com/sor4chi/hono-repro-file-parse-body\r\n\r\n\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.post('/', async (c) => {\r\n  const formData = await c.req.parseBody()\r\n  const file = formData['file']\r\n\r\n  if (file instanceof File) {\r\n    return c.text('File!')\r\n  }\r\n  return c.text('Not File!')\r\n})\r\n\r\nconst formData = new FormData()\r\nconst file = new File(['Hello Hono Storage 1\\n'], 'sample1.txt')\r\nformData.append('file', file)\r\n\r\nconst res = await app.request('http://localhost/', {\r\n  method: 'POST',\r\n  body: formData,\r\n})\r\n\r\nconsole.log(await res.text()) // expected: \"File!\", actual: \"Not File!\"\r\n```\n\n### What is the expected behavior?\n\nThe posted files parse to File object.\n\n### What do you see instead?\n\nThe posted files parse to File string.\n\n### Additional information\n\nhttps://twitter.com/monica18_pr/status/1706194484864958708","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1912991523},{"id":1915765317,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1512","title":"Grouped routing breaks RPC types","body":"### What version of Hono are you using?\r\n\r\n3.7.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nN/A\r\n\r\n### What steps can reproduce the bug?\r\n\r\nHere is a reproduction. I have followed the RPC and grouped routing steps from the docs.\r\n\r\nhttps://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAIgAt0JiBuAKFElkTlIGNs8CiyKB6FgG2ABTNDGo0aLdAGd4AIwgQA1tLgBeOGiEB3FBQAUASlo0Fy6QDoA5kJj7iPYgBo4+lofUA+RDThwotgCuUGhwLBYAVtLoACr6CL5+cGYqAFxwMFCBQk6JWMY0+SZSaLJwAIZgYOqaOnoYRrQlZQSBMEKqGpVgFq3t9jwp0s7JiioFNDAAnmBCcACCVTEzcxrTsxC4-hBtHcUy8ALCojWsADyLYMuznvakMDBgqTw8-BAs5fzksqkAHADsAMcBSScBecAAegB+CTlaRTNBsXCBREwYDoOAgcrANBGHyg5rwALSSClVYVbTYw6CEQwCxDCwAEhsdhBSWaEH4Qgsbys+mJpOkQgKWAkWJxjRoQA\r\n\r\n### What is the expected behavior?\r\n\r\nYou should be able to write this without type errors. At least, there is nothing in the docs that says that this doesn't work.\r\n\r\n```ts\r\nclient.books.$get()\r\n```\r\n\r\n### What do you see instead?\r\n\r\nYou cannot write the above code without type errors\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1915765317},{"id":1916337567,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1513","title":"Weird 500 error during routing","body":"### What version of Hono are you using?\n\n3.7.2\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\n```js\r\nimport { Hono } from 'hono';\r\nimport {serve} from \"@hono/node-server\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get('/:url{.*}', async (ctx) => {\r\n\r\n    // I want receive ctx.req.param('url');\r\n\r\n    return ctx.html(\"ok\");\r\n});\r\n\r\nserve(app);\r\n```\n\n### What is the expected behavior?\n\nI want receive `ctx.req.param('url')` without problems for any requested path.\n\n### What do you see instead?\n\nAbsolutely empty 500 error\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1916337567},{"id":1916615386,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1514","title":"add a  method that returns the Request for a given route to hono client","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1916615386},{"id":1916887360,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1515","title":"ctx.response helper","body":"### What is the feature you are proposing?\n\nFirst of all, I want to thank you for a great and functional framework! I enjoy using it.\r\n\r\n--- \r\n\r\nI think it would be very useful to have a `ctx.response()` method that would receive a fetch call promise and return immediately the formed response, including content, headers, status, etc.\r\n\r\nFor example, the following queries:\r\n\r\n- `return ctx.response(fetch('https://super.site.com'));` will return html with correct content-type\r\n- `return ctx.response(fetch('https://super.site.com/some/path'));` will return html with correct content-type\r\n- `return ctx.response(fetch('https://super.site.com/app.js'));` will return js content with correct content-type\r\n- `return ctx.response(fetch('https://super.site.com/app.css'));` will return css content with correct content-type\r\n- `return ctx.response(fetch('https://super.site.com/app.png'));` will return image content with correct content-type\r\n\r\n--- \r\n\r\nI completely understand that this can be done manually using the `new Response()`, but it will be much more comfortable that way.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1916887360},{"id":1917214786,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1516","title":"crypto is not defined，when i use vitest","body":"### What version of Hono are you using?\n\n3.7.2\n\n### What runtime/platform is your app running on?\n\nnodejs\n\n### What steps can reproduce the bug?\n\nit's a simple case\r\n\r\n```typescript\r\nexport const buildToken = async (data: any, exp: number = expDefault) => {\r\n  const now = Date.now();\r\n  const nowWithoutMilliseconds = Math.floor(now / 1000);\r\n  return await sign(\r\n    {\r\n      exp: nowWithoutMilliseconds + exp,\r\n      data,\r\n    },\r\n    keys().jwt,\r\n  );\r\n};\r\n```\r\n\r\nwhen i use vitest\r\n```typescript\r\nit(\"build token\", async () => {\r\n  const token = await buildToken({\r\n    id: 1,\r\n    phone: \"19977775555\",\r\n  });\r\n  expect(typeof token).toBe(\"string\");\r\n});\r\n```\n\n### What is the expected behavior?\n\nworking\n\n### What do you see instead?\n\ni got exception `crypto is not defined`\r\n\r\nstacks:\r\n\r\n```\r\n\r\nReferenceError: crypto is not defined\r\n    at signing (file:///D:/code/node/mono-container/node_modules/hono/dist/utils/jwt/jwt.js:44:3)\r\n    at Module.sign (file:///D:/code/node/mono-container/node_modules/hono/dist/utils/jwt/jwt.js:61:31)\r\n    at Module.buildToken (D:\\code\\node\\mono-container\\src\\utils\\func.ts:35:16)\r\n    at D:\\code\\node\\mono-container\\src\\utils\\token.spec.ts:7:19\r\n    at file:///D:/code/node/mono-container/node_modules/@vitest/runner/dist/index.js:120:14\r\n    at file:///D:/code/node/mono-container/node_modules/@vitest/runner/dist/index.js:58:26\r\n    at file:///D:/code/node/mono-container/node_modules/@vitest/runner/dist/index.js:546:59\r\n    at Array.map (<anonymous>)\r\n    at callSuiteHook (file:///D:/code/node/mono-container/node_modules/@vitest/runner/dist/index.js:546:47)\r\n    at runTest (file:///D:/code/node/mono-container/node_modules/@vitest/runner/dist/index.js:620:30)\r\n\r\n```\n\n### Additional information\n\nadd `import crypto from \"crypto\";` to `node_modules/hono/dist/utils/jwt/jwt.js`\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1917214786},{"id":1917378965,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1517","title":"add Server Stop Method","body":"```javascript\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", async (c) => {\r\n\r\n   app.stop(5000) // Server stopped responding for 5 seconds\r\n\r\n   return c.text(\"hey Hono🔥\")\r\n})\r\n```\r\n\r\nAlso started by `app.resume()`. \r\n`app.resume(1000)` Starts after one second.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1917378965},{"id":1917875777,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1518","title":"Cannot response HTTP code 204 when using `context.json()`","body":"### What version of Hono are you using?\n\n3.7.2\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\n- Setup a Node/Hono server\r\n- Implement below code\r\n```ts\r\nconst app = new Hono();\r\napp.delete('...', async (context: Context) => {\r\n  const categoryId = context.req.param(\"category-id\");\r\n\r\n const \r\n\r\n  // If not found the category\r\n  if (response === 0) {\r\n    context.status(204);\r\n    return context.json(\r\n        { data: [], message: t(\"routes.video_categories.category_not_found\") }\r\n    );\r\n  }\r\n  return context.json({ id: categoryId });\r\n});\r\n\r\n// Hosting the app\r\n```\r\n- Request DELETE / and an exception was occurred\r\n```\r\nTypeError: Response constructor: Invalid response status code 204\r\n\r\n```\n\n### What is the expected behavior?\n\nI expected this implemented code should response 204 (No content) data\n\n### What do you see instead?\n\n```\r\nTypeError: Response constructor: Invalid response status code 204\r\n\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1917875777},{"id":1918081351,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1521","title":"typo on site","body":"### What version of Hono are you using?\n\nlatest\n\n### What runtime/platform is your app running on?\n\nweb\n\n### What steps can reproduce the bug?\n\n[on site](https://hono.dev/api/routing#including-slashes) \r\n\r\nI see example\r\n\r\n```js\r\napp.get('/posts/:filename{.+.png$}', (c) => {\r\n  //...\r\n})\r\n```\r\n\r\nBut this regexp is incorrect because when we want paths with `.png`, we have to escape dot\r\n\r\nSo example have to be\r\n\r\n```js\r\napp.get('/posts/:filename{.+\\\\.png$}', (c) => {\r\n  //...\r\n})\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1918081351},{"id":1918311250,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1522","title":"fix(types): fix inferring path strings for an optional parameter with regexp","body":"Fix the issue in this comment: https://github.com/honojs/hono/issues/1513#issuecomment-1738890316\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1918311250},{"id":1918496158,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1523","title":"feat(adaptor): Accessable Lambda \"Context\"","body":"Ref: https://github.com/orgs/honojs/discussions/1519\r\n\r\nLambda \"Context\"\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/typescript-context.html\r\n\r\n```ts\r\n  app.get('/lambda-context', (c) => {\r\n    const fnctx = c.env.lambdaContext\r\n    console.log(fnctx..callbackWaitsForEmptyEventLoop)\r\n    return c.json(fnctx)\r\n  })\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1918496158},{"id":1918780025,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1524","title":"Faster (verification required).","body":"Guess the format of the path ahead of time and unused the routers that are not match.\r\n\r\nThe following benchmark results were obtained in my environment.\r\n\r\n```\r\n# Env\r\ncodespaces 4 Core / 16GB RAM\r\n\r\nBenchmark result\r\n\r\n# After\r\n332,013 ops\r\n333,485 ops\r\n338,571 ops\r\n\r\n# Before\r\n303,517 ops\r\n324,878 ops\r\n330,072 ops\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1918780025},{"id":1919976365,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1525","title":"feat(jwt): add optional flag for middleware","body":"I added the option to disable the HTTP 401 response when using the JWT middleware. That way API routes can still make use of the payload context without necessarily requiring users to be authenticated to access the route.\r\n\r\n```js\r\napp.use(path, jwt({\r\n  secret: ...,\r\n  optional: true\r\n}));\r\n```\r\n\r\nHappy to submit a PR for the website docs as well, or whatever else you may need.\r\n\r\nThanks for all of your work on Hono, it's a joy to work with!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1919976365},{"id":1919998474,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1526","title":"Response headers get discarded without using context","body":"### What version of Hono are you using?\n\n3.7.2\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nSending a response using any context method i.e `html`, `text` etc doesn't work the same way when you just return a `Response` object. Headers don't get set when using `Response`\r\n\r\n```js\r\nconst app = new Hono();\r\n\r\napp.get('/', ctx => {\r\n  setCookie(ctx, 'cookie', 'value');\r\n  return ctx.text('html')\r\n})\r\n```\r\n\r\nThe cookie header gets discarded in the example below, while it works fine in the example above\r\n\r\n```js\r\nconst app = new Hono();\r\n\r\napp.get('/', ctx => {\r\n  setCookie(ctx, 'cookie', 'value');\r\n  return new Response('html', {'Content-Type': 'text/html'})\r\n})\r\n```\n\n### What is the expected behavior?\n\nThere should be not difference in behaviour, cookies should get set in both scenarios\n\n### What do you see instead?\n\nCookies get discarded in the other example\n\n### Additional information\n\n[Reproduction](https://github.com/joshamaju/hono-handler-response-issue)","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1919998474},{"id":1920005937,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1527","title":"Support for multiple file uploads under the same key","body":"Currently it's not possible to handle multiple files uploaded at once (`<input type=\"file\" name=\"...[]\" multiple />`) while using validators or `parseBody`. Looks like this is because any arrays that are uploaded get stringified:\r\n\r\nhttps://github.com/honojs/hono/blob/dddd4978d81cbc526622f14a74d8ca41dc1126b9/src/utils/body.ts#L20-L22\r\n\r\nWorkaround is available by using `await c.req.formData()` and manually building the array.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1920005937},{"id":1920273888,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1528","title":"feat: `parseBody()` for multi values' field","body":"### Author should do the followings, if applicable\r\n\r\nHi @yusukebe \r\nThis is an implemention of the suggesion in #1018\r\nAs you mention, this changes have backward compatible.\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1920273888},{"id":1921185036,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1529","title":"Return type of `get` method on `Hono`'s subclass is `Hono`, not the subclass","body":"### What version of Hono are you using?\n\n3.7.3\n\n### What runtime/platform is your app running on?\n\nN/A (my issue is about typing, not a runtime problem)\n\n### What steps can reproduce the bug?\n\nWhen you define a class extending `Hono` and call a `get` method (or other similar ones), the return value is inferred to be `Hono` instead of the subclass.\r\n\r\nBelow is a reproduction code and [the corresponding playground link](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAIgAt0JiBuAKBoGMAbAQwGdW4BZATwGEBXVjEKoMcAKYAPGOLQATDqMwIacOPXRCo-esKgAKYGmAwA-AC44vTTG27oABWZRmIcTKisAPDG5hxELgoFAB8ANoADAC6AJSIqmpwrPz+BkYmMbRqWAn0gsIgnO7kcvpxKolwUO78UGhwMKTArFnYNDkMNngQmAC8cGjiAO7BGGUAdADm7vrEAPTEADRw+vRxvSHq4zLSs8jijIwQAITEMZk0c3OVAHqmnWhCcABGznD9gyM8AkIiFBPTGCzBbLVbrTb0bZSIHEfaHTDJZ5MNisU7nWhXW73DSPeCvABe7wGwy4fHyfzGMXGeV+hWKEFKF0xiTuNCAA):\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\nclass MyCustomHono extends Hono {\r\n  constructor(init?: ConstructorParameters<typeof Hono>[0]) {\r\n    super(init);\r\n  }\r\n  customMethod() {\r\n    return this;\r\n  }\r\n}\r\n\r\nconst foo = new Hono().get(\"/\", (c) => c.text(\"Hello!\"));\r\n//    ^? const foo: Hono<Env, ToSchema<\"get\", \"/\", unknown, {}>, \"/\">;\r\nconst bar = new MyCustomHono().get(\"/\", (c) => c.text(\"Hello subclass!\"));\r\n//    ^? const bar: Hono<Env, ToSchema<\"get\", \"/\", unknown, {}>, \"/\">;\r\nconst baz = new MyCustomHono().customMethod();\r\n//    ^? const baz: MyCustomHono\r\n```\n\n### What is the expected behavior?\n\n`bar` is inferred to be `MyCustomHono`.\n\n### What do you see instead?\n\n`bar` is inferred to be `Hono`.\n\n### Additional information\n\nA real world example of this issue would be `@hono/zod-openapi` and I actually found this behavior in [that situation](https://github.com/yudai-nkt/hono-zod-openapi-html#possible-contributions-to-the-ecosystem).","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1921185036},{"id":1921236417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1530","title":"Rename `middleware` to `createMiddleware`","body":"### What is the feature you are proposing?\n\nI want to rename `middleware()` in `hono/factory` to `createMiddleware()`. That way it is easier to understand what we want to do.\r\n\r\n```ts\r\nimport { createMiddleware } from 'hono/factory'\r\n\r\nconst mw = createMiddleware<{ Variables: Variables }>(async (c, next) => {\r\n  // ...\r\n  await next()\r\n})\r\n```\r\n\r\nIt is an `experimental` API, so we can change it without an announcement.\r\n\r\nBTW, you should use this method when creating middleware. With the following method, you need to write the type, and it may not be able to infer well.\r\n\r\n```ts\r\n/// Not so good:\r\nconst mw = async (c: Context<{ Variables: Variables }>, next: Next) => {\r\n  // ...\r\n  await next()\r\n}\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1921236417},{"id":1921951191,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1531","title":"Add `basePath` option for the constructor of Hono","body":"### What is the feature you are proposing?\n\nNow, to set the \"basePath”, we use the `basePath()` function:\r\n\r\n```ts\r\nconst app = new Hono().basePath('/api')\r\n```\r\n\r\nI propose that we can set the \"basePath\" by passing the `basePath` option to the constructor of `Hono`:\r\n\r\n```ts\r\nconst app = new Hono({\r\n  basePath: '/api'\r\n})\r\n```\r\n\r\nWith this way, we don't have to do `clone()`.\r\n\r\nAlso, since most use cases, user set `basePath()` when instantiating `Hono`, how about deprecating `basePath()` and making it obsolete in v4? We can also remove `clone()`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1921951191},{"id":1923582570,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1532","title":"fix(context): use `FetchEvent` instead of `FetchEventLike`","body":"Fixes #1423\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1923582570},{"id":1923798613,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1534","title":"bun build --target=bun displays [object Object] for JSX","body":"### What version of Hono are you using?\n\n3.7.3\n\n### What runtime/platform is your app running on?\n\nBun 1.0.3\n\n### What steps can reproduce the bug?\n\nindex.tsx\r\n```\r\nimport { Hono } from \"hono\";\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", async (c) => c.html(<div>hello</div>));\r\n\r\nexport default {\r\n  port: 3000,\r\n  fetch: app.fetch,\r\n};\r\n```\r\ntsconfig.json\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"preserve\",\r\n    \"jsxFactory\": \"jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  }\r\n}\r\n```\r\n`bun build ./index.tsx --target=bun --outdir ./build`\r\n`bun run ./build/index.js`\r\n```\r\n// http://localhost:3000\r\n[object Object]\r\n```\n\n### What is the expected behavior?\n\nI expect the webpage to show `hello`\n\n### What do you see instead?\n\nThe webpage return `[object Object]`\n\n### Additional information\n\nThis issue only happens with target=bun\r\n\r\n`bun build ./index.tsx --target=node --outdir ./build` OK\r\n`bun build ./index.tsx --target=browser --outdir ./build` OK\r\n`bun build ./index.tsx --target=bun --outdir ./build` NOT OK","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1923798613},{"id":1924246986,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1535","title":"refactor(hono-base): remove `any` casting","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1924246986},{"id":1924552054,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1537","title":"`RegExpRouter` fails when path regexes include parens","body":"### What version of Hono are you using?\r\n\r\n3.7.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```\r\nconst app = new Hono({\r\n  router: new TrieRouter(),\r\n})\r\napp.get(\"/dyn/:dyn/:service{(a|b)}\", (c) => c.json(c.req.param()))\r\n```\r\n\r\nThe routing behavior is different depending on whether I choose a `TrieRouter` (provides the expected result, working for paths like `/dyn/val/a`) vs `LinearRouter` and others (which lead to an `Internal Server Error`). The specific issue here is about `()` inside the `{}` of a param, but my more general question: are the different router types expected to have different semantics? The docs are all about performance characteristics, rather than any differences in behavior.\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nIf different routers are expected to produce different results, this is important to call out in the docs.\r\n\r\nIf all routers are expected to produce identical results, this would be worth ensuring in the test suite.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1924552054},{"id":1925371413,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1538","title":"waitUntil (executionCtx) issue - [TypeError: Cannot read properties of undefined (reading 'push')]","body":"### What version of Hono are you using?\r\n\r\n3.7.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nVercel Edge Functions (Cloudflare Workers)\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have a Vercel Edge Function that looks like this:\r\n```js\r\nexport const createTodo = async (c: Context) => {\r\n  // ... other code here\r\n  // Send event to Inngest\r\n  c.executionCtx.waitUntil(\r\n    inngest.send({\r\n      name: 'todo.process',\r\n      data: {\r\n        id: 'id_here',\r\n      },\r\n    })\r\n  )\r\n  // Return the data instantly (without waiting for event to finish sending)\r\n  return { data: ... }\r\n}\r\n```\r\n\r\nThis sends an event to Inngest (https://www.inngest.com) using their client.\r\n\r\nHowever, if I do the following (without Hono), it works just fine (no error):\r\n```js\r\nimport type { NextFetchEvent } from 'next/server'\r\nimport { Inngest } from 'inngest'\r\n\r\nexport const config = {\r\n  runtime: 'edge',\r\n}\r\n\r\nconst inngest = new Inngest({ name: 'test' })\r\n\r\nexport default function MyEdgeFunction(\r\n  request: Request,\r\n  context: NextFetchEvent\r\n) {\r\n  context.waitUntil(\r\n    inngest.send({\r\n      name: 'todo.process',\r\n      data: {\r\n        id: 'id_here',\r\n      },\r\n    })\r\n  )\r\n  return new Response(`Hello, from ${request.url} I'm an Edge Function!`)\r\n}\r\n```\r\n\r\nSo i'm assuming this is a Hono specific issue.\r\n\r\n### What is the expected behavior?\r\n\r\nThe Inngest event should be sent just fine (with no error)\r\n\r\n### What do you see instead?\r\n\r\nI'm getting the following error:\r\n\r\n```\r\n[TypeError: Cannot read properties of undefined (reading 'push')]\r\n```\r\n\r\nNothing else besides this.\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1925371413},{"id":1926127358,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1539","title":"HTML is not rendered when using Fragment","body":"### What version of Hono are you using?\r\n\r\n3.7.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\napp.get('/page/test', async (c) => {\r\n    return c.html(<Fragment>{[<div>Hello</div>]}</Fragment>);\r\n});\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nRender HTML `<div>Hello</div>`\r\n\r\n### What do you see instead?\r\n\r\n```\r\ncurl https://hoge.fuga.workers.dev/page/test -i\r\nHTTP/2 200\r\ndate: Wed, 04 Oct 2023 12:32:09 GMT\r\ncontent-type: text/html; charset=UTF-8\r\ncontent-length: 0\r\nreport-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=jXYomZIZXHWPjYdfuV2ve%2BiGlN9l%2FHn%2BRYfpbIa34op8nk5JB9Qb46HJ1EDthvdBzd0y25JuM4ShJCZ0Zs3xkL0KAJvtwyr63G8kdbzsarXa4Yz7zm4UJ1eURBqrnY%2BTB6XjE2L%2ByOfti9yv2KkA87tEmVPmAN3W\"}],\"group\":\"cf-nel\",\"max_age\":604800}\r\nnel: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\r\nserver: cloudflare\r\ncf-ray: 810d7229cce58379-KIX\r\nalt-svc: h3=\":443\"; ma=86400\r\n```\r\n\r\n### Additional information\r\n\r\nI'm using wrangler 3.10.1.\r\n\r\nIn this case, HTML is rendered correctly.\r\n\r\n```ts\r\napp.get('/page/test', async (c) => {\r\n    return c.html(<div>{[<div>Hello</div>]}</div>);\r\n});\r\n```\r\n\r\n```\r\ncurl https://hoge.fuga.workers.dev/page/test -i\r\nHTTP/2 200\r\ndate: Wed, 04 Oct 2023 12:36:55 GMT\r\ncontent-type: text/html; charset=UTF-8\r\ncontent-length: 27\r\nreport-to: {\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=5RphOX%2F7UckzzZUOrLWx7hoRXFS0HWkfkck3p%2Bhc2%2Bk2uNdbfjLRnIC7BLSKPpzrPk0avi1mBwTAoHddTKQuc2%2BYw95K%2B%2F%2FDl1RLROv1LqXb5VlXemFQowNZtZDR%2BEiAvC0Y7kh6TZyMvyklmwDYO1WepUQH17fY\"}],\"group\":\"cf-nel\",\"max_age\":604800}\r\nnel: {\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}\r\nserver: cloudflare\r\ncf-ray: 810d79271ed28a9e-NRT\r\nalt-svc: h3=\":443\"; ma=86400\r\n\r\n<div><div>Hello</div></div>\r\n```\r\n\r\nI noticed this when embedding code that uses the map function as a sub-element of the Fragment component. It wasn't rendering when there was only one element, and upon investigation, I became aware of this issue.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1926127358},{"id":1926304352,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1540","title":"feat: rename middleware to createMiddleware","body":"### Description - \r\nThis PR aims to rename `middleware` to `createMiddleware` in `hono/factory`\r\nCloses: https://github.com/honojs/hono/issues/1530\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1926304352},{"id":1926454027,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1541","title":"fix(jsx): render a child or odd children with `Fragment` correctly","body":"Fixes #1539\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1926454027},{"id":1926501187,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1542","title":"Duplicate param name","body":"### What version of Hono are you using?\r\n\r\n3.7.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nThe following code doesn't work as expected:\r\n\r\n```javascript\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/:type/:url', (c) => {\r\n\tc.text(`type: ${c.req.param('type')}, url: ${c.req.param('url')}`)\r\n});\r\n\r\napp.get('/foo/:type/:url', (c) => {\r\n\tc.text(`foo type: ${c.req.param('type')}, url: ${c.req.param('url')}`)\r\n});\r\n\r\nexport default app\r\n```\r\nIt produces the following error:\r\n\r\n```\r\nError: Duplicate param name, use another name instead of 'type' - GET /foo/:type/:url <--- 'type'\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nCompared to a similar `express` app in Node.js:\r\n\r\n```javascript\r\nconst express = require('express');\r\nconst app = express();\r\nconst port = 3000;\r\n\r\napp.get('/:type/:url', (req, res) => {\r\n  res.send(`type: ${req.params.type}, url: ${req.params.url}!`);\r\n});\r\n\r\napp.get('/foo/:type/:url', (req, res) => {\r\n\tres.send(`foo type: ${req.params.type}, url: ${req.params.url}!`);\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Example app listening on port ${port}`);\r\n});\r\n```\r\n\r\nOr an `itty-router` app for Cloudflare Workers:\r\n```javascript\r\nimport {Router, error, json} from 'itty-router'\r\n\r\nconst router = Router()\r\n\r\nrouter.get('/:type/:url', (req) => {\r\n\tconst params = req.params;\r\n\treturn new Response(`type: ${req.params.type}, url: ${req.params.url}`)\r\n});\r\n\r\nrouter.get('/foo/:type/:url', (req) => {\r\n\tconst params = req.params;\r\n\treturn new Response(`foo type: ${req.params.type}, url: ${req.params.url}`)\r\n});\r\n\r\nexport default {\r\n\tfetch: (request, ...args) => router.handle(request, ...args).then(json).catch(error)\r\n}\r\n```\r\n\r\nThese work just fine. This should also work fine with Hono.\r\n\r\n### Additional information\r\n\r\nLooking at https://github.com/honojs/hono/issues/569, it seems like this might be intentional. This isn't ideal and most other routers I've used handle this just fine. It's especially a hit to DX when trying to do things like re-use validation like this:\r\n```javascript\r\nimport { Hono } from 'hono'\r\nimport { zValidator } from '@hono/zod-validator'\r\nimport { z } from 'zod';\r\n\r\nconst app = new Hono()\r\n\r\nconst paramsSchema = z.object({\r\n\ttype: z.enum(['internal', 'external']),\r\n\turl: z.string().url().max(2048),\r\n});\r\n\r\napp.get('/:type/:url', zValidator('param', paramsSchema), (c) => {\r\n\tconst params = c.req.valid('param');\r\n\tc.text(`type: ${params.type}, url: ${params.url}`)\r\n});\r\n\r\napp.get('/foo/:type/:url', zValidator('param', paramsSchema), (c) => {\r\n\tconst params = c.req.valid('param');\r\n\tc.text(`foo type: ${params.type}, url: ${params.url}`)\r\n});\r\n\r\nexport default app\r\n```\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1926501187},{"id":1926526392,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1543","title":"fix(vercel): pass request context","body":"Fixes #1538\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1926526392},{"id":1927037987,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1544","title":"Introduce \"Context\" API and \"renderer\" for JSX (without .tsx).","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1927037987},{"id":1928738537,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1546","title":"req.raw.cf types broken in 3.7.4","body":"### What version of Hono are you using?\n\n3.7.4\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n```javascript\r\nimport { Hono } from 'hono';\r\n\r\nconst app = new Hono();\r\n\r\napp.get('/country', async (context) => {\r\n\tconst country = context.req.raw?.cf?.country ?? '';\r\n\tcontext.text(`Country: ${country}`)\r\n});\r\n\r\nexport default app;\r\n\r\n```\n\n### What is the expected behavior?\n\nIn version 3.7.3, `context.req.raw?.cf?.country ?? ''` does not have any issues. TypeScript is happy.\n\n### What do you see instead?\n\nIn version 3.7.4, `context.req.raw?.cf?.country ?? ''`, the following TypeScript error is thrown:\r\n\r\n```\r\nsrc/index.ts:10:35 - error TS2339: Property 'cf' does not exist on type 'Request'.\r\n\r\n10  const country = context.req.raw?.cf?.country ?? ''\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1928738537},{"id":1928777853,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1547","title":"3.7.4 loads webworker types, breaking cloudflare workers types","body":"### What version of Hono are you using?\r\n\r\n3.7.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nSince version 3.7.4, Hono now includes `/// <reference lib=\"webworker\" />` in its output. (reference: https://github.com/honojs/hono/commit/e326208fdfdb2407146949c8f6776097d701011c)\r\n\r\nThis is incompatible with Cloudflare Workers, since `webworker` defines `crypto` and other things with additional methods (see https://workers-types.pages.dev/#SubtleCrypto for example), and loading `webworker` types completely overrides these.\r\n\r\nFor example:\r\n```typescript\r\nexport default {\r\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n\t\tconst text1 = new TextEncoder().encode('Hello World');\r\n\t\tconst text2 = new TextEncoder().encode('Hello World');\r\n\t\tif(crypto.subtle.timingSafeEqual(text1, text2)) {\r\n\t\t\treturn new Response('Hello World!');\r\n\t\t}\r\n\t\treturn new Response('Goodbye World!');\r\n\t},\r\n};\r\n```\r\n(using tsconfig setup as defined at https://www.npmjs.com/package/@cloudflare/workers-types). \r\n\r\nThis works fine, and `crypto.subtle.timingSafeEqual` exists as expected.\r\n\r\nThe second that I import something from Hono though, like this:\r\n```typescript\r\nimport {Context} from 'hono';\r\n\r\nexport default {\r\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n\t\tconst text1 = new TextEncoder().encode('Hello World');\r\n\t\tconst text2 = new TextEncoder().encode('Hello World');\r\n\t\tif(crypto.subtle.timingSafeEqual(text1, text2)) {\r\n\t\t\treturn new Response('Hello World!');\r\n\t\t}\r\n\t\treturn new Response('Goodbye World!');\r\n\t},\r\n};\r\n```\r\n`crypto` is now overridden by `webworker` types, meaning the `crypto.subtle.timingSafeEqual` method doesn't exist, and I get an error like so:\r\n```\r\nsrc/index.ts:8:19 - error TS2339: Property 'timingSafeEqual' does not exist on type 'SubtleCrypto'.\r\n\r\n8  if(crypto.subtle.timingSafeEqual(text1, text2)) {\r\n\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n`webworker` types should not be loaded in the case of cloudflare workers. The docs at https://www.npmjs.com/package/@cloudflare/workers-types call this out explicitly, since it has incompatibilities with Cloudflare Workers.\r\n\r\n### Additional information\r\n\r\nCan we please get this rolled back or fixed? There are going to be so many other incompatibilities with loading `webworker` types in a Cloudflare Workers project - this is just one example.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1928777853},{"id":1928978141,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1548","title":"fix(types): don't use webworker types","body":"Fixes #1546 #1547\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1928978141},{"id":1930191502,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1550","title":"Public assets return 500 server error","body":"### What version of Hono are you using?\n\n3.5.8\n\n### What runtime/platform is your app running on?\n\nCloudflare worker\n\n### What steps can reproduce the bug?\n\n**server.ts**\r\n\r\n```\r\nconst app = new Hono();\r\n\r\napp.get(\"/public/*\", async (ctx: Context) => {\r\n  return await ctx.env.ASSETS.fetch(ctx.req.raw);\r\n});\r\n```\r\n\r\n**Public directory**\r\n![image](https://github.com/honojs/hono/assets/6106479/1178d165-e0fa-4017-8ab3-e59bce3986c0)\r\n\r\n\r\n**Error**\r\n\r\n![image](https://github.com/honojs/hono/assets/6106479/9d864f35-4881-49cb-8040-144affc0c62f)\r\n\n\n### What is the expected behavior?\n\nPublic assets should work\n\n### What do you see instead?\n\n500 error:  message: Can't modify immutable headers.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1930191502},{"id":1930612383,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1551","title":"getCookie can't handle JSON Objects as cookie value","body":"### What version of Hono are you using?\n\n3.7.5\n\n### What runtime/platform is your app running on?\n\nNodejs\n\n### What steps can reproduce the bug?\n\nset a cookie clientside with the following code:\r\n\r\n```js\r\nfunction setCookie(cName, cValue, expDays) {\r\n  let date = new Date();\r\n  date.setTime(date.getTime() + expDays * 24 * 60 * 60 * 1000);\r\n  const expires = \"expires=\" + date.toUTCString();\r\n  document.cookie = cName + \"=\" + cValue + \"; \" + expires + \"; path=/\";\r\n}\r\n\r\nconst device = { type: \"desktop\", mode: \"browser\"};\r\n\r\nsetCookie(\"device\", JSON.stringify(device), 30);\r\n```\r\nread the cookie serverside using `getCookie` function:\r\n\r\n```js\r\napp.get('/', async (c) => {\r\n   console.log(getCookie(c, \"device\"));\r\n})\r\n```\n\n### What is the expected behavior?\n\nget the following output:\r\n```\r\n'{\"type\":\"desktop\",\"mode\":\"browser\"}'\r\n```\n\n### What do you see instead?\n\noutput:\r\n```\r\n{}\r\n```\n\n### Additional information\n\nit still worked in version `v3.4.3`","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1930612383},{"id":1931604298,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1554","title":"fix: return status 500 when using validator 'form'","body":"When using `validator('form', ...)` hono is returning a 500 status when receiving a POST request with a JSON in request body, instead of a bad request 400, .\r\n\r\nThis is happenning due to a unhandled error in an\r\nunderlying library (@miniflare).\r\nhttps://github.com/cloudflare/miniflare/pull/711\r\n\r\nThe code changes in this PR are responsible to prepare the code to handle possible TypeError that can be thrown in the future, by the lib doing the FormData parsing, as per, https://fetch.spec.whatwg.org/#dom-body-formdata.\r\n\r\nThis PR should wait for bugfix on @miniflare.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests (don't have deno to perform `yarn test:all`\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1931604298},{"id":1931817484,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1555","title":"[POC] feat: one `params` per a handler","body":"This PR enables the router returns one `params` per handler, so that the value of `c.req.param()` is handled for each handler. We can avoid the `Duplicate param name` mentioned in #1542 by using the appropriate router. This means that the following code will work:\r\n\r\n```ts\r\nconst app = new Hono({ router: new TrieRouter() })\r\n\r\napp.get('/:type/:url', (c) => {\r\n  return c.text(`type: ${c.req.param('type')}, url: ${c.req.param('url')}`)\r\n})\r\n\r\napp.get('/foo/:type/:url', (c) => {\r\n  return c.text(`foo type: ${c.req.param('type')}, url: ${c.req.param('url')}`)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nThe key is to handle a `hander` and a `params` as one `Result`.\r\n\r\n```ts\r\nexport interface Router<T> {\r\n  name: string\r\n  add(method: string, path: string, handler: T): void\r\n  match(method: string, path: string): Result<T>[] | null\r\n}\r\n\r\nexport interface Result<T> {\r\n  handler: T\r\n  params: Record<string, string>\r\n}\r\n```\r\n\r\nIn this PR, I've changed `hono-base.ts`, `compose.ts`, `context.ts` and `TrieRouter`.\r\n\r\nThe combination of `TrieRouter` and `SmartRouter` can handle all patterns. And we could avoid throwing `Duplicate param name` with another router if it’s implemented.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1931817484},{"id":1932974804,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1556","title":"feat(reg-exp-router): Improve capture group support.","body":"### What will this PR improve?\r\n\r\n* `(a|b)` => Automatically converted to non-capturing group and no longer an error in RegExpRouter. 🆕 \r\n* `(?:a|b)` => If you already explicitly use non-capturing groups, it works without error. (Backward compatible)\r\n* `prefix(a|b)` => Throw `UnsupportedPathError`. 🆕 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1932974804},{"id":1933229697,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1557","title":"Use Node.js native Web API in tests.","body":"### What is the feature you are proposing?\n\nWe don't have to use `vitest-environment-miniflare`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1933229697},{"id":1933322251,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1558","title":"test: use Node.js Native Web APIs instead of miniflare's","body":"Resolves #1557\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1933322251},{"id":1934103712,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1559","title":"Custom transformers to serialize/deserialize more complex types","body":"### What is the feature you are proposing?\n\nI wonder what the developers think of allowing the use of custom transformers to enable Hono RPC to work with more complex data types (i.e. Date, Set, undefined, etc).\r\n\r\ntRPC for example uses superjson or devalue and it seems to work quite well. Are there any plans for Hono to support something similar?\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1934103712},{"id":1934124337,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1560","title":"feat(app): `basePath` option for the constructor, deprecate `app.basePath()`","body":"* Create `basePath` option for the constructor of `Hono`.\r\n* Deprecate `app.basePath()`.\r\n\r\nYou can specify the base-path like the following:\r\n\r\n```ts\r\nconst app = new Hono({ basePath: '/api' })\r\n```\r\n\r\n\r\nResolves #1531\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1934124337},{"id":1934547430,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1561","title":"Stripe webhooks express middleware implementation in hono ","body":"I'm working on a stripe payment backend in hono. Stripe hooks needs a middleware to work properly. This code is for express.\r\n\r\n```ts\r\n\r\n  app.use((req, res, next) => {\r\n    if (req.originalUrl === \"/api/v1/webhook\") {\r\n      next();\r\n    } else {\r\n      express.json()(req, res, next);\r\n    }\r\n  });\r\n```\r\nHow I implement similar middleware in hono?\r\n\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1934547430},{"id":1935546485,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1562","title":"fix: Don't kebab case style property values","body":"Currently, both style property keys and values are kebab cased.\r\n\r\nThis JSX:\r\n```\r\nfontFamily: \"Menlo, Consolas, DejaVu Sans Mono, monospace\"\r\n```\r\n\r\nResults in the following HTML:\r\n```\r\nfont-family:-menlo, -consolas, -deja-vu -sans -mono, monospace;\r\n```\r\n\r\nInstead of:\r\n```\r\nfont-family:Menlo, Consolas, DejaVu Sans Mono, monospace;\r\n```\r\n\r\nThis fixes the issue by only applying kebab casing to the key, not the value.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1935546485},{"id":1938748340,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1563","title":"[create-hono] Make the app name change based on a project name","body":"### What is the feature you are proposing?\n\nCurrently, the application name of a project created by `create-hono` is fixed as `my-app`. This is bad for DX as we can only use a fixed name. Therefore, we need to modify `create-hono` so that the application name is based on the directory name.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1938748340},{"id":1938935208,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1564","title":"feat: one params per a handler in reg-exp-router.","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1938935208},{"id":1939506789,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1565","title":"perf(hono-base): use `instanceOf`","body":"Since #1311, it uses `res.constructor.name === 'Response'` instead of `res instanceof Response`. However, on Node.js, this change results in a significant performance decrease. Therefore, it should be rolled back.\r\n\r\n<img width=\"587\" alt=\"Screenshot 2023-10-12 at 17 36 16\" src=\"https://github.com/honojs/hono/assets/10682/37399211-32a8-4433-a717-518c4b4b2bad\">\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1939506789},{"id":1939966412,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1566","title":"feat: one `params` per a handler (optimized for RegExpRouter)","body":"After thinking about this issue for a while, I have come to the conclusion that the interface should be almost the same as #1555.\r\n\r\n### What is different about this PR\r\n\r\n#### Data structure based on array\r\n\r\n`Result<T>` is now defined as an Array.\r\nhttps://github.com/usualoma/hono/blob/bb0ff1fb680ce88d2fce991552e05eb17f283f01/src/router.ts#L14\r\n\r\nThis is because an Array is faster to access elements than an Object, and the bundle size is smaller when minified.\r\nHowever, since the contribution to speed by making it an Array is limited and the code is less readable, some may argue that the format using Objects is better in this regard.\r\n\r\n#### Optimized for RegExpRouter\r\n\r\nThe following data structures can now be returned from `match`. This allows the RegExpRouter to work as fast as before.\r\n\r\n<img width=\"555\" alt=\"data-structure\" src=\"https://github.com/honojs/hono/assets/30598/892bdda9-6c0e-41ab-a98c-2e7aca5fedf8\">\r\n\r\n\r\n### benchmark\r\n\r\nIn my environment, the results were about the same as before.\r\n\r\nbenchmarks/handle-event\r\n\r\n```\r\nHono - main x 484,819 ops/sec ±6.77% (72 runs sampled)\r\nHono - params-per-handler-2 x 495,303 ops/sec ±6.74% (75 runs sampled)\r\nitty-router x 217,435 ops/sec ±2.53% (92 runs sampled)\r\nsunder x 258,899 ops/sec ±5.35% (75 runs sampled)\r\nworktop x 188,327 ops/sec ±3.43% (85 runs sampled)\r\nFastest is Hono - params-per-handler-2,Hono - main\r\n```\r\n\r\nbenchmarks/routers (I perceive the same performance because the ranking often changes when the routers are reordered.)\r\n\r\n```\r\n• all together\r\n-------------------------------------------------------------------------------- -----------------------------\r\nHono TrieRouter                             2.01 µs/iter     (1.99 µs … 2.07 µs)   2.02 µs   2.07 µs   2.07 µs\r\nHono RegExpRouter - main                  443.81 ns/iter (422.96 ns … 468.42 ns) 446.81 ns 462.18 ns 468.42 ns\r\nHono RegExpRouter - params-per-handler-2  451.29 ns/iter (431.47 ns … 476.33 ns) 453.57 ns 476.24 ns 476.33 ns\r\n@medley/router                            608.95 ns/iter (591.48 ns … 629.72 ns) 612.27 ns 629.72 ns 629.72 ns\r\nfind-my-way                                 1.03 µs/iter     (1.01 µs … 1.11 µs)   1.03 µs   1.11 µs   1.11 µs\r\nkoa-tree-router                           659.81 ns/iter (638.36 ns … 724.44 ns) 665.09 ns 724.44 ns 724.44 ns\r\ntrek-router                                 1.02 µs/iter   (988.83 ns … 1.05 µs)   1.02 µs   1.05 µs   1.05 µs\r\nexpress (WARNING: includes handling)        7.83 µs/iter     (7.77 µs … 7.93 µs)   7.86 µs   7.93 µs   7.93 µs\r\nkoa-router                                 13.03 µs/iter     (12 µs … 164.54 µs)  12.75 µs  17.46 µs  21.96 µs\r\nradix3                                      1.55 µs/iter      (1.5 µs … 1.59 µs)   1.56 µs   1.59 µs   1.59 µs\r\n\r\nsummary for all together\r\n  Hono RegExpRouter - main\r\n   1.02x faster than Hono RegExpRouter - params-per-handler-2\r\n   1.37x faster than @medley/router\r\n   1.49x faster than koa-tree-router\r\n   2.29x faster than trek-router\r\n   2.32x faster than find-my-way\r\n   3.5x faster than radix3\r\n   4.53x faster than Hono TrieRouter\r\n   17.64x faster than express (WARNING: includes handling)\r\n   29.35x faster than koa-router\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1939966412},{"id":1940694555,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1567","title":"Support Netlify Functions 2.0","body":"https://www.netlify.com/blog/introducing-netlify-functions-2-0/","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1940694555},{"id":1940979917,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1570","title":"chore: bump up denoify","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1940979917},{"id":1941389135,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1572","title":"Cors Middleware error: Can't modify immutable headers.","body":"### What version of Hono are you using?\n\n3.2.7\n\n### What runtime/platform is your app running on?\n\nClodflare Workers\n\n### What steps can reproduce the bug?\n\n```js\r\napp.use('*', cors({ origin: '*' }))\r\n```\n\n### What is the expected behavior?\n\nModify the response headers\n\n### What do you see instead?\n\nServer Internal Error - Status Code 500\r\n\r\nLog:\r\n`Trace: TypeError: Can't modify immutable headers.`\n\n### Additional information\n\nresponse headers cannot be modified\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/middleware/cors/index.ts#L36C18-L36C18","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1941389135},{"id":1943906919,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1575","title":"test: fix the sleep time for SSE","body":"We don't need the much time.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1943906919},{"id":1944126982,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1576","title":"wip feat(adaptor):  AWS Lambda response streaming ","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944126982},{"id":1944718723,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1577","title":"SSE helper doesn't return a valid SSE","body":"### What version of Hono are you using?\r\n\r\n3.8.0-rc.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { streamSSE } from 'hono/streaming'\r\nimport { html, raw } from 'hono/html'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/sse', (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    for (;;) {\r\n      const message = `It's ${new Date().toISOString()}`\r\n      stream.writeSSE({ data: message })\r\n      await stream.sleep(1000)\r\n    }\r\n  })\r\n})\r\n\r\napp.get('/', (c) => {\r\n  return c.html(html`<html><body><script>\r\n      ${raw(`\r\n    const eventSource = new EventSource(\"/sse\")\r\n    eventSource.onmessage = function (event) {\r\n      console.log(event.data)\r\n    }\r\n    `)}\r\n    </script><p>Hi</p><body></html>`)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n`event.data` are shown on the devtool of the browser.\r\n\r\n### What do you see instead?\r\n\r\nnothing.\r\n\r\n### Additional information\r\n\r\nThe SSE format is wrong.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944718723},{"id":1944737754,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1578","title":"feat(`package.json`): export `streaming` helper","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944737754},{"id":1944810050,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1579","title":"fix(streaming): fix SSE format","body":"Fixes #1577 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944810050},{"id":1944836404,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1580","title":"Allow object in SSE data","body":"### What is the feature you are proposing?\n\nCurrently, it only allows a string, but it would be useful if it allowed an object that will be serialized.","state":"closed","labels":"[\"enhancement\",\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944836404},{"id":1944925145,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1581","title":"fix(factory): fixed the comment","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944925145},{"id":1944936298,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1582","title":"feat(deno): export the `factory` helper for Deno","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1944936298},{"id":1945253215,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1583","title":"Validator doesn't support optional schemas","body":"### What version of Hono are you using?\n\n3.7.6\n\n### What runtime/platform is your app running on?\n\n-\n\n### What steps can reproduce the bug?\n\nInitially, I intended to report this issue to the `middleware` repository, but upon closer examination, it appears to impact all validators, not just the `zod-validator`. Currently, when an optional schema (e.g., `z.object({}).optional()`) is passed into the `zValidator`, the input type is inferred as follows:\r\n\r\n```ts\r\n{\r\n  // or any other validation target\r\n  query: {} | undefined\r\n}\r\n```\n\n### What is the expected behavior?\n\nOptional input type when a passed schema is optional.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nUpon investigation, I have identified the root cause of this issue as the [`RemoveBlankRecord` type](https://github.com/honojs/hono/blob/b6c0e45d5f141f00578191f912d755230936eda2/src/utils/types.ts#L14).\r\n\r\nThus when calling a method with `hc`, it will still require the object to be present, even though it is optional: `client.index.$get({query: {}});`\r\n\r\nEven if the function type of `zValidator` is adjusted to return an optional input (by adding `?`), the `RemoveBlankRecord` type inadvertently removes this optional type:\r\n<img width=\"618\" alt=\"CleanShot 2023-10-16 at 15 27 00@2x\" src=\"https://github.com/honojs/middleware/assets/16190582/93512d51-c114-4b71-ba14-a7fcbb58f1b9\">\r\n[*Link to Playground*](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAIgAt0JiBuAKFElkTlIGNs8CiyKB6FgG2ABTNDGp1w0eDACeYIUwDC6GEIAeMADRwAssAAm+-kIDuAQyhDkZtEaFRtAUTQA3bQDUzg-WZjB0ACoWAOZCMADO2gFyQvoASkLhkGjhQtqKgiIwCQCOAK6JMADyYH7okXAAyiykQiBm7PiEcADk5BgtEgzwSC5eBr7QjZyt7RA8fd6DUJ30UnCy8kwAWhD61bX12qv6jlAEUMPNLQBea7OSjAgnOE1cZ-ric1dwGcKiCUnlCrcj3Bg8fTAcIwHiLRJ8TKiMExcLiGjqboLGIoCAQADWAB4Ak44OpVLZwnBnG44AAFPEaET6IkgqDANDBbRFOAAXkQWAAfGy4AAKGhwOCWcJ5fgwABcTBFLBYiXCkpgUAKVDgPhgZklAXYAB8pXkZXLJbgvKkVfYDpKdnsDiq1Rq4FqsJoBXAWJLlKJ8ZjHNoyZyaABKNncz7JVJwXVkzjAoSY0Pfbm6lwQAwR8nR1JxxJhhRJlP6RMOmLxbPfTFFf00cEoMzhACqtiEuAZsWx3PZeUbzbQsUpBJpDrgAH4FkqFEaTUIaAi1EiWOV4CdPFMYEN2ZiXVr8dSiTsNnUzM7BUEoKF4NvCXB0UIZBBcHBlwMymgT2fIi7HH2d8TXEfyV-LzpBkmRdABJHkTgAOgZMA8hgNs-xZdkoIgODYPggJOT-dwAIHBAXUFBlJWsesuxbfRMVA7kLwHRUCgIwVhyYABtABpOAGQdEIwgAXSHSVwKwBjBUlJA2I4tAuNPXiBOwWhGLgVCJRY9jONfGS4BZLB5PYdl8IUoia1I-Qm3IyjqKpS86KnBTBRHMTVMk9SYD42ShNsuBRLgcS1O4ly3J0wUlK8nynL8njJS0nSnRoTl+UFdVpOU5y-3CGoD01P9yAxfjUQxTEoIZXB7AQ4lfX9ANJT0QxjHMSxrFsYwoG9X0PHbf1BUmJ9oF5RKz20WsZDQNheUmAptBYINWW5fTGPnFJ4GFUV4HZMxzGAeA0s2MxIPCMxirJCxUgAQXCIaWFGrwCgDacDPvXlsvRINZoU+aQWYNF0U+ZaeUe3kkDtSUxrSOBILBpaxWwCabo84B7se76xWe4TGLhvkEcSH6GRBGxZTvOB4xSXNdQxkVIex9VhqEfGo0IGNkY8hTLBgPIoEk0nlpRwV3MZtHeRaYUcxaCSPoxRGYAZxnBWZ1n2c+8XIMF74uewFGee527UfugBCCGYF2-VZXCcJJaZsJZddSCACtwnQXk9e0AAWAAGZ2YcYoSGLe+A7R5PXIN92s4EKtBiuazCGJltnVV8MwXSwG7pxob24C2g8IMgiAACMraEFgYH+uA0DMEAhElKCgMZXkA0z0p-GL-hq+wGuIDr9AvGr2hk4XIvTEfNU12D-vpl5Yh8nsGRiG0NP6gDLuU7MMAwB5HsTFRDBq5dSCz1Hngp97kxh9XBxXWDS2bcCf6E7n6dqziJTEh5cF8cXsB557gR3hW5gWDjB-wjimQGAMAwDih4DwfgEAWBeHICCcUAAOAA7EgveN8FLgLgAAPSHNOFOZ4eSfyyNBRsahIIABIzwugwdg2+KIEggAgC4IQAAhfgNgvp52gBRTCPItyWQHAkecUAKJFXsHAVi2hOzogwCYNAHUmLsRorSRUwEGIjgCAxSUPYmFQBdFooQOiu7VgAOobVICUZ8XhQJoHQjyehjCWFsLQBwoRFEkDjygDIXKSBi6l0lJXYIOo4CdhMt2WIXIdLUJwSYsxuQ8jAEsPoaxtj2QEzqA41h7DBFcMxO4gonivK+LLqnFRjIgkhNMj2fQESqE8CwTgoAA)\r\n\r\n## Proposed Solution\r\nI suggest modifying the `RemoveBlankRecord` type. However, before making any changes, I would appreciate more details on its usage and purpose, as it appears to be used in several other places. I want to be sure that any modifications do not inadvertently break anything.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1945253215},{"id":1945373607,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1584","title":"`basePath` type mismatch","body":"### What version of Hono are you using?\n\n3.8.0-rc.3\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n```ts\r\ntype Env = {\r\n  Bindings: {\r\n    TOKEN: string\r\n  }\r\n}\r\n\r\nconst app = new Hono<Env>({\r\n  basePath: '/v1'\r\n})\r\n```\r\n\n\n### What is the expected behavior?\n\nDoesn't throw the type error and the `app` type should be `Hono<Env, {}, \"/v1\">`.\n\n### What do you see instead?\n\n<img width=\"300\" alt=\"Screenshot 2023-10-16 at 23 37 05\" src=\"https://github.com/honojs/hono/assets/10682/98f79fc3-8ba9-44cf-bae3-e9fafd4f7a76\">\r\n\r\n<img width=\"399\" alt=\"Screenshot 2023-10-16 at 23 38 26\" src=\"https://github.com/honojs/hono/assets/10682/68577b08-5ce8-4922-83dd-ceb170e01925\">\r\n\n\n### Additional information\n\nSince this PR #1560 introduced the `basePath` option, I think it's better to revert it if this issue is not resolved.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1945373607},{"id":1945416884,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1585","title":"Error when using Postgresjs with Hono: \"error: ResolveMessage\"","body":"### What version of Hono are you using?\n\n3.7.6\n\n### What runtime/platform is your app running on?\n\n3.4.0\n\n### What steps can reproduce the bug?\n\nI created a connection to Postgres 16 and tried to return the data\r\n\r\nhttps://github.com/Alexandrsv/hono-bug\r\n\n\n### What is the expected behavior?\n\nСorrect response to HTTP request\n\n### What do you see instead?\n\n![image](https://github.com/honojs/hono/assets/15097064/f7b9f5be-3883-4933-9a63-96094cbe16b1)\r\n\r\n![image](https://github.com/honojs/hono/assets/15097064/c81ace67-5f1e-41a8-a444-41e896acfe6f)\r\n**ResolveMessage**\r\n\r\nStack trace:\r\n```js\r\n\r\n  λ()\r\n  λ()\r\n  λ()\r\n  λ()\r\n  λ()\r\n  λ()\r\n  λ()\r\n  λ()\r\n```\r\nInfo:\r\n  > bun v1.0.6\r\n  > linux #1 SMP PREEMPT_DYNAMIC Thu Sep 28 10:59:52 UTC 2023 (x64)\r\n  > User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36\r\n  > Pathname: /\r\n\n\n### Additional information\n\nConnection with prisma js works\r\nPostgresjs works without hono","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1945416884},{"id":1945442604,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1586","title":"Revert \"feat(app): `basePath` option for the constructor, deprecate `app.basePath()` (#1560)\"","body":"Fixes #1584 \r\n\r\nThis reverts commit 8b6bd46e6699d6ad80eced222b8cd52c9a878692.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1945442604},{"id":1945531579,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1587","title":"Top level middleware is not applied on non-root route","body":"### What version of Hono are you using?\n\n3.7.6\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n```\r\nimport { Hono, MiddlewareHandler } from 'hono';\r\n\r\nconst app = new Hono();\r\n\r\nexport const middleware: MiddlewareHandler = async (c, next) => {\r\n  console.log('middleware');\r\n  await next();\r\n};\r\n\r\napp.use(middleware);\r\n\r\napp.get('', async (c) => {\r\n  console.log('root route');\r\n  return c.text('root');\r\n});\r\n\r\napp.get('/users/:username', async (c) => {\r\n  console.log('users/:username route');\r\n  return c.text('username');\r\n});\r\n\r\nexport default app;\r\n```\r\n\n\n### What is the expected behavior?\n\nMiddleware is executed for both routes.\n\n### What do you see instead?\n\nMiddleware is not executed for the `/users/:username` route.\n\n### Additional information\n\nI know about the route param in `app.use` and if I set it to `*` the middleware does execute for both routes.\r\n\r\nBut I was under the impression that if this is omitted, the middleware should always be applied (and not only on the root route).","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1945531579},{"id":1946139142,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1588","title":"refactor: refactored `hono-base`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1946139142},{"id":1946317454,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1589","title":"Next","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1946317454},{"id":1946593706,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1590","title":"Path parameter not accessible when using app.onError()","body":"### What version of Hono are you using?\n\n3.8.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nWhen using `app.onError()` within a nested route, the path parameters are not accessible.\r\n\r\n`c.req.param('assignmentId')` does not work when `app.onError(err, c)` is in the nested route file\r\n\r\nindex.js\r\nroutes/example.js\r\n\r\nSee this project for example: https://github.com/justinwride/hono-path\n\n### What is the expected behavior?\n\nI expect to access the path parameter for the route **/assignments/:assignmentId?** using `c.req.param('assignmentId')`\n\n### What do you see instead?\n\nInstead, `c.req.param('assignmentId')` is `undefined`\n\n### Additional information\n\nIt works if `app.onError()` is put in **index.js**, but not if it is used in **routes/example.js**.\r\n\r\nI have been experimenting with Hono and enjoy the simplicity and speed. I'm the CTO of an ed-tech company and hope to use it more in our tech stack.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1946593706},{"id":1947997248,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1591","title":"Type error occurs when using `route` and `basePath` with \"moduleResolution\" set to \"bundler\"","body":"### What version of Hono are you using?\r\n\r\n3.8.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nTypeScript, Bun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nhttps://codesandbox.io/p/sandbox/gallant-david-yyyhyg?file=%2Findex.ts%3A6%2C1\r\n\r\n1. In tsconfig.json, set `compilerOptions.moduleResolution` to `bundler`.\r\n2. Assign `new Hono().basePath(\"api\")` or `new Hono().route(\"/books\", books)` to any **exported** variable.\r\n3. In VSCode, got [TS2742](https://typescript.tv/errors/#TS2742) error:\r\n\r\n```ts\r\nconst app = new Hono().basePath(\"v1\"); // got type error\r\nexport { app };\r\n```\r\n\r\n![Screenshot 2023-10-18 at 2 38 58](https://github.com/honojs/hono/assets/38999742/723c8fa0-7af5-4055-9a98-4cdc01d647de)\r\n![Screenshot 2023-10-18 at 2 50 43](https://github.com/honojs/hono/assets/38999742/578ef307-6c91-4e7b-ba7e-dd79c81a0595)\r\nthe \r\n\r\n### What is the expected behavior?\r\n\r\nNo type error occurs\r\n\r\n### What do you see instead?\r\n\r\nhttps://typescript.tv/errors/#TS2742\r\n\r\n```plain\r\nTS2742: The inferred type of 'app' cannot be named without a reference to\r\n'./node_modules/hono/dist/types/hono-base'. This is likely not portable. \r\nA type annotation is necessary.\r\n```\r\n\r\n```plain\r\nTS2742: The inferred type of 'app2' cannot be named without a reference to\r\n'./node_modules/hono/dist/types/types'. This is likely not portable. \r\nA type annotation is necessary.\r\n```\r\n\r\n### Additional information\r\n\r\n- The value of `moduleResolution` defaults to `bundler` when using `bun init` or Vite.\r\n- When running `tsc`, no errors are reported.\r\n- In WebStorm, the same errors appear.\r\n- By setting `compilerOptions.paths` in tsconfig as shown below, the type errors disappear.\r\n\r\n```jsonc\r\n{\r\n  \"compilerOptions\": {\r\n    // other settings...\r\n    \"moduleResolution\": \"bundler\",\r\n    \"paths\": {\r\n      \"hono\": [\r\n        \"path/to/node_modules/hono\",\r\n        \"path/to/node_modules/hono/dist/types/types.d.ts\",\r\n        \"path/to/node_modules/hono/dist/types/hono-base.d.ts\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n- `MergeSchemaPath` and `HonoBase` may be causing this problem. They are used in the declaration of `Hono`, but they are not exported.\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1947997248},{"id":1948072656,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1592","title":"Allow trailing slash for routing","body":"### What is the feature you are proposing?\n\nOptional parameters are great, but they don't work with a trailing slash.\r\n\r\nThe documentation shows the example here: https://hono.dev/api/routing#optional-parameter\r\n```js\r\n// Will match `/api/animal` and `/api/animal/:type`\r\napp.get('/api/animal/:type?', (c) => c.text('Animal!'))\r\n```\r\n\r\nWhen making a request from my application, it would be great if Hono could match the route with a **trailing slash** included:\r\n```js\r\n// Hono:\r\napp.get('/api/animal/:type?', (c) => c.text('Animal!'))\r\n\r\n// Application:\r\n// can be accessed using the following requests\r\nconst animalType = 'dog';\r\nfetch(`/api/animal/${animalType || ''}`)\r\n\r\n// also\r\nconst animalType = null;\r\nfetch(`/api/animal/${animalType || ''}`)\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1948072656},{"id":1948498888,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1593","title":"fix: `c.req.params()` in nested app with custom error handler.","body":"Fixes #1590\r\n\r\nIt may look like a dirty hack at first glance, but if you look closely, you will see it is not a problem.\r\n\r\nI have also considered the following approaches.\r\n\r\n* https://github.com/usualoma/hono/tree/fix-nested-onerror-params-by-getParams\r\n* https://github.com/usualoma/hono/tree/fix-nested-onerror-params-by-undefined\r\n\r\nHowever, they all increase the code and complexity of types, so this PR approach is better.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1948498888},{"id":1949172468,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1594","title":"CORS middleware : code works, but VSCode shows TypeScript error","body":"### What version of Hono are you using?\n\n3.8.0-rc2\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nI try to setup the CORS middleware following the instructions:\r\n\r\n```typescript\r\nconst corsOptions = {\r\n        origin: [Deno.env.get(\"WEBSITE_BASE_URL\")!],\r\n        allowHeaders: ['Content-Type', 'Authorization', 'x-api-key'],\r\n        allowMethods: ['POST', 'GET', 'OPTIONS', 'DELETE','PUT', 'PATCH'],\r\n    };\r\nconst app = new Hono();\r\napp.use('*', cors(corsOptions));\r\n``` \r\nWhen I run the code it does work, but in my editor give a type error:\r\n\r\n```\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(...handlers: MiddlewareHandler<Env, never, {}>[]): Hono<Env, {}, \"/\">', gave the following error.\r\n    Argument of type 'string' is not assignable to parameter of type 'MiddlewareHandler<Env, never, {}>'.  Overload 2 of 2, '(path: \"*\", ...handlers: MiddlewareHandler<Env, \"*\", {}>[]): Hono<Env, {}, \"/\">', gave the following error.\r\n    Argument of type 'MiddlewareHandler' is not assignable to parameter of type 'MiddlewareHandler<Env, \"*\", {}>'.\r\n      Types of parameters 'c' and 'c' are incompatible.\r\n        Type 'Context<Env, \"*\", {}>' is not assignable to type 'Context<any, string, {}>'.\r\n          Types of property 'req' are incompatible.\r\n            Type 'HonoRequest<\"*\", unknown>' is not assignable to type 'HonoRequest<string, unknown>'.\r\n              Types have separate declarations of a private property 'paramData'.\r\n``` \n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1949172468},{"id":1949721718,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1595","title":"fix(context): change `FetchEvent` detection way","body":"To detect whether it is a `FetchEvent` or not, I've used this method in this PR instead of `instanceof`:\r\n\r\n```ts\r\nthis._exCtx && 'respondWith' in this._exCtx\r\n```\r\n\r\nFixes #1423\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1949721718},{"id":1949755976,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1596","title":"test(validator): fix the error message for node v18.18","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1949755976},{"id":1950903320,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1597","title":"Landing page","body":"I want to have a super cool landing page on the website. It should be really cool!","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1950903320},{"id":1951249334,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1598","title":"chore(ci): update node v20","body":"Starting from October 24, NodeJS V20 will become the LTS version. I believe we should also support this in our CI. For now, I've only added Node, but if there is a need to include other runtimes, I am more than happy to accommodate that as well.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1951249334},{"id":1951274543,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1599","title":"chore(ci): bun v1","body":"\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1951274543},{"id":1954290501,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1601","title":"v3.8.1 introduced a bug or none backwards compatible change","body":"### What version of Hono are you using?\n\n3.8.1\n\n### What runtime/platform is your app running on?\n\nCloudflare workers\n\n### What steps can reproduce the bug?\n\nI think this [change](https://github.com/honojs/hono/pull/1593) introduced a bug? Or at least a none backwards compatible change.\r\n\r\nI have the following middleware:\r\n\r\n```ts\r\nexport const cfgMiddleware = async (c: Context, next: Next) => {\r\n  const { roomId, sessionId } = c.req.param()\r\n  console.log('roomId', roomId)\r\n  console.log('sessionId', sessionId)\r\n\r\n  return userStore.run({ roomId, sessionId }, () => next())\r\n}\r\n```\r\n\r\nwhere userStore is a AsyncLocalStorage\r\n\r\nMy routes look like this:\r\n\r\n```ts\r\nconst app = new Hono({ strict: false })\r\n\r\napp.use('*', cfgMiddleware)\r\napp.get('/room/:roomId/session/:sessionId/messages', getMessagesHandler)\r\n```\r\n\r\nIn Hono 3.7.6 I see the following\r\n\r\nhttp localhost:8787/api/room/notesTaker/session/asdasdasdasd/messages\r\n\r\n```\r\nroomId notesTaker\r\nsessionId asdasdasdasd\r\n```\r\n\r\nIn Hono 3.8.1 I see the following:\r\n\r\nhttp localhost:8787/api/room/notesTaker/session/asdasdasdasd/messages\r\n\r\n```\r\nroomId undefined\r\nsessionId undefined\r\n```\n\n### What is the expected behavior?\n\nc.req.param() should provide the params in the middleware\n\n### What do you see instead?\n\nundefined\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1954290501},{"id":1955523272,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1604","title":"fix(package.json): export `hono-base`","body":"Fixes #1591\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1955523272},{"id":1955789021,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1606","title":"Can’t modify immutable headers","body":"### What version of Hono are you using?\r\n\r\n3.8.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare pages\r\n\r\n### What steps can reproduce the bug?\r\n\r\nGetting error `Can't modify immutable headers` in `ASSETS.fetch`\r\n\r\n```\r\napp.get(\"/public/*\", async (ctx) => {\r\n  return await ctx.env.ASSETS.fetch(ctx.req.raw);\r\n});\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe static assets should be returned.\r\n\r\n### What do you see instead?\r\n\r\n![image](https://github.com/honojs/hono/assets/6106479/cb0935cc-7811-4f3c-8d44-513321be57df)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1955789021},{"id":1955854593,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1607","title":"fix(jsx-renderer): fix `PropsForRenderer`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1955854593},{"id":1955911515,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1608","title":"fix(hc): allows optional schemas","body":"Fixes #1583\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1955911515},{"id":1955972011,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1610","title":"Fix: combine fluent interface with route grouping","body":"**How to reproduce**\r\n\r\n```ts\r\nimport { Hono } from 'hono';\r\n\r\nconst group = new Hono().get('/', (c) => c.text('ok'));\r\nconst app = new Hono().use().route('/group', group);\r\n\r\nexport default app;\r\n```\r\n\r\nThe issue only appears if `app` is exported (or `group` is imported).\r\n\r\n**Error observed**\r\n\r\n```\r\nThe inferred type of 'app' cannot be named without a reference to '../../../node_modules/hono/dist/types/hono-base'. This is likely not portable. A type annotation is necessary.ts(2742)\r\n```\r\n\r\n<img width=\"632\" alt=\"image\" src=\"https://github.com/colinhacks/zod/assets/6740947/459f7cf9-bac9-4ba9-b925-35e2a4bdf0c9\">\r\n\r\n**Solution**\r\n\r\nUpgrading to `v3.8.2` partially addressed the issue (https://github.com/honojs/hono/pull/1604/files), but I found it necessary to make `hono/types` publicly accessible also.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1955972011},{"id":1956062113,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1611","title":"Auto-generate exports at build time","body":"### What is the feature you are proposing?\n\nI recently encountered and fixed an issue related to some types not being included in the package.json exports: https://github.com/honojs/hono/pull/1610\r\n\r\nJust after that was merged I noticed a very similar issue:\r\n\r\n<img width=\"318\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/6740947/c2bfc531-ded1-49fc-89d7-c4a5f62e4377\">\r\n\r\n<img width=\"476\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/6740947/66c3bdf8-c42c-42a4-b5a1-6e8a1c0cd789\">\r\n\r\nThis can be easily fixed by adding to `hono/package.json`:\r\n\r\n```\r\n\"./client/types\": {\r\n  \"types\": \"./dist/types/client/types.d.ts\",\r\n  \"import\": \"./dist/client/types.js\",\r\n  \"require\": \"./dist/cjs/client/types.js\"\r\n},\r\n\"./context\": {\r\n  \"types\": \"./dist/types/context.d.ts\",\r\n  \"import\": \"./dist/context.js\",\r\n  \"require\": \"./dist/cjs/context.js\"\r\n},\r\n```\r\n\r\nHowever I think a more cohesive solution is in order, and would suggest that every `.d.ts` file in Hono be included in the `package.json` exports to avoid this category of tooling issues. To reduce the maintenance burden here, I suggest auto-generating the exports and updating `package.json` at build time (modification to `build.ts` required).\r\n\r\nIs my suggestion wanted? If so, I'd be happy to create a PR.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1956062113},{"id":1956306887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1613","title":"Aws lambda cookies fix","body":"### Issue: Unable to set multiple cookies when using aws-lambda adapter\r\nThe `getCookie`  and `setCookie` helpers don't work properly when handling multiple cookies with aws-lambda adapter because of different versions of request and response payload in `API Gateway Proxy Event`.\r\n\r\n### Fix implementation: \r\nI created two functions `getCookies` and `setCookies` in src/adapter/aws-lambda/handler.ts file to get and set cookies payload/header corresponding to the version of the `API Gateway Proxy Event`. Additionally, two tests for this implementation are added in the lambda runtime test file.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1956306887},{"id":1956530910,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1614","title":"feat: types for JSX elements","body":"This PR introduces type definitions for JSX elements to enhance the developer experience.\r\n\r\n### Approach\r\n\r\nThere are several ways to add types to JSX elements. With this PR, the approach taken is as follows:\r\n\r\n* Define types manually, without referring to the DOM lib.\r\n* Main tags are ported from React's definitions: https://www.npmjs.com/package/@types/react?activeTab=code\r\n* Removed some elements and attributes such as ARIA's to keep it minimum.\r\n* Renamed some properties for HTML compatibility, e.g., `readOnly` to `readonly`.\r\n* For compatibility with unknown elements and attributes, it allows any elements and attributes.\r\n\r\n### Screenshots\r\n\r\n<img width=\"1098\" alt=\"Screenshot 2023-10-23 at 17 47 03\" src=\"https://github.com/honojs/hono/assets/10682/ce0587b8-1369-4ba3-ac02-9cd644553843\">\r\n\r\n<img width=\"637\" alt=\"Screenshot 2023-10-23 at 17 49 03\" src=\"https://github.com/honojs/hono/assets/10682/3d1104be-a59b-4367-8643-ae924e27f544\">\r\n\r\n### Allowing any elements and attributes\r\n\r\nIn this PR, any elements and any attributes are allowed. This is defined as follows:\r\n\r\nAttributes:\r\n\r\n```ts\r\ntype AnyAttributes = { [attributeName: string]: any }\r\n\r\n//...\r\n\r\ninterface HTMLAttributes extends JSXAttributes, AnyAttributes {\r\n```\r\n\r\nElements:\r\n\r\n```ts\r\ntype IntrinsicElements = IntrinsicElementsDefined & { [tagName: string]: Props }\r\n```\r\n\r\nThis means that the feature doesn't support type safety completely, but it offers flexibility. You can use user-defined tags and maintain backward compatibility.\r\n\r\nThis doesn't throw an error.\r\n\r\n<img width=\"443\" alt=\"Screenshot 2023-10-23 at 18 06 09\" src=\"https://github.com/honojs/hono/assets/10682/b4220351-0a25-4c82-a446-d0b5df2b28ea\">\r\n\r\nI believe it shouldn't be too strict in this case for JSX, as flexibility is important and this approach can sufficiently improve DX.\r\n\r\n---\r\n\r\nResolves #1409","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1956530910},{"id":1958325581,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1616","title":"feat: Declare in the Hono namespace so that it can be overridden by the user.","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1958325581},{"id":1958943089,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1618","title":"[Client types] make args param optional if the input has no required keys","body":"This PR modifies the `ClientRequest` type, so the `args` param is only required if the input has required keys (specified by the validator).\r\n\r\n![CleanShot 2023-10-24 at 12 20 21@2x](https://github.com/honojs/hono/assets/16190582/a0f9b4e9-e9cd-4370-b40f-af9c1d6d4189)\r\n\r\n\r\nSee #1583","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1958943089},{"id":1960307367,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1620","title":"AWS Lambda Adapter only keeps requestContext from API GW event and loses the rest","body":"### What version of Hono are you using?\r\n\r\n3.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNodeJS\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI've deployed my hono app to AWS lambda, however, it seems we lose the cookies from the request. I'm looking at this file: https://github.com/honojs/hono/blob/main/src/adapter/aws-lambda/handler.ts. Comparing a log of a lambda using hono vs log of a regular lambda, my hono lambda only has the requestContext while the regular lambda has the entire API GW event. Why doesn't the adapter retain the cookies?\r\n![image](https://github.com/honojs/hono/assets/136749565/cde04137-e464-42f0-8df3-048403391ee2)\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nI want hono context to retain more info from the API GW event rather than just the requestContext. What is the purpose of stripping this info?\r\n\r\n### What do you see instead?\r\n\r\nOnly the requestContext remains on the hono context after using the aws-lambda hono adapter\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1960307367},{"id":1964483941,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1621","title":"feat(jsx-renderer): `docType` option","body":"Currently, when using JSX Renderer, we can't easily add a `DOCTYPE`. This PR introduces a `docType` option for the JSX Renderer to add a `DOCTYPE`.\r\n\r\n```tsx\r\napp.use(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    { docType: true }\r\n  )\r\n)\r\n```\r\n\r\nIf you want to customize the `DOCTYPE`, you can pass the string:\r\n\r\n```tsx\r\napp.use(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      docType:\r\n        '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\r\n    }\r\n  )\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1964483941},{"id":1964512617,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1622","title":"feat(helper/adapter): add `runtime` option to `env`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1964512617},{"id":1964539683,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1623","title":"perf: The doctype is determined on initialization, not on request.","body":"If the initialized app handles multiple requests, it is better to determine the docType at the time of the createRenderer call.\r\n\r\nHowever, in an environment where only a single request is handled (such as where LinearRouter is active), it is better to determine docType at request time (since the response may not be rendered in JSX). If the focus is on that use case, I don't think this PR is necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1964539683},{"id":1964940881,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1624","title":"Next","body":"Let's go!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1964940881},{"id":1966421270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1625","title":"feat(adaptor): Support AWS Function URL Streaming","body":"fixed: https://github.com/honojs/hono/issues/1183\r\n\r\nWe were able to run the streaming response by operating this module on the actual machine. Unfortunately, awslambda.streamifyResponse provided by AWS Lambda is globally available in the Lambda Nodejs environment, but no method for local testing is provided.\r\n\r\nTherefore, we decided to separate it as streamHandle from the existing handle. This way, even if there's a bug, existing users won't be affected. Whether to release this as 'experimental' or to halt integration until a testing method is established is a challenging decision.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1966421270},{"id":1966554676,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1626","title":"feat(jsx): Support async component.","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1966554676},{"id":1966766684,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1627","title":"Typescript transpiler","body":"### What is the feature you are proposing?\n\nHello. I created (mainly for myself) a typescript middleware that will automatically transpile TS files to JS on the fly. It's  simple, and you can see the code in the module page [Hono Typescript](https://deno.land/x/hono_typescript@0.1.2#hono-typescript) and in the [Github Repo](https://github.com/acrodrig/hono_typescript). \r\n\r\nIt's very similar to how the [Pretty JSON](https://hono.dev/middleware/builtin/pretty-json) middleware works (used that code for inspiration). It essentially enables this type of server:\r\n\r\n```typescript\r\nimport { Hono } from \"hono\";\r\nimport { serveStatic } from \"hono/middleware.ts\";\r\nimport { transpiler } from \"hono_typescript/mod.ts\";\r\n\r\nconst app = new Hono();\r\n\r\n// Add the transpiler middleware to the app\r\n// IT WILL TRANSFORM A TS FILE INTO JS FOR BROWSER CONSUMPTION\r\napp.use(\"*\", transpiler());\r\n\r\napp.use(\"/static/*\", serveStatic({ root: \"./\" }));\r\napp.use(\"/favicon.ico\", serveStatic({ path: \"./favicon.ico\" }));\r\napp.get(\"/\", (c) => c.text(\"This is Home! You can access: /static/hello.txt\"));\r\n```\r\n\r\nMy questions/comments are:\r\n\r\n- Is this something that would be of interest to the Hono maintainers?\r\n- Is it possible to achieve the same result already via another middleware?\r\n- This will obviously not work on the browser. Is that a deal breaker?\r\n\r\nIf the answer is on the positive I would need to see how to make it work for Node.js as well, which should not be too difficult because I believe the `emit` package is node-first.\r\n\r\nCheers.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1966766684},{"id":1966859666,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1628","title":"feat: support route's cleanup feature like `app.clean()` or `app.reset()`","body":"### What is the feature you are proposing?\r\n\r\nI thought that if there was a function to cleanup of route at test time, the test could be written more concisely.\r\n\r\n## Behavior\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\napp.get(\"/aaa\", (c) => c.text(\"aaa\"))\r\n\r\napp.showRoutes()\r\n// GET       /aaa\r\n\r\napp.clean()\r\n\r\napp.showRoutes()\r\n// no routes\r\n```\r\n\r\n## In Test\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nafterEach(() => {\r\n  app.clean()\r\n})\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1966859666},{"id":1967169404,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1629","title":"Define routes as an object literal","body":"### What is the feature you are proposing?\n\nHey!\r\nIs it somehow possible to define my routes as an object literal, where each key is the route path and values are `Hono` instances?\r\nE.g:\r\n```tsx\r\nimport { Hono } from \"hono\";\r\n\r\nconst foo = new Hono().get(async (c) => c.jsonT(\"foo\"));\r\nconst bar = new Hono().get(async (c) => c.jsonT(\"bar\"));\r\n\r\n// this is currently what I have to do:\r\nconst router = new Hono()\r\n  .route(\"/foo\", foo)\r\n  .route(\"/bar\", bar);\r\n\r\n// this is what I want:\r\nconst router = new Hono().routes({ companies, contacts });\r\n```\r\n\r\nI was trying to come up with a util that would walk over the object and add every route with `.route`, but wouldn't make it work while preserving all types. \r\n\r\nAny ideas? Thanks!","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1967169404},{"id":1969231456,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1630","title":"feat: Introduce streaming API with `Suspense` and `use`.","body":"This PR is based on #1626.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1969231456},{"id":1969260242,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1631","title":"get Cookies from a Middleware","body":"### What version of Hono are you using?\n\n3.8.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nI'm running the project locally with wrangler, so I've 2 routes: `/sign-in` and `/me`.\r\n\r\nAt the first, I sign with and return the token as cookie.\r\n\r\nAt the second, I have a middleware `authenticate` that check if has cookie and throw or continue...\r\n\r\nThe issue is in this middleware.\r\n\r\n```ts\r\n// ...\r\nconst { token } = getCookie(c);\r\n// ...\r\n```\r\n\r\nToken is never getted using `getCookie` or `c.cookies` (as I know that is will deprecated on v4).\n\n### What is the expected behavior?\n\nI want to get the cookies from the domain.\n\n### What do you see instead?\n\nthe empty object from `c.cookies` or `getCookie(c)`\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1969260242},{"id":1969660237,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1632","title":"`c.req.query` should support generics","body":"### What is the feature you are proposing?\r\n\r\nHey\r\n\r\nCurrently, the type of `query` is `Record<string, string>`. However, when I have a predefined type, such as:\r\n\r\n```ts\r\ninterface A {\r\n  userId: string\r\n  type: 'all' | 'post'\r\n}\r\n```\r\n\r\nI hope the type of `query` can be changed to `A`, so that I can directly use `c.req.query<A>()` to pass parameters to functions that accept type `A`.\r\n\r\nPerhaps its type definition is like this:\r\n\r\n```ts\r\nquery<T = Record<string, string | undefined>>(): T\r\n```","state":"open","labels":"[\"enhancement\",\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1969660237},{"id":1970023098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1633","title":"fix(`package.json`): export types correctly","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1970023098},{"id":1970513497,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1634","title":"feat(req): support generics for query/queries/header","body":"May resolve #1632\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1970513497},{"id":1972413041,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1636","title":"chore(ci): maintenance Node.js","body":" made the following changes to the CI:\r\n\r\n- Updated to the latest version as Action's version v4 is now available.\r\nhttps://github.com/actions/setup-node/releases/tag/v4.0.0\r\n\r\n- Fixed the issue where multiple versions of Node.js could not be selected. Apologies!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1972413041},{"id":1974026140,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1638","title":"prettyJSON middleware doesn't work","body":"### What version of Hono are you using?\n\n3.9.1\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nimport { prettyJSON } from 'hono/pretty-json';\r\n\r\napp.use('/api/*', prettyJSON({ space: 4 }));\r\napp.get('/api/hello', (c) => c.json({ message: 'Hello World' }));\n\n### What is the expected behavior?\n\nshould return indented JSON data on the cloudflare workers site.\n\n### What do you see instead?\n\nunindented plain string.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1974026140},{"id":1974066474,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1639","title":"jwt middleware overrides context type","body":"### What version of Hono are you using?\n\n3.8.3\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nAdd the `jwt` middleware.\r\n\r\nTry to do `ctx.set('something', 'some value')\n\n### What is the expected behavior?\n\nIt should not give a typescript error:\r\n\r\ne.g.:\r\n```ts\r\n  ctx.set('userUuid', userUuidString);\r\n```\r\nGives the error\r\n```ts\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(key: \"jwtPayload\", value: any): void', gave the following error.\r\n    Argument of type '\"userUuid\"' is not assignable to parameter of type '\"jwtPayload\"'.\r\n  Overload 2 of 2, '(key: never, value: unknown): void', gave the following error.\r\n    Argument of type 'string' is not assignable to parameter of type 'never'.\r\n```\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1974066474},{"id":1974351330,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1640","title":"'basePath' doesn't work","body":"### What version of Hono are you using?\n\n3.9.1\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nconst api = new Hono().basePath('/api');\r\n\r\napi.get('/test', (c) => {\r\n\treturn c.text(c.req.path);\r\n});\n\n### What is the expected behavior?\n\nwhen visiting http://127.0.0.1:8787/api/test with browser, the page should return the path.\n\n### What do you see instead?\n\nI see '404 Not Found' only. It means the route '/api/test' isn't working.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1974351330},{"id":1976975115,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1642","title":"fix(utils/filepath): filepath supports Windows","body":"This PR makes `filepath` util supports Windows and prevents the path traversal on Windows.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1976975115},{"id":1977105150,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1643","title":"feat: Allow multiple routing paths to be configured for a single middleware (handler).","body":"### Author should do the followings, if applicable\r\n\r\n\r\n- [x] Add tests\r\n- [ ] Run tests (Type errors occur in several independent places.\r\nThe function itself works.)\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1977105150},{"id":1977159936,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1644","title":"Catch-All segments route","body":"### What is the feature you are proposing?\r\n\r\nRouting for catch all segments:\r\n\r\n```ts\r\napp.get(\"/app/:paths+\", async ({ env, req }) => {\r\n  const paths = req.param(\"paths\"); // => string[]\r\n});\r\n```\r\n\r\n[GET] /app/foo/bar\r\n```ts\r\nconst paths = req.param(\"paths\"); // => [\"foo\", \"bar\"]\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1977159936},{"id":1977666224,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1646","title":"Remove `experimental` flag from `createMiddleware()`","body":"### What is the feature you are proposing?\n\nThat's stable.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1977666224},{"id":1977804652,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1647","title":"feat: publish `hono` jsx support and parsing as separate package","body":"### What is the feature you are proposing?\n\nHey there 👋 \r\n\r\nI'm developing https://jsx.email and have been following hono's JSX support with great interest. The latest addition of `Suspense` that's due to drop soon is _very_ interesting for our use case, and we're planning on adopting that into our project. However, it would be amazing if the team would consider publishing that as a separate package so projects like jsx-email could depend on that rather than the entire `hono` framework.\r\n\r\nI know this is a bit of a wonky ask, but curious to see what the reaction to it is.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1977804652},{"id":1979135844,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1649","title":"Get requests with a body return a TypeError","body":"### What version of Hono are you using?\r\n\r\n^3.9.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nVercel\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Create a \"GET\" endpoint \r\n2. Make a call to that endpoint from Postman and give the endpoint a body\r\n3. Run the call, and then you get the error\r\n\r\nGenerated code (from Postman):\r\n```cURL\r\ncurl --location --request GET 'localhost:3000/api/ai/summarize' \\\r\n--header 'Content-Type: application/json' \\\r\n--header 'Authorization: Basic cGFwZXJhaTpNY0gzMTIhQ1t4XQ==' \\\r\n--data '{\r\n    \"textContent\": \"aloa\"\r\n}'\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe body should be ignored\r\n\r\n### What do you see instead?\r\n\r\n```\r\nTypeError: fetch failed\r\n    at fetch (user/node_modules/undici/index.js:109:13)\r\n    at async file:///user/node_modules/@vercel/node/dist/dev-server.mjs:732:22\r\n    at async Server.onDevRequest (file:///user/node_modules/@vercel/node/dist/dev-server.mjs:1146:48)\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1979135844},{"id":1980805057,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1650","title":"fix(helper): Stream SSE Helper Non-Closure","body":"I fixed a bug where the Stream SSE Helper would not close, preventing the session from ending. Additionally, I've implemented error handling for the pipe.\r\n\r\nActually, it was known that the AWS Lambda Adaptor did not terminate during testing, so I've added tests to cover that :)\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1980805057},{"id":1980881843,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1651","title":"feat(jsx): Define jsxTemplate/jsxAttr/jsxEscape for \"@jsx precompile\" of Deno 1.38","body":"### What is this PR?\r\n\r\nMerging this PR will support the JSX transforms included in Deno's 1.38\r\nhttps://deno.com/blog/v1.38#fastest-jsx-transform\r\n\r\nThe async component and `renderToReadableStream()` are also working.\r\n\r\n### Benchmark\r\n\r\nThe following benchmarks were used for comparison\r\n\r\n```ts\r\nimport { bench, run } from 'https://esm.sh/mitata'\r\n\r\nconst title = '<Hello>'\r\nconst name = '<Deno>'\r\nconst Component = (props: { name: string }) => (\r\n  <>\r\n    Hello <b>{props.name}!</b>\r\n  </>\r\n)\r\nconst getHtml = () => (\r\n  <div>\r\n    <a title={title}>\r\n      <Component name={name} />\r\n    </a>\r\n  </div>\r\n)\r\n\r\nif (getHtml().toString() !== '<div><a title=\"&lt;Hello&gt;\">Hello <b>&lt;Deno&gt;!</b></a></div>') {\r\n  throw new Error('failed')\r\n}\r\n\r\nbench('toString()', () => {\r\n  for (let i = 0; i < 10000; i++) {\r\n    getHtml().toString()\r\n  }\r\n})\r\n\r\nawait run()\r\n```\r\n\r\n#### \"react-jsx\" : Previously available\r\n\r\ndeno.json\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  },\r\n  \"imports\": {\r\n    \"hono/jsx/jsx-runtime\": \"./deno_dist/jsx/jsx-runtime.ts\",\r\n    \"hono\": \"./deno_dist/hono.ts\"\r\n  }\r\n}\r\n```\r\n\r\n```\r\n# deno run --allow-read bench-jsx.tsx \r\ncpu: unknown\r\nruntime: deno 1.38.0 (x86_64-unknown-linux-gnu)\r\n\r\nbenchmark       time (avg)             (min … max)       p75       p99      p995\r\n-------------------------------------------------- -----------------------------\r\ntoString()   12.31 ms/iter         (10 ms … 14 ms)     12 ms     14 ms     14 ms\r\n```\r\n\r\n#### \"precompile\" : Newly available\r\n\r\ndeno.json\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"precompile\",\r\n    \"jsxFragmentFactory\": \"Fragment\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  },\r\n  \"imports\": {\r\n    \"hono/jsx/jsx-runtime\": \"./deno_dist/jsx/jsx-runtime.ts\",\r\n    \"hono\": \"./deno_dist/hono.ts\"\r\n  }\r\n}\r\n```\r\n\r\n```\r\n# deno run --allow-read bench-jsx.tsx \r\ncpu: unknown\r\nruntime: deno 1.38.0 (x86_64-unknown-linux-gnu)\r\n\r\nbenchmark       time (avg)             (min … max)       p75       p99      p995\r\n-------------------------------------------------- -----------------------------\r\ntoString()    7.65 ms/iter          (6 ms … 72 ms)      8 ms     72 ms     72 ms\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1980881843},{"id":1982644490,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1653","title":"feat(helper/factory): remove `@experimental` from `createMiddleware()`","body":"Resolves #1646\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1982644490},{"id":1982857775,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1654","title":"renderToReadableStream and Suspense runs async component twice","body":"### What version of Hono are you using?\r\n\r\nnext\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\nUse the following components\r\n\r\n```jsx\r\nconst AsyncThing = async () => {\r\n    console.log(\"Async start\");\r\n    await new Promise(resolve => setTimeout(resolve, 1000))\r\n    console.log(\"Async end\")\r\n    return <div>Async thing</div>\r\n}\r\n\r\nexport const Home = () => {\r\n    console.log(\"Home\")\r\n    return <div>\r\n        <h1>Hey på deg!</h1>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n            <AsyncThing />\r\n        </Suspense>\r\n    </div>\r\n}\r\n```\r\n\r\nThen use renderToReadableStream on Home component\r\n\r\n```typescript\r\nconst stream = renderToReadableStream(Home());\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nI expect a console output like this\r\n\r\n```terminal\r\nHome\r\nAsync start\r\nAsync end\r\n```\r\n\r\nIndicating that the async component was ran only once.\r\n\r\n\r\n### What do you see instead?\r\n\r\nInstead I see\r\n\r\n```terminal\r\nHome\r\nAsync start\r\nAsync end\r\nAsync start\r\nAsync end\r\n```\r\n\r\nIndicating that the async component is ran twice.\r\n\r\n### Additional information\r\n\r\nWhen returning this as a stream the request takes ~2s to finish, instead of the expected ~1s.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1982857775},{"id":1983084524,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1655","title":"Context has any type in Deno","body":"### What version of Hono are you using?\n\n3.9.2\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nCreating a new Hono project:\r\n```bash\r\nnpm create hono@latest hono-with-deno\r\n\r\n# and choosing template\r\n> deno\r\n```\r\n\r\nOn Hono 3.9.2 and Deno 1.38 I get this:\r\n\r\n<img width=\"700\" alt=\"Screenshot 2023-11-08 at 09 49 52\" src=\"https://github.com/honojs/hono/assets/10611239/5162079b-b894-404b-a8dd-6458596c8310\">\r\n\r\n---\r\n\r\nBut switching to Hono 3.9.0, `c` is properly typed again:\r\n\r\n<img width=\"671\" alt=\"Screenshot 2023-11-08 at 09 54 57\" src=\"https://github.com/honojs/hono/assets/10611239/0baa798d-9527-435b-bf83-fc161d50399c\">\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983084524},{"id":1983130564,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1656","title":"fix(jsx/streaming): Fixed a bug that caused async components to be evaluated multiple times inside Suspense.","body":"Fixes #1654\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983130564},{"id":1983445753,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1657","title":"Rename \"Compute@Edge\" to \"Compute\" for Fastly","body":"### What is the feature you are proposing?\n\nFastly \"Compute@Edge\" was renamed to \"Compute\".\r\n\r\n> Fastly’s Compute platform, formerly known as Compute@Edge, helps you compile your custom code to WebAssembly and runs it at the Fastly edge using the WebAssembly System Interface for each compute request...\r\n> https://docs.fastly.com/products/compute","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983445753},{"id":1983560833,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1658","title":"Nested Suspense not working","body":"### What version of Hono are you using?\n\nnext\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nSet up request and components:\r\n\r\n```jsx\r\nconst AsyncThing = async () => {\r\n  console.log(\"Async start\");\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n  console.log(\"Async end\");\r\n  return <div class=\"bg-red-500\">Async thing</div>;\r\n};\r\n\r\nconst Home = async () => {\r\n  console.log(\"Home\");\r\n  await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n      <Suspense fallback={<div>Loading AsyncThing...</div>}>\r\n        <AsyncThing />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TestPage: FC = () => {\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<div>Loading Home...</div>}>\r\n        <Home />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\napp.get('/', (c) => {\r\n    console.log(\"------------------\")\r\n    console.log(\"Request start\")\r\n\r\n    return c.stream(async s => {\r\n        s.write(\"<!DOCTYPE html>\");\r\n        const stream = renderToReadableStream(<TestPage />);\r\n        for await (const chunk of stream) {\r\n            s.write(chunk);\r\n        }\r\n        s.close();\r\n    }, {\r\n        headers: {\r\n            'Content-Type': 'text/html; charset=utf-8',\r\n        },\r\n        status: 200,\r\n    })\r\n});\r\n```\r\n\r\nThen visit \"/\".\n\n### What is the expected behavior?\n\nFirst the outer suspense to resolve and stream down it's result, then the inner suspense should do the same. Taking in total 2s.\n\n### What do you see instead?\n\nOnly the outer suspense is resolved and renders it's result. The request ends after 1s with \"Loading AsyncThing...\" visible.\r\n\r\nServer side I can observe the AsyncThing component actually invoked, but the result is not sent to user as the request already ended.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983560833},{"id":1983634778,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1659","title":"Make JSX Renderer supports stream","body":"### What is the feature you are proposing?\r\n\r\nMake JSX Renderer middleware supports a stream. We can add the `stream` option like this:\r\n\r\n```tsx\r\napp.get(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <head>\r\n            <title>Hello!</title>\r\n          </head>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      stream: true\r\n    }\r\n  )\r\n)\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983634778},{"id":1983701087,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1660","title":"feat(jsx/streaming): Support nested Suspense.","body":"Fixes #1658\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983701087},{"id":1983750098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1661","title":"JSX Context API supports Async","body":"### What is the feature you are proposing?\n\nWe have to make this code works well.\r\n\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { createContext, useContext } from 'hono/jsx'\r\n\r\nconst app = new Hono()\r\n\r\nconst ThemeContext = createContext('light')\r\nconst Consumer = async () => {\r\n  const theme = useContext(ThemeContext)\r\n  return <span>{theme}</span>\r\n}\r\n\r\napp.get('/', async (c) => {\r\n  return c.html(\r\n    <ThemeContext.Provider value='dark'>\r\n      <Consumer />\r\n    </ThemeContext.Provider>\r\n  )\r\n})\r\n\r\nexport default app\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983750098},{"id":1983871916,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1662","title":"feat(jsx-renderer): Support \"stream\" option in jsxRenderer.","body":"@yusukebe \r\nHow about this?\r\nImplemented: #1659\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983871916},{"id":1983997634,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1663","title":"perf(jsx/streaming): In multiple Suspense, go ahead in the order of resolved.","body":"Prior to this PR, if there were multiple nested Suspense, they were processed in stages, but in this PR, they will be processed first in the order of termination.\r\n\r\nIn the test I added this PR, it was `<p>last</p><p>first</p>` before this PR, but now it is `<p>first</p><p>last</p>` with this PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1983997634},{"id":1984322826,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1664","title":"docs: rename Fastly `Compute@Edge` to `Compute`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1984322826},{"id":1984354077,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1665","title":"fix(jsx/streaming): Fixed a problem when multiple children are added directly under Suspense.","body":"@yusukebe I'm adding a few more bug fixes now, so please wait a bit.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1984354077},{"id":1984600049,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1666","title":"Inferring a type for `Hono` returned from a handler","body":"### What version of Hono are you using?\n\n3.9.2\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n```ts\r\nconst someMiddleware = createMiddleware<{ Variables: { foo: string } }>(async () => {})\r\n\r\nconst app = new Hono().get(someMiddleware).get('/', (c) => {\r\n  c.var.foo // <- fails here\r\n  return c.json(0)\r\n})\r\n```\n\n### What is the expected behavior?\n\nNo type error.\n\n### What do you see instead?\n\nType error.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1984600049},{"id":1984651327,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1667","title":"Remove experimental flag mount API","body":"### What is the feature you are proposing?\r\n\r\nI'm curious how long the experiment flag will remain on.\r\nOur company uses [`mount`](https://hono.dev/api/hono#mount) API. I would be in trouble if this flag was removed, but when will this flag be removed?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1984651327},{"id":1984932451,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1668","title":"fix(types): infer env types with chaining handlers","body":"Fixes #1666\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1984932451},{"id":1984954523,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1669","title":"feat(hono): remove `experimental` flag from `app.mount()`","body":"Closes #1667\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1984954523},{"id":1985921428,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1672","title":"streamHandle is can not Setting Content Type","body":"### What version of Hono are you using?\r\n\r\n3.10.0-rc.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nAWS Lambda\r\n\r\n### What steps can reproduce the bug?\r\n\r\n## SSE\r\n\r\n```ts\r\napp.get('/sse', async (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    for (let i = 0; i < 10; i++) {\r\n      const message = `It is ${new Date().toISOString()}`\r\n      await stream.writeSSE({ data: message, event: 'time-update', id: String(i) })\r\n      await stream.sleep(1000)\r\n    }\r\n  })\r\n})\r\n```\r\n\r\n### return\r\n\r\n```bash\r\ncurl -D - https://xxxxxxxx.lambda-url.ap-northeast-1.on.aws/sse\r\nHTTP/1.1 200 OK\r\nDate: Thu, 09 Nov 2023 15:41:50 GMT\r\nContent-Type: application/octet-stream\r\nTransfer-Encoding: chunked\r\nConnection: keep-alive\r\nx-amzn-RequestId: 0b12164f-f26b-47ed-af94-accfc3fc6fbe\r\nX-Amzn-Trace-Id: root=1-654cfdbc-39cfc19d7817a529600d0bdd;sampled=0;lineage=75a52790:0\r\n\r\nevent: time-update\r\ndata: It is 2023-11-09T15:41:48.779Z\r\nid: 0\r\n...\r\n```\r\n\r\n## jsx\r\n\r\n```ts\r\napp.use(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      docType: true,\r\n      stream: true,\r\n    }\r\n  )\r\n)\r\nconst AsyncComponent = async () => {\r\n  const c = useRequestContext()\r\n  return <p>Hello {c.req.query('name')}!</p>\r\n}\r\napp.get('/render', (c) =>\r\n  c.render(\r\n    <Suspense fallback={<p>Loading...</p>}>\r\n      <AsyncComponent />\r\n    </Suspense>,\r\n    { title: 'Title' }\r\n  )\r\n)\r\n\r\n```\r\n\r\n### return\r\n\r\n```bash\r\ncurl -D - https://xxxxxxxx.lambda-url.ap-northeast-1.on.aws/render&name=hono\r\n[1] 3109\r\n$ HTTP/1.1 200 OK\r\nDate: Thu, 09 Nov 2023 15:47:41 GMT\r\nContent-Type: application/octet-stream\r\nTransfer-Encoding: chunked\r\nConnection: keep-alive\r\nx-amzn-RequestId: a1d825d7-8ddc-4e8b-8679-98f0105a9dc5\r\nX-Amzn-Trace-Id: root=1-654cff1d-5945d82a58228f351a84d9fd;sampled=0;lineage=75a52790:0\r\n\r\n<!DOCTYPE html>[object Promise]\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nIt's `Content-Type: application/octet-stream.` For instance, if it's SSE, it should be `Content-Type: text/event-stream`, and if it's a render, it should be `Content-Type: text/html; charset=UTF-8`.\r\n\r\n### What do you see instead?\r\n\r\nThere's not much information available, but the following is suggested in this article.\r\nhttps://docs.aws.amazon.com/ja_jp/lambda/latest/dg/response-streaming-tutorial.html#response-streaming-tutorial-create-function-cfn\r\nhttps://aws.amazon.com/jp/blogs/compute/using-response-streaming-with-aws-lambda-web-adapter-to-optimize-performance/\r\n\r\n```ts\r\nexports.handler = awslambda.streamifyResponse(\r\n                async (event, responseStream, _context) => {\r\n                    // Metadata is a JSON serializable JS object. Its shape is not defined here.\r\n                    const metadata = {\r\n                    statusCode: 200,\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"CustomHeader\": \"outerspace\"\r\n                    }\r\n                    };\r\n                \r\n                    // Assign to the responseStream parameter to prevent accidental reuse of the non-wrapped stream.\r\n                    responseStream = awslambda.HttpResponseStream.from(responseStream, metadata);\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1985921428},{"id":1986049124,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1673","title":"fix(Adaptor): Lambda Response Streaming With Content Type ","body":"fixed: https://github.com/honojs/hono/issues/1672\r\n\r\nI'd like to share that we have completed actual device verification with AWS Lambda for the magic method awslambda.HttpResponseStream.from, which adds metadata (statusCode, Headers) to the responseStream.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1986049124},{"id":1986373510,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1674","title":"Add a `group` method for applying middleware to a group of routes","body":"### What is the feature you are proposing?\r\n\r\n\r\nI propose that the Hono instance provide a method (`group` or something to that effect) for applying middleware to a group of routes that don't necessarily share a base path. This would function similarly to the `app.route()` method, except it would omit the `path` argument. \r\n\r\nHere is one example of how the syntax for this functionality might look:\r\n\r\n```ts\r\nconst app = new Hono();\r\n\r\napp.group(a(), few(), middleware(), (app) => {\r\n  // ... normal `app` methods could be called here\r\n});\r\n```\r\n\r\n### Further Thoughts\r\n\r\n#### Could `app.route()` do the same thing?\r\n\r\nThe `route` method can almost handle this functionality, but it necessitates that all the routes added within share the same base path. The proposed `group` method would not impose this restriction.\r\n\r\n### Inspiration\r\n\r\nThis feature is inspired by the Laravel framework's [Route Groups](https://laravel.com/docs/10.x/routing#route-groups) middleware handler:\r\n\r\n```php\r\nRoute::middleware(['first', 'second'])->group(function () {\r\n    Route::get('/', function () {\r\n        // Uses first & second middleware...\r\n    });\r\n \r\n    Route::get('/user/profile', function () {\r\n        // Uses first & second middleware...\r\n    });\r\n});\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1986373510},{"id":1986448511,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1676","title":"feat(context): add fetch method for internal requests","body":"Allows a Hono app to make an internal request to itself. \r\n\r\nSee the discussion here: #1675\r\nIssue: #1677 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1986448511},{"id":1986512328,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1677","title":"Context method to send request to self","body":"Sometimes in a view route, I want to call an another route handler to get data. It would be awesome if Hono has this built in. \r\n\r\nRuntimes like Cloudflare workers do not allow workers to \"fetch\" themselves over the network so this would be a nice work around that would allow hono to skip the network entirely and just call itself.  \r\n\r\n## Proposed API\r\n```jsx\r\nconst app = new Hono():\r\n\r\napp.get(\"/api/data\", async c => {\r\n  // get some data\r\n  return c.json(data);\r\n});\r\n\r\napp.get(\"/view\", async c => {\r\n  const resp = await c.fetch(\"/api/data\", c.req.raw); // follows `Fetch` API\r\n  const data = await resp.json();\r\n  return c.render(<SomeComponent data={data} />);\r\n});\r\n```\r\n\r\nI'd be happy to send a PR if maintainers are open to this change.\r\n\r\n_Originally posted by @nicksrandall in https://github.com/honojs/hono/discussions/1675_","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1986512328},{"id":1987906503,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1678","title":"AWS Lambda streaming works correctly?","body":"### What version of Hono are you using?\n\nnext\n\n### What runtime/platform is your app running on?\n\nAWS Lambda\n\n### What steps can reproduce the bug?\n\n```ts\r\nimport { Hono } from 'hono'\r\nimport { streamHandle } from 'hono/aws-lambda'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/stream', (c) => {\r\n  return c.streamText(async (stream) => {\r\n    for (let i = 0; i < 10; i++) {\r\n      const message = `It is ${new Date().toISOString()}`\r\n      await stream.writeln(message)\r\n      await stream.sleep(1000)\r\n    }\r\n  })\r\n})\r\n\r\nexport const handler = streamHandle(app)\r\n```\n\n### What is the expected behavior?\n\nThe Lambda function returns a stream immediately.\n\n### What do you see instead?\n\nIt returns a stream, but there is a lag the first time. It does not return it immediately.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/e70d1760-7125-4195-befd-2dc0b6574971\r\n\r\n\n\n### Additional information\n\nThe same behavior occurs with the AWS samples:\r\n\r\nhttps://github.com/aws-samples/serverless-patterns/tree/main/lambda-streaming-ttfb-write-sam\r\n\r\nThis returns an HTML stream response, but there is a time lag the first time.\r\n\r\nSo, it might be an issue with AWS or there could be something wrong with my configuration.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1987906503},{"id":1988868662,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1680","title":"fix(types): allow arbitrary values as environment values","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nRight now it is only possible to set a string as environment value. But in my case I'm using [Cloudflare Pages Functions](https://developers.cloudflare.com/pages/platform/functions/) which allows me to [bind](https://developers.cloudflare.com/pages/platform/functions/bindings/) different kinds of Cloudflare resources.\r\n\r\nFor example I want to bind my Pages Function (which is a [Cloudflare Worker](https://developers.cloudflare.com/workers/) in the end) to [R2](https://developers.cloudflare.com/r2/). Therefore I have to use `R2Bucket` as type:\r\n\r\n```ts\r\nimport { env } from \"hono/adapter\";\r\n\r\ntype Environment = {\r\n\treadonly MY_BUCKET: R2Bucket;\r\n}\r\n\r\nconst { MY_BUCKET } = env<Environment>(context, \"workerd\");\r\n```\r\n\r\nWith the current implementation I'm just able to assign `string` to `MY_BUCKET` (compiler error message: `Type 'R2Bucket' is not assignable to type 'string'`)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1988868662},{"id":1989148863,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1681","title":"How can i bundle hono app with esbuild?","body":"I have been trying to bundle a hono app which uses jsx using esbuild. Can someone tell me the way to do this. I'm able to bundle but when i add that js file as script and run http-server it doesnt work as intended","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989148863},{"id":1989162785,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1682","title":"fix(context): implement `ContextVariableMap` for `c.var`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989162785},{"id":1989241867,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1683","title":"  `c.req.raw.referrer` is missing","body":"### What version of Hono are you using?\n\n3.9.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Worker\n\n### What steps can reproduce the bug?\n\nAttempting to use `c.req.referrer` results in a deprecation warning, and advises to use `c.req.raw.referrer` instead. The problem is that  `c.req.raw.referrer` appears to not exist!\n\n### What is the expected behavior?\n\n`c.req.raw.referrer` should be available, or the deprecation warning should point to the correct location.\n\n### What do you see instead?\n\nThe  `c.req.raw.referrer` property does not exist.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989241867},{"id":1989243560,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1684","title":"Change default HTTP status of c.redirect to 307","body":"### What is the feature you are proposing?\n\nWould there be openness to changing the default status code for `c.redirect` from [302 Found](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302) to [307 Temporary Redirect](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307)?\r\n\r\nThere are a few differences between these codes, but here is a brief summary from MDN:\r\n\r\n<blockquote>\r\n  The only difference between <code>307</code> and <a href=\"/en-US/docs/Web/HTTP/Status/302\"><code>302</code></a> is that\r\n  <code>307</code> guarantees that the method and the body will not be changed when the\r\n  redirected request is made. With <code>302</code>, some old clients were incorrectly\r\n  changing the method to <a href=\"/en-US/docs/Web/HTTP/Methods/GET\"><code>GET</code></a>: the behavior with non-<code>GET</code>\r\n  methods and <code>302</code> is then unpredictable on the Web, whereas the behavior with\r\n  <code>307</code> is predictable. For <code>GET</code> requests, their behavior is\r\n  identical.\r\n</blockquote>\r\n\r\nThe immediate benefit from switching to `307` would be that redirects used for non-GET routes would function as expected.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989243560},{"id":1989318468,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1685","title":"feat: `next()` without `await`","body":"I realized that we don't have to write `await` for `next()` in middleware. This means if it does not have async functions in middleware, you can write like the following:\r\n\r\n```ts\r\napp.get('*', (c, next) => {\r\n  console.log('this is middleware')\r\n  next()\r\n  c.res.headers.append('foo', 'bar')\r\n})\r\n```\r\n\r\nIf so, this improves performance when using middleware. Using `await` will be slow with many middlewares.\r\n\r\nI've taken a benchmark. The code is here:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { createMiddleware } from 'hono/factory'\r\n\r\nconst app = new Hono()\r\n\r\nconst mwWithAwait = createMiddleware(async (c, next) => {\r\n  const foo = 'foo'\r\n  await next()\r\n})\r\n\r\nconst mwWithoutAwait = createMiddleware((c, next) => {\r\n  const foo = 'foo'\r\n  next()\r\n})\r\n\r\napp.get('/', (c) => c.text('hi'))\r\napp.get('/mwWithAwait', mwWithAwait, mwWithAwait, mwWithAwait, mwWithAwait, mwWithAwait, (c) => c.text('hi'))\r\napp.get('/mwWithoutAwait', mwWithoutAwait, mwWithoutAwait, mwWithoutAwait, mwWithoutAwait, mwWithoutAwait, (c) =>\r\n  c.text('hi')\r\n)\r\n```\r\n\r\nAnd the result:\r\n\r\n<img width=\"823\" alt=\"Screenshot 2023-11-12 at 18 08 57\" src=\"https://github.com/honojs/hono/assets/10682/bb2a892a-776c-4da2-8ff9-7c777d2ca611\">\r\n\r\nWe can use `next()` without `await`, we just haven't done it that way until now.\r\n\r\nIn this PR, I've added tests for without `await` and fixed the type definitions.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989318468},{"id":1989415653,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1686","title":"Async Middleware forwarding wrong URL","body":"### What version of Hono are you using?\r\n\r\n3.9.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have an endpoint with an **id** as URL param and a custom async middleware that validates an RS256 JWT. When I post multiple (e.g. 3) requests with **different** ids against the endpoint below **at the same time,** For some reason, the log statement entails the **same** or at least **partially the same** id. \r\n\r\nExample: \r\nSending these 3 post requests: \r\n- POST /1/start\r\n- POST /2/start\r\n- POST /3/start\r\n\r\nresults in the following logs:\r\nid, 1\r\nid, 1\r\nid, 3\r\n\r\n\r\n```\r\nimport * as jose from \"https://deno.land/x/jose@v4.14.4/index.ts\";\r\n\r\n// token middleware\r\nconst validateToken = async (c, next: any) => {\r\n  // get the Bearer token from the header\r\n  const bearerToken = c.req.header(\"Authorization\");\r\n  console.log(c.req.url);\r\n\r\n  if (!bearerToken) return c.text(\"Unauthorized\", 401);\r\n\r\n  // verify the token\r\n  const jwt = bearerToken.split(\" \")[1];\r\n  const alg = \"RS256\";\r\n\r\n  try {\r\n    const auth0_cert = atob(Deno.env.get(\"AUTH0_CERT_BASE64\") || \"\");\r\n    const publicKey = await jose.importX509(auth0_cert, alg);\r\n    const { payload } = await jose.jwtVerify(jwt, publicKey, {\r\n      issuer: Deno.env.get(\"AUTH0_ISSUER\"),\r\n      audience: Deno.env.get(\"AUTH0_AUDIENCE\"),\r\n    });\r\n\r\n    // add user_id from token to the context\r\n    c.set(\"user_id\", payload.sub);\r\n  } catch (err) {\r\n    console.log(err);\r\n    return c.text(\"Unauthorized\", 401);\r\n  }\r\n\r\n  await next();\r\n};\r\n```\r\n \r\n```\r\n\r\n// endpoint\r\napp.post(\r\n  \"/:id/start\",\r\n  validateToken,\r\n  async (c) => {\r\n    const id = c.req.param(\"id\");\r\n    console.log(\"id\", id);\r\n    },\r\n);\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n### What is the expected behavior?\r\n\r\nI would expect, that the URLs are properly forwarded in the middleware. So that in the end, I have 3 different log statements. E.g. \r\n\r\n- id 1\r\n- id 2\r\n- id 3\r\n\r\n### What do you see instead?\r\n\r\n- id 1\r\n- id 1\r\n- id 3\r\n\r\n### Additional information\r\n\r\nI have tried to use the validation as global middleware, as URL specific middleware and as validator always with the same results. ","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989415653},{"id":1989470187,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1687","title":"feat(app): use `console.error()` for default `errorHandler`","body":"Using `console.error(err)` is better than `console.trace(err)` to understand what is happening.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989470187},{"id":1989603330,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1688","title":"Built-in CSRF helper","body":"### What is the feature you are proposing?\n\nIt would be useful to have some sort of CSRF protection mechanism built in that users could opt in to if desired. \r\n\r\nOSWAP’s [cheat sheet for CSRF Prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html) has a few strategies that could be implemented in a helper. \r\n\r\nIf maintainers are open to this, I would be glad to put forth a PR, as this is definitely a feature I would take advantage of. ","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989603330},{"id":1989638223,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1689","title":"Introduce SyncMiddlewareHandler.","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989638223},{"id":1989913968,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1690","title":"Next","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1989913968},{"id":1990925555,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1691","title":"Deno Type Error: Parameter 'c' implicitly has an 'any' type.","body":"### What version of Hono are you using?\n\n3.10.0\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\n```ts\r\nimport { Hono } from 'https​://deno.land/x/hono​@v3.10.0/mod.ts'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => c.text('Hello Deno!')) // Parameter 'c' implicitly has an 'any' type.\r\n\r\nDeno.serve(app.fetch)\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1990925555},{"id":1991915486,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1693","title":"#Node.js v18.17.1# bunx create-hono:DegitError: could not find commit hash for main","body":"### What version of Hono are you using?\n\n latest\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nbunx create-hono\r\n\r\ncreate-hono version 0.3.2\r\n✔ Target directory … my-hono-bunx\r\n✔ Which template do you want to use? › bun\r\n/private/tmp/create-hono@latest--bunx/node_modules/create-hono/bin:10787\r\n          throw new DegitError(`could not find commit hash for ${repo.ref}`, {\r\n                ^\r\n\r\nDegitError: could not find commit hash for main\r\n    at Degit._cloneWithTar (/private/tmp/create-hono@latest--bunx/node_modules/create-hono/bin:10787:17)\r\n    at async Degit.clone (/private/tmp/create-hono@latest--bunx/node_modules/create-hono/bin:10646:11) {\r\n  code: 'MISSING_REF',\r\n  ref: 'main'\r\n}\r\n\r\nNode.js v18.17.1\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1991915486},{"id":1992442157,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1694","title":"Invalid HTTP header error is hidden","body":"This error is captured and never shown which may by misleading. This PR suggest to throw this error directly to the reponse.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1992442157},{"id":1992492062,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1695","title":"TypeError: Response body object should not be disturbed or locked","body":"### What version of Hono are you using?\n\n3.9.0\n\n### What runtime/platform is your app running on?\n\nFirebase functions\n\n### What steps can reproduce the bug?\n\nHere is a simple example with POST end point. \r\n\r\n```ts\r\nimport { getRequestListener } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.post('/hello', async (c) => {\r\n  return c.text('Hello World!')\r\n})\r\n\r\nexport const web = onRequest(getRequestListener(app.fetch))\r\n```\n\n### What is the expected behavior?\n\nRequst should reach Heno and Hello World should appear.\n\n### What do you see instead?\n\nThere is an following silent error 500 when doing a POST request with payload. By placing an console.log in https://github.com/honojs/node-server/blob/3575d60a15e345700b81e22376825e98b0a69ebe/src/listener.ts#L42 it is possible to see this error.\r\n```\r\nTypeError: Response body object should not be disturbed or locked\r\n    at extractBody (node:internal/deps/undici/undici:6433:17)\r\n    at new Request (node:internal/deps/undici/undici:7314:48)\r\n    at /<path>/functions/node_modules/@hono/node-server/dist/listener.js:48:33\r\n    at /<path>/functions/lib/functions/src/index.js:79:64\r\n    at /<path>/functions/node_modules/firebase-functions/lib/v2/providers/https.js:57:29\r\n    at cors (/<path>/functions/node_modules/cors/lib/index.js:188:7)\r\n    at /<path>/functions/node_modules/cors/lib/index.js:224:17\r\n    at originCallback (/<path>/functions/node_modules/cors/lib/index.js:214:15)\r\n    at /<path>/functions/node_modules/cors/lib/index.js:219:13\r\n    at optionsCallback (/<path>/functions/node_modules/cors/lib/index.js:199:9)\r\n```\n\n### Additional information\n\nSimilar issue is documented here https://github.com/honojs/node-server/issues/84\r\n\r\nAs far as I understand the issue occurs in https://github.com/honojs/node-server/blob/3575d60a15e345700b81e22376825e98b0a69ebe/src/listener.ts#L40 . Here the new Request is created from incoming request. \r\n\r\nFirebase use expressjs to process all request and also expose _Express JS Request_ object as an _incoming_. However this request is already \"processed\" and the actual body stream is already read. \r\n\r\nSo when on line https://github.com/honojs/node-server/blob/3575d60a15e345700b81e22376825e98b0a69ebe/src/listener.ts#L38 the read stream is create there is nothing to read. \r\n\r\nI am not sure if this is an issue of Hono or how to approach it. \r\n\r\nMy workaround is to patch listner file and restore body from rawBody.\r\n```ts\r\ndiff --git a/node_modules/@hono/node-server/dist/listener.js b/node_modules/@hono/node-server/dist/listener.js\r\nindex 3f5eaf7..e3541d0 100644\r\n--- a/node_modules/@hono/node-server/dist/listener.js\r\n+++ b/node_modules/@hono/node-server/dist/listener.js\r\n@@ -38,7 +38,14 @@ const getRequestListener = (fetchCallback) => {\r\n       headers: headerRecord\r\n     };\r\n     if (!(method === \"GET\" || method === \"HEAD\")) {\r\n-      init.body = import_node_stream.Readable.toWeb(incoming);\r\n+      // init.body = import_node_stream.Readable.toWeb(incoming);\r\n+      init.body = new ReadableStream({\r\n+        start(controller){\r\n+          controller.enqueue(incoming.rawBody);\r\n+          // controller.enqueue('{\"c\":\"d\"}');\r\n+            controller.close();\r\n+        }\r\n+      });\r\n       init.duplex = \"half\";\r\n     }\r\n     let res;\r\n\r\n```","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1992492062},{"id":1993660197,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1697","title":"feat(dev): add `showRoutes()` utility method instead of `app.showRoutes()`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1993660197},{"id":1994150415,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1699","title":"Using Context.status() does not work when using Context.text()","body":"### What version of Hono are you using?\n\n3.10.0\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\n```ts\r\nimport { Hono } from \"https://deno.land/x/hono@v3.10.0/mod.ts\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", (c) => {\r\n  c.status(403);\r\n  return c.text(\"Message received!\");\r\n});\r\n\r\nDeno.serve(app.fetch);\r\n\r\n```\n\n### What is the expected behavior?\n\nThe status code should be 403.\n\n### What do you see instead?\n\nIt is 200.\n\n### Additional information\n\nOther responses work good.\r\n\r\n```ts\r\nimport { Hono } from \"https://deno.land/x/hono@v3.10.0/mod.ts\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", (c) => {\r\n  c.status(403);\r\n  return c.html(\"<h1>Message received!</h1>\");\r\n});\r\n\r\nDeno.serve(app.fetch);\r\n```\r\n\r\nIt returns 403 status code.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1994150415},{"id":1994169549,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1700","title":"Calling Context.text() now sets the status set by Context.status()","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1994169549},{"id":1994395037,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1701","title":"perf(compose): simplify","body":"With this PR, I've refactored `compose.ts` to simplify it and improve performance.\r\n\r\nWe might consider adding changes to enhance performance as mentioned in [this comment](https://github.com/honojs/hono/pull/1685#issuecomment-1809240099).\r\n\r\nHowever, let's first focus on merging this refactoring. Although it's a `perf` change, it could be related to a new feature, so we should merge it into the `next` branch.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1994395037},{"id":1994413716,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1702","title":"fix(context): `c.text()` set the status set by `c.status()`","body":"Fixes #1699\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1994413716},{"id":1995620955,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1703","title":"`notFound` doesn't seem to work with Cloudflare Pages","body":"### What version of Hono are you using?\r\n\r\n3.10.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Pages\r\n\r\n### What steps can reproduce the bug?\r\n\r\nCreate a basic Hono api:\r\n\r\n```ts\r\n//index.ts\r\nimport { OpenAPIHono } from '@hono/zod-openapi';\r\nimport { notFoundRoute } from './routes/_404';\r\nimport { renderer } from './renderer';\r\n\r\nconst app = new OpenAPIHono();\r\napp.use('*', renderer)\r\napp.notFound(notFoundRoute);\r\n\r\n//routes/_404.tsx\r\nimport { NotFoundHandler } from 'hono';\r\n\r\nexport const notFoundRoute: NotFoundHandler = (ctx) =>\r\n  ctx.render(\r\n    <div class=\"grid h-full place-items-center\">\r\n      404 Not Found\r\n    </div>,\r\n    {\r\n      title: 'Not Found',\r\n    }\r\n  );\r\n```\r\n\r\nThis works fine locally, but once deployed to CF Pages, the `notFound` handler stops working and you just receive `404 Not Found` as the response.\r\n\r\nAdding a 404.html page to the uploaded `dist` doesn't seem to solve the issue either, and the same `text/plain` response is served.\r\n\r\n```sh\r\n.\r\n└── dist/\r\n    ├── static/\r\n    │   └── styles.css\r\n    ├── _worker.js\r\n    └── 404.html\r\n```\r\n\r\nUsing logs, it appears the the `notFound` handler is never invoked. I presumed adding a 404.html file would fix the issue, yet it still persists.\r\n\r\n### What is the expected behavior?\r\n\r\nI would expect either the `notFound` handler to fire, or default to the 404.html page per the CF Pages documentation.\r\n\r\n### What do you see instead?\r\n\r\nA `text/plain` response, which appears to be the default Hono 404 response.\r\n\r\n### Additional information\r\n\r\n[CF Pages 404 Docs](https://developers.cloudflare.com/pages/platform/serving-pages/#not-found-behavior)\r\n\r\nThis is a similar issue, but in my case I am not using `fetch`, I am serving pages via `ctx.render`. https://github.com/honojs/hono/issues/855","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1995620955},{"id":1995893371,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1705","title":"Feature Request: JSX Error Boundary Component (or Try-Catch in JSX)","body":"### What is the feature you are proposing?\n\nHi there,\r\n\r\nIt would be great if we could catch errors and render fallbacks in JSX components, either by allowing normal try-catch syntax inside a JSX component, like this (which currently doesn't work):\r\n\r\n```tsx\r\nfunction ThisThrows() {\r\n  throw new Error(\"Error\");\r\n  return <div>Won't be reached</div>;\r\n}\r\n\r\nfunction Fallback() {\r\n  return <div>Caught -- Why won't this render?</div>;\r\n}\r\n\r\nfunction ThisShouldCatch() {\r\n  try {\r\n    return <ThisThrows />;\r\n  } catch {\r\n    return <Fallback />;\r\n  }\r\n}\r\n\r\napp.get(\"/\", async (c) => {\r\n  // Results in 500 Internal Server Error, should it render Fallback?\r\n  return c.html(<ThisShouldCatch />);\r\n});\r\n```\r\n\r\n...or by introducing a new `ErrorBoundary` component, like this:\r\n\r\n```tsx\r\nimport { ErrorBoundary } from \"hono/jsx\";\r\n\r\nfunction ThisShouldCatch() {\r\n  return (\r\n    <ErrorBoundary fallback={<div>Caught</div>}>\r\n      <ThisThrows />\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n```\r\n\r\nWhat do you think?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1995893371},{"id":1995944532,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1706","title":"[Feature] Override the serializer for json","body":"### What is the feature you are proposing?\r\n\r\nIt would be great to be able to easily override the serializer in req/res of c.json.  I would like to use superjson to make date handling easier.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1995944532},{"id":1996245500,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1708","title":"ci: rename fastly `compute@edge` to `compute`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1996245500},{"id":1996338267,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1709","title":"Remove experimental flags from `c.render()` and `c.setRenderer()`","body":"### What is the feature you are proposing?\n\nNow, they are generally available.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1996338267},{"id":1996506792,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1710","title":"feat(adaptor): Enhance AWS Lambda Event Handling and Interface","body":"fixed https://github.com/honojs/hono/issues/1620\r\n\r\nTo provide full access to the Event, which is the input for AWS Lambda, the following modifications have been made:\r\n\r\n## 1. Review of the Event\r\n- Confirmed that having API Gateway versions 1.0 and 2.0 is sufficient after reviewing the specifications. The official documentation states that the Event for the traditional Lambda URL is same to version 2.0.\r\n  - [APIgw event](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html)\r\n  - [Lambda URL event](https://docs.aws.amazon.com/lambda/latest/dg/urls-invocation.html#urls-payloads)\r\n\r\n- Added missing properties in the Event Interface.\r\n\r\n- Renamed the externally exported `LambdaFunctionUrlRequestContext` to `ApiGatewayRequestContextV2` for name alignment with Event.\r\n  - This is a breaking change, so concurrently using the old name's copied Type for a certain period might be beneficial.\r\n\r\n## 2. Access to the Event\r\n- Defined as `export type LambdaEvent = APIGatewayProxyEvent | APIGatewayProxyEventV2` and exported in the index.\r\n  - Allows users to specify using Bindings.\r\n\r\n## 3. Discontinuation of requestContext (Not Yet Implemented)\r\n- Currently obtained as follows, which is cumbersome as it requires users to choose between v1 and v2 for the request context.\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\r\nimport { handle } from 'hono/aws-lambda'\r\n\r\ntype Bindings = {\r\n  requestContext: ApiGatewayRequestContext \r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get('/custom-context/', (c) => {\r\n  const lambdaContext = c.env.requestContext\r\n  return c.json(lambdaContext)\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\r\n\r\nWith access to the event now available, this can be rewritten simply. Also, the internal unnecessary logic getRequestContext(event) can be removed.\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\n// import type { ApiGatewayRequestContext } from 'hono/aws-lambda'\r\nimport type { LambdaEvent } from 'hono/aws-lambda'\r\nimport { handle } from 'hono/aws-lambda'\r\n\r\ntype Bindings = {\r\n  event: LambdaEvent \r\n//   requestContext: ApiGatewayRequestContext \r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get('/custom-context/', (c) => {\r\n//   const lambdaContext = c.env.requestContext\r\n  const lambdaContext = c.env.event.requestContext\r\n  return c.json(lambdaContext)\r\n})\r\n\r\nexport const handler = handle(app)\r\n\r\n```\r\nIf the removal of requestContext is approved, a comment like \"Remove in Hono V4\" can be added.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1996506792},{"id":1996761471,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1711","title":"Export APIGatewayProxyResult from aws-lambda","body":"Adds an export for `APIGatewayProxyResult` so that it can be referenced from a handler:\r\n\r\n```ts\r\nexport const handler: APIGatewayProxyResult = handle(app);\r\n```\r\n\r\nWithout it exposed, TS complains:\r\n\r\n```\r\nExported variable 'handler' has or is using name 'APIGatewayProxyResult' from external module \"node_modules/.pnpm/hono@3.10.1/node_modules/hono/dist/types/adapter/aws-lambda/handler\" but cannot be named.\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1996761471},{"id":1996826260,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1712","title":"Do you consider adding a source map feature","body":"Do you consider adding a source map feature, as it is difficult to locate large files","state":"open","labels":"[\"enhancement\",\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1996826260},{"id":1997572032,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1713","title":"Param value of \"keys\" resolves to a function, not the value \"keys\"","body":"### What version of Hono are you using?\r\n\r\n3.10.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode, Cloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nCreate a Hono app with multiple nested routes:\r\n\r\n```ts\r\n// Adapted from Hono's own hono.test.ts, 'Routing' -> 'Nested route' test:\r\n\r\nconst book = app.basePath(\"/book\");\r\nbook.get(\"/:id\", c => {\r\n\t// PROBLEM HERE:\r\n\treturn c.text(`get /book/${c.req.param(\"id\")}`);\r\n});\r\n\r\nconst user = app.basePath(\"/user\");\r\nuser.get(\"/login\", c => c.text(\"get /user/login\"));\r\n\r\nconst appForEachUser = user.basePath(\":id\");\r\nappForEachUser.get(\"/profile\", c => c.text(`get /user/${c.req.param(\"id\")}/profile`));\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nWhen a caller requests a route where the `:id` param value is `\"keys\"`, the result of `c.req.param(\"id\")` should be `\"keys\"`.\r\n\r\n### What do you see instead?\r\n\r\n`c.req.param(\"id\")` returns a function instead.\r\n\r\n### Additional information\r\n\r\nThe function seems to be `Array.prototype.keys`. I'm not sure yet under exactly which circumstances this happens, but at some point, when constructing the request context, the params get constructed such that Hono tries to access the `\"keys\"` property of an array, rather than of an object, and finding a value (the `keys` method of the array), returns it instead of the expected string value.\r\n\r\nI have a minimal reproduction of this issue at https://github.com/AverageHelper/hono-bug-param-keys\r\n\r\nA failing test for this test may be added to Hono at [src/hono.test.ts](https://github.com/honojs/hono/blob/1ed742bdb80518437e6d6f9c6ec7a5fbe300f254/src/hono.test.ts#L296), around line 296, like so:\r\n```ts\r\n// ...\r\n\r\n    res = await app.request('http://localhost/book/123', { method: 'GET' })\r\n    expect(res.status).toBe(200)\r\n    expect(await res.text()).toBe('get /book/123') // currently works\r\n\r\n    res = await app.request('http://localhost/book/keys', { method: 'GET' })\r\n    expect(res.status).toBe(200)\r\n    expect(await res.text()).toBe('get /book/keys') // currently fails, as described\r\n\r\n// ...\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1997572032},{"id":1997635053,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1714","title":"Introduce `ErrorBoundary` component","body":"This PR will accomplish the following\r\n\r\n### Support `Suspense` in non-streaming mode.\r\n\r\n`Suspense` can also be used in a non-streaming configuration. In this case, the output HTML does not contain any JavaScript, but is the text that has been replaced.\r\n\r\nHowever, now that async components are available in Hono, this feature has no particular advantage. It may be useful for users who are used to \"throw a Promise in `Suspense`\".\r\n\r\n```tsx\r\nconst app = new Hono()\r\n\r\nlet shop\r\nfunction Shop({ id }) {\r\n  if (!shop) {\r\n    throw fetch(`https://ramen-api.dev/shops/${id}`).then((res) => res.json()).then((data) => shop = data.shop)\r\n  }\r\n  return <div>{shop.name}</div>\r\n}\r\n\r\napp.get('/suspense-non-streaming', async (c) => {\r\n  return c.html(\r\n    <html>\r\n      <body>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Shop id=\"takasagoya\" />\r\n        </Suspense>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n```\r\n\r\n### Introduce `ErrorBoundary` component.\r\n\r\nThis is more of a main issue, adding an ErrorBoundary that can be replaced by a fallback when an error occurs in the processing of children.\r\nThis is true for synchronous rendering, asynchronous rendering including async, and streaming, all of which produce the same expected results in all environments.\r\n\r\nhttps://github.com/honojs/hono/assets/30598/72d21b6d-01ef-4d92-96c2-2f6b61af3219\r\n\r\n```tsx\r\nconst app = new Hono()\r\n\r\nasync function Shop({ id }) {\r\n  const data = await fetch(`https://ramen-api.dev/shops/${id}`).then((res) => res.json())\r\n  return <div>{data.shop.name}</div>\r\n}\r\n\r\nfunction SyncError() {\r\n  throw new Error('Error')\r\n}\r\n\r\nasync function AsyncError() {\r\n  await new Promise((resolve) => setTimeout(resolve, 2000))\r\n  throw new Error('Error')\r\n}\r\n\r\nfunction Fallback() {\r\n  return <div>Out Of Service</div>\r\n}\r\n\r\napp.get('/sync', async (c) => {\r\n  return c.html(\r\n    <html>\r\n      <body>\r\n        <ErrorBoundary fallback={<Fallback />}>\r\n          <SyncError />\r\n        </ErrorBoundary>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n\r\napp.get('/async', async (c) => {\r\n  return c.html(\r\n    <html>\r\n      <body>\r\n        <ErrorBoundary fallback={<Fallback />}>\r\n          <Shop id='takasagoya' />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary fallback={<Fallback />}>\r\n          <AsyncError />\r\n        </ErrorBoundary>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n\r\napp.get('/streaming-suspense-all', async (c) => {\r\n  return c.body(\r\n    renderToReadableStream(\r\n      <html>\r\n        <body>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='takasagoya' />\r\n            </Suspense>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='sugitaya' />\r\n            </Suspense>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <AsyncError />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </body>\r\n      </html>\r\n    ),\r\n    {\r\n      headers: {\r\n        'Transfer-Encoding': 'chunked',\r\n        'Content-Type': 'text/html; charset=UTF-8',\r\n      },\r\n    }\r\n  )\r\n})\r\n\r\napp.get('/streaming-suspense-each', async (c) => {\r\n  return c.body(\r\n    renderToReadableStream(\r\n      <html>\r\n        <body>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='takasagoya' />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Shop id='sugitaya' />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n          <ErrorBoundary fallback={<Fallback />}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <AsyncError />\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </body>\r\n      </html>\r\n    ),\r\n    {\r\n      headers: {\r\n        'Transfer-Encoding': 'chunked',\r\n        'Content-Type': 'text/html; charset=UTF-8',\r\n      },\r\n    }\r\n  )\r\n})\r\n```\r\n\r\n### Is this a necessary feature for Hono?\r\n\r\nA component named ErrorBoundary is introduced in the official React documentation, but it is not provided complete and is to be created by the user as needed. However, there seems to be an OSS that is very widely used.\r\n\r\nhttps://react.dev/reference/react/Component\r\nhttps://github.com/bvaughn/react-error-boundary\r\n\r\nPersonally, I would prefer to refrain from original extensions that are not in the original React, but on the other hand, I think that `ErrorBoundary` is useful enough and worth providing officially, as it would be difficult for users to implement it by themselves.\r\n\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1997635053},{"id":1997820010,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1715","title":"Fix/request param keys","body":"Fixes #1713\r\n\r\n### Reproducible versions\r\n\r\nv3.8.0 or later\r\n\r\n### Reproducible environment\r\n\r\n* A router other than RegExpRouter is being used.\r\n* The value is the name of a property or method of the Array object.\r\n\r\n### Details\r\n\r\nRouters other than RegExpRouter do not return ParamStash, but Hono was mistakenly referring to it in HonoRequest and returning the method.\r\n\r\nThe fact that null is no longer returned below appears to be a change in behavior, but in fact there is no change in behavior because the outer `if (this._s)` has never been valid and this is unreachable.\r\nhttps://github.com/honojs/hono/compare/main...usualoma:hono:fix/request-param-keys?expand=1#diff-a7eab0275ad9a7a7d3fbced508e6fabbea622ceaf3c7e9d38e08824f4687bd87L73\r\n\r\nThere also appears to be no performance degradation due to this change.\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1997820010},{"id":1998271991,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1716","title":"Introduce `inspectRoutes()` and `showRoutes()`","body":"Introduce `showRoutes()` and `captureRouteStackTrace()`.\r\n\r\nIf it were only \"simple to externalize showRoutes(),\" it might be too much functionality, but this is how I implemented it for now.\r\n\r\nAs for the file name and line number with routing added would be of little use in a small application, but I am trying to add something valuable to the development. (The line numbers shift a bit in Bun. Node.js does not output the line numbers because it minifies them before executing them, while Deno outputs the correct information.)\r\n\r\n\r\n### How it works?\r\n\r\n```ts\r\nimport { captureRouteStackTrace, showRoutes } from './src/helper/dev'\r\nimport { createMiddleware } from './src/helper/factory'\r\nimport { Hono } from './src/hono'\r\nimport { basicAuth } from './src/middleware/basic-auth'\r\nimport { logger } from './src/middleware/logger'\r\n\r\nconst app = new Hono()\r\n\r\nif (process.env.HONO_ENV === 'development') {\r\n  captureRouteStackTrace(app)\r\n}\r\n\r\napp.use('*', logger())\r\napp.get('/', basicAuth({ username: 'foo', password: 'bar' }), (c) => c.text('hi'))\r\napp.get(\r\n  '/mw',\r\n  createMiddleware((c, next) => next()),\r\n  (c) => c.text('hi')\r\n)\r\n\r\nif (process.env.HONO_ENV === 'development') {\r\n  showRoutes(\r\n    app,\r\n    process.argv[2] === '--show-list' ? { includeMiddleware: true, showList: true } : undefined\r\n  )\r\n}\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n% HONO_ENV=development bun run app.ts # default\r\nGET       /\r\nGET       /mw\r\n% HONO_ENV=development bun run app.ts --show-list\r\nALL       /*\r\n             logger        /Users/taku/src/github.com/honojs/hono/app.ts:13:0\r\nGET       /    \r\n             basicAuth     /Users/taku/src/github.com/honojs/hono/app.ts:14:0\r\n             [handler]     /Users/taku/src/github.com/honojs/hono/app.ts:14:0\r\nGET       /mw  \r\n             [middleware]  /Users/taku/src/github.com/honojs/hono/app.ts:21:2\r\n             [handler]     /Users/taku/src/github.com/honojs/hono/app.ts:21:2\r\n```\r\n\r\nor\r\n\r\n```ts\r\nimport { captureRouteStackTrace, showRoutes } from './src/helper/dev'\r\nimport { createMiddleware } from './src/helper/factory'\r\nimport { Hono } from './src/hono'\r\nimport { basicAuth } from './src/middleware/basic-auth'\r\nimport { logger } from './src/middleware/logger'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', logger())\r\napp.get('/', basicAuth({ username: 'foo', password: 'bar' }), (c) => c.text('hi'))\r\napp.get(\r\n  '/mw',\r\n  createMiddleware((c, next) => next()),\r\n  (c) => c.text('hi')\r\n)\r\n\r\nif (process.env.HONO_ENV === 'development') {\r\n  app.get('/show-routes', (c) => {\r\n    let html = '<table><tr><th>Method</th><th>Path</th></tr>'\r\n    showRoutes(app, {\r\n      writer: ({ method, path }) => {\r\n        html += `<tr><td>${method}</td><td>${path}</td></tr>`\r\n      },\r\n    })\r\n    html += '</table>'\r\n    return c.html(html)\r\n  })\r\n}\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n% curl http://localhost:3000/show-routes\r\n<table><tr><th>Method</th><th>Path</th></tr><tr><td>GET</td><td>/</td></tr><tr><td>GET</td><td>/mw</td></tr><tr><td>GET</td><td>/show-routes</td></tr></table>\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1998271991},{"id":1999838518,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1718","title":"bunx create-hono hangs","body":"### What version of Hono are you using?\r\n\r\nlatest\r\n\r\n### What runtime/platform is your app running on?\r\n\r\naws-lambda\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```sh\r\n\r\npoop@spaceship:~/git/private/ogobar\r\n11:58 AM \r\n$ bunx create-hono nirvgraph\r\n\r\ncreate-hono version 0.3.2\r\n✔ Using target directory … nirvgraph\r\n✔ Which template do you want to use? › aws-lambda\r\ncloned honojs/starter#main to /home/poop/git/private/ogobar/nirvgraph\r\n✔ Copied project files\r\n^C\r\n\r\npoop@spaceship:~/git/private/ogobar\r\n12:00 PM \r\n$ ls nirvgraph/\r\npackage.json  README.md  src\r\n\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nexit process when finished\r\n\r\n### What do you see instead?\r\n\r\nnothing\r\n\r\n### Additional information\r\n\r\nall the files seems to be created","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":1999838518},{"id":2000336900,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1719","title":"TypeError: Using jsxRenderer with hono 3.10.1","body":"### What version of Hono are you using?\r\n\r\n3.10.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nlocal(Node18.16.0)\r\n\r\n### What steps can reproduce the bug?\r\n\r\nWhen using hono3.10.1 & jsxRenderer, the following TypeScript error occurs.\r\n\r\nI'm using the sample code from the following page:\r\nhttps://hono.dev/middleware/builtin/jsx-renderer#extending-contextrenderer\r\n\r\n## Source\r\n```\r\nimport { Hono, Context } from \"hono\";\r\nimport { jsxRenderer } from \"hono/jsx-renderer\";\r\n\r\ndeclare module 'hono' {\r\n  interface ContextRenderer {\r\n    (content: string, props: { title: string }): Response\r\n  }\r\n}\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '/page/*',\r\n  jsxRenderer(({ children, title }) => {\r\n    return (\r\n      <html>\r\n        <head>\r\n          <title>{title}</title>\r\n        </head>\r\n        <body>\r\n          <header>Menu</header>\r\n          <div>{children}</div>\r\n        </body>\r\n      </html>\r\n    )\r\n  })\r\n)\r\n\r\napp.get('/page/favorites', (c) => {\r\n  return c.render(\r\n    <div>\r\n      <ul>\r\n        <li>Eating sushi</li>\r\n        <li>Watching baseball games</li>\r\n      </ul>\r\n    </div>,\r\n    {\r\n      title: 'My favorites',\r\n    }\r\n  )\r\n})\r\n```\r\n\r\n## Error\r\n```\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(content: string, props: { title: string; }): Response', gave the following error.\r\n    Argument of type 'Element' is not assignable to parameter of type 'string'.\r\n      Type 'Promise<HtmlEscapedString>' is not assignable to type 'string'.\r\n  Overload 2 of 2, '(content: string, props: { title: string; }): Response', gave the following error.\r\n    Argument of type 'Element' is not assignable to parameter of type 'string'.\r\n      Type 'Promise<HtmlEscapedString>' is not assignable to type 'string'.ts(2769)\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000336900},{"id":2000430872,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1720","title":"Cloudflare Workers Handler","body":"### What is the feature you are proposing?\n\nHi, @yusukebe \r\n\r\nHow about the idea of creating a `cloudflare worker handler`like `cloudflare pages handler` to absorb additional fields except for fetch in an default exported object?\r\n\r\n<details><summary>Common Part</summary>\r\n<p>\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\ntype Environment = {\r\n  readonly ERROR_QUEUE: Queue<Error>;\r\n  readonly ERROR_BUCKET: R2Bucket;\r\n};\r\n\r\nconst app = new Hono<{\r\n  Bindings: Environment;\r\n}>();\r\n\r\napp.get(\"/\", (c) => {\r\n  if (Math.random() < 0.5) {\r\n    return c.text(\"Success!\");\r\n  }\r\n  throw new Error(\"Failed!\");\r\n});\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\n## Without Handler\r\n\r\n```ts\r\nexport default {\r\n  fetch: app.fetch,\r\n  async queue(batch: MessageBatch<Error>, env: Environment): Promise<void> {\r\n    let file = \"\";\r\n    for (const message of batch.messages) {\r\n      const error = message.body;\r\n      file += error.stack || error.message || String(error);\r\n      file += \"\\r\\n\";\r\n    }\r\n    await env.ERROR_BUCKET.put(`errors/${Date.now()}.log`, file);\r\n  },\r\n};\r\n```\r\n\r\n## Proposal 1\r\n\r\n```ts\r\nimport { handle } from \"hono/cloudflare-workers\";\r\n\r\nexport default handle(app, {\r\n  queue: async (batch, env) => {\r\n    let file = \"\";\r\n    for (const message of batch.messages) {\r\n      const error = message.body;\r\n      file += error.stack || error.message || String(error);\r\n      file += \"\\r\\n\";\r\n    }\r\n    await env.ERROR_BUCKET.put(`errors/${Date.now()}.log`, file);\r\n  }\r\n});\r\n```\r\n\r\n## Proposal 2\r\n\r\n```ts\r\nimport { handle } from \"hono/cloudflare-workers\";\r\n\r\nconst handler = handle(app)\r\n\r\nhandler.queue = async (batch, env) => {\r\n  let file = \"\";\r\n  for (const message of batch.messages) {\r\n    const error = message.body;\r\n    file += error.stack || error.message || String(error);\r\n    file += \"\\r\\n\";\r\n  }\r\n  await env.ERROR_BUCKET.put(`errors/${Date.now()}.log`, file);\r\n};\r\n\r\nexport default handler\r\n```\r\n\r\n- handler takes over env from the Hono instance\r\n- Can absorb various default export extensions","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000430872},{"id":2000566801,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1721","title":"fix(types): fixed a typo","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000566801},{"id":2000589114,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1722","title":"[PoC] feat(helper/factory): introduce `createHandlers()`","body":"This PR introduces a `createHandlers()` function from `helper/factory`.\r\n\r\n```ts\r\nimport { createHandlers } from 'helper/factory'\r\n\r\nconst handlers = createHandlers(\r\n  validator('json', () => {\r\n    return {\r\n      name: 'foo',\r\n    }\r\n  }),\r\n  (c) => {\r\n    const { name } = c.req.valid('json')\r\n    return c.jsonT({\r\n      name,\r\n    })\r\n  }\r\n)\r\n\r\napp.get('/api', ...handlers)\r\n```\r\n\r\nThis is useful for defining handlers outside of `app.get('/api', ...)`. Using this approach, you can structure your application in a Ruby on Rails-like Controller pattern, as discussed in #1072.\r\n\r\nA key feature is its ability to correctly infer types.\r\n\r\n<img width=\"518\" alt=\"Screenshot 2023-11-19 at 6 43 54\" src=\"https://github.com/honojs/hono/assets/10682/47ef48ab-8125-411d-b431-7a7b92827a00\">\r\n\r\nIf this is acceptable, I'll write the tests.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000589114},{"id":2000591711,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1723","title":"Types not exported correctly when importing Hono routes","body":"### What version of Hono are you using?\n\n3.10.1\n\n### What runtime/platform is your app running on?\n\nVercel NextJS\n\n### What steps can reproduce the bug?\n\nCreate an `index.ts` file with the following:\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport usersAppImported from './user'\r\n\r\nexport const usersApp = new Hono()\r\n  .get('/', (c) => c.jsonT({ result: 'list authors' }))\r\n  .get('/:userId', (c) => c.jsonT({ result: 'list authors' }))\r\n\r\nexport const app = new Hono().route('/users', usersApp)\r\n\r\nexport const app2 = new Hono().route('/users2', usersAppImported)\r\n```\r\n\r\nAnd a separate file `user.ts`:\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\nconst usersApp = new Hono()\r\n  .get('/', (c) => c.jsonT({ result: 'list authors' }))\r\n  .get('/:userId', (c) => c.jsonT({ result: 'list authors' }))\r\n\r\nexport default usersApp\r\n```\r\n\r\nRun `tsc index.ts --declaration --emitDeclarationOnly` to generate type declarations.\r\n\n\n### What is the expected behavior?\n\nBoth apps should have the complete types generated.\n\n### What do you see instead?\n\nThe Hono with an imported app has not the complete types:\r\n\r\n```ts\r\nexport declare const app: import(\"hono/hono-base\").HonoBase<import(\"hono\").Env, import(\"hono/types\").MergeSchemaPath<import(\"hono\").ToSchema<\"get\", \"/\", unknown, {\r\n    result: string;\r\n}> & import(\"hono\").ToSchema<\"get\", \"/:userId\", unknown, {\r\n    result: string;\r\n}>, \"/users\">, \"/\">;\r\n\r\nexport declare const app2: import(\"hono/hono-base\").HonoBase<import(\"hono\").Env, import(\"hono/types\").MergeSchemaPath<import(\"hono\").Schema, \"/users2\">, \"/\">;\r\n```\r\n\r\nThis causes problems when using a Hono RPC client in a monorepo.\n\n### Additional information\n\nI've tried various things to make it work, but I belive this some sort of bug with the types in Hono?","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000591711},{"id":2000797902,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1724","title":"c.executionCtx.waitUntil is not a function (Next.js App Router)","body":"### What version of Hono are you using?\r\n\r\n3.10.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Pages\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI'm using https://github.com/cloudflare/next-on-pages to deploy a Next.js application (App Router) to Cloudflare Pages. \r\n\r\nTo replicate this:\r\n1) Create a fresh Next.js app with `create-next-app` (be sure to select App Router)\r\n2. Create a hono API at `app/api/route.ts` with the following contents:\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { handle } from 'hono/vercel'\r\n\r\nexport const runtime = 'edge';\r\n\r\nconst app = new Hono().basePath('/api')\r\n\r\napp.get('/', (c) => {\r\n  console.log(c.executionCtx) // Note how this only prints { params: undefined } (Where is waitUntil)?\r\n  return c.json({\r\n    message: 'Hello Next.js!',\r\n  })\r\n})\r\n\r\nexport const GET = handle(app)\r\n```\r\n\r\nI can access `c.executionCtx` just fine when using pages, but with App Router I'm unable to access it for some reason. I want to be able to access `waitUntil` on `executionCtx`.\r\n\r\n### What is the expected behavior?\r\n\r\nI should be able to access the `c.executionCtx.waitUntil` function.\r\n\r\n### What do you see instead?\r\n\r\nThe only thing in `c.executionCtx` is `{ params: undefined }`\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000797902},{"id":2000865571,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1725","title":"how to correctly type hono.app.fetch on bun using export default syntax?","body":"### What version of Hono are you using?\r\n\r\n3.10.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nbun 1.0.13\r\n\r\n### What steps can reproduce the bug?\r\n\r\n- this file\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport type { Serve } from \"bun\";\r\n\r\nimport { middleware } from \"middleware\";\r\nimport { players } from \"routes/players\";\r\n\r\nconst app = new Hono({ strict: false }).basePath(\"/v1\");\r\n\r\napp.route(\"/v1\", middleware);\r\n\r\napp.notFound((c) => c.json({ message: \"Not Found\", ok: false }, 404));\r\napp.onError((err, c) => {\r\n  console.error(`${err}`);\r\n  return c.text(\"Custom Error Message\", 500);\r\n});\r\n\r\napp.get(\"/\", async (c) => {\r\n  return c.json({ response: 123 });\r\n});\r\n\r\napp.route(\"/players\", middleware);\r\napp.route(\"/players\", players);\r\n\r\nexport default {\r\n  port: process.env.BUN_PORT!,\r\n  fetch: app.fetch, //// <<----- issue is here\r\n} satisfies Serve;\r\n\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nno typescript errors\r\n\r\n### What do you see instead?\r\n\r\n```ts\r\n\r\n\r\n'../../../node_modules/hono/dist/types/context'. This is likely not portable. A type annotation is necessary.ts(2742)\r\n(property) default: {\r\n    port: string | undefined;\r\n    fetch: (request: Request, Env?: {} | Bindings | undefined, executionCtx?: ExecutionContext | undefined) => Response | Promise<...>;\r\n}\r\n```\r\n\r\n### Additional information\r\n\r\n- typescript 5.2","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2000865571},{"id":2001589888,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1726","title":"chore: use biome as formatter and linter","body":"While this undoubtedly leads to efficiency gains, it's worth discussing its adoption, as there may be room for debate. However, it's certain that the integration would speed up the workflow.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2001589888},{"id":2003133630,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1728","title":"Ensure that calls to `c.json()` have a type equivalent to `c.jsonT()`","body":"I am unfamiliar with PRC mode, so I apologize if I am off base.\r\n\r\nThe idea of the RPC mode is a great one, but having to call jsonT() instead of json() is expensive to learn. Also, hono-base.ts and context.ts have additional processing for this purpose, so if you could eliminate that, that would be great.\r\n\r\nIt is an evil hack that is declared to return a TypedResponse but only returns a Response, but if this works well, it is better this way.\r\n\r\nIn my small demo, I had no problems with this change.\r\n\r\n<img width=\"640\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/30598/01f9b07a-08a7-440a-97a9-ffac16be0796\">\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2003133630},{"id":2003229465,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1729","title":"fix(compose): allow notFound handler to be async","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2003229465},{"id":2003691969,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1730","title":"fix(compose): allow `onError()` handler to be async","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2003691969},{"id":2003731850,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1731","title":"chore: remove `jest.config.js`","body":"Now that we are going to use Vitest, we can remove it.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2003731850},{"id":2005939608,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1734","title":"Is it possible to omit the default error handling?","body":"### What is the feature you are proposing?\r\n\r\nI am considering a middleware implementation of the Tracing mechanism with reference to the following URL\r\nhttps://docs.powertools.aws.dev/lambda/typescript/latest/core/tracer/#lambda-handler\r\n\r\nThis would require passing a `segment` instance to the `Hono.onError` event or error handling by the middleware.\r\n\r\nFortunately, I was able to disable the `Hono.onError` event with the following code. However, it is a bit hacky.\r\n```ts\r\nhono.use(\"*\", async (ctx, next) => {\r\n    console.log(\"start\")\r\n    try {\r\n        await next();\r\n    } catch (e) {\r\n        // works good\r\n        console.error(\"error\");\r\n        throw e;\r\n    } finally {\r\n        console.log(\"end\")\r\n    }\r\n});\r\n\r\napp.onError(undefined as any);\r\n// or\r\napp.onError((err) => { throw err; });\r\n```\r\n\r\nSince the onError event seems to be allowed to be undefined on the HONO codebase, is it possible to allow the use of `unidefined` as an argument to `Hono.onError` or to omit the default error handling?\r\n\r\n日本語:\r\n私は次のURLを参考にTracingの仕組みをミドルウェアでの実装を検討しています。\r\nhttps://docs.powertools.aws.dev/lambda/typescript/latest/core/tracer/#lambda-handler\r\n\r\nこれには`Hono.onError` イベントに `segment` インスタンスを渡すか、ミドルウェアによるエラーハンドリングが必要です。\r\n\r\n幸いにも以下のコードで `Hono.onError` イベントを無効化することができました。ただし少々ハッキーです。\r\n```ts\r\nhono.use(\"*\", async (ctx, next) => {\r\n    console.log(\"start\")\r\n    try {\r\n        await next();\r\n    } catch (e) {\r\n        // works good\r\n        console.error(\"error\");\r\n        throw e;\r\n    } finally {\r\n        console.log(\"end\")\r\n    }\r\n});\r\n\r\nhono.onError(undefined as any);\r\n// or\r\nhono.onError((err) => { throw err; });\r\n```\r\n\r\nhonoのコードベース上ではonErrorイベントがundefinedであることが認められているようですので、 `Hono.onError` の引数に `unidefined` の利用を認めるか、デフォルトのエラーハンドリングをオミットすることはできますか？","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2005939608},{"id":2007239519,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1735","title":"feat(types): Support types until 10 handlers","body":"Handle until 10 handlers on `app.method([path], ...handlers)` by simple adding more overloads.\r\n\r\nThis is not optimal by far. I'm compromised to find a better and beautiful solution, but until then I think this will cover more use cases, like I'm personally facing now.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2007239519},{"id":2010388003,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1736","title":"Get the path with param names rather than eyeball path","body":"### What is the feature you are proposing?\r\n\r\nFor logging analytics, I need stable paths otherwise there'll be far too much noise from params. So, I'd like to access the configured path rather than the one received from the eyeball.\r\n\r\ne.g.\r\n```\r\napp.get('/users/:userId', (ctx) => ctx.json({ path: ctx.req.paramPath }));\r\n\r\n// Would return\r\n// { \"path\": \"/users/:userId\" }\r\n// upon hitting localhost:8787/users/123\r\n```\r\n\r\nWhereas today we only have `/users/123`","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2010388003},{"id":2011592671,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1738","title":"[Refactor] using `#`","body":"I used to compare using `#` with using only `private` and `#` was slower for accessing properties in a `class`, but I think I was wrong. I might be wrong, wrong?\r\n\r\nIf it's wrong, we can refactor the code with replacing `private _foo` with `#foo`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2011592671},{"id":2011620022,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1739","title":"fix(jsx): Write the raw value if the value is a HtmlEscaped string","body":"Fix a double escaping problem when an escaped string is passed as an HTML attribute value.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2011620022},{"id":2013583324,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1741","title":"setCookie does not set Path=/ in response header","body":"### What version of Hono are you using?\r\n\r\n3.9.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```js\r\napp.get('/a/b/c/d/e/f', async(c) => {\r\n    setCookie(c, 'hello', 'hello2');\r\n    return c.json({ message: 'hello!' }, 200);\r\n})\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nExpected behaviour is Path=/ is set by default in response header.\r\n\r\nIf Path=/ is not set by default, it will use the current API path (in test case /a/b/c/d/e/f.)\r\n\r\nSpent hours debugging of cookie not working, just noticed that Hono does not have Path=/ automatically.\r\n\r\n### What do you see instead?\r\n\r\n```\r\n< HTTP/1.1 200 OK\r\n< set-cookie: hello=hello2\r\n```\r\n\r\nexpress:\r\n```\r\nHTTP/1.1 200 OK\r\nX-Powered-By: Express\r\nSet-Cookie: hello=hello2; Path=/\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2013583324},{"id":2013803198,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1742","title":"fix(helper/cookie): make default `Path=/` for `setCookie()`/`setSignedCookie()`","body":"Close #1741 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2013803198},{"id":2015310596,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1743","title":"feat: introduce `createFactory()` and `createHandlers()`","body":"I made #1722 a draft and create this new PR instead it.\r\n\r\nThis PR introduce `Factory` class, `createFactory()`, and `createHandlers()` in `Factory` exported from `hono/factory`.\r\n\r\n```ts\r\nimport { createFactory } from 'hono/factory'\r\nimport { logger } from 'hono/logger'\r\n\r\nconst factory = createFactory<Env>()\r\n\r\nconst middleware = factory.createMiddleware(async (c, next) => {\r\n  c.set('foo', 'bar')\r\n  await next()\r\n})\r\n\r\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\r\n  return c.json(c.var.foo)\r\n})\r\n\r\napp.get('/api', ...handlers)\r\n```\r\n\r\nThis is useful for defining handlers outside of `app.get('/api', ...)`. Using this approach, you can structure your application in a Ruby on Rails-like Controller pattern, as discussed in #1072.\r\n\r\nA key feature is its ability to correctly infer types.\r\n\r\n<img width=\"534\" alt=\"Screenshot 2023-11-29 at 5 56 32\" src=\"https://github.com/honojs/hono/assets/10682/68027eda-d442-4562-89ff-285d6ddd43be\">\r\n\r\n### Why we can't call `createHandlers()`directly\r\n\r\nIdeally, you might write shortly as follows:\r\n\r\n```ts\r\nimport { createHandlers } from 'helper/factory'\r\n```\r\n\r\nHowever, there is a problem that passing `Env` as follows will break other types:\r\n\r\n```ts\r\ncreateHandlers<Env>()\r\n```\r\n\r\n### `createMiddleware()`\r\n\r\nYou can use `createMiddleware` as before:\r\n\r\n```ts\r\nimport { createMiddleware } from 'helper/factory'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2015310596},{"id":2015713270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1744","title":"feat(request): Introduce `matchedRoutes` and `routePath` for `HonoRequest`","body":"```ts\r\napp.use('*', async function logger(c, next) {\r\n  await next()\r\n  c.req.matchedRoutes.forEach(({ handler, method, path }, i) => {\r\n    const name = handler.name || (handler.length < 2 ? '[handler]' : '[middleware]')\r\n    console.log(\r\n      method,\r\n      ' ',\r\n      path,\r\n      ' '.repeat(Math.max(10 - path.length, 0)),\r\n      name,\r\n      i === c.req.routeIndex ? '<- respond from here' : ''\r\n    )\r\n  })\r\n})\r\napp.use('*', async function namedMiddleware(c, next) {\r\n  await next()\r\n})\r\napp.get('/*', async (c, next) => await next())\r\napp.get('/hi/:name', (c) => c.json({ name: c.req.param('name'), path: c.req.routePath }))\r\n```\r\n\r\n```\r\n% bun run --hot app.ts\r\nStarted server http://localhost:3000\r\nALL   /*          logger \r\nALL   /*          namedMiddleware \r\nGET   /hi/*       [middleware] \r\nGET   /hi/:name   [handler] <- respond from here\r\n```\r\n\r\n```\r\n% curl http://localhost:3000/hi/hono\r\n{\"name\":\"hono\",\"path\":\"/hi/:name\"}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2015713270},{"id":2015806740,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1745","title":"Sub domain routing?","body":"### What is the feature you are proposing?\n\nAny plan to add sub domain routing?\r\n\r\nFor example - \r\n- `api.example.com` to go apiRoutes()\r\n- `docs.example.com` to go docsRoutes()\r\n\r\n\r\nHere is an example in nestjs\r\n\r\nhttps://docs.nestjs.com/controllers#sub-domain-routing\r\n\r\n![image](https://github.com/honojs/hono/assets/6106479/7364782d-f378-438e-8ff1-ba326109ea12)\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2015806740},{"id":2015810215,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1746","title":"Absolute imports break `typeof app` for rpc client.","body":"### What version of Hono are you using?\r\n\r\n3.10.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nbun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have a separate file that has a single test route in it\r\n```typescript\r\n// test-route.ts\r\nimport { Hono } from 'hono';\r\n\r\nexport const route = new Hono().get('/', async (c) => c.text('Hello World!'));\r\n```\r\nin the below code notice `import { route } from 'test-route';` is an absolute import which breaks the type (see screenshot)\r\n```typescript\r\n// index.ts\r\nimport { Hono } from 'hono';\r\nimport { route } from 'test-route';\r\n\r\nconst app = new Hono().route('/test', route);\r\n\r\nexport type AppType = typeof app;\r\n\r\nexport default app;\r\n```\r\nin the below code, notice that `import { route } from './test-route';` is a relative import which works (see screenshot)\r\n```typescript\r\nimport { Hono } from 'hono';\r\nimport { route } from './test-route';\r\n\r\nconst app = new Hono().route('/test', route);\r\n\r\nexport type AppType = typeof app;\r\n\r\nexport default app;\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\nI get strong types with relative imports. I would expect the same behavior with absolute imports.\r\n<img width=\"710\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/7391612/3dfe7ffd-be88-4429-948f-3fc546aff26a\">\r\n\r\n\r\n### What do you see instead?\r\nI have a broken type with absolute imports.\r\n<img width=\"710\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/7391612/34c01582-b8ac-4d80-a698-e80260079c60\">\r\n\r\n\r\n### Additional information\r\n\r\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2015810215},{"id":2015995010,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1747","title":"Support Azure Functions","body":"### What is the feature you are proposing?\n\nIt would be amazing it Hono supported [Azure Functions](https://github.com/Azure/Azure-Functions).\r\nBeing able to change back-and-forth between providers is something needed. \r\nFor example, from Azure Functions → Cloudflare Workers.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2015995010},{"id":2016074991,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1748","title":"feat(context): remove `experimental` from `c.render`/`c.setRenderer()`","body":"Closes #1709\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2016074991},{"id":2016075000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1749","title":"feat/allow `bearerAuth` to accept a list of token strings","body":"This PR enables the `bearerAuth` middleware to accept a list of strings. It retains the current-state ability to accept a single string (I.e., **not** a breaking change).\r\n\r\nThis enables simple usage of multiple tokens of varying privileges. A trivial example is below.\r\n\r\n```ts\r\nconst rToken = 'read'\r\nconst pToken = 'read+write'\r\nconst validTokens = [rToken, pToken]\r\n\r\napi.use('/posts/:id', async (c, next) => {\r\n  // PATCH and DELETE require the privileged token\r\n  if (c.event.request.method === 'PATCH' || c.event.request.method === 'DELETE') {\r\n    const bearer = bearerAuth({ token: pToken });\r\n    return bearer(c, next);\r\n  }\r\n  // GET works with any valid token\r\n  const bearer = bearerAuth({ token: validTokens });\r\n  return bearer(c, next);\r\n});\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2016075000},{"id":2017497543,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1751","title":"Async sub-routes are not working","body":"### What version of Hono are you using?\n\n3.10.3\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nIn case a sub-route is async, it returns 404 Not Found.\r\n\r\nFor example in the following code, /hello should return \"world\"\r\n```\r\nconst hello = new Hono();\r\nhello.get('/', async (c) => {\r\n\tc.text('world');\r\n});\r\n\r\nconst app = new Hono();\r\napp.route('/hello', hello);\r\n\r\nexport default app;\r\n```\r\n\r\nIf the route handler isn't async, it works:\r\n```\r\nconst hello = new Hono();\r\nhello.get('/', async (c) => c.text('world'));\r\n\r\nconst app = new Hono();\r\napp.route('/hello', hello);\r\n\r\nexport default app;\r\n```\n\n### What is the expected behavior?\n\nThe matching handler should be found and triggered.\n\n### What do you see instead?\n\n404 Not Found\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2017497543},{"id":2020278190,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1753","title":"feat(base): Set Default Path to '*' for app.use()","body":"fixed: #1754 \r\n\r\nIn the previous implementation, if a path was not specified in the app.use method, the route would default to the current path. This was inconvenient when wanting to apply middleware to all requests without specifying a specific path.\r\n\r\nThe main change is as follows:\r\nWe modified the use method in the Hono class so that if the first argument is a middleware function, the default path is set to '*'. This could be a breaking change when the first argument is not specified, and therefore, it might be appropriate to manage this under the v4 branch\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2020278190},{"id":2020299218,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1754","title":"Set Default Path for app.use() ?","body":"### What is the feature you are proposing?\n\nRef: https://x.com/_alexblokh/status/1730269688481890737\r\n\r\nRegarding the behavior of app.use() when no path is specified. As he mentioned, since this is an API for setting middleware, it would be convenient if it worked with the default as '*' by default. What do you think?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2020299218},{"id":2020497567,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1755","title":"Chained route with validator loses Env type","body":"### What version of Hono are you using?\r\n\r\n3.10.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Chain 2 routes, each with a validator\r\n2. Attempt to access variable with `c.get(...)`\r\n\r\nSee playground [here](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAIgAt0JiBuAKFElkTgDcBDAG2ABNWZps8BIgHJyGAPRtOPPlGG0aAY3QBneAQCuMAKZQ4AXjhptAdxQUAPAgBqrKMFYAjdtpUAuJjrW2oHtfbQAc2wsAD4ACgBKBU0dKBo4OAA6SDVw4XFhABoWDm5eaHSAKxV0bLhw5kiDUJZInNYVAE80RQrFav1ahATEuEUkwO0YdK8YH2Fo3sSoYY0oNH6kkvQAFXCkFQ1FRVd3OBgoDW1sSN6sM8SU3kVSdMycqXzZYtK0csrO2qqG5tb2r6IaZLIYjYRjCZTPpwWYweaLAYrNDrTbbXYqfaHY6nc5TIA) for repro.\r\n\r\n### What is the expected behavior?\r\n\r\nSecond route retains Env type from router.\r\n\r\n### What do you see instead?\r\n\r\nSecond route loses Env type information.\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2020497567},{"id":2020773614,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1756","title":"[Cache Middleware] Don't throw an error though `caches` is not defined","body":"### What is the feature you are proposing?\n\nCurrently, the Cache Middleware throws an error when the `caches` object is not globally defined. However, it might be more convenient, in environments like Node.js, to avoid this. Perhaps showing just a warning would be a better approach.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2020773614},{"id":2020842499,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1757","title":"fix(types): Keep `Env` types with changed routes","body":"Fixes #1755\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2020842499},{"id":2020864893,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1758","title":"Allow `any` in the eslint","body":"I suggest that the ESLint configuration defined in the following link should permit the use of `any`:\r\n\r\nhttps://github.com/honojs/hono/blob/main/.eslintrc.cjs\r\n\r\nOn the user side, we should avoid using `any` as much as possible. However, in our library development, the frequent use of `any` is often necessary due to potential type mismatches. This situation commonly arises when the type definition and implementation are authored separately, we have to use `any` on the implementation side.\r\n\r\nCurrently, we avoid this issue using comments like `eslint-disable-next-line @typescript-eslint/no-explicit-any`, but I think it's acceptable to allow the use of `any` throughout the entire project.","state":"closed","labels":"[\"on hold\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2020864893},{"id":2021001887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1759","title":"The Content-Type header disappears if any custom header is provided","body":"### What version of Hono are you using?\r\n\r\n3.10.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js\r\n\r\n### What steps can reproduce the bug?\r\n\r\nWith `c.text(\"Hello\")` you'll receive content-type as text/plain\r\nWith `c.header(\"Custom\", \"Header\"); c.text(\"Hello\")` you'll not receive the content-type at all\r\n\r\n### What is the expected behavior?\r\n\r\nTo continue receiving the content-type header\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2021001887},{"id":2021316894,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1760","title":"feat(middleware/csrf): add csrf protection middleware","body":"Closes honojs/hono#1688\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2021316894},{"id":2021522270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1761","title":"fix(context): Set `content-type` with `c.text()` correctly","body":"Fixes #1759\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2021522270},{"id":2021567887,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1762","title":"refactor: use `#` for private properties","body":"Closes #1738\r\n\r\n* Use `#foo` instead of `private _foo` for private properties.\r\n* Use proper descriptive property names.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2021567887},{"id":2021584159,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1763","title":"refactor(router): remove duplication `MESSAGE_MATCHER_IS_ALREADY_BUILT`","body":"To reduce a build size.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2021584159},{"id":2022181100,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1766","title":"ClientResponse.json() with possibly undefined values is always inferred as \"never\"","body":"### What version of Hono are you using?\r\n\r\n3.10.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode / Browser\r\n\r\n### What steps can reproduce the bug?\r\n\r\nWhen ClientResponse.json() is called with a type that has an optional field, it types as `never`. It stems from [BlankRecordToNever](https://github.com/honojs/hono/blob/bd00d284693e2079bb3be7ee762bcde53b194c73/src/client/types.ts#L29C1-L33C10).\r\n\r\nExample:\r\n\r\nUsing `type Resp = BlankRecordToNever<{ id: string; name?: string }>;`...\r\n\r\nGiven `ClientResponse<Resp>.json()`, your result will be typed as `never`.\r\n\r\nEven simpler, just use the following typescript to see the undesired results:\r\n\r\n```ts\r\ntype BlankRecordToNever<T> = T extends Record<infer R, unknown>\r\n  ? R extends never\r\n    ? never\r\n    : T\r\n  : never;\r\n\r\ntype Resp = BlankRecordToNever<{ id: string; name?: string }>;\r\n```\r\nResp will by typed as `never`.\r\n\r\nRelated: https://github.com/honojs/middleware/issues/285\r\n\r\n### What is the expected behavior?\r\n\r\nI would expect the type to carry through correctly. e.g. res.json() -> `{ id: string; name?: string }`\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2022181100},{"id":2022382484,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1768","title":"chore(benchmarks/jsx): Update benchmark","body":"* Update the compared libraries to the latest version\r\n* Add a benchmark script when using \"react-jsx\"\r\n* Additional targets for bundle size comparison\r\n\r\n### Result\r\n\r\n```\r\n% npm run bench:node\r\n\r\n> jsx@1.0.0 bench:node\r\n> esbuild --bundle src/benchmark.ts | node\r\n\r\nHono x 437,736 ops/sec ±0.25% (95 runs sampled)\r\nReact x 56,216 ops/sec ±1.09% (99 runs sampled)\r\nPreact x 266,304 ops/sec ±0.21% (98 runs sampled)\r\nNano x 60,715 ops/sec ±0.21% (98 runs sampled)\r\nFastest is Hono\r\n\r\n% npm run bench:bun\r\n\r\n> jsx@1.0.0 bench:bun\r\n> bun run src/benchmark.ts\r\n\r\nHono x 390,353 ops/sec ±0.44% (97 runs sampled)\r\nReact x 45,185 ops/sec ±0.29% (98 runs sampled)\r\nPreact x 257,160 ops/sec ±1.51% (96 runs sampled)\r\nNano x 57,867 ops/sec ±3.02% (95 runs sampled)\r\nFastest is Hono\r\n\r\n% npm run bench:react-jsx:node\r\n\r\n> jsx@1.0.0 bench:react-jsx:node\r\n> esbuild --bundle src/react-jsx/benchmark.ts | node\r\n\r\nHono x 341,062 ops/sec ±0.45% (99 runs sampled)\r\nReact x 55,241 ops/sec ±0.47% (100 runs sampled)\r\nPreact x 287,187 ops/sec ±0.27% (94 runs sampled)\r\nNano x 54,391 ops/sec ±0.37% (95 runs sampled)\r\nFastest is Hono\r\n\r\n% npm run compare-bundle-size\r\n\r\n> jsx@1.0.0 compare-bundle-size\r\n> esbuild --minify --minify-syntax --tree-shaking=true --bundle src/{hono,react,preact,nano}.ts --outdir=dist\r\n\r\n\r\n  dist/react.js   76.9kb\r\n  dist/nano.js    35.3kb\r\n  dist/preact.js  15.3kb\r\n  dist/hono.js     3.4kb\r\n\r\n⚡ Done in 41ms\r\n```\r\n\r\n### Analysis\r\n\r\nIt might be possible to optimize a bit more for the \"react-jsx\" case, but that is a topic for another PR. (It just seems to be quite difficult)","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2022382484},{"id":2022442423,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1769","title":"fix(client): Allow optional props in JSON response","body":"Fixes #1766 https://github.com/honojs/middleware/issues/285\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2022442423},{"id":2022502627,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1770","title":"Event Listener on Client Disconnect","body":"### What is the feature you are proposing?\r\n\r\nAs mentioned in Discord, could we have the ability to create event listeners for client disconnect or abort events? I would expect to be able to use them like `c.addListener('abort', () => { ...}` and optionally `c.on('abort', () => { ...}`. Of course, we need the removeListener and off functions as well for completeness. ","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2022502627},{"id":2022710002,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1771","title":"feat(jsx): mark `ErrorBoundary` as `experimental`","body":"Make `ErrorBoundary` as `experimental` as same as `Suspense`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2022710002},{"id":2022807054,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1772","title":"fix(factory): Filter undefined in `createHandlers`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2022807054},{"id":2023023307,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1773","title":"\"Unable to resolve module hono/client\" in expo (react native)","body":"### What version of Hono are you using?\n\n3.10.5\n\n### What runtime/platform is your app running on?\n\nbun\n\n### What steps can reproduce the bug?\n\n- bunx create-expo-app@latest --template tabs@4\r\n- name app \"test\"\r\n- `cd test`\r\n- `bun add hono`\r\n- edit `(tabs)/index.ts` to include `import {hc} from 'hono/client'`\r\n- add `const api = hc();`\r\n- `bun start` in terminal\r\n- observe error pictured below\r\n\n\n### What is the expected behavior?\n\nI would expect to be able to import from hono/client successfully\n\n### What do you see instead?\n\n![image](https://github.com/honojs/hono/assets/7391612/8ecbf65f-99a1-40a7-8c00-eae529edbcb5)\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2023023307},{"id":2023303027,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1774","title":"Next","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2023303027},{"id":2023466976,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1775","title":"Type Constraints No Longer Enforced in @hono/zod-openapi 3.11","body":"### What version of Hono are you using?\r\n3.11.0\r\n\r\n### What is the feature you are proposing?\r\n\r\nHello,\r\n\r\nI've encountered an issue with the @hono/zod-openapi package where type constraints that were effectively enforced in version 3.10.x are no longer working in version 3.11.\r\n\r\nIn version 3.10.x, I was able to apply type constraints using the jsonT function. However, with the update to 3.11, it appears that due to changes in how types are handled (possibly related to a shift towards a more 'loose' approach), these constraints are no longer effective.\r\n\r\nThis change has impacted the robustness of our API's type validation. Could you provide guidance on how to enforce type constraints in the 3.11 version?\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2023466976},{"id":2023833110,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1776","title":"fix(context): Strict type checking `c.json()`","body":"This PR implements stricter type checking for the return values of `c.json()`.\r\n\r\nIn PR #1728, we initially agreed that the type of `c.json()` should be \"Loosely like `c.json()`.\"\r\n\r\nhttps://github.com/honojs/hono/pull/1728#issuecomment-1831888340\r\n\r\nHowever, after reconsidering and reviewing issue #1775, I've decided to change it to \"Strictly like `c.jsonT()`.\"\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2023833110},{"id":2023868724,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1777","title":"TypeScript argument type for `showRoutes()` incompatible with Env variables","body":"### What version of Hono are you using?\r\n\r\n3.11.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\nWhen the `Env` is provided as a generic type parameters on the App instantiation, the showRoutes method has a type error.\r\n\r\n```typescript\r\ntype Bindings = {\r\n  event: LambdaEvent;\r\n  context: LambdaContext;\r\n};\r\n\r\ntype Env = { Bindings?: Bindings };\r\n\r\nexport const publishingApi = new Hono<Env>().basePath(\"/publishing\");\r\n```\r\n\r\nFor now, I can cast the api as such to remove the TypeScript errors.\r\n\r\n`showRoutes(publishingApi as Hono);`\r\n\r\n### What is the expected behavior?\r\n\r\nNo errors\r\n\r\n### What do you see instead?\r\n\r\n![image](https://github.com/honojs/hono/assets/3399497/22d95041-6c94-4954-a254-1fda9505b1c1)\r\n\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2023868724},{"id":2023908944,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1778","title":"fix(types): Added `E` env type argument to `showRoutes` & `inspectRoutes` `hono` parameter","body":"### What's been changed?\r\n\r\n - Updated `showRoutes` deprecated doc comments to provide the correct import path (`/dev` instead of `/helper`)\r\n - Added `TEnv` type argument to both `showRoutes` & `inspectRoutes` helpers & passed to the first (`hono: Hono`) parameter. \r\n\t - This fixes a type error where if you pass in a Hono instance with a custom environment type these 2 functions will complain as it does not match the default / base `Hono` type(s).\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2023908944},{"id":2025723472,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1780","title":"PoC: feat(jsx): Introduce event handler for IntrinsicElements.","body":"What about a feature like this, which would greatly expand the possibilities of JSX?\r\n\r\n### What can we do?\r\n\r\nThe following example shows the writing of a style element using MasterCSS(@2.0.0-beta) and the embedding of the transpiled TypeScript with esbuild.\r\n\r\nWith the following script, \r\n\r\n```ts\r\nimport { JSXNode } from \"../hono/src/jsx\";\r\nimport { readFile, mkdtemp } from \"fs/promises\";\r\nimport { MasterCSS } from \"@master/css\";\r\nimport * as esbuild from \"esbuild\";\r\n\r\nlet resolveMasterCSS: () => void = () => {};\r\nconst resolveMasterCSSPromise = new Promise<void>(\r\n  (resolve) => (resolveMasterCSS = resolve)\r\n);\r\nconst masterCSS = new MasterCSS();\r\n\r\nconst filename = process.argv[2];\r\nconst template: JSXNode = (await import(`./${filename}`)).default;\r\n\r\ntemplate\r\n  .on(\"renderToString\", ({ node }) => {\r\n    // gather all the class names\r\n    (node.props[\"class\"]?.toString() || \"\")\r\n      .split(/\\s+/)\r\n      .forEach((c: string) => masterCSS.add(c));\r\n  })\r\n  .on(\"renderToString.style\", ({ setContent }) => {\r\n    setContent(\r\n      resolveMasterCSSPromise.then(\r\n        () => `<style type=\"text/css\">${masterCSS.text}</style>`\r\n      )\r\n    );\r\n  })\r\n  .on(\"renderToString.script\", ({ node, setContent }) => {\r\n    setContent(\r\n      new Promise(async (resolve) => {\r\n        const dir = await mkdtemp(\"/tmp/mt-\");\r\n        const outfile = `${dir}/out.js`;\r\n        await esbuild.build({\r\n          entryPoints: [node.props.src as string],\r\n          tsconfig: \"tsconfig-for-frontend\",\r\n          bundle: true,\r\n          minify: true,\r\n          outfile,\r\n        });\r\n        const content = await readFile(outfile, \"utf8\");\r\n        if (content.match(/<\\/script>/)) {\r\n          throw new Error(\"Invalid script\");\r\n        }\r\n        resolve(`<script>${content}</script>`);\r\n      })\r\n    );\r\n  })\r\n  .on(\"afterRenderToString.html\", resolveMasterCSS);\r\n\r\nconsole.log((await template.toString()).toString());\r\n```\r\n\r\nThe following results can be obtained\r\n\r\n<img width=\"722\" alt=\"render\" src=\"https://github.com/honojs/hono/assets/30598/87faaeed-d73f-4a27-a37b-1ce4c9b31411\">\r\n\r\n\r\n### Will performance be degraded?\r\n\r\nPerformance was not degraded in the existing use cases that did not use `.on()`.\r\n\r\n```\r\n% npm run bench:node\r\n\r\n> jsx@1.0.0 bench:node\r\n> esbuild --bundle src/benchmark.ts | node\r\n\r\nHono x 414,607 ops/sec ±2.37% (97 runs sampled)\r\nReact x 57,350 ops/sec ±0.48% (99 runs sampled)\r\nPreact x 266,016 ops/sec ±0.28% (98 runs sampled)\r\nNano x 61,028 ops/sec ±0.32% (101 runs sampled)\r\nFastest is Hono\r\n```\r\n\r\n### When to use`jsxNode()`?\r\n\r\n`(<App />)` returns a `JSX.Element`, but `JSX.Element` is defined as `HtmlEscapedString | Promise<HtmlEscapedString>`, which can be converted to a `JSXNode` using `as unknown as JSXNode` or `template instanceof JSXNode`, which is a bit annoying, so we use it to convert this to a `JSXNode` type.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2025723472},{"id":2026877118,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1782","title":"Incorrect return type when using custom fetch function with Hono Client","body":"### What version of Hono are you using?\r\n\r\n3.10.5\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun/Expo\r\n\r\n### What steps can reproduce the bug?\r\n\r\nGiven the code below\r\n```typescript\r\nconst fetcher = async (input: RequestInfo | URL, init?: RequestInit | undefined) => {\r\n  const token = await getItemAsync(localStorageKey);\r\n  const headers = new Headers(init?.headers);\r\n  if (token) headers.set('Authorization', `Bearer ${token}`);\r\n\r\n  return fetch(input, { ...init, headers }).then(async (response) => {\r\n    if (response.ok) {\r\n      return await response.json();\r\n    } else {\r\n      const errorMessage = await response.text();\r\n      return Promise.reject(new Error(errorMessage));\r\n    }\r\n  });\r\n};\r\n\r\nexport const api = hc<AppType>(url, {\r\n  fetch: fetcher,\r\n});\r\n```\r\nThe resulting type is `Promise<ClientResponse<InferResponseType<T>>>`\r\n\r\n### What is the expected behavior?\r\n\r\nI would expect to get the type `Promise<InferResponseType<T>>`\r\n\r\n### What do you see instead?\r\n\r\nThe returned type is `Promise<ClientResponse<InferResponseType<T>>>` where the `ClientResponse` isn't correct.\r\n\r\n### Additional information\r\n\r\n~~I believe the `Fetch` type is incorrect at `hono/src/client/types.ts :48`~~\r\n```\r\nexport type Fetch<T> = (\r\n  args?: InferRequestType<T>,\r\n  opt?: ClientRequestOptions\r\n) => Promise<ClientResponse<InferResponseType<T>>>\r\n```\r\n~~If I'm reading this correctly, no matter what fetch returns, it's always assumed to have the base `ClientResponse` structure. Could be wrong though.~~\r\nSee below comment\r\n\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2026877118},{"id":2027100016,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1783","title":"`ClientResponse<T>.json()`  returns `never` when `T` is a union type of structurally different objects","body":"### What version of Hono are you using?\r\n\r\n3.11.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nFound on Bun (v1.0.15) initially, reproduced on Deno (v1.38.4)\r\n\r\n### What steps can reproduce the bug?\r\n\r\nHi, thanks for building Hono!\r\n\r\nI ran into an unexpected behavior when trying to use `ClientResponse.json()`. In the following minimal reproduction, the type information is lost, we get `never`.\r\n\r\n```ts\r\nimport { hc, Hono } from \"https://deno.land/x/hono@v3.11.2/mod.ts\";\r\n\r\ntype ErrorResponse = {\r\n  error: Error;\r\n};\r\n\r\ntype OkResponse = {\r\n  data: string;\r\n};\r\n\r\n// Simulate business logic.\r\ndeclare function condition(): Promise<boolean>;\r\n\r\nconst app = new Hono();\r\n\r\nconst api = app.get(\"/\", async (c) => {\r\n  const ok = await condition();\r\n  // Expect response type to be TypedResponse<OkResponse | ErrorResponse>\r\n  if (ok) {\r\n    return c.json<OkResponse>({ data: \"foo\" });\r\n  }\r\n  return c.json<ErrorResponse>({ error: new Error(\"error\") });\r\n});\r\n\r\nconst client = hc<typeof api>(\"http://localhost:8000\");\r\n\r\nconst res = await client.index.$get();\r\n\r\nconst json = await res.json();\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nI expected the type to be `OkResponse | ErrorResponse`.\r\n\r\nExplicitly typing the handler 's return value does not help.\r\n```ts\r\nconst api = app.get(\"/\", async (c): Promise<TypedResponse<OkResponse | ErrorResponse>> => {\r\n  // ...\r\n});\r\n```\r\n\r\n\r\n### What do you see instead?\r\n\r\n<img width=\"854\" alt=\"Capture d’écran 2023-12-05 à 21 22 45\" src=\"https://github.com/honojs/hono/assets/59995859/908b35a2-19a6-4d4b-8433-11ec26686773\">\r\n\r\n\r\n### Additional information\r\n\r\nIt seems that the type breaks only on union of object (record) types:\r\n\r\n```ts\r\ndeclare function condition(): boolean;\r\n\r\nconst route = app\r\n  .get(\"/primitive|primitve\", (c) => {\r\n    return condition() ? c.json(1) : c.json(\"a\");\r\n  })\r\n  .get(\"/primitive|primitive[]\", (c) => {\r\n    return condition() ? c.json([1, 2, 3]) : c.json(\"a\");\r\n  })\r\n  .get(\"/primitive[]|primitive[]\", (c) => {\r\n    return condition() ? c.json([1, 2, 3]) : c.json([\"a\", \"b\", \"c\"]);\r\n  })\r\n  .get(\"/object[]|primitive[]\", (c) => {\r\n    return condition() ? c.json([{ k: true }]) : c.json([\"a\", \"b\", \"c\"]);\r\n  })\r\n  .get(\"/object[]|object[]\", (c) => {\r\n    return condition() ? c.json([{ k: true }]) : c.json([{ l: 0 }]);\r\n  })\r\n  .get(\"/object|object\", (c) => {\r\n    return condition() ? c.json({ k: true }) : c.json({ l: true });\r\n  });\r\n\r\nconst client = hc<typeof route>(\"http://localhost:8000\");\r\n\r\nconst a = await client[\"primitive|primitve\"].$get().then((res) => res.json());\r\n//    ^ string | number\r\nconst b = await client[\"primitive|primitive[]\"].$get().then((res) => res.json());\r\n//    ^ string | number[]\r\nconst c = await client[\"primitive[]|primitive[]\"].$get().then((res) => res.json());\r\n//    ^ string[] | number[]\r\nconst d = await client[\"object[]|primitive[]\"].$get().then((res) => res.json());\r\n//    ^ { k: boolean }[] | string[]\r\nconst e = await client[\"object[]|object[]\"].$get().then((res) => res.json());\r\n//    ^ { k: boolean }[] | { l: number }[]\r\nconst f = await client[\"object|object\"].$get().then((res) => res.json());\r\n//    ^ never\r\n```\r\n\r\nI suspect it has something to do with the signature of `ClientResponse.json()`: `Promise<BlankRecordToNever<T>>`.\r\n\r\n```ts\r\ntype BlankRecordToNever<T> = keyof T extends never ? never : T\r\n\r\ntype X = BlankRecordToNever<{ a: string } | { b: string }>;\r\n//   ^ never (as expected)\r\n```\r\n\r\nIs this an expected behavior?","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2027100016},{"id":2028501904,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1784","title":"ZodOpenAPI errors after 3.10.5 and 0.9x","body":"### What version of Hono are you using?\r\n\r\n3.11.x\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nworkers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nMixing zValidator and ZodOpenAPI has errors after 3.10.5 RPC changes\r\n\r\n```\r\nconst baseRoutesSchema = z.enum(['*', '/']);\r\n\r\napp.get(baseRoutesSchema.enum['/'], async (c) => {\r\n\t// c.text('Hello Hono!');\r\n\tawait sleep(1000);\r\n\treturn c.text('Hello Hono!');\r\n});\r\n\r\n/**\r\n * This binding allows us to access the cloudflare bindings from inngest\r\n */\r\napp.use(baseRoutesSchema.enum['*'], async (c, next) => {\r\n\ttry {\r\n\t\t// temporary to create cloudflare bindings\r\n\t\tglobalThis.cfBindings = c.env;\r\n\t\tawait next();\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t}\r\n});\r\n\r\n// app.doc31(appRoutesSchema.enum['/openapi'], {\r\n// \topenapi: '3.1.0',\r\n// \tinfo: {\r\n// \t\tversion: '0.0.1',\r\n// \t\ttitle: 'AskLuna Worker API',\r\n// \t},\r\n// });\r\n\r\n\r\napp.route(appRoutesSchema.Enum['/api'], apiRoute);\r\napp.route(appRoutesSchema.Enum['/examples'], examplesRoute);\r\napp.route(appRoutesSchema.Enum['/lease'], leaseRoute);\r\n```\r\n\r\nexample route:\r\n\r\n```\r\nimport { sleep } from '~core/helpers/functions/sleep';\r\n\r\nimport { type DistributedLeaseHonoController } from '~~/controllers/lease/services/DistributedLease';\r\nimport { createClientForDO } from '~~/helpers/createClientForDO';\r\nimport { honoFactory } from '~~/helpers/honoFactory';\r\nconst route = honoFactory();\r\n\r\nroute.get('/do-client', async (c) => {\r\n\t// c.text('Hello Hono!');\r\n\tawait sleep(1000);\r\n\t// return c.text('Hello Hono after sleep!');\r\n\r\n\tconst leaseRouteClient = createClientForDO<DistributedLeaseHonoController>({\r\n\t\tdObj: c.env.JobDistributedLease,\r\n\t\tidString: 'default',\r\n\t\torigin: new URL(c.req.url).origin,\r\n\t});\r\n\r\n\tconst result = await leaseRouteClient.acquire.$get({\r\n\t\tquery: { entityUid: 'd843c5af-9e97-4fc5-9a06-a1062430283c' },\r\n\t});\r\n\tconst data = await result.json();\r\n\treturn c.text(JSON.stringify(data));\r\n});\r\n\r\nexport const examplesRoute = route;\r\n\r\n```\r\n\r\nWhen example route is used without hono open api it works, but does not with it.\r\n\r\n### What is the expected behavior?\r\n\r\nI'm getting zod validator errors when i enable zod open api for endpoints.  For example open api.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2028501904},{"id":2028543167,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1785","title":"fix(base): name `private _basePath` instead of `#basePath`","body":"Fixes https://github.com/honojs/middleware/issues/290\r\n\r\nTo maintain compatibility with Zod OpenAPI Hono, change the `basePath` property to `private _basePath` instead of using `#basePath`. Using `#basePath` causes issues in Zod OpenAPI Hono, as seen in https://github.com/honojs/middleware/issues/290.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2028543167},{"id":2028611765,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1786","title":"fix(client): make `ClientResponse.json()` returns Union correctly","body":"Fixes #1783\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2028611765},{"id":2028874746,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1787","title":"SVG Content Type incorrectly encoded as base64","body":"### What version of Hono are you using?\r\n\r\n3.11.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nAWS Lambda\r\n\r\n### What steps can reproduce the bug?\r\n\r\nReturn an SVG in a route with\r\n\r\n```\r\nc.header('Content-Type', 'image/svg+xml;charset=utf-8');\r\nreturn c.body(svgString)\r\n```\r\n\r\nresults in it being base64 encoded.\r\n\r\n### What is the expected behavior?\r\n\r\nSVG is just text, so it shouldn't need to be encoded before being returned to API Gateway.\r\n\r\nPR to fix the regexp in #1788 \r\n\r\n### What do you see instead?\r\n\r\nIt gets encoded, so you cannot render the SVG in a browser.\r\n\r\n### Additional information\r\n\r\nThe relevant code is here: https://github.com/honojs/hono/blame/main/src/adapter/aws-lambda/handler.ts#L264 that was added as part of https://github.com/honojs/hono/pull/1091","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2028874746},{"id":2028893350,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1788","title":"fix: add missing tail to svg regex","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\ncloses #1787","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2028893350},{"id":2031036317,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1789","title":"Error when overriding c.res field of a fetch response object in custom middleware using Hono (Can't modify immutable headers)","body":"### What version of Hono are you using?\n\n3.11.3\n\n### What runtime/platform is your app running on?\n\nCloudflare Worker, Local Development\n\n### What steps can reproduce the bug?\n\n```typescript\r\nimport {Context, Hono} from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.use('/', async (c: Context, next) => {\r\n    await next();\r\n\r\n    c.res = new Response(c.res.body, c.res);\r\n    c.res.headers.set(\"x-message\", \"This is middleware!\");\r\n});\r\n\r\napp.get('/', async (c: Context) => {\r\n    return fetch('http://localhost:8100/fetch');\r\n});\r\n\r\napp.get(\"/fetch\", async (c: Context) => {\r\n    return c.text('Fetch it!')\r\n});\r\n\r\nexport default app;\r\n```\n\n### What is the expected behavior?\n\nThe middleware should successfully override c.res with a new Response object, and the server should respond with the contents fetched from the '/fetch' endpoint.\n\n### What do you see instead?\n\n```shell\r\nTypeError: Can't modify immutable headers.\r\n    at set res [as res]\r\n```\n\n### Additional information\n\n### wrangler.toml\r\n```toml\r\nname = \"api\"\r\nmain = \"src/index.ts\"\r\ncompatibility_date = \"2023-12-07\"\r\n\r\n[dev]\r\nport = 8100\r\n```\r\n\r\n### package.json\r\n```json\r\n{\r\n  \"name\": \"api\",\r\n  \"version\": \"0.0.0\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"wrangler dev\",\r\n    \"deploy\": \"wrangler deploy\"\r\n  },\r\n  \"dependencies\": {\r\n    \"hono\": \"^3.11.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@cloudflare/workers-types\": \"^4.20231121.0\",\r\n    \"@types/node\": \"^20.10.4\",\r\n    \"typescript\": \"^5.3.3\",\r\n    \"wrangler\": \"3.19.0\"\r\n  }\r\n}\r\n\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2031036317},{"id":2031051486,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1790","title":"Node Application with Hono Not Showing Expected 'Listening' Message","body":"### What version of Hono are you using?\n\n3.11.2\n\n### What runtime/platform is your app running on?\n\nNode v18.14.1 / macos\n\n### What steps can reproduce the bug?\n\n### Issue Description\r\nWhen setting up a new Node application using Hono, I encountered an issue where the expected console message about the app listening on port 3000 is not displayed. The steps followed were:\r\n\r\n1. Creating the app using `bun create hono@latest`.\r\n2. Installing packages with `bun install`.\r\n3. Running the app using `bunx run dev`.\r\n\r\nAccording to the README file, there should be a message indicating that the app is listening on port 3000. However, the only output I receive is the path to the project folder and a blank screen.\r\n\r\n### Additional Information\r\n- Attempting the same process with npm (i.e., `npm install` and `npm run dev`) results in a blank screen, without any console output.\r\n- The issue persists even after verifying all installation steps and dependencies.\r\n\r\n### Request\r\nI'm looking for guidance on why the expected 'listening' message isn't appearing and any steps I might be missing or need to correct. Also, any insights into why the npm approach leads to a blank screen would be greatly appreciated.\r\n\r\n### System Information\r\n- Node version: 18.14.1\r\n- Hono version: 3.11.2\r\n- Operating System: Ventura 13.2.1\r\n\r\nLooking forward to any help or suggestions from the community. Thank you!\r\n\n\n### What is the expected behavior?\n\nthere should be a message indicating that the app is listening on port 3000\n\n### What do you see instead?\n\nblank screen\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2031051486},{"id":2032819234,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1792","title":"Make hono aware of `Accept` header","body":"### What is the feature you are proposing?\n\nI want to be able to send HTML or JSON for a status check route based on the `Accept` header from the client.  I can write this myself by parsing the `Accept` header, but it would be nice if there was something built-in to support me in making that choice via the Hono API.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2032819234},{"id":2033607416,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1793","title":"null/undefined json responses break type generation with hc() and testClient()","body":"### What version of Hono are you using?\n\n3.11.3\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n1. Return `undefined` or `null` using `c.json(...)`\r\n2. Attempt to use `hc` or `testClient` with type safety\r\n\r\nSee playground [here](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAcgAt0JiBuAKFElkTlIGNs8CiyKB6FgG2ABTNDGo0aLdAGd4AQzBg4AXjhohAdxQUAFAEoacOADoA5kJg7iPGKWDSe9nnJtDZxADRw50gJ5o2HRY9FQA+REMjOCgLAFcoNDgWYwAraXQdWLQAEyFcYHVsvVojLGKJVgAeGF8wIQhcb0VQqx5iPWNbe2NuuU63GGMAEnNLAyA) for repro.\n\n### What is the expected behavior?\n\n`hc` or `testClient` remain typesafe\n\n### What do you see instead?\n\nTypes cannot be generated\n\n### Additional information\n\n`null`/`undefined` is technically valid JSON per https://www.rfc-editor.org/rfc/rfc8259, so I believe this should be supported","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2033607416},{"id":2033680670,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1794","title":"fix(client): `c.json()` supports `undefined`/`null` response","body":"Fixes #1793\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2033680670},{"id":2033703870,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1795","title":"feat: implement `stream.onAbort`","body":"ref: #1770 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2033703870},{"id":2033843147,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1796","title":"PoC: feat(reg-exp-router): Introduced PreparedRegExpRouter","body":"### What is the PR to improve?\r\n\r\nWith this PR, we aim to improve the reduction of RegExpRouter bundle size and initial addition time.\r\n\r\nAs you can see in the code I added to the following unit test, we can prepare regular expressions, etc. in advance by passing the routing information to `buildInitParams()`. This can be used to simplify the initialization process at startup.\r\n\r\n[src/router/reg-exp-router/router.test.ts](https://github.com/honojs/hono/compare/main...usualoma:hono:feat/prepared-reg-exp-router?expand=1#diff-9c118fa74a63028640569d2d36dc3980faa196b86b3a706dc1c1c211931e8639R662)\r\n\r\n### Benchmark\r\n\r\nIn Node.js, it is more than 10 times faster than RegExpRouter and close to LinearRouter; in Bun, it may be faster than LinearRouter.\r\n\r\n```\r\n$ npm run bench-includes-init:node\r\n\r\n> bench-includes-init:node\r\n> tsx ./src/bench-includes-init.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: node v20.0.0 (arm64-darwin)\r\n\r\nbenchmark                 time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------------------ -----------------------------\r\n• GET /user\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           34.18 µs/iter     (26.04 µs … 1.7 ms)  31.29 µs  86.38 µs 382.17 µs\r\nPreparedRegExpRouter    2.07 µs/iter     (1.08 µs … 8.86 µs)    1.9 µs   8.86 µs   8.86 µs\r\nTrieRouter              6.07 µs/iter   (4.79 µs … 638.33 µs)   5.58 µs   7.63 µs   9.79 µs\r\nLinearRouter            1.02 µs/iter   (958.27 ns … 1.07 µs)   1.04 µs   1.07 µs   1.07 µs\r\nMedleyRouter            3.04 µs/iter     (2.93 µs … 3.25 µs)   3.07 µs   3.25 µs   3.25 µs\r\nFindMyWay              91.65 µs/iter    (78.04 µs … 2.14 ms)  88.04 µs 143.83 µs 607.83 µs\r\nKoaTreeRouter           2.31 µs/iter     (2.15 µs … 3.44 µs)   2.26 µs   3.44 µs   3.44 µs\r\nTrekRouter              3.05 µs/iter     (2.96 µs … 3.11 µs)   3.07 µs   3.11 µs   3.11 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   2.04x faster than PreparedRegExpRouter\r\n   2.27x faster than KoaTreeRouter\r\n   2.99x faster than MedleyRouter\r\n   2.99x faster than TrekRouter\r\n   5.97x faster than TrieRouter\r\n   33.6x faster than RegExpRouter\r\n   90.11x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter            41.4 µs/iter       (26 µs … 8.62 ms)  30.79 µs    336 µs 827.21 µs\r\nPreparedRegExpRouter    2.45 µs/iter     (1.73 µs … 6.14 µs)   2.41 µs   6.14 µs   6.14 µs\r\nTrieRouter              6.45 µs/iter     (4.79 µs … 1.21 ms)   5.54 µs   8.83 µs     10 µs\r\nLinearRouter            1.18 µs/iter      (1.1 µs … 1.39 µs)   1.21 µs   1.39 µs   1.39 µs\r\nMedleyRouter            3.65 µs/iter     (3.21 µs … 9.79 µs)    3.4 µs   9.79 µs   9.79 µs\r\nFindMyWay              99.71 µs/iter    (77.96 µs … 3.26 ms)  87.96 µs 265.92 µs   1.24 ms\r\nKoaTreeRouter           2.41 µs/iter     (2.29 µs … 2.58 µs)   2.46 µs   2.58 µs   2.58 µs\r\nTrekRouter              3.49 µs/iter     (3.16 µs … 4.84 µs)   3.47 µs   4.84 µs   4.84 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   2.04x faster than KoaTreeRouter\r\n   2.08x faster than PreparedRegExpRouter\r\n   2.96x faster than TrekRouter\r\n   3.09x faster than MedleyRouter\r\n   5.47x faster than TrieRouter\r\n   35.1x faster than RegExpRouter\r\n   84.55x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           58.27 µs/iter    (25.88 µs … 7.42 ms)   31.5 µs 971.42 µs      2 ms\r\nPreparedRegExpRouter    8.07 µs/iter     (2.71 µs … 35.7 µs)    5.3 µs   35.7 µs   35.7 µs\r\nTrieRouter               7.3 µs/iter     (4.96 µs … 5.18 ms)   5.83 µs  10.83 µs  12.71 µs\r\nLinearRouter            1.39 µs/iter     (1.27 µs … 1.82 µs)   1.43 µs   1.82 µs   1.82 µs\r\nMedleyRouter            4.03 µs/iter     (3.47 µs … 8.86 µs)    3.7 µs   8.86 µs   8.86 µs\r\nFindMyWay             103.31 µs/iter    (80.46 µs … 4.16 ms)  89.54 µs 306.04 µs   1.53 ms\r\nKoaTreeRouter           2.83 µs/iter     (2.53 µs … 4.82 µs)   2.77 µs   4.82 µs   4.82 µs\r\nTrekRouter              4.01 µs/iter    (3.41 µs … 11.82 µs)   3.71 µs  11.82 µs  11.82 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  LinearRouter\r\n   2.03x faster than KoaTreeRouter\r\n   2.88x faster than TrekRouter\r\n   2.9x faster than MedleyRouter\r\n   5.25x faster than TrieRouter\r\n   5.8x faster than PreparedRegExpRouter\r\n   41.85x faster than RegExpRouter\r\n   74.2x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           68.34 µs/iter    (26.33 µs … 8.38 ms)  30.92 µs   1.11 ms   2.45 ms\r\nPreparedRegExpRouter    4.31 µs/iter     (2.48 µs … 7.95 µs)   4.74 µs   7.95 µs   7.95 µs\r\nTrieRouter              7.77 µs/iter     (5.04 µs … 6.68 ms)   5.83 µs   9.42 µs  16.33 µs\r\nLinearRouter            4.19 µs/iter    (1.33 µs … 32.59 µs)   2.43 µs  32.59 µs  32.59 µs\r\nMedleyRouter            4.29 µs/iter       (3.5 µs … 9.6 µs)   4.06 µs    9.6 µs    9.6 µs\r\nFindMyWay             126.04 µs/iter    (80.38 µs … 8.11 ms)   90.5 µs   1.12 ms   2.56 ms\r\nKoaTreeRouter           2.77 µs/iter     (2.51 µs … 3.26 µs)    2.9 µs   3.26 µs   3.26 µs\r\nTrekRouter              3.89 µs/iter      (3.65 µs … 4.4 µs)   3.98 µs    4.4 µs    4.4 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  KoaTreeRouter\r\n   1.41x faster than TrekRouter\r\n   1.51x faster than LinearRouter\r\n   1.55x faster than MedleyRouter\r\n   1.56x faster than PreparedRegExpRouter\r\n   2.81x faster than TrieRouter\r\n   24.71x faster than RegExpRouter\r\n   45.58x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           82.01 µs/iter   (26.04 µs … 13.44 ms)  31.17 µs 906.29 µs   3.06 ms\r\nPreparedRegExpRouter    6.74 µs/iter    (2.58 µs … 35.23 µs)   6.05 µs  35.23 µs  35.23 µs\r\nTrieRouter              8.08 µs/iter    (5.04 µs … 10.08 ms)   5.83 µs   9.67 µs  16.13 µs\r\nLinearRouter          564.22 ns/iter   (433.07 ns … 1.31 µs) 617.83 ns   1.31 µs   1.31 µs\r\nMedleyRouter            4.39 µs/iter     (3.66 µs … 12.5 µs)   4.03 µs   12.5 µs   12.5 µs\r\nFindMyWay             123.96 µs/iter   (78.21 µs … 13.05 ms)  87.96 µs 438.83 µs   2.23 ms\r\nKoaTreeRouter           3.22 µs/iter     (2.52 µs … 6.81 µs)   3.35 µs   6.81 µs   6.81 µs\r\nTrekRouter              4.21 µs/iter    (2.54 µs … 14.32 ms)   2.92 µs   6.33 µs   7.13 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   5.71x faster than KoaTreeRouter\r\n   7.46x faster than TrekRouter\r\n   7.78x faster than MedleyRouter\r\n   11.94x faster than PreparedRegExpRouter\r\n   14.32x faster than TrieRouter\r\n   145.34x faster than RegExpRouter\r\n   219.7x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter          100.97 µs/iter   (26.17 µs … 17.51 ms)  31.08 µs   1.21 ms   3.09 ms\r\nPreparedRegExpRouter    5.94 µs/iter    (2.83 µs … 10.33 µs)   7.18 µs  10.33 µs  10.33 µs\r\nTrieRouter              8.45 µs/iter    (4.96 µs … 12.71 ms)   5.71 µs  10.42 µs  19.38 µs\r\nLinearRouter            1.65 µs/iter     (1.35 µs … 2.85 µs)   1.67 µs   2.85 µs   2.85 µs\r\nMedleyRouter             4.1 µs/iter     (3.59 µs … 5.16 µs)   4.24 µs   5.16 µs   5.16 µs\r\nFindMyWay             120.86 µs/iter   (77.17 µs … 15.57 ms)  86.96 µs    415 µs   2.35 ms\r\nKoaTreeRouter           2.77 µs/iter      (2.53 µs … 3.9 µs)    2.8 µs    3.9 µs    3.9 µs\r\nTrekRouter              3.92 µs/iter     (3.56 µs … 4.99 µs)   3.99 µs   4.99 µs   4.99 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  LinearRouter\r\n   1.68x faster than KoaTreeRouter\r\n   2.38x faster than TrekRouter\r\n   2.49x faster than MedleyRouter\r\n   3.6x faster than PreparedRegExpRouter\r\n   5.12x faster than TrieRouter\r\n   61.2x faster than RegExpRouter\r\n   73.25x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           99.91 µs/iter   (26.13 µs … 18.35 ms)     31 µs   1.46 ms   3.55 ms\r\nPreparedRegExpRouter   26.83 µs/iter    (5.25 µs … 161.2 µs)  28.99 µs  161.2 µs  161.2 µs\r\nTrieRouter             72.71 µs/iter    (4.96 µs … 59.46 ms)   9.04 µs 258.71 µs 488.63 µs\r\nLinearRouter            2.06 µs/iter      (1.2 µs … 5.51 µs)   2.67 µs   5.51 µs   5.51 µs\r\nMedleyRouter             3.9 µs/iter      (3.6 µs … 4.12 µs)   3.99 µs   4.12 µs   4.12 µs\r\nFindMyWay             125.48 µs/iter   (79.04 µs … 19.41 ms)  88.38 µs 242.96 µs    2.3 ms\r\nKoaTreeRouter           2.84 µs/iter     (2.64 µs … 3.13 µs)   2.91 µs   3.13 µs   3.13 µs\r\nTrekRouter              3.95 µs/iter     (3.62 µs … 4.21 µs)   4.09 µs   4.21 µs   4.21 µs\r\n\r\nsummary for GET /static/index.html\r\n  LinearRouter\r\n   1.38x faster than KoaTreeRouter\r\n   1.89x faster than MedleyRouter\r\n   1.92x faster than TrekRouter\r\n   13.01x faster than PreparedRegExpRouter\r\n   35.26x faster than TrieRouter\r\n   48.46x faster than RegExpRouter\r\n   60.86x faster than FindMyWay\r\n$ npm run bench-includes-init:bun\r\n\r\n> bench-includes-init:bun\r\n> bun run ./src/bench-includes-init.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: bun 1.0.12 (arm64-darwin)\r\n\r\nbenchmark                 time (avg)             (min … max)       p75       p99      p995\r\n------------------------------------------------------------ -----------------------------\r\n• GET /user\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           30.48 µs/iter     (23.83 µs … 1.7 ms)     30 µs  51.83 µs  66.29 µs\r\nPreparedRegExpRouter    1.34 µs/iter  (592.65 ns … 15.25 µs) 934.77 ns  15.25 µs  15.25 µs\r\nTrieRouter              5.82 µs/iter     (5.35 µs … 7.61 µs)    5.9 µs   7.61 µs   7.61 µs\r\nLinearRouter            1.14 µs/iter     (1.06 µs … 1.45 µs)   1.15 µs   1.45 µs   1.45 µs\r\nMedleyRouter            3.89 µs/iter     (3.74 µs … 4.41 µs)   3.93 µs   4.41 µs   4.41 µs\r\nFindMyWay              54.18 µs/iter   (40.46 µs … 16.06 ms)  54.29 µs  81.92 µs  91.33 µs\r\nKoaTreeRouter           3.35 µs/iter     (3.08 µs … 4.97 µs)   3.28 µs   4.97 µs   4.97 µs\r\nTrekRouter              4.87 µs/iter     (4.73 µs … 5.08 µs)   4.91 µs   5.08 µs   5.08 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   1.17x faster than PreparedRegExpRouter\r\n   2.92x faster than KoaTreeRouter\r\n   3.4x faster than MedleyRouter\r\n   4.25x faster than TrekRouter\r\n   5.08x faster than TrieRouter\r\n   26.62x faster than RegExpRouter\r\n   47.33x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           31.15 µs/iter  (25.58 µs … 896.29 µs)  32.42 µs  46.75 µs  54.83 µs\r\nPreparedRegExpRouter    1.38 µs/iter  (575.25 ns … 30.94 µs) 783.92 ns  30.94 µs  30.94 µs\r\nTrieRouter              6.15 µs/iter     (5.38 µs … 8.52 µs)   6.45 µs   8.52 µs   8.52 µs\r\nLinearRouter            1.26 µs/iter     (1.17 µs … 1.89 µs)   1.28 µs   1.89 µs   1.89 µs\r\nMedleyRouter            4.07 µs/iter     (3.89 µs … 4.84 µs)   4.08 µs   4.84 µs   4.84 µs\r\nFindMyWay              52.99 µs/iter    (40.88 µs … 8.88 ms)  53.75 µs  81.25 µs  87.21 µs\r\nKoaTreeRouter           3.79 µs/iter     (3.16 µs … 9.26 µs)   3.71 µs   9.26 µs   9.26 µs\r\nTrekRouter              5.15 µs/iter     (4.92 µs … 5.76 µs)   5.15 µs   5.76 µs   5.76 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   1.1x faster than PreparedRegExpRouter\r\n   3.01x faster than KoaTreeRouter\r\n   3.23x faster than MedleyRouter\r\n   4.09x faster than TrekRouter\r\n   4.88x faster than TrieRouter\r\n   24.72x faster than RegExpRouter\r\n   42.06x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           30.84 µs/iter    (24.17 µs … 5.83 ms)  32.17 µs   45.5 µs  54.21 µs\r\nPreparedRegExpRouter    1.18 µs/iter  (604.05 ns … 16.35 µs) 906.84 ns  16.35 µs  16.35 µs\r\nTrieRouter             10.31 µs/iter    (5.73 µs … 72.14 µs)   6.87 µs  72.14 µs  72.14 µs\r\nLinearRouter            1.47 µs/iter     (1.39 µs … 1.59 µs)   1.49 µs   1.59 µs   1.59 µs\r\nMedleyRouter            4.49 µs/iter     (4.19 µs … 5.79 µs)   4.52 µs   5.79 µs   5.79 µs\r\nFindMyWay              54.68 µs/iter    (42.92 µs … 9.42 ms)  55.46 µs     81 µs  85.33 µs\r\nKoaTreeRouter           3.56 µs/iter      (3.2 µs … 6.45 µs)   3.49 µs   6.45 µs   6.45 µs\r\nTrekRouter              5.39 µs/iter     (5.05 µs … 9.84 µs)    5.2 µs   9.84 µs   9.84 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  PreparedRegExpRouter\r\n   1.24x faster than LinearRouter\r\n   3.01x faster than KoaTreeRouter\r\n   3.79x faster than MedleyRouter\r\n   4.56x faster than TrekRouter\r\n   8.7x faster than TrieRouter\r\n   26.05x faster than RegExpRouter\r\n   46.18x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           34.33 µs/iter    (25.54 µs … 6.94 ms)  33.04 µs  90.96 µs 150.29 µs\r\nPreparedRegExpRouter    1.09 µs/iter    (597.1 ns … 6.46 µs)   1.02 µs   6.46 µs   6.46 µs\r\nTrieRouter              9.84 µs/iter   (4.67 µs … 121.14 ms)   7.13 µs  14.17 µs  19.54 µs\r\nLinearRouter            1.56 µs/iter     (1.36 µs … 1.82 µs)   1.62 µs   1.82 µs   1.82 µs\r\nMedleyRouter            4.49 µs/iter     (4.09 µs … 4.76 µs)   4.63 µs   4.76 µs   4.76 µs\r\nFindMyWay              56.66 µs/iter    (42.75 µs … 1.88 ms)  56.79 µs 100.67 µs 121.04 µs\r\nKoaTreeRouter           3.61 µs/iter     (3.21 µs … 7.28 µs)   3.53 µs   7.28 µs   7.28 µs\r\nTrekRouter              5.43 µs/iter     (4.97 µs … 6.57 µs)   5.71 µs   6.57 µs   6.57 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  PreparedRegExpRouter\r\n   1.44x faster than LinearRouter\r\n   3.32x faster than KoaTreeRouter\r\n   4.13x faster than MedleyRouter\r\n   5x faster than TrekRouter\r\n   9.06x faster than TrieRouter\r\n   31.61x faster than RegExpRouter\r\n   52.17x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           32.84 µs/iter  (25.67 µs … 931.71 µs)  35.04 µs  50.38 µs  59.13 µs\r\nPreparedRegExpRouter    1.86 µs/iter  (703.25 ns … 19.42 µs)   1.22 µs  19.42 µs  19.42 µs\r\nTrieRouter             15.42 µs/iter   (6.05 µs … 142.22 µs)   9.01 µs 142.22 µs 142.22 µs\r\nLinearRouter          573.28 ns/iter   (468.48 ns … 1.16 µs) 562.93 ns   1.16 µs   1.16 µs\r\nMedleyRouter            4.57 µs/iter      (4.01 µs … 5.6 µs)    4.7 µs    5.6 µs    5.6 µs\r\nFindMyWay              60.21 µs/iter    (41.63 µs … 7.77 ms)  55.67 µs 105.25 µs 147.08 µs\r\nKoaTreeRouter           3.73 µs/iter     (3.32 µs … 7.55 µs)   3.68 µs   7.55 µs   7.55 µs\r\nTrekRouter              5.77 µs/iter     (5.37 µs … 6.23 µs)   6.01 µs   6.23 µs   6.23 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   3.25x faster than PreparedRegExpRouter\r\n   6.5x faster than KoaTreeRouter\r\n   7.97x faster than MedleyRouter\r\n   10.07x faster than TrekRouter\r\n   26.9x faster than TrieRouter\r\n   57.28x faster than RegExpRouter\r\n   105.02x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter           38.99 µs/iter     (26.88 µs … 1.5 ms)  41.25 µs  99.33 µs 115.13 µs\r\nPreparedRegExpRouter  987.13 ns/iter   (618.27 ns … 2.18 µs)   1.05 µs   2.18 µs   2.18 µs\r\nTrieRouter              8.33 µs/iter    (6.15 µs … 13.69 µs)  10.29 µs  13.69 µs  13.69 µs\r\nLinearRouter            1.86 µs/iter     (1.38 µs … 3.83 µs)   2.06 µs   3.83 µs   3.83 µs\r\nMedleyRouter             4.9 µs/iter     (4.29 µs … 6.77 µs)   5.09 µs   6.77 µs   6.77 µs\r\nFindMyWay              73.58 µs/iter    (45.88 µs … 2.08 ms)  71.46 µs 252.63 µs    405 µs\r\nKoaTreeRouter           4.12 µs/iter     (3.24 µs … 7.15 µs)   4.46 µs   7.15 µs   7.15 µs\r\nTrekRouter              5.96 µs/iter     (5.07 µs … 7.89 µs)   6.45 µs   7.89 µs   7.89 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  PreparedRegExpRouter\r\n   1.88x faster than LinearRouter\r\n   4.18x faster than KoaTreeRouter\r\n   4.96x faster than MedleyRouter\r\n   6.04x faster than TrekRouter\r\n   8.44x faster than TrieRouter\r\n   39.5x faster than RegExpRouter\r\n   74.54x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n------------------------------------------------------------ -----------------------------\r\nRegExpRouter            38.2 µs/iter     (26.29 µs … 1.5 ms)  40.21 µs  83.33 µs 121.96 µs\r\nPreparedRegExpRouter    1.33 µs/iter   (894.09 ns … 2.23 µs)   1.66 µs   2.23 µs   2.23 µs\r\nTrieRouter             14.67 µs/iter     (4.67 µs … 2.86 ms)  12.67 µs 117.17 µs 197.13 µs\r\nLinearRouter            2.04 µs/iter     (1.34 µs … 5.22 µs)   2.37 µs   5.22 µs   5.22 µs\r\nMedleyRouter            6.41 µs/iter    (4.99 µs … 12.08 µs)   6.65 µs  12.08 µs  12.08 µs\r\nFindMyWay              72.48 µs/iter    (41.42 µs … 1.62 ms)  68.83 µs 280.33 µs 408.92 µs\r\nKoaTreeRouter           4.76 µs/iter      (3.4 µs … 7.76 µs)   5.53 µs   7.76 µs   7.76 µs\r\nTrekRouter              6.68 µs/iter     (5.18 µs … 9.86 µs)   8.48 µs   9.86 µs   9.86 µs\r\n\r\nsummary for GET /static/index.html\r\n  PreparedRegExpRouter\r\n   1.53x faster than LinearRouter\r\n   3.57x faster than KoaTreeRouter\r\n   4.8x faster than MedleyRouter\r\n   5.01x faster than TrekRouter\r\n   11x faster than TrieRouter\r\n   28.65x faster than RegExpRouter\r\n   54.36x faster than FindMyWay\r\n```\r\n\r\n### Bundlesize\r\n\r\nI compared the app created by `npm create sonik@latest` with the following changes.\r\n\r\n#### Add `RegExpRouter` preset\r\n\r\n```ts\r\nimport { HonoBase } from './hono-base'\r\nimport type { HonoOptions } from './hono-base'\r\nimport { RegExpRouter } from './router/reg-exp-router'\r\nimport type { Env, Schema } from './types'\r\n\r\nexport class Hono<\r\n  E extends Env = Env,\r\n  S extends Schema = {},\r\n  BasePath extends string = '/'\r\n> extends HonoBase<E, S, BasePath> {\r\n  constructor(options: HonoOptions<E> = {}) {\r\n    super(options)\r\n    this.router = new RegExpRouter()\r\n  }\r\n}\r\n```\r\n\r\n#### Add rollup plugin\r\n\r\n```ts\r\nimport { defineConfig } from \"vite\";\r\nimport sonik from \"sonik/vite\";\r\nimport pages from \"@sonikjs/cloudflare-pages\";\r\n\r\nimport {\r\n  buildInitParams,\r\n  serializeInitParams,\r\n} from \"../../honojs/hono/src/router/reg-exp-router\";\r\n\r\n// replace RegExpRouter with PreparedRegExpRouter at build time\r\nfunction replacePreparedRegExpRouter(initPrams) {\r\n  return {\r\n    name: \"hono-prepared-reg-exp-router\",\r\n    load(id) {\r\n      const match = id.match(/router\\/reg-exp-router\\/index.(js|ts)$/);\r\n      if (match) {\r\n        const ext = match[1];\r\n        const serialized = serializeInitParams(buildInitParams(initPrams));\r\n        return `\r\nimport { PreparedRegExpRouter } from './prepared-router.${ext}'\r\nexport class RegExpRouter extends PreparedRegExpRouter {\r\n  constructor() {\r\n    super(...${serialized});\r\n  }\r\n}\r\n`;\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n}\r\n\r\nexport default defineConfig({\r\n  plugins: [\r\n    replacePreparedRegExpRouter({\r\n      routes: [\r\n        {\r\n          method: \"ALL\",\r\n          path: \"/about/*\",\r\n        },\r\n        {\r\n          method: \"ALL\",\r\n          path: \"/*\",\r\n        },\r\n        {\r\n          method: \"ALL\",\r\n          path: \"/static/*\",\r\n        },\r\n        {\r\n          method: \"GET\",\r\n          path: \"/about/:name\",\r\n        },\r\n        {\r\n          method: \"GET\",\r\n          path: \"/\",\r\n        },\r\n      ],\r\n    }),\r\n    sonik(),\r\n    pages(),\r\n  ],\r\n});\r\n```\r\n\r\nWith this setup, the `npx vite build` resulted in `71.27 kB` -> `55.30 kB`.\r\n\r\n\r\n### When can we use it?\r\n\r\nIt can be used for general applications, but it is a bit difficult to use.\r\nFile-based routing has the following characteristics that make it easy to implement.\r\n* Routing that falls back to TrieRouter is not generated; can assume RegExpRouter.\r\n* Basically, we can know the routing in advance because it is done via a build tool.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2033843147},{"id":2033905354,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1797","title":"feat: implement azure-functions adapter","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\n---\r\n\r\n## usage:\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport { logger } from 'hono/logger'\r\nimport { AzureFunction, Context, HttpRequest, handle } from 'hono/adapter/azure-functions'\r\n\r\nconst app = new Hono()\r\napp.use('*', logger())\r\n\r\napp.all('/api/:funcname', async (c) => {\r\n  const message = 'Hello, Azure Functions and Hono!'\r\n  const query = c.req.queries()\r\n  const json_body = c.req.method === \"POST\" ? await c.req.json() : {};\r\n  const headers = c.req.header()\r\n  return c.json({ message, query, json_body, headers })\r\n})\r\n\r\nconst httpTrigger: AzureFunction = async function (context: Context, req: HttpRequest): Promise<void> {\r\n  context.log('HTTP trigger function processed a request.')\r\n  context = await handle(app)({ context, req })\r\n}\r\n\r\nexport default httpTrigger\r\n```\r\n\r\n## ~requirement~\r\n\r\n- ~@azure/functions `^3.0.0`~","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2033905354},{"id":2034234357,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1799","title":"Environment variables are not accessible via `c.env` in Bun","body":"### What version of Hono are you using?\r\n\r\n3.11.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun - 1.0.15\r\n\r\n### What steps can reproduce the bug?\r\n\r\nSave an Environmental Variable in ENV File `.env` `.env.local` etc.,\r\nTry to read the value from the Hono using `c.env`\r\n\r\n```sh\r\n$ cat .env \r\nFOO=world\r\nBAR=hello$FOO\r\n```\r\n\r\n```ts\r\n$ cat src/index.ts \r\nimport { Hono } from 'hono'\r\nconst app = new Hono()\r\napp.get('/', (c) =>  c.json({ hono: `${c.env.FOO}`, bun: `${process.env.FOO}`  }) )\r\nexport default app\r\n\r\n```\r\n\r\n```bash\r\n$ curl http://localhost:3000\r\n{\"hono\":\"undefined\",\"bun\":\"world\"}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nEnvironmental Variables should be available in `c.env` in Hono as they are available in `process.env`\r\n\r\n### What do you see instead?\r\n\r\n`c.env` is empty object without any values even though there are many Environmental variables.\r\n\r\n### Additional information\r\n\r\nAttaching Whole `c` value\r\n```ts\r\n{\"c\":{\"env\":{},\"_var\":{},\"finalized\":false,\"req\":{\"routeIndex\":0,\"bodyCache\":{},\"raw\":{},\"path\":\"/c\"}}}\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2034234357},{"id":2034452431,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1800","title":"JSON response can't contain Dates","body":"### What version of Hono are you using?\n\n3.11.4\n\n### What runtime/platform is your app running on?\n\nCloudflare Pages Function\n\n### What steps can reproduce the bug?\n\nReturn an object containing a Date with `context.json`. For example:\r\n\r\n```\r\n  const router = new Hono();\r\n\r\n  router.get('/test', (context) => {\r\n    const response = {\r\n      dateValue: new Date()\r\n    };\r\n\r\n    return context.json(response);\r\n  });\r\n```\n\n### What is the expected behavior?\n\nBecause Hono uses JSON.stringify() under the hood, I would expect the code above to be valid.\n\n### What do you see instead?\n\nA type error is shown because `Date` is not considered a `JSONObject` or `JSONPrimitive`.\r\n\r\n```\r\nNo overload matches this call.\r\n  Overload 1 of 2, '(object: JSONValue, status?: number | undefined, headers?: HeaderRecord | undefined): Response & TypedResponse<never>', gave the following error.\r\n    Argument of type '{ dateValue: Date; }' is not assignable to parameter of type 'JSONValue'.\r\n      Type '{ dateValue: Date; }' is not assignable to type 'JSONObject'.\r\n        Property 'dateValue' is incompatible with index signature.\r\n          Type 'Date' is not assignable to type 'JSONObject | JSONArray | JSONPrimitive'.\r\n            Type 'Date' is not assignable to type 'JSONObject'.\r\n              Index signature for type 'string' is missing in type 'Date'.\r\n  Overload 2 of 2, '(object: JSONValue, init?: ResponseInit | undefined): Response & TypedResponse<never>', gave the following error.\r\n    Argument of type '{ dateValue: Date; }' is not assignable to parameter of type 'JSONValue'.ts(2769)\r\n```\n\n### Additional information\n\nThe code executes fine, with the Date being stringified in the response as expected. For this reason especially, I consider the typing to be inaccurate. It disallows a valid type.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2034452431},{"id":2034455721,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1801","title":"Add Date to JSONPrimitive type","body":"Include Date in JSONPrimitive type union\r\n\r\nFixes #1800 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2034455721},{"id":2034691356,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1804","title":"feat(cloudflare-workers): modified manifest option to be required","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nThis is breaking change but fix: https://github.com/honojs/hono/issues/1127#issuecomment-1849001490\r\n\r\nTo resolve the issue, it may be better not to modify serveStatic (module) directly but to provide the wrapped version of serveStatic. However, I don't have any ideas on how to provide it in that case.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2034691356},{"id":2035235129,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1805","title":"PoC: Introduce FilePatternRouter","body":"I've implemented another router!\r\nIt is debatable whether it is appropriate to add even more new routers, but I think this router has enough characteristics to merit discussion.\r\n\r\n### What features does this router have?\r\n\r\nThis is a router for file-based routing. Performance tuning was done by reducing the number of routing format patterns supported.\r\n\r\n* Less than 200 lines\r\n* Fast initialization\r\n* High performance\r\n\r\nI haven't written a test yet, so it doesn't work properly, but it works on almost the same principle as RegExpRouter, so I think it will work if fixed bugs.\r\n\r\n### Benchmark\r\n\r\nNearly the same performance as RegExpRouter\r\n\r\n```\r\n% npm run bench:node\r\n\r\n> bench:node\r\n> tsx ./src/bench.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: node v20.0.0 (arm64-darwin)\r\n\r\nbenchmark                                 time (avg)             (min … max)       p75       p99      p995\r\n---------------------------------------------------------------------------- -----------------------------\r\n• short static - GET /user\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                      58.91 ns/iter  (51.05 ns … 136.05 ns)  60.52 ns  107.4 ns 111.47 ns\r\nHono TrieRouter                       211.09 ns/iter (194.67 ns … 267.97 ns) 213.53 ns 252.62 ns 266.85 ns\r\nHono FilePatternRouter                  79.3 ns/iter   (69.47 ns … 502.8 ns)  80.72 ns 128.91 ns 132.31 ns\r\n@medley/router                         88.29 ns/iter  (79.59 ns … 117.61 ns)  90.22 ns  101.7 ns 103.94 ns\r\nfind-my-way                            80.37 ns/iter     (71.42 ns … 106 ns)  83.82 ns  93.55 ns  95.64 ns\r\nkoa-tree-router                           76 ns/iter   (68.05 ns … 94.72 ns)  77.54 ns  87.96 ns  89.55 ns\r\ntrek-router                           100.55 ns/iter  (90.61 ns … 128.89 ns) 103.59 ns  116.5 ns 117.92 ns\r\nexpress (WARNING: includes handling)    1.02 µs/iter   (979.55 ns … 1.07 µs)   1.03 µs   1.07 µs   1.07 µs\r\nkoa-router                              1.85 µs/iter     (1.81 µs … 1.89 µs)   1.87 µs   1.89 µs   1.89 µs\r\nradix3                                 80.45 ns/iter   (72.74 ns … 98.29 ns)  81.12 ns  92.33 ns  95.23 ns\r\n\r\nsummary for short static - GET /user\r\n  Hono RegExpRouter\r\n   1.29x faster than koa-tree-router\r\n   1.35x faster than Hono FilePatternRouter\r\n   1.36x faster than find-my-way\r\n   1.37x faster than radix3\r\n   1.5x faster than @medley/router\r\n   1.71x faster than trek-router\r\n   3.58x faster than Hono TrieRouter\r\n   17.31x faster than express (WARNING: includes handling)\r\n   31.43x faster than koa-router\r\n\r\n• static with same radix - GET /user/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                      66.06 ns/iter   (59.44 ns … 82.79 ns)  67.34 ns  79.32 ns  79.89 ns\r\nHono TrieRouter                       233.42 ns/iter   (210.4 ns … 431.3 ns) 235.63 ns  260.6 ns 281.34 ns\r\nHono FilePatternRouter                 86.94 ns/iter  (78.55 ns … 141.28 ns)  88.44 ns  99.05 ns 107.49 ns\r\n@medley/router                        135.26 ns/iter (124.11 ns … 153.46 ns) 138.38 ns 148.45 ns 150.34 ns\r\nfind-my-way                           147.39 ns/iter  (133.8 ns … 222.41 ns) 151.96 ns  163.5 ns 176.84 ns\r\nkoa-tree-router                       111.78 ns/iter  (99.56 ns … 191.88 ns) 116.47 ns 138.41 ns 139.72 ns\r\ntrek-router                           160.37 ns/iter (145.94 ns … 198.02 ns) 165.46 ns 191.18 ns 195.03 ns\r\nexpress (WARNING: includes handling)    1.09 µs/iter      (1.04 µs … 1.2 µs)    1.1 µs    1.2 µs    1.2 µs\r\nkoa-router                              1.88 µs/iter     (1.84 µs … 1.97 µs)   1.89 µs   1.97 µs   1.97 µs\r\nradix3                                 86.57 ns/iter  (77.52 ns … 130.18 ns)  88.57 ns 108.02 ns  114.7 ns\r\n\r\nsummary for static with same radix - GET /user/comments\r\n  Hono RegExpRouter\r\n   1.31x faster than radix3\r\n   1.32x faster than Hono FilePatternRouter\r\n   1.69x faster than koa-tree-router\r\n   2.05x faster than @medley/router\r\n   2.23x faster than find-my-way\r\n   2.43x faster than trek-router\r\n   3.53x faster than Hono TrieRouter\r\n   16.48x faster than express (WARNING: includes handling)\r\n   28.43x faster than koa-router\r\n\r\n• dynamic route - GET /user/lookup/username/hey\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     136.29 ns/iter (122.33 ns … 166.61 ns)  141.5 ns 154.23 ns 164.02 ns\r\nHono TrieRouter                       372.56 ns/iter (350.58 ns … 590.02 ns) 376.68 ns 433.76 ns 590.02 ns\r\nHono FilePatternRouter                  88.5 ns/iter   (80.05 ns … 113.7 ns)  90.63 ns 104.95 ns 110.15 ns\r\n@medley/router                        188.55 ns/iter (170.17 ns … 247.84 ns)  192.1 ns 217.18 ns 218.54 ns\r\nfind-my-way                           223.37 ns/iter  (202.89 ns … 277.1 ns) 228.78 ns 262.39 ns 265.58 ns\r\nkoa-tree-router                       169.16 ns/iter (152.82 ns … 203.72 ns) 174.07 ns 193.65 ns 201.94 ns\r\ntrek-router                           268.98 ns/iter (249.23 ns … 317.05 ns) 274.48 ns 307.78 ns 317.05 ns\r\nexpress (WARNING: includes handling)    1.73 µs/iter      (1.68 µs … 1.8 µs)   1.74 µs    1.8 µs    1.8 µs\r\nkoa-router                              1.88 µs/iter     (1.83 µs … 1.98 µs)   1.89 µs   1.98 µs   1.98 µs\r\nradix3                                395.96 ns/iter (372.88 ns … 478.81 ns) 402.25 ns 434.68 ns 478.81 ns\r\n\r\nsummary for dynamic route - GET /user/lookup/username/hey\r\n  Hono FilePatternRouter\r\n   1.54x faster than Hono RegExpRouter\r\n   1.91x faster than koa-tree-router\r\n   2.13x faster than @medley/router\r\n   2.52x faster than find-my-way\r\n   3.04x faster than trek-router\r\n   4.21x faster than Hono TrieRouter\r\n   4.47x faster than radix3\r\n   19.53x faster than express (WARNING: includes handling)\r\n   21.24x faster than koa-router\r\n\r\n• mixed static dynamic - GET /event/abcd1234/comments\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     137.81 ns/iter    (120.05 ns … 282 ns) 140.41 ns 246.46 ns 268.75 ns\r\nHono TrieRouter                       410.34 ns/iter (377.88 ns … 765.28 ns) 411.47 ns 509.07 ns 765.28 ns\r\nHono FilePatternRouter                 86.65 ns/iter   (77.3 ns … 115.13 ns)   88.2 ns 102.59 ns 108.73 ns\r\n@medley/router                        156.36 ns/iter  (144.2 ns … 390.76 ns) 159.08 ns  182.5 ns 291.98 ns\r\nfind-my-way                           200.26 ns/iter (179.33 ns … 581.04 ns) 203.52 ns 274.63 ns 392.51 ns\r\nkoa-tree-router                       141.91 ns/iter (128.65 ns … 168.74 ns) 147.58 ns 162.32 ns 166.07 ns\r\ntrek-router                           230.61 ns/iter (215.44 ns … 280.25 ns) 236.32 ns 264.18 ns 266.87 ns\r\nexpress (WARNING: includes handling)    1.89 µs/iter     (1.81 µs … 2.16 µs)   1.91 µs   2.16 µs   2.16 µs\r\nkoa-router                              1.93 µs/iter     (1.85 µs … 2.44 µs)   1.93 µs   2.44 µs   2.44 µs\r\nradix3                                376.95 ns/iter  (352.57 ns … 454.3 ns) 384.84 ns 402.63 ns  454.3 ns\r\n\r\nsummary for mixed static dynamic - GET /event/abcd1234/comments\r\n  Hono FilePatternRouter\r\n   1.59x faster than Hono RegExpRouter\r\n   1.64x faster than koa-tree-router\r\n   1.8x faster than @medley/router\r\n   2.31x faster than find-my-way\r\n   2.66x faster than trek-router\r\n   4.35x faster than radix3\r\n   4.74x faster than Hono TrieRouter\r\n   21.86x faster than express (WARNING: includes handling)\r\n   22.26x faster than koa-router\r\n\r\n• post - POST /event/abcd1234/comment\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     122.76 ns/iter (111.57 ns … 154.22 ns) 127.59 ns  145.9 ns 147.73 ns\r\nHono TrieRouter                       435.07 ns/iter (394.88 ns … 979.27 ns) 427.49 ns 777.25 ns 979.27 ns\r\nHono FilePatternRouter                138.52 ns/iter (124.78 ns … 260.35 ns)    142 ns  175.8 ns 194.97 ns\r\n@medley/router                        149.17 ns/iter (139.13 ns … 343.57 ns) 152.33 ns  172.1 ns 186.98 ns\r\nfind-my-way                           203.02 ns/iter (182.47 ns … 747.03 ns) 202.47 ns 515.17 ns 565.67 ns\r\nkoa-tree-router                       135.33 ns/iter (118.64 ns … 718.98 ns) 137.77 ns 178.27 ns 427.55 ns\r\ntrek-router                            192.5 ns/iter  (178.58 ns … 226.7 ns) 198.45 ns 219.69 ns 225.13 ns\r\nexpress (WARNING: includes handling)     1.9 µs/iter     (1.86 µs … 1.97 µs)   1.91 µs   1.97 µs   1.97 µs\r\nkoa-router                              1.91 µs/iter     (1.84 µs … 2.58 µs)    1.9 µs   2.58 µs   2.58 µs\r\nradix3                                 375.8 ns/iter (353.62 ns … 458.61 ns)    381 ns 409.31 ns 458.61 ns\r\n\r\nsummary for post - POST /event/abcd1234/comment\r\n  Hono RegExpRouter\r\n   1.1x faster than koa-tree-router\r\n   1.13x faster than Hono FilePatternRouter\r\n   1.22x faster than @medley/router\r\n   1.57x faster than trek-router\r\n   1.65x faster than find-my-way\r\n   3.06x faster than radix3\r\n   3.54x faster than Hono TrieRouter\r\n   15.45x faster than express (WARNING: includes handling)\r\n   15.59x faster than koa-router\r\n\r\n• long static - GET /very/deeply/nested/route/hello/there\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                      77.67 ns/iter    (66.17 ns … 1.05 µs)  75.78 ns  94.41 ns  97.32 ns\r\nHono TrieRouter                       334.03 ns/iter (305.36 ns … 922.28 ns) 338.85 ns 365.54 ns 922.28 ns\r\nHono FilePatternRouter                 96.46 ns/iter    (85.35 ns … 1.12 µs)  94.96 ns 124.45 ns 180.41 ns\r\n@medley/router                        119.39 ns/iter      (105.41 ns … 1 µs) 116.87 ns 144.58 ns 685.12 ns\r\nfind-my-way                           197.86 ns/iter (183.28 ns … 230.28 ns) 203.15 ns 224.45 ns 229.51 ns\r\nkoa-tree-router                       115.76 ns/iter (104.94 ns … 951.02 ns)  117.1 ns 152.61 ns 180.44 ns\r\ntrek-router                           132.37 ns/iter (122.87 ns … 186.36 ns) 135.83 ns 153.37 ns 161.32 ns\r\nexpress (WARNING: includes handling)    1.37 µs/iter     (1.31 µs … 1.57 µs)   1.38 µs   1.57 µs   1.57 µs\r\nkoa-router                              1.99 µs/iter     (1.82 µs … 2.93 µs)   2.01 µs   2.93 µs   2.93 µs\r\nradix3                                 87.67 ns/iter  (78.33 ns … 929.75 ns)  87.28 ns 103.88 ns 112.37 ns\r\n\r\nsummary for long static - GET /very/deeply/nested/route/hello/there\r\n  Hono RegExpRouter\r\n   1.13x faster than radix3\r\n   1.24x faster than Hono FilePatternRouter\r\n   1.49x faster than koa-tree-router\r\n   1.54x faster than @medley/router\r\n   1.7x faster than trek-router\r\n   2.55x faster than find-my-way\r\n   4.3x faster than Hono TrieRouter\r\n   17.67x faster than express (WARNING: includes handling)\r\n   25.6x faster than koa-router\r\n\r\n• wildcard - GET /static/index.html\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     135.81 ns/iter (124.22 ns … 177.29 ns) 139.88 ns 165.33 ns 171.44 ns\r\nHono TrieRouter                       289.58 ns/iter   (259.91 ns … 1.35 µs) 281.46 ns 745.39 ns   1.35 µs\r\nHono FilePatternRouter                124.07 ns/iter (114.05 ns … 167.81 ns) 128.47 ns 142.99 ns 146.57 ns\r\n@medley/router                        109.92 ns/iter  (97.46 ns … 255.35 ns) 111.77 ns 125.27 ns 126.26 ns\r\nfind-my-way                           170.38 ns/iter (157.22 ns … 216.25 ns) 175.78 ns 204.81 ns 209.27 ns\r\nkoa-tree-router                       143.54 ns/iter  (131.88 ns … 171.5 ns) 147.97 ns  163.4 ns 165.68 ns\r\ntrek-router                           171.31 ns/iter (158.74 ns … 208.93 ns) 176.14 ns 198.67 ns 208.67 ns\r\nexpress (WARNING: includes handling)    2.11 µs/iter     (2.01 µs … 3.05 µs)   2.11 µs   3.05 µs   3.05 µs\r\nkoa-router                               1.9 µs/iter     (1.81 µs … 2.48 µs)   1.88 µs   2.48 µs   2.48 µs\r\nradix3                                371.09 ns/iter (348.55 ns … 451.24 ns) 375.56 ns 438.87 ns 451.24 ns\r\n\r\nsummary for wildcard - GET /static/index.html\r\n  @medley/router\r\n   1.13x faster than Hono FilePatternRouter\r\n   1.24x faster than Hono RegExpRouter\r\n   1.31x faster than koa-tree-router\r\n   1.55x faster than find-my-way\r\n   1.56x faster than trek-router\r\n   2.63x faster than Hono TrieRouter\r\n   3.38x faster than radix3\r\n   17.25x faster than koa-router\r\n   19.15x faster than express (WARNING: includes handling)\r\n\r\n• all together\r\n---------------------------------------------------------------------------- -----------------------------\r\nHono RegExpRouter                     397.98 ns/iter   (369.44 ns … 1.08 µs)  398.2 ns 540.96 ns   1.08 µs\r\nHono TrieRouter                         2.02 µs/iter         (1.9 µs … 3 µs)      2 µs      3 µs      3 µs\r\nHono FilePatternRouter                 443.1 ns/iter   (399.37 ns … 1.71 µs) 435.84 ns 921.95 ns   1.71 µs\r\n@medley/router                        665.74 ns/iter   (610.99 ns … 1.69 µs) 650.15 ns   1.69 µs   1.69 µs\r\nfind-my-way                             1.08 µs/iter   (994.02 ns … 2.33 µs)   1.05 µs   2.33 µs   2.33 µs\r\nkoa-tree-router                       611.28 ns/iter  (578.8 ns … 997.83 ns) 616.11 ns 997.83 ns 997.83 ns\r\ntrek-router                           976.31 ns/iter   (921.32 ns … 1.35 µs)  982.9 ns   1.35 µs   1.35 µs\r\nexpress (WARNING: includes handling)   11.32 µs/iter     (9.92 µs … 7.32 ms)  10.83 µs   14.5 µs  15.67 µs\r\nkoa-router                             12.99 µs/iter    (11.63 µs … 2.17 ms)  12.63 µs  16.71 µs  24.21 µs\r\nradix3                                  1.61 µs/iter     (1.47 µs … 2.96 µs)   1.55 µs   2.96 µs   2.96 µs\r\n\r\nsummary for all together\r\n  Hono RegExpRouter\r\n   1.11x faster than Hono FilePatternRouter\r\n   1.54x faster than koa-tree-router\r\n   1.67x faster than @medley/router\r\n   2.45x faster than trek-router\r\n   2.71x faster than find-my-way\r\n   4.03x faster than radix3\r\n   5.08x faster than Hono TrieRouter\r\n   28.46x faster than express (WARNING: includes handling)\r\n   32.63x faster than koa-router\r\n```\r\n\r\nInitialization performance is not as good as LinearRouter, but fast enough.\r\n\r\n```\r\n% npm run bench-includes-init:node\r\n\r\n> bench-includes-init:node\r\n> tsx ./src/bench-includes-init.mts\r\n\r\ncpu: Apple M2 Pro\r\nruntime: node v20.0.0 (arm64-darwin)\r\n\r\nbenchmark              time (avg)             (min … max)       p75       p99      p995\r\n--------------------------------------------------------- -----------------------------\r\n• GET /user\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        35.77 µs/iter   (26.21 µs … 15.11 ms)  31.42 µs  69.54 µs 375.42 µs\r\nTrieRouter           5.76 µs/iter   (4.92 µs … 268.75 µs)   5.58 µs      7 µs   8.75 µs\r\nLinearRouter       958.76 ns/iter (916.41 ns … 989.93 ns) 969.11 ns 989.93 ns 989.93 ns\r\nFilePatternRouter    2.86 µs/iter     (2.81 µs … 2.91 µs)   2.87 µs   2.91 µs   2.91 µs\r\nMedleyRouter         2.86 µs/iter     (2.81 µs … 2.93 µs)   2.87 µs   2.93 µs   2.93 µs\r\nFindMyWay           89.77 µs/iter    (78.21 µs … 4.13 ms)  87.25 µs 160.25 µs 275.46 µs\r\nKoaTreeRouter         2.1 µs/iter     (2.07 µs … 2.17 µs)   2.11 µs   2.17 µs   2.17 µs\r\nTrekRouter           2.93 µs/iter     (2.87 µs … 3.07 µs)   2.94 µs   3.07 µs   3.07 µs\r\n\r\nsummary for GET /user\r\n  LinearRouter\r\n   2.19x faster than KoaTreeRouter\r\n   2.98x faster than FilePatternRouter\r\n   2.98x faster than MedleyRouter\r\n   3.06x faster than TrekRouter\r\n   6x faster than TrieRouter\r\n   37.31x faster than RegExpRouter\r\n   93.63x faster than FindMyWay\r\n\r\n• GET /user/comments\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        36.52 µs/iter    (25.96 µs … 2.29 ms)  30.46 µs 230.38 µs 473.71 µs\r\nTrieRouter           5.75 µs/iter      (5.68 µs … 5.9 µs)   5.76 µs    5.9 µs    5.9 µs\r\nLinearRouter         1.05 µs/iter     (1.02 µs … 1.08 µs)   1.06 µs   1.08 µs   1.08 µs\r\nFilePatternRouter    2.89 µs/iter     (2.82 µs … 2.95 µs)   2.92 µs   2.95 µs   2.95 µs\r\nMedleyRouter         2.94 µs/iter     (2.89 µs … 3.06 µs)   2.96 µs   3.06 µs   3.06 µs\r\nFindMyWay           93.93 µs/iter    (78.21 µs … 3.08 ms)  88.21 µs 280.21 µs 360.71 µs\r\nKoaTreeRouter        2.16 µs/iter     (2.12 µs … 2.21 µs)   2.17 µs   2.21 µs   2.21 µs\r\nTrekRouter              3 µs/iter      (2.93 µs … 3.1 µs)   3.04 µs    3.1 µs    3.1 µs\r\n\r\nsummary for GET /user/comments\r\n  LinearRouter\r\n   2.05x faster than KoaTreeRouter\r\n   2.74x faster than FilePatternRouter\r\n   2.8x faster than MedleyRouter\r\n   2.86x faster than TrekRouter\r\n   5.46x faster than TrieRouter\r\n   34.73x faster than RegExpRouter\r\n   89.32x faster than FindMyWay\r\n\r\n• GET /user/lookup/username/hey\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        51.61 µs/iter    (26.17 µs … 9.83 ms)  31.13 µs 591.08 µs   1.15 ms\r\nTrieRouter           5.98 µs/iter     (5.91 µs … 6.06 µs)   6.01 µs   6.06 µs   6.06 µs\r\nLinearRouter         1.22 µs/iter     (1.18 µs … 1.28 µs)   1.23 µs   1.28 µs   1.28 µs\r\nFilePatternRouter    2.96 µs/iter     (2.89 µs … 3.18 µs)   2.99 µs   3.18 µs   3.18 µs\r\nMedleyRouter         3.02 µs/iter     (2.96 µs … 3.08 µs)   3.05 µs   3.08 µs   3.08 µs\r\nFindMyWay           97.06 µs/iter    (80.46 µs … 3.59 ms)  89.46 µs 291.63 µs 372.83 µs\r\nKoaTreeRouter        2.28 µs/iter     (2.18 µs … 2.67 µs)    2.3 µs   2.67 µs   2.67 µs\r\nTrekRouter           3.11 µs/iter     (3.06 µs … 3.16 µs)   3.13 µs   3.16 µs   3.16 µs\r\n\r\nsummary for GET /user/lookup/username/hey\r\n  LinearRouter\r\n   1.87x faster than KoaTreeRouter\r\n   2.43x faster than FilePatternRouter\r\n   2.48x faster than MedleyRouter\r\n   2.55x faster than TrekRouter\r\n   4.9x faster than TrieRouter\r\n   42.3x faster than RegExpRouter\r\n   79.56x faster than FindMyWay\r\n\r\n• GET /event/abcd1234/comments\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        51.52 µs/iter     (26.13 µs … 5.8 ms)  30.79 µs 542.96 µs   1.13 ms\r\nTrieRouter           6.05 µs/iter     (5.94 µs … 6.39 µs)   6.11 µs   6.39 µs   6.39 µs\r\nLinearRouter         1.24 µs/iter      (1.2 µs … 1.55 µs)   1.24 µs   1.55 µs   1.55 µs\r\nFilePatternRouter    2.96 µs/iter     (2.88 µs … 3.48 µs)   2.97 µs   3.48 µs   3.48 µs\r\nMedleyRouter         2.96 µs/iter     (2.93 µs … 3.02 µs)   2.98 µs   3.02 µs   3.02 µs\r\nFindMyWay           92.96 µs/iter    (79.04 µs … 4.78 ms)  86.96 µs 255.75 µs 356.83 µs\r\nKoaTreeRouter        2.19 µs/iter     (2.14 µs … 2.24 µs)    2.2 µs   2.24 µs   2.24 µs\r\nTrekRouter           3.09 µs/iter     (3.04 µs … 3.18 µs)   3.11 µs   3.18 µs   3.18 µs\r\n\r\nsummary for GET /event/abcd1234/comments\r\n  LinearRouter\r\n   1.77x faster than KoaTreeRouter\r\n   2.39x faster than FilePatternRouter\r\n   2.4x faster than MedleyRouter\r\n   2.5x faster than TrekRouter\r\n   4.9x faster than TrieRouter\r\n   41.66x faster than RegExpRouter\r\n   75.17x faster than FindMyWay\r\n\r\n• POST /event/abcd1234/comment\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        55.51 µs/iter    (26.08 µs … 9.95 ms)  31.13 µs 562.63 µs   1.13 ms\r\nTrieRouter           6.08 µs/iter      (5.89 µs … 6.7 µs)   6.06 µs    6.7 µs    6.7 µs\r\nLinearRouter       384.92 ns/iter  (360.12 ns … 456.6 ns)  390.7 ns 447.47 ns  456.6 ns\r\nFilePatternRouter     3.1 µs/iter     (2.86 µs … 3.92 µs)   3.13 µs   3.92 µs   3.92 µs\r\nMedleyRouter            3 µs/iter     (2.91 µs … 3.18 µs)   3.03 µs   3.18 µs   3.18 µs\r\nFindMyWay           99.26 µs/iter    (80.08 µs … 9.37 ms)  87.71 µs 258.08 µs 368.63 µs\r\nKoaTreeRouter        2.23 µs/iter     (2.13 µs … 2.98 µs)    2.2 µs   2.98 µs   2.98 µs\r\nTrekRouter           3.08 µs/iter        (3 µs … 3.21 µs)   3.11 µs   3.21 µs   3.21 µs\r\n\r\nsummary for POST /event/abcd1234/comment\r\n  LinearRouter\r\n   5.8x faster than KoaTreeRouter\r\n   7.81x faster than MedleyRouter\r\n   7.99x faster than TrekRouter\r\n   8.06x faster than FilePatternRouter\r\n   15.8x faster than TrieRouter\r\n   144.21x faster than RegExpRouter\r\n   257.86x faster than FindMyWay\r\n\r\n• GET /very/deeply/nested/route/hello/there\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        70.84 µs/iter   (26.33 µs … 12.93 ms)  31.08 µs 728.38 µs   1.45 ms\r\nTrieRouter           5.96 µs/iter     (5.84 µs … 6.11 µs)   6.01 µs   6.11 µs   6.11 µs\r\nLinearRouter         1.24 µs/iter     (1.16 µs … 1.71 µs)   1.25 µs   1.71 µs   1.71 µs\r\nFilePatternRouter    3.03 µs/iter     (2.88 µs … 3.71 µs)   3.02 µs   3.71 µs   3.71 µs\r\nMedleyRouter         3.05 µs/iter     (2.83 µs … 3.63 µs)   3.01 µs   3.63 µs   3.63 µs\r\nFindMyWay          104.42 µs/iter   (79.21 µs … 12.81 ms)  86.88 µs 270.83 µs 451.88 µs\r\nKoaTreeRouter        2.18 µs/iter     (2.11 µs … 2.39 µs)   2.18 µs   2.39 µs   2.39 µs\r\nTrekRouter           2.99 µs/iter     (2.91 µs … 3.13 µs)   3.01 µs   3.13 µs   3.13 µs\r\n\r\nsummary for GET /very/deeply/nested/route/hello/there\r\n  LinearRouter\r\n   1.75x faster than KoaTreeRouter\r\n   2.41x faster than TrekRouter\r\n   2.44x faster than FilePatternRouter\r\n   2.45x faster than MedleyRouter\r\n   4.8x faster than TrieRouter\r\n   57.09x faster than RegExpRouter\r\n   84.14x faster than FindMyWay\r\n\r\n• GET /static/index.html\r\n--------------------------------------------------------- -----------------------------\r\nRegExpRouter        79.11 µs/iter   (26.21 µs … 14.95 ms)     31 µs 721.13 µs   1.67 ms\r\nTrieRouter           6.37 µs/iter        (5 µs … 14.3 ms)   5.71 µs   9.63 µs  14.92 µs\r\nLinearRouter         1.06 µs/iter   (998.48 ns … 2.12 µs)   1.06 µs   2.12 µs   2.12 µs\r\nFilePatternRouter    2.96 µs/iter     (2.81 µs … 3.74 µs)   2.99 µs   3.74 µs   3.74 µs\r\nMedleyRouter         2.89 µs/iter     (2.77 µs … 3.14 µs)    2.9 µs   3.14 µs   3.14 µs\r\nFindMyWay           102.3 µs/iter   (79.92 µs … 10.84 ms)  86.46 µs 204.29 µs 328.42 µs\r\nKoaTreeRouter        2.19 µs/iter     (2.13 µs … 2.33 µs)   2.21 µs   2.33 µs   2.33 µs\r\nTrekRouter           3.02 µs/iter     (2.93 µs … 3.13 µs)   3.04 µs   3.13 µs   3.13 µs\r\n\r\nsummary for GET /static/index.html\r\n  LinearRouter\r\n   2.06x faster than KoaTreeRouter\r\n   2.72x faster than MedleyRouter\r\n   2.79x faster than FilePatternRouter\r\n   2.84x faster than TrekRouter\r\n   6x faster than TrieRouter\r\n   74.47x faster than RegExpRouter\r\n   96.3x faster than FindMyWay\r\n```\r\n\r\nThe bundle size of the application created with `sonik` on my environment was reduced as follows\r\n\r\n`71.27 kB` ->  `56.25 kB`\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2035235129},{"id":2036588326,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1806","title":"fix(context): `c.json()` allows object and returns JSONParsed<T>","body":"Fixes #1800\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2036588326},{"id":2036748831,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1807","title":"allow c.stream to receive raw readable stream","body":"### What is the feature you are proposing?\n\nCurrently, to return a readable stream in Hono, you have to write a raw response object. In this case, `setCookie` cannot be used.\r\n\r\nTherefore, I think it will be useful to be able to pass a readable stream directly to `c.stream` and return the stream from context via `newResponse`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2036748831},{"id":2036925181,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1808","title":"fix(context): set headers values correctly","body":"In `context.ts`, I fixed a bug where header values were not set correctly if `#this.headers` was set and the `arg` was of type `ResponseInit`.\r\n\r\nRelated to #1807\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2036925181},{"id":2038186206,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1809","title":"docs(readme): update `hono/tiny` size","body":"Hono have grown.\r\nI checked the size of `hono/tiny` with following the command.\r\n```sh\r\nnpx esbuild --outdir=dist --bundle --minify ./src/preset/tiny.ts\r\n```\r\n### Result\r\n```sh\r\nnpx esbuild --outdir=dist --bundle --minify ./src/preset/tiny.ts\r\n\r\n  dist\\tiny.js  13.9kb\r\n\r\n⚡ Done in 12ms\r\n```\r\nBased on the above result, I update the size in readme.\r\nMinimal app may exceed 14kb.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2038186206},{"id":2038219745,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1810","title":"Allow turning off `console.warn` when 404 on Bun `serveStatic` adapter","body":"### What is the feature you are proposing?\n\nFirst of all, I'm willing to open the PR for this since I already modified it on my project but I need some thought.\r\n\r\nThe current Bun `serveStatic` adapter will `console.warn` when the requested file is not found.\r\n\r\nhttps://github.com/honojs/hono/blob/0f33cf8d457d246df1324fc6f0e9f8661f7fe4fd/src/adapter/bun/serve-static.ts#L52\r\n\r\nHowever, this is not a behavior I want in the production. I want to propose an option to turn off the warning which might be done in 3 ways:\r\n1. Add a boolean, eg. `showNotFoundWarning`  to the `ServeStaticOptions` to toggle it on /off.\r\n2. Add `onNotFound` to the `ServeStaticOptions` as a handler when the 404 error is occurred. The default value can be the `console.warn` to keep the original behavior.\r\n```ts\r\nonNotFound: (path: string) => void | Promise<void> =\r\n    (path) => console.warn(`Static file: ${path} is not found`) \r\n```\r\n3. Just remove it, since Hono already provides [app.notFound](https://hono.dev/api/hono#not-found) which anyone can use it handle 404 in the way that they prefer, including `console.warn`.\r\n\r\nPlease let me know what you think :)","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2038219745},{"id":2038487871,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1811","title":"Tranform params string -> int unpossible","body":"### What version of Hono are you using?\n\n3.11.4\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n```typescript\r\nimport { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";\r\nimport { swaggerUI } from \"@hono/swagger-ui\";\r\n\r\nconst swagger = new OpenAPIHono();\r\n\r\nswagger.openapi(\r\n\tcreateRoute({\r\n\t\tmethod: \"get\",\r\n\t\tpath: \"/hello/{countGuest}\",\r\n\t\trequest: {\r\n\t\t\tparams: z.object({\r\n\t\t\t\tcountGuest: z.number().min(1).max(10),\r\n\t\t\t}),\r\n\t\t},\r\n\t\tresponses: {\r\n\t\t\t200: {\r\n\t\t\t\tdescription: \"Respond a message\",\r\n\t\t\t\tcontent: {\r\n\t\t\t\t\t\"application/json\": {\r\n\t\t\t\t\t\tschema: z.object({\r\n\t\t\t\t\t\t\tmessage: z.string(),\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t}),\r\n\t(c) => {\r\n\t\treturn c.json({\r\n\t\t\tmessage: c.req.param(\"countGuest\"),\r\n\t\t});\r\n\t},\r\n);\r\n```\n\n### What is the expected behavior?\n\nJson result\n\n### What do you see instead?\n\nException message:\r\n```\r\n{\r\n  \"success\": false,\r\n  \"error\": {\r\n    \"issues\": [\r\n      {\r\n        \"code\": \"invalid_type\",\r\n        \"expected\": \"number\",\r\n        \"received\": \"string\",\r\n        \"path\": [\r\n          \"countGuest\"\r\n        ],\r\n        \"message\": \"Expected number, received string\"\r\n      }\r\n    ],\r\n    \"name\": \"ZodError\"\r\n  }\r\n}\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2038487871},{"id":2038798503,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1812","title":"@typescript-eslint/promise-function-async breaks html","body":"### What version of Hono are you using?\r\n\r\n3.9.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nupdate to v3.10.0 and use @typescript-eslint/promise-function-async linter.\r\n\r\nFor example here is original code.\r\n```ts\r\nreturn c.html(html`${Component()}`)\r\n\r\nconst Component: FC = () => { ... }\r\n```\r\n\r\nthen update to v3.10.0 from v3.9.2, @typescript-eslint/promise-function-async changes to\r\n```ts\r\nreturn c.html(html`${Component()}`)\r\n\r\nconst Component: FC = async () => { ... }\r\n```\r\n\r\nThe template in the string is not updated to await at this time. The result embedded thereby becomes an object of the Promise and the following screen is displayed.\r\n\r\n<img width=\"774\" alt=\"スクリーンショット 2023-12-13 10 33 31\" src=\"https://github.com/honojs/hono/assets/6500104/fcacd9c2-5532-4163-9b86-a1838bcfcae3\">\r\n\r\nThere are many such codes in many places, and it would be difficult to correct each one.\r\n\r\n### What is the expected behavior?\r\n\r\nI want to be able to handle Promise objects in a nice way, even if I don't await them in the embedding of template strings.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nMy twitter\r\nhttps://x.com/codehex/status/1734727289580208301?s=20","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2038798503},{"id":2038918115,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1813","title":"404 Not Found on route","body":"### What version of Hono are you using?\n\n3.11.5\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nupdate to v3.11.5 and call the same route every request returns 404.\r\n\r\n![image](https://github.com/honojs/hono/assets/2070583/8ed1dbea-e71b-494f-9673-b8e5bcf5e79e)\r\n\r\n![image](https://github.com/honojs/hono/assets/2070583/3f6097eb-4dda-473e-9958-6e9b2b09b976)\r\n\r\n![image](https://github.com/honojs/hono/assets/2070583/c0f9d5d7-7692-45ae-8e72-e0307ea2d92d)\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2038918115},{"id":2039104520,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1814","title":"fix(context): set `status` correctly","body":"Fixes #1813\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2039104520},{"id":2039306561,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1815","title":"chore: use `@hono/eslint-config`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2039306561},{"id":2039405259,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1816","title":"chore: bump up `@hono/eslint-config`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2039405259},{"id":2040045341,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1817","title":"chore: upgrading vitest to v1.0","body":"I've made some modifications to address an issue with nested tests, but could you please confirm if the changes are appropriate and aligned with the original intent of the tests?\r\n\r\n```bash\r\nFAIL  src/router/trie-router/node.test.ts > Duplicate param name > parent > get /posts/456\r\nError: Nested tests are not allowed\r\n ❯ src/router/trie-router/node.test.ts:481:7\r\n    479|       expect(res[1][1]).toEqual({ id: '456' })\r\n    480| \r\n    481|       it('get /posts/456', () => {\r\n       |       ^\r\n    482|         const [res] = node.search('get', '/posts/abc/comments/edf')\r\n    483|         expect(res.length).toBe(1)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2040045341},{"id":2041128434,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1819","title":"chore(`tsconfig.json`): use `vitest/globals` for types","body":"Now, tests are Vitest-base.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2041128434},{"id":2041258200,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1820","title":"chore: bump `devDependencies`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2041258200},{"id":2041593428,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1821","title":"fix(factory): infer a merged path correctly","body":"Reproduce: https://gist.github.com/sor4chi/a488b66c25017b228b6f45875157a073\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2041593428},{"id":2041604140,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1822","title":"chore: install `glob` for `build.ts`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2041604140},{"id":2042621565,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1823","title":"feat(middleware/csrf): Introduce CSRF middleware","body":"This middleware prevents CSRF attacks by checking request headers.\r\n\r\n### All you have to do\r\n\r\nWhen you need to protect against CSRF attacks (i.e. submitting with a form element) all you have to do is add the following one line\r\n\r\n```ts\r\napp.use('*', csrf())\r\n```\r\n\r\nThis works well enough in most cases.\r\nFor \"old browsers that do not send Origin headers\" or \"environments that use reverse proxies and drop Origin headers,\" it may not be possible to submit with false positives. If you want to support such environments, this middleware is not sufficient, and it is better to use CSRF tokens.\r\n\r\n### Options\r\n\r\nBy default, the Origin header is compared to the requested URL. Generally, this works well enough, but sometimes an explicit specification is necessary for a variety of reasons. It is advisable to refer to the OWASP cheat sheet for the circumstances in which the specification is required and for notes on the contents of the specification.\r\nhttps://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#identifying-the-target-origin\r\n\r\nIn csrf middleware, as in cors middleware, \"origin\" can be specified as string, string[], or Function.\r\n\r\n```ts\r\n// string\r\napp.use('*', csrf({origin: \"myapp.example.com\"}))\r\n\r\n// string[]\r\napp.use('*', csrf({origin: [\"myapp.example.com\", \"development.myapp.example.com\"]}))\r\n\r\n// Function\r\n// It is strongly recommended that the protocol be verified to ensure a match to `$`. You should *never* do a forward match.\r\napp.use('*', csrf({origin: (origin) => /https:\\/\\/(\\w+\\.)?myapp\\.example\\.com$/.test(origin)})\r\n```\r\n\r\n### Thanks\r\n\r\nThis PR could not have been put together without the help of all those involved in the #1688 discussions. The documentation pointed to by @htunnicliff  and the Sveltekit implementation shared by @hjaber were especially helpful.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2042621565},{"id":2044122530,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1825","title":"feat: Add `onNotFound` handler in adapters' `serveStatic`","body":"Resolve #1810\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2044122530},{"id":2044560067,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1826","title":"feat(helper/html): Support Promise<string | HtmlEscapedString> in html tagged template literals","body":"This PR allows `Promise<string | HtmlEscapedString>` to be passed to the `html` tagFunction variables as well.\r\n\r\nFixes: #1812\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2044560067},{"id":2044992819,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1828","title":"Use vitest for fastly compute testing","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nThis PR improves Fastly Compute runtime testing. I've created vite plugin for [fastly-js-compute runtime](https://github.com/ysugimoto/vite-plugin-fastly-js-compute) and use it in this PR.\r\n\r\nNo longer need `jest` so removes from dependencies and now all hono testings will run only `vitest`.\r\n\r\n<img width=\"1088\" alt=\"Screen Shot 2023-12-17 at 8 24 07\" src=\"https://github.com/honojs/hono/assets/1000401/8250778b-214a-425d-bf24-553d9173ec59\">\r\n\r\nHope this PR accelerates hono testing.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2044992819},{"id":2045196784,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1829","title":"chore(package.json): remove `ts-jest`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2045196784},{"id":2046316673,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1830","title":"chore: upgrading vitest to v1.0","body":"Sorry, I broke the reviewed working branch. Here are the fixes.\r\n\r\n- vitest to v1.0.4\r\n- @vitest/coverage-v8 to v1.0.4\r\n- Commented.\r\n    - ref: https://github.com/honojs/hono/pull/1817","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2046316673},{"id":2046468833,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1831","title":"chore(utils): Move cf module","body":"I've been wondering about this for a while, so I checked `utils/cloudflare` and realized that it would be better to put it as ` adapter/cloudflare-workers`. \r\n\r\nIf sharing with pages etc. is in the roadmap, this Refactor is not needed. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2046468833},{"id":2047593162,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1832","title":"ci(bun): use `1.0.18`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2047593162},{"id":2049874834,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1835","title":"`app.onError` does not work for OpenAPIHono when `basePath` is defined","body":"### What version of Hono are you using?\n\n3.11.8\n\n### What runtime/platform is your app running on?\n\naws-lambda\n\n### What steps can reproduce the bug?\n\nWhen the `basePath` is defined for the OpenAPIHono app definition, the `onError` handler does not work.\r\n```ts\r\nimport { OpenAPIHono } from '@hono/zod-openapi';\r\n\r\nconst app = new OpenAPIHono().basePath('/api');\r\n\r\napp.get('/error', () => {\r\n  throw new Error('custom error');\r\n});\r\n\r\napp.onError((err, c) => {\r\n  return c.text('custom error handler works');\r\n});\r\n\r\nasync function test() {\r\nconst res = await app.request(\"/api/error\");\r\nconst resText = await res.text();  // expected \"custom error handler works\" but you get internal server error instead\r\n}\r\n\r\n\r\n```\n\n### What is the expected behavior?\n\nThe registered error handler should catch the thrown error and return the text response\n\n### What do you see instead?\n\nunhandled error, internal server error (500) is returned\n\n### Additional information\n\nminimal reproduction here: https://stackblitz.com/edit/stackblitz-starters-11nsrm?file=index.js","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2049874834},{"id":2050952647,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1837","title":"Capture Group Tests Appear to use non-capture group and are duplicate of non-capture group tests.","body":"\r\nhttps://github.com/honojs/hono/blob/a1c7144d26bf1a13a2678f8ff031e4244e51d833/src/router/reg-exp-router/router.test.ts#L579-L601\r\n\r\nThis \"capture group\" test is using a non-capturing group `(?:`. Is this intentional?","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2050952647},{"id":2050963828,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1838","title":"Feature Request: Allow Path Capture Groups to trim the Value, or support lookahead/lookbehind","body":"### What is the feature you are proposing?\n\n```typescript\r\nrouter.get('/test/:test{(\\\\w+)\\\\.json$}', c => c.text(c.req.param('test')))\r\n```\r\n\r\nUrl: `/test/something.json`\r\nExpected: `something`\r\nActual: `something.json`\r\n\r\nAlternatively, allow matching outside of variable regex\r\n```typescript\r\nrouter.get('/test/:test{(\\\\w+)}.json', c => c.text(c.req.param('test')))\r\n```\r\nUrl: `/test/something.json`\r\nExpected: `something`\r\nActual: `404 not found`","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2050963828},{"id":2052435965,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1839","title":"fix(hono-base): make `onError` and `notFound` as class field","body":"Fixes #1835\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2052435965},{"id":2052689084,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1840","title":"Post Request Returns 404 when using `app.request`","body":"### What version of Hono are you using?\r\n\r\n^3.11.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode, Bun, Deno and Cloudflare\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```js\r\nimport { Hono } from \"hono\";\r\nconst app = new Hono().basePath(\"/api/v1/\");\r\nauthRouter.post(\"login\", userHandlers.login);\r\n\r\n it(\"POST /login - should login user\", async () => {\r\n    const res = await app.request(\"/auth/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: \"test@gmail.com\",\r\n        password: \"test\",\r\n      }),\r\n    });\r\n\r\n    expect(res.status).toBe(200); // returns 404 \r\n  });\r\n```\r\n\r\n### What is the expected behavior?\r\n```js\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono().basePath(\"/api/v1/\");\r\nauthRouter.post(\"login\", userHandlers.login);\r\n\r\n it(\"POST /login - should login user\", async () => {\r\n    const res = await app.request(\"/auth/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: \"test@gmail.com\",\r\n        password: \"test\",\r\n      }),\r\n    });\r\n\r\n    expect(res.status).toBe(200); // should work fine \r\n  });\r\n```\r\n\r\n### What do you see instead?\r\n\r\n![image](https://github.com/honojs/hono/assets/64147010/d6c15086-b2e0-43a4-b15f-18ef9bbf0229)\r\n\r\n\r\n### Additional information\r\n\r\nI have a fix for this i can work on it @yusukebe should i open a PR for it?","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2052689084},{"id":2053470345,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1841","title":"feat(dev): add `getRouterName()`","body":"This PR introduces `getRouterName()` function in `hono/dev` helper and deprecates `app.routerName()`.\r\n\r\nI think `app.routerName()` is not used by many users, and if users use it, the purpose is debugging in most cases. So, we can place it in `hono/dev` is better.\r\n\r\nUsage:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { getRouterName } from 'hono/dev'\r\n\r\nconst app = new Hono()\r\n\r\n//...\r\n\r\nconsole.log(getRouterName(app))\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2053470345},{"id":2054487979,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1842","title":"v3.11.5 breaks typed routes on the client","body":"### What version of Hono are you using?\n\nv3.11.9\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n[Link to TS Playground](https://www.typescriptlang.org/play?#code/KYDwDg9gTgLgBDAnmYcBSBlA8gOQApQCWAtoTIQG6oC8cAzjEQHYDmcAPnAEYQQA2wAIZMOcJgFdiXYFFES+fUeKYATYADNCTYCoBQoSLATJUmXAEEoUQYji0AFGfxFS5KqKdYuAK2ABjeE4nS2tEAEoAbQBdfXBoeCQUdGwcL18AuzgAbzgIgGtgRAAuekYtFiiSpwISMkpUIJSQmw8UtP9AuAgfDrgAX1jDBJNk3AA1QT5xGlHUnozGiysWxedat2BB+OMk6sEoOh0AHgAVAD5MrN04XLy4LTgCxAh1OBPKt-youFAYYFU6LMJlNUAB+T55b4lBjMFi6Ab6CTEOAYQTEMACACiSOy1zgwOmAEZMgAiCiTIkkgA0eIJwAATKTySD6dT4bpdFo-lB1II-KgALLAGCCXE3YjCwQqQQikpXG43AAWUA00LKrAA3HibnQ0RjgNjJCVUeisUitTcBgiuTJefyUXqBABJJjcu2oeX0CASoWyuC+wRahGJVAAJWAdHEfHgtD2B2OJv1LrdfOAZwtcAA9Jm4AA9UEczno7Yh7LoOgQJiEdSIKn9ODqKDeuAkkMAWnUEZgJK1JCGOw9GD7fGriAAIsBgGA+g2m8jWyYO13MxXxFB+ZmJVAWMA22opz2OaW0BWq5odJkT5XR0dE87XbbU+m8dm8wXdMfT9XCDoh6bvzotB-hio4TlORxXmeiC3o6wDJo+-JnGcL45vmQA)\n\n### What is the expected behavior?\n\nClient should correctly transform the type of objects.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nAfter an update to v3.11.9, the types for Hono client's responses in my app are now broken. The bug was introduced in v3.11.5 in PR #1806 \r\n\r\nAlthough transforming types to JSON works fine with simple objects, once you start using nested objects and interfaces, it falls apart.\r\n\r\nThe `Jsonify` utility from [type-fest](https://github.com/sindresorhus/type-fest) works fine, however. In the end of the playground I showed the correct types using this utility.\r\n\r\nI believe the fix should be easy to implement (i.e. just use the code from `type-fest`).","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054487979},{"id":2054546205,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1843","title":"Move `app.request()`, `c.stream()` and `c.streamText()`","body":"### What is the feature you are proposing?\n\nFor Hono, being small is as important as being fast.\r\n\r\nIn Cloudflare Workers, some benchmarks show that the smaller the size, the faster it is under certain conditions.\r\n\r\nhttps://github.com/TigersWay/cloudflare-playground\r\n\r\nThis is an extreme example, but smaller is better.\r\n\r\nCurrently, the `hono/tiny` preset Hello World application is 13.04 KB after minify; the goal is to get it down to 10 KB in v4.\r\n\r\n```txt\r\nyusuke $ wrangler deploy --minify --dry-run src/tiny.ts\r\n ⛅️ wrangler 3.22.1\r\n-------------------\r\n--dry-run: exiting now.\r\nTotal Upload: 13.04 KiB / gzip: 5.05 KiB\r\n```\r\n\r\nI will do some minor refactoring, such as making common strings variables. However, to make it smaller, I would like to move `app.request()` to `hono/dev` and `c.stream()` and `c.streamText()` to `hono/streaming`.\r\n\r\n### `app.request()`\r\n\r\nThere is not a lot of code in `app.request()`, but it does not have to be in `hono-base.ts`. This is because this function is mainly used for testing. So I propose to move it to `hono/dev`.\r\n\r\n```ts\r\nimport { request } from 'hono/dev'\r\n\r\n//... \r\n\r\nconst res = await request(app, '/')\r\n```\r\n\r\n### `c.stream()` and `c.streamText()`\r\n\r\nThe `c.stream()` and `c.streamText()` functions are recently created and very attractive. However, they are used less often than `c.text()`, `c.json()`, and `c.html()`, and have slightly more code. If deleted, the size will be reduced by less than 1KB.\r\n\r\n```txt\r\nyusuke $ wrangler deploy --minify --dry-run src/tiny.ts\r\n ⛅️ wrangler 3.22.1\r\n-------------------\r\n--dry-run: exiting now.\r\nTotal Upload: 12.20 KiB / gzip: 4.76 KiB\r\n```\r\n\r\nTherefore, I propose to move them to `hono/streaming`.\r\n\r\n```ts\r\nimport { stream } from 'hono/streaming'\r\n\r\napp.get('/stream', (c) => {\r\n  return stream(c, async (stream) => {\r\n    // ...\r\n  })\r\n})\r\n```\r\n\r\n---\r\n\r\nSince these are major breaking changes, I plan to deprecate the previous functions in the next minor update and remove them in v4. Breaking changes are painful for us, but one of the most important things to do is to keep it small, and if there are no major problems, we have to do it.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054546205},{"id":2054599746,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1844","title":"The X day is Feb 9th (maybe)","body":"This is just an announcement.\r\n\r\nWe/I will release Hono version `v4.0.0` on **February 9, 2024**.\r\n\r\nThis release includes two major changes.\r\n\r\nOne is **the removal of deprecated features**. Breaking changes are painful but necessary to keep Hono small and simple.\r\n\r\nThe other is to **implement file-based routing**. I don't know if this will work, but it is worth a try. We are implementing this within the internal project and will make it public at or shortly before the `v4.0.0` release.\r\n\r\nLooking forward to it!","state":"closed","labels":"[\"announcement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054599746},{"id":2054707450,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1846","title":"fix: move `c.stream*` to helper","body":"ref: #1843 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054707450},{"id":2054810017,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1847","title":"v3.11.7 breaks some router params","body":"### What version of Hono are you using?\n\n3.11.7\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\nUpgrading to the latest recommended Security Update breaks path patterns that used to work.\r\nNot all of them. But I managed to narrow it down to the following repro\r\n\r\n```\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\napp.get('/a/b/cc/:d?', (c) => c.text('Hello Hono!'))\r\n\r\napp.get('/a/:bb/cc/dd', (c) => {\r\n    const { bb } = c.req.param();\r\n    return c.text(bb ?? \"PROBLEM\");\r\n});\r\n\r\nserve(app)\r\n```\r\n\r\nrun http://localhost:3000/a/abcd/cc/dd and you'll see \"PROBLEM\"\r\nrun it with 3.11.6 and you'll see \"abcd\"\n\n### What is the expected behavior?\n\nWith 3.11.6, the `bb` param had the value populated from path\n\n### What do you see instead?\n\n`undefined`\n\n### Additional information\n\nIt is unfortunate that we can't pull the latest recommended security update as it breaks the routing unexpectedly","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054810017},{"id":2054815636,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1848","title":"Export SSEMessage and SSEStreamingApi from hono/streaming","body":"### What is the feature you are proposing?\n\nCurrently `hono/streaming` only exports `streamSSE`. It would be nice to export `SSEStreamingApi` and `SSEMessage` so that we can write functions outside and not needing inlining the callback. For example:\r\n\r\n```ts\r\nconst myStreamingLogic = async (stream: SSEStreamingApi) => {\r\n   // do business logic\r\n}\r\n```\r\n\r\nin the handler:\r\n```ts\r\nconst createMessageHandler = async (c: Context) => {\r\n  return streamSSE(c, myStreamingLogic)\r\n}\r\n```\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054815636},{"id":2054960993,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1849","title":"formData.forEach in node.js v18 incompatibility problem","body":"### What version of Hono are you using?\n\n3.11.7\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\nhono uses formdata. forEach in four places, but formData does not have the forEach function on node 18\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/FormData#browser_compatibility\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054960993},{"id":2054962345,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1850","title":"feat: introduce css Helper","body":"This PR introduces middleware to enable super simple CSS in JS features.\r\n\r\nUsage:\r\n\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { css, renderStyles } from 'hono/css'\r\nimport { jsxRenderer } from 'hono/jsx-renderer'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(({ children }) => {\r\n    return (\r\n      <html>\r\n        <head>\r\n          <style>{renderStyles()}</style>\r\n        </head>\r\n        <body>{children}</body>\r\n      </html>\r\n    )\r\n  })\r\n)\r\n\r\napp.get('/', (c) => {\r\n  const HeaderClass = css`\r\n    background-color: blue;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return c.render(\r\n    <html>\r\n      <body>\r\n        <h1 class={HeaderClass}>Hello!</h1>\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nTips: If you use VS Code, you can use [vscode-styled-components](https://marketplace.visualstudio.com/items?itemName=styled-components.vscode-styled-components) for Syntax highlighting and IntelliSense for `css` tagged literals.\r\n\r\nIt's nice that the code is short, but there might be some things that need to be considered.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054962345},{"id":2054978745,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1851","title":"Refactor(test): update vitest settings","body":"I have made these settings. \r\n\r\n~~1. Handling Vitest's type checking. This makes tsc --no-emit unnecessary.\r\nhttps://vitest.dev/config/#typecheck~~\r\n2. I don't think the Vitest configuration file is needed in tsconfig.build. I have listed similar items that I think are unnecessary, but please point out if I am mistaken.\r\n3.  Update from Vitest 1.04 to 1.10.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2054978745},{"id":2055016882,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1852","title":"fix(trie-router): pass params to the next node","body":"Fixes #1847\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2055016882},{"id":2055052017,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1853","title":"fix(types): `JSONParsed` supports interface and `Date` etc.","body":"Fixes #1842\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2055052017},{"id":2055214690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1855","title":"[PoC] feat(jsx-renderer): introduce `css`","body":"Usage: \r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { jsxRenderer, css } from 'hono/jsx-renderer'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(({ children }) => {\r\n    return (\r\n      <html>\r\n        <css />\r\n        <body>{children}</body>\r\n      </html>\r\n    )\r\n  })\r\n)\r\n\r\nconst Header = () => {\r\n  const HeaderClass = css`\r\n    background-color: blue;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <html>\r\n      <body>\r\n        <Header />\r\n      </body>\r\n    </html>\r\n  )\r\n})\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2055214690},{"id":2055495302,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1856","title":"feat(helper): export `SSEStreamingApi` and `SSEMessage`.","body":"fixes: https://github.com/honojs/hono/issues/1848\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2055495302},{"id":2055592803,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1857","title":"Hono RPC client response missing body","body":"### What version of Hono are you using?\r\n\r\n3.11.10\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nbun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nhttps://github.com/lawrencecchen/hono-hc-no-body\r\n\r\nTypeScript error in https://github.com/lawrencecchen/hono-hc-no-body/blob/main/client.ts\r\n\r\n```bash\r\nclient.ts:8:25 - error TS2339: Property 'body' does not exist on type 'ClientResponse<{}>'.\r\n\r\n8 const reader = response.body.getReader();\r\n                          ~~~~\r\n\r\n\r\nFound 1 error in client.ts:8\r\n```\r\n\r\nCode:\r\n\r\n```ts\r\n// client.ts\r\nimport { hc } from \"hono/client\";\r\nimport { app } from \".\";\r\n\r\nconst client = hc<typeof app>(\"http://localhost:3000\");\r\nconsole.log(\"fetching...\");\r\nconst response = await client.api.awesome.$get();\r\n// no body sad :(\r\nconst reader = response.body.getReader();\r\nconst decoder = new TextDecoder();\r\nwhile (true) {\r\n\tconst { done, value } = await reader.read();\r\n\tif (done) break;\r\n\tconst decoded = decoder.decode(value);\r\n\tconsole.log(decoded);\r\n}\r\n```\r\n\r\n```ts\r\n// index.ts\r\nimport { Hono } from \"hono\";\r\n\r\nexport const app = new Hono()\r\n\t.get(\"/\", (c) => c.text(\"root\"))\r\n\t.get(\"/api/awesome\", async (c) => {\r\n\t\treturn c.streamText(async (stream) => {\r\n\t\t\tstream.writeln(\"Hello World!\");\r\n\t\t\tawait new Promise((r) => setTimeout(r, 1000));\r\n\t\t\tstream.writeln(\"Very cool!\");\r\n\t\t\tawait stream.close();\r\n\t\t});\r\n\t});\r\n\r\nexport default app;\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nResponse should have body\r\n\r\n### What do you see instead?\r\n\r\nNo body\r\n\r\n### Additional information\r\n\r\nMy use case is streaming","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2055592803},{"id":2055955655,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1858","title":"feat(css): Implement css helper with callback","body":"### What kind of implementation is this?\r\n\r\nThe callback mechanism used in Suspense and ErrorBoundary is used to insert the class name.\r\nIt is primarily targeted to be used in JSX components, but can also be used in `html` tag functions.\r\nIt does not depend on jsxRenderer.\r\n\r\n### Pros\r\n\r\n* It does not depend on jsxRenderer, so you can use any pattern you like.\r\n* In environments where initialization does not occur with every request, It works very fast because CSS is not recalculated when class names are predefined globally.\r\n\r\n### Cons\r\n\r\n* The mechanism is complicated because the string is always a `Promise<string>` and callback must be properly called to obtain the final result. (However, if you use c.html(), you do not need to be aware of this complexity.)\r\n* Allowing Promise<string> in the `class` attribute may confuse some linters (e.g. https://github.com/honojs/hono/issues/1812 ).\r\n    * https://github.com/honojs/hono/compare/feat/css-helper...usualoma:hono:feat/css-helper?expand=1#diff-eea0d4f8a89b330f26eea854ef087c7d92cfca29268164f8ee315f770e4be7e8L26-R26\r\n\r\n### Demo\r\n\r\n```ts\r\nimport { Hono } from './src'\r\nimport { jsx, Fragment } from './src/jsx'\r\nimport { Suspense } from './src/jsx/streaming'\r\nimport { jsxRenderer } from './src/middleware/jsx-renderer'\r\nimport { css, Style } from './src/helper/css'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <head>\r\n            <Style />\r\n          </head>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    { stream: true }\r\n  )\r\n)\r\n\r\nconst Header = () => {\r\n  const HeaderClass = css`\r\n    background-color: blue;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\nconst AsyncHeader = async () => {\r\n  await new Promise((r) => setTimeout(r, 100))\r\n  const HeaderClass = css`\r\n    background-color: red;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\nconst Loading = () => {\r\n  const HeaderClass = css`\r\n    background-color: gray;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Loading...</h1>\r\n}\r\n\r\nconst SuspensedHeader = async () => {\r\n  await new Promise((r) => setTimeout(r, 2000))\r\n  const HeaderClass = css`\r\n    background-color: green;\r\n    color: white;\r\n    padding: 1rem;\r\n  `\r\n  return <h1 class={HeaderClass}>Hello!</h1>\r\n}\r\n\r\nconst GlobalClass = css`\r\n  background-color: pink;\r\n  color: black;\r\n  padding: 1rem;\r\n`\r\nconst GlobalHeader = async () => {\r\n  return <h1 class={GlobalClass}>Hello!</h1>\r\n}\r\n\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <>\r\n      <Header />\r\n      <AsyncHeader />\r\n      <GlobalHeader />\r\n      <Suspense fallback={<Loading />}>\r\n        <SuspensedHeader />\r\n      </Suspense>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default app\r\n```\r\n\r\noutput\r\n```html\r\n<html><head><style id=\"hono-css\">.css-4167396862{background-color: blue; color: white; padding: 1rem;}.css-1922077261{background-color: red; color: white; padding: 1rem;}.css-3997042484{background-color: pink; color: black; padding: 1rem;}.css-3971143725{background-color: gray; color: white; padding: 1rem;}</style></head><body><h1 class=\"css-4167396862\">Hello!</h1><h1 class=\"css-1922077261\">Hello!</h1><h1 class=\"css-3997042484\">Hello!</h1><template id=\"H:1\"></template><h1 class=\"css-3971143725\">Loading...</h1><!--/$--></body></html><script>document.querySelector('#hono-css').textContent+=\".css-1873676827{background-color: green; color: white; padding: 1rem;}\"</script><template><h1 class=\"css-1873676827\">Hello!</h1></template><script>\r\n((d,c,n) => {\r\nc=d.currentScript.previousSibling\r\nd=d.getElementById('H:1')\r\nif(!d)return\r\ndo{n=d.nextSibling;n.remove()}while(n.nodeType!=8||n.nodeValue!='/$')\r\nd.replaceWith(c.content)\r\n})(document)\r\n</script>\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/bf08ddb6-9dd3-40a2-9c22-2bba255001ff\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2055955655},{"id":2056077804,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1859","title":"Addition of SPA flag in all static middleware ","body":"### What is the feature you are proposing?\r\n\r\n```js\r\ntype ServeStaticOptions = {\r\n  root?: string\r\n  path?: string\r\n  rewriteRequestPath?: (path: string) => string,\r\n  isSPA?: boolean\r\n}\r\n```\r\nOptions can be added in static  middlewares  for all frameworks to serve spa builds   ,to fallback to index.html in case of 404.\r\n\r\n```js\r\nconst serveStatic = (options: ServeStaticOptions = { root: \"\" , isSPA= false }) => {\r\n  return async (c: Context, next: Next) => {\r\n    if (c.finalized) {\r\n      await next()\r\n      return\r\n    }\r\n    const url = new URL(c.req.url)\r\n\r\n    const filename = options.path ?? decodeURI(url.pathname)\r\n    let path = getFilePath({\r\n      filename: options.rewriteRequestPath\r\n        ? options.rewriteRequestPath(filename)\r\n        : filename,\r\n      root: options.root,\r\n      defaultDocument: DEFAULT_DOCUMENT,\r\n    })\r\n\r\n   if (!path) return await next()\r\n\r\n    path = `./${path}`\r\n\r\n    const fileExists = existsSync(path) \r\n\r\n    //SPA fallback\r\n    if (!fileExists && isSPA) {\r\n      path = `${options.root}/${DEFAULT_DOCUMENT}`\r\n    }\r\n\r\n    if (fileExists || isSPA){\r\n      const content = await file(path)\r\n      if (content) {\r\n        const mimeType = getMimeType(path)\r\n        if (mimeType) {\r\n          c.header(\"Content-Type\", mimeType)\r\n        }\r\n        return c.body(content)\r\n      }\r\n    }\r\n\r\n    console.warn(`Static file: ${path} is not found`)\r\n    await next()\r\n    return\r\n  }\r\n}\r\n```\r\nSomething like this","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2056077804},{"id":2056715505,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1861","title":"fix(client): add missing properties to `ClientResponse`","body":"Fixes #1857\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2056715505},{"id":2056721540,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1862","title":"fix(req): avoid error when `req.queries()` receives unexpected values","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2056721540},{"id":2056811269,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1863","title":"feat(helper): export SSEStreamingApi and SSEMessage.","body":"retake this.\r\nhttps://github.com/honojs/hono/pull/1856\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2056811269},{"id":2056815376,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1864","title":"Open telemetry instrumentation","body":"### What is the feature you are proposing?\r\n\r\nOther JS frameworks have Open Telemetry libraries available. https://opentelemetry.io/ecosystem/registry/?language=js\r\nHave you considered integrating open telemetry api natively or writing a instrumentation library?","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2056815376},{"id":2056936798,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1865","title":"feat: pass context to onNotFound callback in serveStatic","body":"#1810 \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2056936798},{"id":2057059523,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1866","title":"add hono+prisma example","body":"### What is the feature you are proposing?\r\n\r\nPrisma is a very useful ORM library\r\n\r\nI would like to provide an example of hono + prisma being used.\r\n\r\n\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2057059523},{"id":2057803751,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1868","title":"`showRoutes` shows handler as `[middleware]` if subApp has a custom error handler","body":"### What version of Hono are you using?\n\n3.11.11\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n```ts\r\n// src/dev-subapp.ts\r\nimport { Hono } from 'hono'\r\nimport { showRoutes } from 'hono/dev'\r\n\r\nconst subApp = new Hono()\r\n\r\nsubApp.get('/', (c) => c.json(0))\r\nsubApp.onError((_, c) => c.json(0))\r\n\r\nconst app = new Hono()\r\napp.route('/', subApp)\r\n\r\nshowRoutes(app, {\r\n  verbose: true\r\n})\r\n```\r\n\r\n```txt\r\ntsx src/dev-subapp.ts\r\n```\n\n### What is the expected behavior?\n\nIt prints as below:\r\n\r\n```txt\r\nGET  /\r\n       [handler]\r\n```\n\n### What do you see instead?\n\n```txt\r\nGET  /\r\n       [middleware]\r\n```\n\n### Additional information\n\nIf comment out the following line, it works correctly.\r\n\r\n```ts\r\nconst subApp = new Hono()\r\n\r\nsubApp.get('/', (c) => c.json(0))\r\n// subApp.onError((_, c) => c.json(0)) // comment out\r\n\r\nconst app = new Hono()\r\napp.route('/', subApp)\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2057803751},{"id":2058143972,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1869","title":"feat: add sveltekit adapter","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2058143972},{"id":2058961487,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1870","title":"Allow URL params in `$url()` RPC","body":"### What is the feature you are proposing?\n\nI love the [`$url()`](https://hono.dev/guides/rpc#url) feature.\r\nIt just that I don't find the returned `mergePath` very useful.\r\nCan it use the `replaceUrlParam` too if the url has input params ?\r\n\r\n\r\nI'm thinking about some like this :\r\n\r\n```ts\r\nconst router = new Hono()\r\n  .get(\r\n    \"/foo/:id/bar\",\r\n    zValidator(\"param\", z.object({ id: z.string() })),\r\n    function ({ text, req }) {\r\n\t  const { id } = req.valid(\"params\");\r\n\t  // [...]\r\n      return text(\"OK\");\r\n    },\r\n  );\r\n\r\n// [...]\r\n\r\napp_hc.foo[\":id\"].bar.$url({ param: { id: \"1\" } });\r\n// >> http://localhost:3000/foo/1/bar\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2058961487},{"id":2060019008,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1871","title":"feat: implement stream.onAbort","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nrelated: #1795 #1770","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2060019008},{"id":2060294871,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1872","title":"CORS error issues when passing `Content-Type: application/json` from the client","body":"### What version of Hono are you using?\r\n\r\n3.11.11\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nVercel\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\n// app/api/[[...route]]/route.ts\r\n\r\nimport { Hono } from \"hono\";\r\nimport { cors } from \"hono/cors\";\r\nimport { handle } from \"hono/vercel\";\r\n\r\nexport const runtime = \"edge\";\r\n\r\nconst app = new Hono().basePath(\"/api\");\r\n\r\napp.use(\"*\", cors());\r\n\r\napp.post(\"/test\", async (c) => {\r\n  const body = await c.req.json();\r\n  return c.json({ ok: true, body });\r\n});\r\n\r\nexport const POST = handle(app);\r\n```\r\n\r\n```ts\r\n// Client\r\n\r\nconst res = await fetch(\"http://localhost:3001/api/test\", {\r\n  method: \"POST\",\r\n  headers: { \"Content-Type\": \"application/json\", },\r\n  body: JSON.stringify({ hello: \"world\" }),\r\n});\r\n\r\n// ❌ Error: CORS error\r\n```\r\n\r\n```ts\r\n// Client\r\n\r\nconst res = await fetch(\"http://localhost:3001/api/test\", {\r\n  method: \"POST\",\r\n  body: JSON.stringify({ hello: \"world\" }),\r\n});\r\n\r\n// ✅ It works\r\n```\r\n\r\n---\r\n\r\nHowever, when using `zValidator` from `@hono/zod-validator`, I experience this:\r\n\r\n```ts\r\nimport { zValidator } from \"@hono/zod-validator\";\r\nimport { Hono } from \"hono\";\r\nimport { cors } from \"hono/cors\";\r\nimport { handle } from \"hono/vercel\";\r\nimport { z } from \"zod\";\r\n\r\nexport const runtime = \"edge\";\r\n\r\nconst app = new Hono().basePath(\"/api\");\r\n\r\napp.use(\"*\", cors());\r\n\r\nconst schema = z.object({\r\n  hello: z.string(),\r\n});\r\n\r\napp.post(\"/test\", zValidator(\"json\", schema), async (c) => {\r\n  const body = await c.req.valid(\"json\");\r\n  return c.json({ ok: true, body });\r\n});\r\n\r\nexport const POST = handle(app);\r\n\r\n```\r\n\r\n```ts\r\n// Client\r\n\r\nconst res = await fetch(\"http://localhost:3001/api/test\", {\r\n  method: \"POST\",\r\n  body: JSON.stringify({ hello: \"world\" }),\r\n});\r\n\r\n// ❌ Error: 400 Bad Request\r\n// { success: false, message: \"Invalid HTTP header: Content-Type=text/plain;charset=UTF-8\" }\r\n```\r\n\r\n```ts\r\n// Client\r\n\r\nconst res = await fetch(\"http://localhost:3001/api/test\", {\r\n  method: \"POST\",\r\n  headers: { \"Content-Type\": \"application/json\", },\r\n  body: JSON.stringify({ hello: \"world\" }),\r\n});\r\n\r\n// ❌ Error: CORS error\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nI should get CORS to work when passing `Content-Type: application/json` from the client.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nDependencies:\r\n\r\n```\r\n\"@hono/zod-validator\": \"^0.1.11\",\r\n\"hono\": \"^3.11.11\",\r\n\"next\": \"14.0.4\",\r\n\"react\": \"^18\",\r\n\"react-dom\": \"^18\",\r\n\"zod\": \"^3.22.4\",\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2060294871},{"id":2061069231,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1873","title":"fix(dev): preserve original handler in [composedHandler].","body":"Fixes #1868\r\n\r\nHow about this solution?\r\n\r\n### If we do more\r\n\r\nI suppose we could add the information \"added from sub pp\" in inspectRoutes. But I didn't go that far at this point, because I think it's enough to fix the problem in #1868.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061069231},{"id":2061317255,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1874","title":"Just an idea : Replacing simple computational processes with WebAssembly","body":"### What is the feature you are proposing?\n\nFor simple computational processes such as \"computing hash values\", replacing them with WebAssembly may speed up the process.\r\n\r\nhttps://github.com/honojs/hono/pull/1858/files#diff-85712e79b6fb34a25a128de109f2b36f0d63435bc39e521e9268d315e209f402R32-R39\r\n\r\nThe results of my benchmarks are as follows: \"node\" and \"deno\" have a large overhead at call time, but WebAssembly is still faster when the data size is large. \"bun\" has a small overhead, but WebAssembly is always faster.\r\n\r\nhttps://gist.github.com/usualoma/760bf5fe5234ff1505767d36f3d85fce\r\n\r\nWhether such a replacement should actually be made requires careful consideration, but it is good to keep in mind that such an option is available.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061317255},{"id":2061562309,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1876","title":"req.valid Argument of type 'string' is not assignable to parameter of type 'never'.","body":"### What version of Hono are you using?\r\n\r\nv3.11.11\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```typescript\r\nconst idShema = z\r\n  .string({\r\n    description: \"path parameter must be a integer\",\r\n    required_error: \"id is required\",\r\n    invalid_type_error: \"must be a number\",\r\n  })\r\n  .pipe(z.coerce.number().min(1).max(2147483647))\r\n  .optional();\r\n\r\nconst idSchema = z.object({\r\n  id: idShema,\r\n});\r\nconst idValidator = zValidator(\"param\", idSchema);\r\n\r\nreservation.get(\"/:id\", idValidator, async (c: Context) => {\r\n  const { id } = c.req.valid(\"param\");\r\n  ...\r\n});\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\n- deno-ts  to infer type\r\n- the same error when using `c.req.valid(\"form\")`\r\n\r\n### What do you see instead?\r\n\r\n- deno error\r\n```json\r\n[{\r\n\t\"resource\": \"/api/reservation.ts\",\r\n\t\"owner\": \"deno\",\r\n\t\"code\": \"2345\",\r\n\t\"severity\": 8,\r\n\t\"message\": \"Argument of type 'string' is not assignable to parameter of type 'never'.\",\r\n\t\"source\": \"deno-ts\",\r\n\t\"startLineNumber\": 60,\r\n\t\"startColumn\": 29,\r\n\t\"endLineNumber\": 60,\r\n\t\"endColumn\": 36,\r\n\t\"relatedInformation\": [\r\n\t\t{\r\n\t\t\t\"startLineNumber\": 187,\r\n\t\t\t\"startColumn\": 3,\r\n\t\t\t\"endLineNumber\": 187,\r\n\t\t\t\"endColumn\": 8,\r\n\t\t\t\"message\": \"The call would have succeeded against this implementation, but implementation signatures of overloads are not externally visible.\",\r\n\t\t\t\"resource\": \"/x/hono@v3.11.11/request.ts\"\r\n\t\t}\r\n\t]\r\n}]\r\n```\r\n\r\n### Additional information\r\n\r\nI look at:\r\n\r\n- https://github.com/honojs/hono/pull/1351\r\n- https://github.com/orgs/honojs/discussions/1050?sort=new#discussioncomment-5772376\r\n\r\nbut not working","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061562309},{"id":2061943800,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1877","title":"fix(hono-base): fixed a typo","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061943800},{"id":2061948127,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1878","title":"feat(hono-base): add deprecated flag to `app.routerName`","body":"This is deprecated since the PR #1841. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061948127},{"id":2061951034,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1879","title":"feat(hono-base): add deprecated flag to `app.routerName`","body":"This is deprecated since the PR #1841.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061951034},{"id":2061955542,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1880","title":"feat(hono-base): add deprecated flag to `app.routerName`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061955542},{"id":2061965603,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1881","title":"showRoutes() emits escape codes when running in deployment","body":"### What version of Hono are you using?\n\n3.11.11\n\n### What runtime/platform is your app running on?\n\nDeno/CloudRun\n\n### What steps can reproduce the bug?\n\nUse `showRoutes()` function when the code runs in a cloud deployment.\n\n### What is the expected behavior?\n\nIt should not use escape codes because they only make sense when running locally in the console.\n\n### What do you see instead?\n\n![image](https://github.com/honojs/hono/assets/84461/e4407c37-e880-4b1d-80c9-d5f69701d179)\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061965603},{"id":2061970000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1882","title":"Remove escape codes from showRoutes()","body":"This PR addresses https://github.com/honojs/hono/issues/1881.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2061970000},{"id":2062042393,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1883","title":"feat(dev): add `callback` option to `showRoutes()`","body":"This PR introduces `callback` option for `showRoutes()` in `hono/dev`. \r\n\r\nThis allows users to define their own custom outputs.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { showRoutes } from 'hono/dev'\r\n\r\nconst app = new Hono()\r\napp.get('/', (c) => c.text('/'))\r\napp.get('/foo', (c) => c.text('foo'))\r\n\r\nshowRoutes(app, {\r\n  callback: ({ method, path }) => {\r\n    console.log(`${method} ${path}`)\r\n  },\r\n})\r\n```\r\n\r\nResolves #1881\r\n\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2062042393},{"id":2062083669,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1885","title":"feat(client): add `param` option to `$url()`","body":"This PR introduces an option to the `$url()` function in Hono's client.\r\n\r\nYou can write the param values as an option of `$url()` like the following:\r\n\r\n```ts\r\nconst route = app.get('/api/:id/bar', (c) => c.json({ foo: 'bar' }))\r\n\r\nconst client = hc<typeof route>('http://localhost:8787/')\r\nconst url = client.api[':id'].bar.$url({\r\n  param: {\r\n    id: '123',\r\n  },\r\n})\r\n```\r\n\r\nInferring types are available:\r\n\r\nhttps://github.com/honojs/hono/assets/10682/eaff7c97-6429-41ae-b2ca-8813387a85af\r\n\r\nResolves #1870\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2062083669},{"id":2062372597,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1886","title":"feat(dev): add `colorize` option for `showRoutes()`","body":"This PR introduces the `colorize` option for `showRoutes()` in `hono/dev`.\r\n\r\nYou can disable colorizing the output if you set the option as `false`:\r\n\r\n```ts\r\nshowRoutes(app, {\r\n  colorize: false,\r\n})\r\n```\r\n\r\nResolves #1881, related to #1883.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2062372597},{"id":2062453565,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1887","title":"refactor: cloudflare workers' serve-static module","body":"### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n\nfixes of #1865","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2062453565},{"id":2062508677,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1888","title":"Remove Lagon runtime tests","body":"### What is the feature you are proposing?\r\n\r\nLagon has joined Vercel!\r\n\r\nLagon will be closed. So, ~~the adapter~~ the runtime tests are not needed. We can make remove them in v4.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2062508677},{"id":2063094305,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1890","title":"todo: refactor streamSSE Helper","body":"### What version of Hono are you using?\n\nv.3.11.0\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\nNote: The current streamSSE relies on c.stream. This will be removed in v4, so modifications are needed after v3.12.\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2063094305},{"id":2063993649,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1892","title":"fix(deno): export css Helper for Deno","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2063993649},{"id":2064475976,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1893","title":"Hono corrupts response body when using nextjs handler","body":"### What version of Hono are you using?\r\n\r\nNext.js v14.0.4 Hono v3.11.12 Bun v1.0.20\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun & Nodejs\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```bash\r\nbunx create-next-app # install next\r\n```\r\n\r\n```bash\r\nbun add hono discord-api-types discord-interactions\r\n```\r\n\r\n\r\n```ts\r\n// /api/interactions/route.ts\r\n\r\nimport { APIInteraction, InteractionType, InteractionResponseType as ResponseType } from \"discord-api-types/v10\"\r\nimport { verifyKey } from \"discord-interactions\"\r\nimport { Hono, type Context, type Next } from \"hono\"\r\nimport { handle } from \"hono/vercel\"\r\n\r\n\r\n\r\nconst verifySignature = async (ctx: Context, next: Next) => {\r\n  console.log(\"Verifying body...\")\r\n  // Clone the body\r\n  const body = await ctx.req.raw.clone().arrayBuffer()\r\n\r\n  const sig = ctx.req.raw.headers.get(\"x-signature-ed25519\")\r\n  const timestamp = ctx.req.raw.headers.get(\"x-signature-timestamp\")\r\n\r\n  if (!sig || !timestamp) return ctx.text(\"Invalid signature\", 401)\r\n\r\n  return !verifyKey(body, sig, timestamp, process.env.BOT_PUBLIC_KEY!) ? ctx.text(\"Invalid signature\", 401) : next()\r\n}\r\n\r\nconst app = new Hono().basePath(\"/api/interactions\")\r\n\r\napp.all(\"/\", verifySignature, async (c) => {\r\n    console.log({ \"content-type\": c.req.header(\"content-type\"), body: await c.req.text() })\r\n  })\r\n)\r\n\r\nconst handler = handle(app)\r\n\r\nexport const GET = handler\r\nexport const POST = handler\r\nexport const PUT = handler\r\n```\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n\r\nSee discord/discord-api-docs#6596\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2064475976},{"id":2064847109,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1894","title":"Documentation about CSRF middleware on hono.dev","body":"### What is the feature you are proposing?\n\nHello,\r\n\r\n[A CSRF middleware was recently added to Hono](https://github.com/honojs/hono/pull/1823). However, I wanted to point out that it is not documented on [hono.dev](https://hono.dev).\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2064847109},{"id":2065013442,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1895","title":"Next","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2065013442},{"id":2065234740,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1896","title":"testClient in Deno cannot run normally unless add --no-check parameter","body":"### What version of Hono are you using?\r\n\r\n3.11.12\r\n\r\n### What runtime/platform is your app running on?\r\n\r\ndeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport {Hono} from \"hono\";\r\nimport {test as it} from \"node:test\";\r\nimport {testClient} from \"hono/testing\";\r\n// import {expect} from \"chai\";\r\n\r\nit(\"hono testClinet\", () => {\r\n    it(\"should return the correct search result\", async () => {\r\n        let app = new Hono();\r\n        app.get(\"/search\", (c) => c.json({hello: \"world\"}));\r\n        const res = await testClient(app)[\"search\"].$get();\r\n        // expect(await res.json()).equal({hello: \"world\"});\r\n    });\r\n\r\n});\r\n\r\n```\r\n\r\n\r\n\r\n```shell\r\n❯ deno test test/hono_test.ts \r\nCheck file:///Users/chen/gemini-openai-proxy/test/hono_test.tso_test.ts\r\nerror: TS2571 [ERROR]: Object is of type 'unknown'.\r\n        const res = await testClient(app)[\"search\"].$get();\r\n                          ~~~~~~~~~~~~~~~\r\n    at file:///Users/chen/gemini-openai-proxy/test/hono_test.ts:10:27\r\n\r\n\r\n❯ deno test --no-check  test/hono_test.ts\r\nrunning 1 test from ./test/hono_test.ts\r\nhono testClinet ... ok (0ms)\r\n\r\nok | 1 passed | 0 failed (3ms)\r\n\r\n\r\n\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nNo need to add --no-check, the tests can run normally.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nFor those who encounter the same problem, you can now add the \"--no-check\" parameter to make the test run normally.\r\n\r\n`deno test --no-check`","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2065234740},{"id":2065529806,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1897","title":"[builtin middleware] Accept Language (i18n?)","body":"### What is the feature you are proposing?\r\n\r\nFor Hono MPA's DX improvement, how about providing the middleware that configures the language in option and gets judged language from `c.var.lang`\r\n\r\n```ts\r\napp.use('*', i18n({\r\n  defaultLang: 'en',\r\n  supportedLangs: ['en', 'ja', 'fr-CH'],\r\n}))\r\n\r\napp.get('/', (c) => c.text(c.var.lang))\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2065529806},{"id":2065705079,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1898","title":"POC: feat: implement i18n middleware","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n\r\n#1897 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2065705079},{"id":2066452446,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1899","title":"Guidance on nested layouts and renderers","body":"### What is the feature you are proposing?\r\n\r\nIt'd be helpful if some documentation around nested layouts was available.\r\n\r\nCurrently doing something like the following doesn't work:\r\n\r\n```ts\r\nconst app = new Hono();\r\napp.use('*', renderer); \r\napp.get('/signin', signinRoute); // <- use root renderer\r\n\r\nconst secureRoute = new Hono();\r\nsecureRoute.use('*', secureRenderer);\r\nsecureRoute.get('/test', (ctx) => ctx.render(<>SOME TEST</>)); // <- use secure renderer, the root renderer doesn't get used\r\n\r\napp.route('/secure', secureRoute );\r\n```\r\n\r\nCurrently, which ever renderer is located closest to the route is the one that will be used. Simply using JSX components to wrap a layout around pages works well enough, but a best practice would be helpful.\r\n\r\nSonikJS supports nested layouts in this fashion (at least via __layout) so it would seem that Hono could also support this.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2066452446},{"id":2066580433,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1900","title":"feat: exports router types","body":"If you merge this PR, Hono users be able to import router types.\r\n\r\nI want to custom router, so I have to import router type.\r\nBut router type (`src/router.ts`) isn't exported types.\r\nSo I must write this code.\r\n```ts\r\nimport type { Router } from '....../node_modules/hono/dist/types/router'\r\n```\r\nIt isn't smart. So I made this PR.\r\n\r\nPeople who want to make custom router can writes this code if you marge this PR:\r\n```ts\r\nimport type { Router } from 'hono/router'\r\n```\r\n\r\nmemo: I think better name than `hono/router` is probably exists.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2066580433},{"id":2066735892,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1901","title":"Arrayed routes (multiple routes in single function)","body":"### What is the feature you are proposing?\n\nHi,\r\n\r\nHono currently supports multi methods but not multi routes.\r\n```js\r\napp.on(['PUT', 'DELETE'], '/post', (c) => c.text('PUT or DELETE /post'))\r\n```\r\n\r\nI would like to see support with the following:\r\n```js\r\napp.get(['/hello', '/jp/hello', '/en/hello'], (c) => c.text('Hello!'))\r\n```\r\n\r\nWould be great for localisation/i18n use, etc. Thanks!\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2066735892},{"id":2066888004,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1902","title":"Streaming Helper `writeSSE()` stuck when connection closed","body":"### What version of Hono are you using?\r\n\r\n3.12.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode v18.19.0\r\n\r\n### What steps can reproduce the bug?\r\n\r\nHere is the minimum reproduction code:\r\n\r\n```ts\r\nimport { serve } from '@hono/node-server';\r\nimport { Hono } from 'hono';\r\nimport { streamSSE } from 'hono/streaming';\r\n\r\nconst app = new Hono();\r\napp.get('/', c =>\r\n  streamSSE(c, async stream => {\r\n    while (true) {\r\n      const now = Date.now();\r\n      console.log('write start', now);\r\n      await stream.writeSSE({ data: String(now) }).finally(() => {\r\n        console.log('write end', now);\r\n      });\r\n      await stream.sleep(1000);\r\n    }\r\n  }),\r\n);\r\n\r\nserve(app);\r\n```\r\n\r\nAccess http://localhost:3000/ then stop page loading (or just close it).\r\n\r\n### What is the expected behavior?\r\n\r\nIf connection closed, it should throw an error or provide a handler to do sth.\r\n\r\n### What do you see instead?\r\n\r\nThe loop will continue to run for a while and then get stuck at `streamSSE()`, no error was thrown.\r\n\r\nPage stop at here:\r\n\r\n![image](https://github.com/honojs/hono/assets/24877906/3ff8664d-f724-449f-a361-fa37ab85e321)\r\n\r\nLog stop at here:\r\n\r\n![image](https://github.com/honojs/hono/assets/24877906/502f6a0c-5fb9-42c4-97d1-ddcdd608e4ab)\r\n\r\n\r\n### Additional information\r\n\r\nWhen using hono@3.11.12 it will close the stream but no error thrown out (will be throw internally and log a message), so I handled it by rewriting the close function:\r\n\r\n```ts\r\nconst handleStreamClose = (stream: StreamingApi, onClose: () => any) => {\r\n  const close = stream.close.bind(stream);\r\n  stream.close = async () => {\r\n    try {\r\n      await onClose();\r\n    } finally {\r\n      await close();\r\n    }\r\n  };\r\n};\r\n```\r\n\r\nBut on 3.12.0 the stream won't be close so this don't work anymore, `stream.onAbort()` isn't triggered either.\r\n\r\nIs there a better solution to handle this situation?","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2066888004},{"id":2067847288,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1903","title":"Media Queries for css helper","body":"### What is the feature you are proposing?\n\nI've been using the css helper and though it works quite well :rocket: I would love to request the possibility to generate standards-compliant media queries with it.\r\n\r\nFor example when using the css helper to do the following:\r\n\r\n```\r\nconst mq_class = css`\r\n@media screen and (min-width: 767px) {width: 100%};\r\n`;\r\n```\r\n\r\nthe following would currently be generated:\r\n```\r\n.css-{uid} @media screen and (min-width: 767px) {width: 100%};\r\n```\r\n\r\nmaybe by usage of some kind of marker we could end up generating the following:\r\n```\r\n@media screen and (min-width: 767px) {\r\n    .css-{uid} {width: 100%}\r\n}\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2067847288},{"id":2068481438,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1904","title":"feat: Introducing a New SSG Adaptor/Helper ","body":"To celebrate the release of Hono v4, I propose a new feature. This is somewhat niche, but it's a Helper (or Adaptor) designed to convert Hono code into static HTML. Utilizing this, users can easily host SSG on platforms like S3 or R2. Currently, I'm grappling with three main concerns.\r\n\r\n1. is this within the scope of responsibilities for the Hono framework? If it's deemed unnecessary, I might consider moving it to hono/middleware.\r\n2. I'm wondering if it's more fitting to provide this as an Adaptor rather than a Helper, given its nature.\r\n3. is the functionality interface appropriate? I've found myself pondering over this and have started studying SSG in other frameworks as well :)\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068481438},{"id":2068673465,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1905","title":"Handling `{0}` in `hono/jsx`","body":"### What version of Hono are you using?\r\n\r\n3.12.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\n`src/index.tsx`:\r\n\r\n```tsx\r\nconst FC_VAR = () => <span>{0}</span>\r\nconst FC_NUM = () => <span>0</span>\r\n\r\nconsole.log(<FC_VAR />.toString()) // <span children=\"0\"></span>\r\nconsole.log(<FC_NUM />.toString()) // <span>0</span>\r\n```\r\n\r\n`tsconfig.json`:\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"esModuleInterop\": true,\r\n    \"strict\": true,\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxImportSource\": \"hono/jsx\"\r\n  },\r\n}\r\n```\r\n\r\nRepro: https://github.com/yusukebe/hono-jsx-handle-var-0\r\n\r\n### What is the expected behavior?\r\n\r\n```html\r\n<span>0</span>\r\n<span>0</span>\r\n```\r\n\r\n### What do you see instead?\r\n\r\n```html\r\n<span children=\"0\"></span>\r\n<span>0</span>\r\n```\r\n\r\n### Additional information\r\n\r\nIf we set up `tsconfig.json` as follows, it will work as expected. However, we want to use `jsxImportSource`.\r\n\r\n```tsconfig.json\r\n{\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"react\",\r\n    \"jsxFactory\": \"jsx\"\r\n  },\r\n}\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068673465},{"id":2068837002,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1906","title":"Validate signed cookie throws on malformed URI","body":"### What version of Hono are you using?\n\n3.12.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n1. Call `await getSignedCookie` on some cookie.\r\n2. Then send a request where the cookie signature has an invalid URI encoding (e.g. remove a character from a sequence such as %3D -> %3)\r\n3. The function throws instead of returning `false` as expected of invalid signatures.\n\n### What is the expected behavior?\n\nThe function should return false.\n\n### What do you see instead?\n\nThe function throws.\n\n### Additional information\n\nThat's it.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068837002},{"id":2068840400,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1907","title":"Support Class Component","body":"### What is the feature you are proposing?\n\nCould hono/jsx support Class Component?\r\n\r\n```tsx\r\nexport class Counter {\r\n  count = 0\r\n\r\n  increment() {\r\n    this.count++\r\n    this.update() // Should be implemented\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Counter: {this.count}</p>\r\n        <button onClick={() => this.increment()}>Increment</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nClass components are useful to use variables when using hono/jsx on the \"front-end\".  Class Component is currently not recommended for React, but if we do not implement hooks, Class Component can be useful.\r\n\r\nAs mentioned before, I assume that homo/jsx will be used on the front-end client:\r\n\r\n```tsx\r\ndocument.addEventListener('DOMContentLoaded', async function () {\r\n  const App = (\r\n    <div>\r\n      <Counter />\r\n    </div>\r\n  )\r\n  const element = document.querySelector<HTMLElement>(`#app`)\r\n  element.innerHTML = App\r\n})\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068840400},{"id":2068856690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1908","title":"Bad status from server - handle in then block","body":"### What version of Hono are you using?\n\n3.11.12\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nJust sent to endpoint with header Authtorization needed. \r\nhonoClient.user.me.$get().then(console.log).catch(console.log)\r\nreturn status 401\n\n### What is the expected behavior?\n\nConsole in catch block.\n\n### What do you see instead?\n\nConsole in then block.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068856690},{"id":2068888027,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1909","title":"feat(jsx): support class components","body":"Resolves #1907\r\n\r\nIf we want to implement other methods, it's enough to extend `Component`, thus only `render` is implemented.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068888027},{"id":2068902456,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1910","title":"fix(jsx): fix jsx-runtime for falsy children","body":"Fixes #1905\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068902456},{"id":2068903748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1911","title":"feat: Add headers option to serveStatic()","body":"### Add headers option to serveStatic()\r\n\r\nI'm encountering a situation were I need to serve static files (with Cloudflare Workers) and each of these files need to have some specific headers when served.\r\n\r\nCurrently I can do that with the help of a middleware using:\r\n```js\r\napp.use('something that matches my specific file', async (c, next) => {\r\n    c.res.headers.set('foo', `bar`);\r\n    await next()\r\n});\r\n```\r\nor\r\n```js\r\napp.use('something more global', async (c, next) => {\r\n    if(c.req.url.endsWith('myfilename')) {\r\n       c.res.headers.set('foo', `bar`);\r\n    }\r\n    await next()\r\n});\r\n```\r\n\r\nThis is a proposal to add headers to `serveStatic()` via an optional `Headers` object, this way I can set the headers when serving my static files directly and I don't need to grow my current middlewares.\r\n\r\nExample:\r\n```js\r\ncost headers = new Headers();\r\nheaders.set('foo', 'bar');\r\napp.get('/mypaththatneedtoservefileswithaspecificheaders', serveStatic({ path: './script.js', headers }));\r\n```\r\n\r\nIt's non-blocking and simply a suggestion which I think would make the `serveStatic` method more versatile to the Hono users.\r\n\r\nIt may not be a big of a problem enough to be considered, let me know.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n- [x] Files are formatted with the project prettier config\r\n- [ ] The relevant documentation will need to be updated if the proposal is approved on the [hono/website](https://github.com/honojs/website/tree/main/getting-started) repo \r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2068903748},{"id":2069013172,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1912","title":"Wrong type definitions when using zod validation","body":"### What version of Hono are you using?\n\n3.12.0\n\n### What runtime/platform is your app running on?\n\nNode, but it is not platform specific\n\n### What steps can reproduce the bug?\n\n1. Set up project, install zod and create schema (any fields)\r\n2. Create new endpoint and apply validator (default validator, not zValidator) with json target. Inside validation function use safeParse method and return data on success\r\n3. Inside endpoint main function create new variable like this `const data = c.req.valid('json')`\r\n4. Now try to access properties of data - this is part 1 of this bug\r\n5. For part 2 of this bug go to schema definition. Add field `type`, it can be string, enum of strings\r\n6. Try to access properties of data again\n\n### What is the expected behavior?\n\nShow all properties defined in schema\n\n### What do you see instead?\n\n1. The only available property is json. Selecting it will show `TS2339: Property json does not exist on type`\r\n![image](https://github.com/honojs/hono/assets/29041820/9dc2e134-49e3-4ecc-a783-b3cbd2508aec)\r\n2. The only available property is type. It merged type from schema with ResponseType\r\n![image](https://github.com/honojs/hono/assets/29041820/95563bac-020e-4c92-a601-3943a197d0c3)\r\nOnly inside typeguard to exclude possibility of ResponseType it finally shows all properties from schema\r\n![image](https://github.com/honojs/hono/assets/29041820/eff2881a-2d9f-4ce8-b3c3-4c936111c038)\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2069013172},{"id":2069241250,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1913","title":"POC: feat: enable to write jsx to streaming api","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nIf JSX can be delivered via streamingAPI, as in the tweet below, it would be a nice match with the shadowrootmode of web components and allow components to be changed dynamically from the server without client JS.\r\n\r\nhttps://x.com/shou_study/status/1743996737696764069?s=20\r\n\r\nDemo:\r\n\r\n<details><summary>Code</summary>\r\n<p>\r\n\r\n```tsx\r\nimport { Hono } from \"hono\";\r\nimport { stream } from \"hono/streaming\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", (c) => {\r\n  return stream(c, async (stream) => {\r\n    await stream.write(\r\n      <html lang=\"en\">\r\n        <body>\r\n          <template shadowrootmode=\"open\">\r\n            <slot name=\"component1\">\r\n              <p>Loading...</p>\r\n            </slot>\r\n          </template>\r\n        </body>\r\n      </html>\r\n    );\r\n    await stream.sleep(1000);\r\n    await stream.write(\r\n      <div slot=\"component1\">\r\n        <h1>Hello Hono!</h1>\r\n      </div>\r\n    );\r\n  });\r\n});\r\n\r\nexport default app;\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\nhttps://github.com/honojs/hono/assets/80559385/c2e494a0-f75b-4274-9749-b680d5f301ef","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2069241250},{"id":2069305831,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1914","title":"fix(validator): exclude Response type for returned values from `c.req.valid()`","body":"Fixes #1912\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2069305831},{"id":2069417284,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1915","title":"Cache middleware ignores handler Cache-Control settings","body":"### What version of Hono are you using?\n\n3.12.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n1. Create new hono app\r\n2. Add cache middleware (i.e. max-age=3600)\r\n3. Inside of some handler that returns user data, do `c.header(\"Cache-Control\", \"private\", { append: true })`\n\n### What is the expected behavior?\n\nIndividual handlers should be able to append extra directives to cache-control header.\n\n### What do you see instead?\n\nThe cache middleware always overrides the response cache-control to a static header.\n\n### Additional information\n\nThe fix is real easy: In https://github.com/honojs/hono/blob/main/src/middleware/cache/index.ts#L13 change to\r\n```\r\n  const addHeader = (c: Context) => {\r\n    if (options.cacheControl)\r\n      c.header(\"Cache-Control\", options.cacheControl, { append: true });\r\n  };\r\n```\r\n\r\nI can make a PR if needed.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2069417284},{"id":2069600791,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1916","title":"docs: Add JSDoc","body":"close #1338\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2069600791},{"id":2069642892,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1917","title":"feat: Introduce jsx/dom","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2069642892},{"id":2070166774,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1918","title":"`streamSSE()` throws an error on close","body":"### What version of Hono are you using?\r\n\r\n3.12.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have this piece of code:\r\n```typescript\r\nlet sseId = 0;\r\n\r\napp.get('/stream-sse', async (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    for (let i = 0; i < 5; i++) {\r\n      await new Promise((resolve) => setTimeout(resolve, 200));\r\n\r\n      const jsonValue = JSON.stringify({ progress: i });\r\n      await stream.writeSSE({ data: jsonValue, id: String(sseId++) });\r\n    }\r\n\r\n    console.log('finished?');\r\n  });\r\n});\r\n```\r\n\r\nOnce the loop is over and the Response should [close](https://github.com/honojs/hono/blob/main/src/helper/streaming/sse.ts#L57), it throws an error of an uncaught exception which over time throws much severe error in the Cloudflare worker.\r\n\r\nI tried to replicate an SSE stream with a plain Worker and everything works as expected:\r\n```typescript\r\nlet nonce = 0;\r\n\r\nexport default {\r\n  async fetch(): Promise<Response> {\r\n    const encoder = new TextEncoder();\r\n\r\n    const readableStream = new ReadableStream({\r\n      async pull(controller) {\r\n        for (let i = 0; i < 5; i++) {\r\n          await new Promise((resolve) => setTimeout(resolve, 200));\r\n\r\n          const jsonValue = JSON.stringify({ progress: i });\r\n          const sseValue = [`data: ${jsonValue}`, `id: ${nonce++}`].join('\\n') + '\\n\\n';\r\n          const encodedValue = encoder.encode(sseValue);\r\n          controller.enqueue(encodedValue);\r\n        }\r\n\r\n        controller.close();\r\n      },\r\n    });\r\n\r\n    return new Response(readableStream, {\r\n      headers: {\r\n        'Transfer-Encoding': 'chunked',\r\n        'Content-Type': 'text/event-stream',\r\n        'Cache-Control': 'no-cache',\r\n        Connection: 'keep-alive',\r\n      },\r\n    });\r\n  },\r\n};\r\n```\r\n\r\nAfter digging into hono source code, it seems that flipping `preventClose` to `false` in [stream.ts](https://github.com/honojs/hono/blob/main/src/utils/stream.ts#L61) solves the issue, a response is closed and there is no uncaught exception. However, I'm not sure what implication this change could have.\r\n\r\n### What is the expected behavior?\r\n\r\nResponse should properly close once `streamSSE()` callback is finished.\r\n\r\n### What do you see instead?\r\n\r\n```\r\n[wrangler:inf] GET /stream-sse 200 OK (22ms)\r\n✘ [ERROR] A hanging Promise was canceled. This happens when the worker runtime is waiting for a Promise from JavaScript to resolve, but has detected that [object Object]\r\n\r\n✘ [ERROR] Uncaught (in response) Error: The script will never generate a response.\r\n```\r\n\r\n### Additional information\r\n\r\nIt behaves the same with locally running wrangler or deployed to Cloudflare.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2070166774},{"id":2070197237,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1919","title":"Optional parameter is ignored","body":"### What version of Hono are you using?\n\n3.12.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nCreate the following route:\r\n\r\n```ts\r\napp.get(\"/:workspace{(@[\\\\dA-Za-z]*)?}/:user\", async (context) => {\r\n  console.log(\"Hello!\");\r\n});\r\n```\n\n### What is the expected behavior?\n\nI would expect this route to match `/@myworkspace/myuser` and `/myuser`. \n\n### What do you see instead?\n\nHowever, it only matches with `/@myworkspace/myuser`.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2070197237},{"id":2070255596,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1920","title":"fix: streamSSE's doesn't trigger `onAbort` correctly","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n#1902","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2070255596},{"id":2070768209,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1921","title":"RPC client: Type instantiation is excessively deep and possibly infinite","body":"### What version of Hono are you using?\n\n3.11.11\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n<img width=\"868\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/5727516/54d7de35-a3a8-4a75-9856-c5685eb4cdad\">\r\n\r\nI initialize `hono client` in my `SvelteKit` app like this\r\n```\r\nlet tclient: ReturnType<typeof getClient> | null = null;\r\n```\r\nWhere `getClient` method is:\r\n```\r\nexport const getClient = (headers: Headers, cookies: Cookies) =>{\r\n          const client = hc<AppType>('http://127.0.0.1:8976',{\r\n          headers: clientHeaders\r\n    });\r\n   \r\n    return client;\r\n}\r\n```\r\nAlso, once I call the `getClient` method anywhere in my application, the intellisense becomes extremely slow, but works fine.\r\n\n\n### What is the expected behavior?\n\n1. RPC client's type should be known beforehand so that I can declare it in a global `app.d.ts` file and pass it int the `request.locals` to get access in the entire app.\r\n2. RPC client should not slow down the intellisense\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2070768209},{"id":2070780297,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1922","title":"fix(cache): Allow composing cache control directives","body":"# Changes\r\n\r\nFix https://github.com/honojs/hono/issues/1915\r\n\r\n1. Allow nested cache middlewares to compose a final Cache-Control header\r\n2. Allow handlers to also add cache control directives\r\n\r\nThis slightly changes the implementation from raw string handling to acknowledge the existance of individual directives, this way we can avoid duplicating directives that were overriden in inner middleware/handlers.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2070780297},{"id":2070824100,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1923","title":"feat(hono-base): `app.on` supports multiple paths","body":"Fixes #1901\r\n\r\nThis PR enables `app.on` to handle multiple paths.\r\n\r\nUsage:\r\n\r\n```ts\r\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) => {\r\n  return c.text('Hello!')\r\n})\r\n```\r\n\r\nIt does not support multiple paths with `app.get()`, etc.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2070824100},{"id":2071227364,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1924","title":"fix(client): Fix issue awaiting RPC client","body":"Right now if you await the RPC client, it produces undefined behavior and can hang the application. This also occurs if the client is returned from an async function that is then awaited. This adds a quick fix to detect that edge case, and handle it properly.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2071227364},{"id":2071326361,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1925","title":"Multiple optional parameters - are they supposed to work?","body":"### What version of Hono are you using?\r\n\r\n3.12.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nCreate a minimal Hono app (this is running on Cloudflare Workers)\r\n```ts\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/base/:firstoptional?/:secondoptional?\", c => c.json(c.req.param()));\r\n// /base ->                     404 (why?)\r\n// /base/hello ->               { \"firstoptional?\": \"hello\" }\r\n// /base/hello/world ->         { \"secondoptional\": \"world\", \"firstoptional?\": \"hello\" }\r\n\r\nexport default app;\r\n\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\n- I would expect `/base` to match\r\n- I would expect it to not return `?` in the param key names\r\n\r\n### What do you see instead?\r\n\r\nI see what I have commented in the code. The `?` is added to the param key name.\r\n\r\n### Additional information\r\n\r\nMy real life use-case is:\r\n```ts\r\napp.get(\"/v1/leaderboard/:version?/:platform?\", handler);\r\n```\r\nThis acts in the same as the above examples.\r\nI would like to be able to match `/v1/leaderboard` and then handle if the params are undefined.\r\n\r\nIf this is intended (I can understand the reasons for being intentional), then this might be seen as a feature request.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2071326361},{"id":2071774444,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1926","title":"attach hono-css's global scope from hono/css with `global`","body":"### What is the feature you are proposing?\r\n\r\nI think it would be useful to have an API to inject directly from #hono/css to the root scope of #hono-css.\r\n\r\nlike this:\r\n\r\n```ts\r\nimport { css, global } from 'hono/css'\r\n\r\nconst hogeCss = css`\r\n  color: red;\r\n`\r\n\r\nglobal`\r\n  body {\r\n    background-color: red;\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    ${hogeCss} {\r\n      color: blue;\r\n    }\r\n  }\r\n`\r\n```\r\n\r\nAlthough it may be difficult from a security perspective, this would allow for more expressive CSS design.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2071774444},{"id":2072016926,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1927","title":"setCookie middleware is not working with 2 or more cookies in deno deploy","body":"### What version of Hono are you using?\n\n3.11.12\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nCreate a endpoint, use the setCookie middleware to set 2 cookies or more, deploy the project and make the request to the endpoint url.\r\n\r\n### my code:\r\n![image](https://github.com/honojs/hono/assets/51871681/fad50b82-c242-4249-b153-3c2bb166767b)\r\n\r\n## The server response\r\n![image](https://github.com/honojs/hono/assets/51871681/bbd88059-8dac-40c7-a0b8-653e2041d4c6)\r\n\r\nAs you can see, only the last cookie y set in response headers. I have checked if the token_name is added to the environment variables and is reading it correctly.\n\n### What is the expected behavior?\n\nTwo cookies in the response headers.\n\n### What do you see instead?\n\nOnly the last cookie is set.\n\n### Additional information\n\nthis is my deno.json file with the hono imports:\r\n![image](https://github.com/honojs/hono/assets/51871681/cffc7d74-897b-4465-94e9-464c014d0942)\r\n\r\nI'm using the helper, so I am importing setCookie middleware from: https​://deno.land/x/hono​@v3.11.12/helper/cookie/index.ts","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2072016926},{"id":2072057863,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1928","title":"feat(css): Introduce pseudo global selector and class name based extend syntax","body":"### Global selector\r\n\r\nIf you wrap the whole thing (not just part of it) in a pseudo-selector called `:-hono-global`. The output of the  `css` is not wrapped in the generated class name, but is interpreted as a top-level specification.\r\n\r\n```ts\r\ncss`\r\n:-hono-global {\r\n  body {\r\n    font-size: 10px;\r\n  }\r\n}\r\n`\r\n```\r\n\r\n### Class name based extend syntax\r\n\r\nYou can extend it by embedding the class name by writing it in the following syntax `${baseClass} {`\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst extendedByContent = css`\r\n  ${baseClass}\r\n  flex-direction: column;\r\n` // This is already possible\r\nconst extendedByClassName = css`\r\n  ${baseClass} {\r\n    flex-direction: column;\r\n    p {\r\n      color: red;\r\n    }\r\n  }\r\n` // This is made possible by this PR\r\n```\r\n\r\n\r\n### Use both \"Global selector\" and \"Class name based extend syntax\"\r\n\r\nThe following can be written to place the media query at the top level so that it can be interpreted by older browsers that do not support nesting.\r\n\r\n```ts\r\nconst baseClass = css`display: flex`\r\nconst globalClass = css`\r\n:-hono-global {\r\n  @media (min-width: 768px) {\r\n    ${baseClass} {\r\n      flex-direction: column;\r\n    }\r\n  }\r\n}\r\n`\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2072057863},{"id":2072293179,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1929","title":"denied return void from async handler and return context from next","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2072293179},{"id":2072770990,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1930","title":"fix(netlify): update package.json to export `./netlify`","body":"### Purpose\r\n\r\nHi, thank you for the great work on Hono! It seemed like this was missing from the package.json which may have caused some issues. Please let me know if changes should be made.\r\n\r\nThanks!\r\n\r\n- [x] Add `./netlify` to package exports.\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2072770990},{"id":2072819296,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1931","title":"fix(netlify): change path in `deno_dist/adapter/netlify`","body":"### Purpose\r\n\r\nThere is an issue when using the Netlify Adapter via `deno.land/x`. https://github.com/honojs/hono/blob/8de60599aafca908b6214f047571415c6e17f8ea/deno_dist/adapter/netlify/handler.ts#L4 This line references `../../index.ts` but that doesn't exist in the root of `deno_dist/` so we must use `../../hono.ts` or `../../mod.ts`. Please let me know what you prefer. Thank you!\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n\r\nPhoto of error:\r\n<img width=\"661\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/33156025/2f79af52-362d-49a3-9960-2e874c2eb409\">\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2072819296},{"id":2073236115,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1932","title":"fix(netlify): add `adapter/netlify/index.ts`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073236115},{"id":2073340185,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1933","title":"ci: enables CI in the v4 branch","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073340185},{"id":2073375807,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1934","title":"feat!: remove deprecated features","body":"In this PR, I've removed the deprecated features for releasing v4.0.0.\r\n\r\nOne of the benefits of removing those features is a reduction in size: the bundle size of Hello World has gone from 12.33 KiB to 10.72 KiB!\r\n\r\n<img width=\"666\" alt=\"Screenshot 2024-01-10 at 9 20 47\" src=\"https://github.com/honojs/hono/assets/10682/7e829e90-5e42-4633-8b01-08c20f3bbef2\">\r\n\r\n### TODO\r\n\r\nWhen we release v4.0.0, we need to write a migration guide based on this PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073375807},{"id":2073381853,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1935","title":"Write a migration guide","body":"For migrating v3 to v4.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073381853},{"id":2073411261,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1936","title":"fix(jsx/dom): fix cleanup for deps","body":"There was a problem that cleanup was not called when changing \"deps\", so this has been fixed.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073411261},{"id":2073765413,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1937","title":"`render` should  replace the element","body":"### What version of Hono are you using?\n\n4.0.0-rc.0\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n`index.html`:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <body>\r\n    <div id=\"root\"><p>foo</p></div>\r\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n`src/main.tsx`:\r\n\r\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\n\r\nconst root = document.getElementById('root') as HTMLElement\r\nrender(<p>bar</p>, root)\r\n```\n\n### What is the expected behavior?\n\n<img width=\"645\" alt=\"Screenshot 2024-01-10 at 16 29 39\" src=\"https://github.com/honojs/hono/assets/10682/bb35ea7e-ec2f-4a7b-9b45-0da37844b844\">\r\n\n\n### What do you see instead?\n\n<img width=\"645\" alt=\"Screenshot 2024-01-10 at 16 29 49\" src=\"https://github.com/honojs/hono/assets/10682/c661a435-7c95-4fd7-95bb-489f976bef60\">\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073765413},{"id":2073906724,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1938","title":"refactor(jsx/dom): replace existing content by render()","body":"Fixes #1937\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2073906724},{"id":2074165979,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1940","title":"feat: support multiple optinal parameters","body":"Resolves #1925\r\n\r\nThis PR is a `feat,` but it's not so major then; I'll include this in the next patch release. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2074165979},{"id":2076133106,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1941","title":"`render` should handle a fragment node","body":"### What version of Hono are you using?\r\n\r\n4.0.0-rc.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\nimport { Fragment } from 'hono/jsx'\r\n\r\nconst root = document.getElementById('root') as HTMLElement\r\nfunction FC() {\r\n  return (\r\n    <Fragment>\r\n      <b>bar</b>\r\n    </Fragment>\r\n  )\r\n}\r\nrender(<FC />, root)\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nDon't throw an error.\r\n\r\n### What do you see instead?\r\n\r\nThe error in the console:\r\n\r\n```txt\r\nUncaught DOMException: Failed to execute 'createElement' on 'Document': The tag name provided ('') is not a valid name.\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2076133106},{"id":2076422445,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1942","title":"`onChange` behavior","body":"### What version of Hono are you using?\r\n\r\n4.0.0-rc.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\nThis is not a bug, but a request.\r\n\r\nWith the following code, the behavior of the `onChange` event is different from React.\r\n\r\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\nimport { useState } from 'hono/jsx/hooks'\r\n\r\nconst root = document.getElementById('root') as HTMLElement\r\n\r\nconst TextArea = () => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const handleChange = (e: Event) => {\r\n    const target = e.target as HTMLTextAreaElement\r\n    setValue(target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <textarea onChange={handleChange} />\r\n      <div>{value}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<TextArea />, root)\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThis is the React code and the demo.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/bfb370fa-2c76-4444-9196-d49208ee7809\r\n\r\n```tsx\r\nimport React, { useState } from 'react'\r\nimport { hydrateRoot } from 'react-dom/client'\r\n\r\nconst root = document.getElementById('root') as HTMLElement\r\n\r\nconst TextArea = () => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const handleChange = (e: Event) => {\r\n    const target = e.target as HTMLTextAreaElement\r\n    setValue(target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <textarea onChange={handleChange} />\r\n      <div>{value}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nhydrateRoot(root, <TextArea />)\r\n```\r\n\r\n### What do you see instead?\r\n\r\nThis is the `hono/jsx/demo` demo.  I need to click outside of the `textarea` to trigger the `onChange` event:\r\n\r\nhttps://github.com/honojs/hono/assets/10682/b24323be-77ef-4f3d-82b6-1423dc595561\r\n\r\n\r\n\r\n### Additional information\r\n\r\nThis may be a specification issue, but since I want to get a value for each input, I think it should match React's behavior.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2076422445},{"id":2076767751,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1943","title":"boolean attribute as `false` problem in `hono/jsx/dom`","body":"### What version of Hono are you using?\n\n4.0.0-rc.0\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\nWith `hono/jsx/dom`:\r\n\r\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\n\r\n// ...\r\n\r\nconst CheckBox = () => {\r\n  return (\r\n    <div>\r\n      <label>\r\n        Check\r\n        <input type=\"checkbox\" checked={false} />\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<CheckBox />, root)\r\n```\n\n### What is the expected behavior?\n\n<img width=\"321\" alt=\"Screenshot 2024-01-11 at 23 09 48\" src=\"https://github.com/honojs/hono/assets/10682/8a5788d6-7601-457a-b367-fd872c30fcb7\">\r\n\n\n### What do you see instead?\n\n<img width=\"668\" alt=\"Screenshot 2024-01-11 at 23 06 25\" src=\"https://github.com/honojs/hono/assets/10682/842c2af0-22f8-4968-9928-2a09dadc2d66\">\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2076767751},{"id":2076814378,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1944","title":"`dangerouslySetInnerHTML` is not working in `hono/jsx/dom`","body":"### What version of Hono are you using?\n\n4.0.0-rc.0\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\n\r\nconst root = document.getElementById('root') as HTMLElement\r\n\r\nconst Div = () => {\r\n  const inner = { __html: '<h1>Hello</h1>' }\r\n  return <div dangerouslySetInnerHTML={inner} />\r\n}\r\n\r\nrender(<Div />, root)\r\n```\n\n### What is the expected behavior?\n\nRender the content:\r\n\r\n```html\r\n<div><h1>Hello</h1></div>\r\n```\n\n### What do you see instead?\n\n```html\r\n<div dangerouslysetinnerhtml=\"[object Object]\"></div>\r\n```\r\n<img width=\"829\" alt=\"Screenshot 2024-01-11 at 23 27 06\" src=\"https://github.com/honojs/hono/assets/10682/03e38379-066b-4576-b066-fe5f3fa455fc\">\r\n\r\n\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2076814378},{"id":2076976091,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1945","title":"Nested Layouts via Renderer","body":"The current implementation does not allow for nested Hono instances to inherit from the parent layout. This causes the child instances to have to duplicate whatever the parent context has for a renderer, and then add code as necessary. This is very inconvenient, causes lots of code duplication, and is extremely error prone if ancestor layouts are changed.\r\n\r\nThis purpose of this feature is to make nested child layouts possible, as well as easy to work with. Ideally, child instances would automatically inherit the parent Renderer(if it exists) and their content will be passed into it. In essence, recursion-like behavior could be used to crawl from the local context, to the furthest ancestor, and  merge them together.\r\n\r\nCreated based on the following conversation #1899 \r\n\r\n### Notes\r\n- This only works with one level of nesting\r\n  - ~~Nested Hono instances via `app.route('/nested', app2)` only seem to support one level of nesting anyway, so maybe this doesn't matter~~\r\n  - Hono supports N-levels of nesting for app routers, but this fix only allows for a single level of nested layout support\r\n      - This will need to be corrected so it continues to work. ~~Right now since only one layer of nesting is possible, there isn't a reliable way to test full recusion.~~\r\n- Should you be able to opt-out of this behavior?\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2076976091},{"id":2076985290,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1946","title":"[PoC]: SPA option for JSX Renderer","body":"This is just a PoC. There are many issues in making this a reality, but I think this is an interesting idea.\r\n\r\n### Usage\r\n\r\n```tsx\r\nimport { Hono } from '../../src'\r\nimport { jsxRenderer } from '../../src/middleware/jsx-renderer'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>\r\n            <header>\r\n              <a href='/'>Top</a>\r\n              &nbsp;<a href='/about'>About</a>\r\n              &nbsp;<a href='/posts/1'>Post 1</a>\r\n            </header>\r\n            {children}\r\n          </body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      spa: true,\r\n    }\r\n  )\r\n)\r\n\r\napp.get('/', (c) => {\r\n  return c.render(\r\n    <div>\r\n      <h1>Top</h1>\r\n      <p>{dummyText1}</p>\r\n    </div>\r\n  )\r\n})\r\n\r\napp.get('/about', (c) => {\r\n  return c.render(\r\n    <div>\r\n      <h1>About</h1>\r\n      <p>{dummyText2}</p>\r\n    </div>\r\n  )\r\n})\r\n\r\napp.get('/posts/:id', (c) => {\r\n  return c.render(\r\n    <div>\r\n      <h1>Post {c.req.param('id')}</h1>\r\n      <p>{dummyText3}</p>\r\n    </div>\r\n  )\r\n})\r\n```\r\n\r\n### Demo page\r\n\r\n* <https://jsx-renderer-spa-demo.yusukebe.workers.dev/>\r\n\r\n### Screen cast\r\n\r\nhttps://github.com/honojs/hono/assets/10682/b51ab2bc-55de-4aff-8777-720fb05617c5\r\n\r\n\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2076985290},{"id":2077711951,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1947","title":"fix(context): set multiple cookies correctly in `set res`","body":"Fixes #1927\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2077711951},{"id":2077976103,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1948","title":"Remove deprecated flags from `createFactory` and `createHandlers`","body":"These are already ready.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2077976103},{"id":2078043061,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1949","title":"Fix/response for lambda@edge adapter","body":"In the current implementation, when lambda@Edge is launched with a CloudFront origin request, CloudFront returns an error when processing binary data.\r\n\r\nProbably because the body is base64 but there is no bodyEncoding property.\r\n\r\nWhen returning a base64 body, the bodyEncoding property should now include base64.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078043061},{"id":2078114901,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1950","title":"export `ClientResponse` and `ClientRequest` types","body":"### What is the feature you are proposing?\n\nI'm working with the types in `src/client/index.ts` and noticed `ClientRequest` and `ClientResponse` aren't currently exported. Could these types be exported from `hono/client` as well?\r\n\r\n```\r\nexport { hc } from './client'\r\nexport type { InferResponseType, InferRequestType, Fetch, ClientRequestOptions, ClientResponse, ClientRequest } from './types'\r\n```\r\n\r\nAccess to these types would help with a custom hook I'm working on that integrates the hono client with swr (building off of this https://hono.dev/guides/rpc#using-swr).","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078114901},{"id":2078133031,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1951","title":"fix(routers): RegExpRouter and LinearRouter support multiple optional params","body":"Fixes #1925\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078133031},{"id":2078141857,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1952","title":"feat(client): export `ClientResponse` and `ClientRequest`","body":"Resolves #1950\r\n\r\nThis is a `feat` but a minor issue; I'll release it as a patch release.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078141857},{"id":2078161457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1953","title":"Refactor router tests","body":"Currently, we are writing tests for each router, but we want to use one common set of tests to test all routers.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078161457},{"id":2078360732,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1954","title":"`cache` option for `Suspense`","body":"### What is the feature you are proposing?\n\nIt would be useful if Promise resolved content could be cached by adding the cache attribute.\r\n\r\n```tsx\r\n<Suspense fallback={`loading...`} cache>\r\n  <Compnent />\r\n</Suspense>\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078360732},{"id":2078488776,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1955","title":"WIP: feat(jsx/dom): version 0.2","body":"The source code is bigger than I expected, but I think this will work Suspense and ErrorBoundary. Even if you don't use the `use` hook, async components will work.\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx */\r\nimport { Suspense, ErrorBoundary } from './src/jsx'\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, use } from './src/jsx/hooks'\r\n\r\nconst Component = () => {\r\n  return <div>0</div>\r\n}\r\n\r\nconst AsyncComponent = async () => {\r\n  const num = await new Promise((resolve) => setTimeout(() => resolve(1), 1000))\r\n  return <div>{num}</div>\r\n}\r\n\r\nconst promise = new Promise((resolve) => setTimeout(() => resolve(2), 2000))\r\nconst UseComponent = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nconst SyncErrorComponent = () => {\r\n  throw new Error('error')\r\n}\r\n\r\nconst AsyncErrorComponent = async () => {\r\n  await new Promise((resolve) => setTimeout(() => resolve(1), 3000))\r\n  throw new Error('async error')\r\n}\r\n\r\nexport const App = () => {\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Count: {count}</h1>\r\n\r\n        <button onClick={() => setCount(count + 1)}>+1</button>\r\n\r\n        <div>\r\n          <div>\r\n            <h3>Component</h3>\r\n            <Component />\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <Suspense fallback={<div>Loading AsyncComponent ...</div>}>\r\n            <div>\r\n              <h3>AsyncComponent</h3>\r\n              <AsyncComponent />\r\n            </div>\r\n          </Suspense>\r\n        </div>\r\n\r\n        <div>\r\n          <Suspense fallback={<div>Loading UseComponent ...</div>}>\r\n            <div>\r\n              <h3>UseComponent</h3>\r\n              <UseComponent />\r\n            </div>\r\n          </Suspense>\r\n        </div>\r\n\r\n        <div>\r\n          <ErrorBoundary fallback={<div>error</div>}>\r\n            <h3>no error</h3>\r\n            <div>3</div>\r\n          </ErrorBoundary>\r\n        </div>\r\n\r\n        <div>\r\n          <ErrorBoundary\r\n            fallback={\r\n              <div>\r\n                <h3>SyncErrorComponent</h3>\r\n                <div>Got an error</div>\r\n              </div>\r\n            }\r\n          >\r\n            <div>\r\n              <h3>SyncErrorComponent</h3>\r\n              <SyncErrorComponent />\r\n            </div>\r\n          </ErrorBoundary>\r\n        </div>\r\n\r\n        <div>\r\n          <ErrorBoundary\r\n            fallback={\r\n              <>\r\n                <h3>AsyncErrorComponent</h3>\r\n                <div>Got an async error</div>\r\n              </>\r\n            }\r\n          >\r\n            <Suspense fallback={<div>Loading AsyncErrorComponent ...</div>}>\r\n              <div>\r\n                <h3>AsyncErrorComponent</h3>\r\n                <AsyncErrorComponent />\r\n              </div>\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078488776},{"id":2078708527,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1956","title":"WIP: feat: filesystem wrapper","body":"I added filesystem wrapper API.\r\nI think v4 will add features require access to the file system, such as file-based routing and SSGs.\r\nAPI to access files varies depending on the runtime. This PR will solve this problem.\r\n\r\nFor example, you can probably use `serveStatic` API:\r\n```ts\r\nimport { serveStatic } from 'hono/serve-static'\r\nimport { fsWrapper } from 'hono/deno' // or custom adapter\r\n\r\napp.use('*', serveStatic(fsWrapper()))\r\n```\r\n\r\nMoreover, If apply this API, I can apply SSG API this API.\r\n\r\n### Changes\r\n- Add `fsWrapper` API. This api is included in adapters.\r\nfsWrapper provide normalized filesystem APIs.\r\n```ts\r\nconst file = await fsWrapper().open('file.txt')\r\nfile.readable // ReadableStream\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2078708527},{"id":2079401557,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1957","title":"chore(package.json): use escape double quotes","body":"Some commands don't work on Windows because of single quotes.\r\nI replaced them with double quotes.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2079401557},{"id":2079601927,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1958","title":"missing async in docs","body":"### What version of Hono are you using?\n\n3.12.3\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nSee the docs at https://hono.dev/api/routing. They show passing a regular function to `app.post`, `app.put`, and `app.delete`, but the function must be `async`. For example, this will NOT work:\r\n\r\n```ts\r\napp.post('/dog', (c: Context) => {\r\n  return c.text('in post');\r\n});\r\n```\r\n\r\nBut this WILL work:\r\n\r\n```ts\r\napp.post('/dog', async (c: Context) => {\r\n  return c.text('in post');\r\n});\r\n```\r\n\r\nSo I think the docs need to be updated to show where `async` is needed.\n\n### What is the expected behavior?\n\nUpdate the documentation.\n\n### What do you see instead?\n\nIncorrect documentation.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2079601927},{"id":2079815233,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1959","title":"`Suspense` supports SPA","body":"### What is the feature you are proposing?\n\nIt would be great if `Suspense` worked well in SPA!\r\n\r\n Currently `Suspense` does not work in the content added by the SPA.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/e0d67944-c2b2-4616-8466-8dee0ab56079\r\n\r\nDemo: https://c32eebd7.htmx-ramen.pages.dev/\r\nCode: https://github.com/yusukebe/htmx-spa/tree/suspense-not-working-spa\r\n\r\nThis doesn't work well with React's `Suspense` either.\r\n\r\nIf this feature is implemented, [the SPA option of JSX Renderer](https://github.com/honojs/hono/pull/1946) or htmx can create rich UX without writing client side JS.\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2079815233},{"id":2080167876,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1960","title":"feat: Added `ssgParams` middleware","body":"I added `ssgParams` middleware.\r\nThis is implemented https://github.com/honojs/hono/pull/1904#issuecomment-188809839.\r\n\r\nThere is 2 changes.\r\n\r\n#### 1. API like `generateStaticPaths`.\r\nYou can use API like `generateStaticPaths`.\r\nExample:\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/', c => c.html(<h1>Top page</h1>))\r\napp.get('/post/:id', ssgParams([{ id: '1' }]), c => c.html(<h1>{c.req.params('id')}</h1>)\r\n\r\nawait toSSG(app, fs)\r\n```\r\n#### 2. Switching SSR/SSG\r\nYou can add No-SSG routes such as:\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/', c => c.html(<h1>Top page</h1>)) // SSG\r\napp.get(\r\n  '/api',\r\n  ssgParams(false), // Don't SSG\r\n  c => c.json({ status: 'ok' })\r\n) \r\n\r\nawait toSSG(app, fs)\r\n```\r\nThis code is SSG-based mode like [Astro hybrid mode](https://docs.astro.build/en/guides/server-side-rendering/#enable-on-demand-server-rendering).\r\n\r\nNot only this code, you can use SSR-Based mode.\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\napp.get('/',\r\n  ssgParams(true), // SSG\r\n  c => c.html(<h1>Top page</h1>)\r\n) // SSG\r\n// Or, this code also works.\r\napp.get('/post/:id', ssgParams([{ id: '1' }]), c => c.html(<h1>{c.req.params('id')}</h1>))\r\n\r\napp.get(\r\n  '/api',\r\n  c => c.json({ status: 'ok' })\r\n) // This route will not generate SSG files. `toSSG` don't generate route if not explicitly specified.\r\n\r\nawait toSSG(app, fs, { default: 'ssr' })\r\n```\r\n\r\nHereby, you can write code to combine both SSG and SSR such as:\r\n```tsx\r\n// dev.tsx\r\nimport { Hono } from 'hono'\r\nimport { ssgParams } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', ssgParams(true), c => c.html(<h1>Hello world!</h1>)) // Top page is static.\r\napp.get('/api/random', c => c.json({ result: Math.random() })) // API is dynamic.\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// prediction.ts\r\nimport { Hono } from 'hono'\r\nimport app from './dev'\r\n\r\nconst mainApp = new Hono()\r\nmainApp.use('*', serveStatic({ root: 'static' }))\r\nmainApp.route('/', app)\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// build.ts\r\nimport { Hono } from 'hono'\r\nimport app from './dev'\r\nimport { toSSG, ssgParams } from 'hono/ssg'\r\nimport * as fs from 'fs/promises'\r\n\r\ntoSSG(app, fs, { default: 'ssr' })\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080167876},{"id":2080237535,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1961","title":"SSG: Add `experimental` flag the SSG features","body":"I think these should be `experimental`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080237535},{"id":2080239244,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1962","title":"SSG: Handling when `response.text()` can not parse","body":"This line uses `response.text()`. However, it is better to handle ArrayBuffer and other contents that cannot be parsed with `text()`.\r\n\r\nhttps://github.com/honojs/hono/blob/04b686ca39421d28d3aa3f8491c13e1f7d1c8de1/src/helper/ssg/index.ts#L37","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080239244},{"id":2080249876,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1963","title":"SSG: Extension changes depending on the mime type?","body":"### What is the feature you are proposing?\n\nCurrently, all page extensions are `.html`, but what about the change by mime type? For example, if it is `text/xml` or `application/xml`, it becomes `.xml`.\r\n\r\nAlso, we need the feature to switch extensions in different cases.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080249876},{"id":2080252624,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1964","title":"SSG: Avoid using `path`","body":"### What is the feature you are proposing?\n\nCurrently, SSG helper is using Node.js `path` module:\r\n\r\nhttps://github.com/honojs/hono/blob/04b686ca39421d28d3aa3f8491c13e1f7d1c8de1/src/helper/ssg/index.ts#L1\r\n\r\nBut because of this, if it imports `hono/ssg`, the application will not start up with wrangler without the `node_compat` flag:\r\n\r\n<img width=\"617\" alt=\"Screenshot 2024-01-13 at 20 30 40\" src=\"https://github.com/honojs/hono/assets/10682/a1d9a15c-e6a4-40b5-843d-261b18b24f01\">\r\n\r\nIf you only need to merge paths, you can make it yourself, or it may already be implemented as a utility.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080252624},{"id":2080268746,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1965","title":"refactor(ssg): SSG works without `node:path`","body":"You can close #1964 If you merge this PR.\n\n### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080268746},{"id":2080310578,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1966","title":"SSG: Handling wildcards, path params, regexp routing","body":"### What is the feature you are proposing?\n\nIf the following routing is used, an unexpected file will be generated.\r\n\r\n```ts\r\napp.get('/shops/:id', (c) => c.html(''))\r\napp.get('/shops/:id/:comments{[0-9]+}', (c) => c.html(''))\r\napp.get('/foo/*', (c) => c.html(''))\r\n```\r\n\r\n<img width=\"547\" alt=\"Screenshot 2024-01-13 at 22 51 22\" src=\"https://github.com/honojs/hono/assets/10682/ed9ae44a-129e-4d3b-92c1-4cdf40ae369e\">\r\n\r\nIf we don't specify the URL to access with a feature like `ssgParams`, we can ignore the generation of these files.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080310578},{"id":2080345220,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1967","title":"chore(helper): Add experimental flag the SSG features","body":"fixes: https://github.com/honojs/hono/issues/1961\r\n\r\nAll exported APIs have been described. Please let me know if this standard is excessive.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080345220},{"id":2080378370,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1968","title":"feat(ssg): Implement Dynamic File Extension on MIME Type and Enhanced Response Handling","body":"fixes: https://github.com/honojs/hono/issues/1962 https://github.com/honojs/hono/issues/1963\r\n\r\nI have addressed these two issues together as they are interconnected\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080378370},{"id":2080435137,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1969","title":"refactor: remove unnecessary `import`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080435137},{"id":2080540406,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1970","title":"refactor: remove and fix comments","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080540406},{"id":2080663677,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1971","title":"ci: remove lagon runtime tests and other lagon things","body":"Fixes #1888\r\n\r\nSince Lagon will be offline, removed the runtime tests for and other Lagon things.\r\n\r\nIn the `getRuntimeKey()` of the Adapter Helper, I'll leave the Lagon detection.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080663677},{"id":2080664314,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1972","title":"Cron Middleware","body":"### What is the feature you are proposing?\r\n\r\nI think it would be useful to be able to manage Cronjobs in Hono.\r\n\r\nFor example, I am thinking of an interface like this.\r\n\r\n```ts\r\napp.use(\r\n  cron('hello-cron', {\r\n    cron: '* * * * * *',\r\n    enable: true, // this is an option\r\n    handler: () => {\r\n      console.log('Hello World') // every seconds\r\n    },\r\n  })\r\n)\r\n\r\napp.get('/enable', (c) => {\r\n  c.var.cron.enable('hello-cron') // enable timer\r\n})\r\n\r\napp.get('/disable', (c) => {\r\n  c.var.cron.disable('hello-cron') // disable timer\r\n})\r\n\r\napp.post('/trigger', (c) => {\r\n  c.var.cron.trigger('hello-cron') // trigger at any time\r\n})\r\n\r\napp.post('/create-job', (c) => {\r\n  c.var.cron.set('goodbye-cron', {\r\n    cron: '* * * * * *',\r\n    handler: () => {\r\n      console.log('Goodbye World')\r\n    },\r\n  }) // add to cron jobs\r\n})\r\n\r\napp.post('/delete-job', (c) => {\r\n  c.var.cron.delete('goodbye-cron') // remove form cron jobs\r\n})\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080664314},{"id":2080709893,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1973","title":"refactor(ssg): ssg without node path","body":"https://github.com/honojs/hono/pull/1965\r\nThe code is a refactor of this PR.\r\nIt improves the simplicity and speed of processing.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080709893},{"id":2080712580,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1974","title":"refactor(ssg): without node path","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080712580},{"id":2080777726,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1975","title":"refactor(ssg): concise and prospective.","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080777726},{"id":2080788212,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1976","title":"fix(ssg): fix path parser bug & refactor code","body":"### Author should do the followings, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080788212},{"id":2080796011,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1977","title":"SSG/JSX: SSG supports `Suspense`","body":"### What is the feature you are proposing?\r\n\r\nCurrently, the SSG Helper does not fully support `Suspense`.\r\n\r\nFor example, consider the following example, which returns JSX with AsyncComponet wrapped in `Suspense`:\r\n\r\n```tsx\r\napp.get('/shops', async (c) => {\r\n  return c.render(\r\n    <div>\r\n      <Suspense fallback={'loading...'}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  )\r\n})\r\n```\r\n\r\nThe HTML exported by SSG is as follows:\r\n\r\n```html\r\n<html>\r\n    <head>\r\n        <meta charset=\"UTF-8\"/>\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n        <link href=\"/static/style.css\" rel=\"stylesheet\"/>\r\n    </head>\r\n    <body>\r\n        <header>\r\n            <a href=\"/\">top</a>\r\n            <a href=\"/about\">about</a>\r\n            <a href=\"/shops\">shops</a>\r\n        </header>\r\n        <main>\r\n            <div>\r\n                <template id=\"H:1\"></template>\r\n                loading...\r\n                <!--/$-->\r\n            </div>\r\n        </main>\r\n        <footer>\r\n            <address>\r\n                <a href=\"https://github.com/yusukebe/ramen-api\">powered by Ramen API</a>\r\n            </address>\r\n        </footer>\r\n    </body>\r\n</html>\r\n<template>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/shops/yoshimuraya\">yoshimuraya</a>\r\n        </li>\r\n        <li>\r\n            <a href=\"/shops/sugitaya\">sugitaya</a>\r\n        </li>\r\n        <li>\r\n            <a href=\"/shops/takasagoya\">takasagoya</a>\r\n        </li>\r\n    </ul>\r\n</template>\r\n<script>\r\n    ((d,c,n)=>{\r\n        c = d.currentScript.previousSibling\r\n        d = d.getElementById('H:1')\r\n        if (!d)\r\n            return\r\n        do {\r\n            n = d.nextSibling;\r\n            n.remove()\r\n        } while (n.nodeType != 8 || n.nodeValue != '/$')d.replaceWith(c.content)\r\n    }\r\n    )(document)\r\n</script>\r\n```\r\n\r\nI would like to show only the list of shops without `loading...`. This means that the SSG should be executed with the AsyncComponent in `Suspense` resolved.\r\n\r\nHowever, if we need to add a lot of code to resolve this issue, we can just write in the documentation that \"SSG does not support Suspense completely\".","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080796011},{"id":2080806443,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1978","title":"chore: format a forgotten file.","body":"### Author should do the followings, if applicable\n\n- [ ] Add tests\n- [x] Run tests\n- [x] `yarn denoify` to generate files for Deno\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080806443},{"id":2080814857,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1979","title":"feat(factory): remove `deprecated` from `Factory` and `createHandlers`","body":"Fixes #1948\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080814857},{"id":2080852340,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1980","title":"Types: `app.get<Env>()`","body":"### What is the feature you are proposing?\n\nCurrently the first argument of the `app.get()` generics is `P extends string`, but it would be smart code to change it to `Env` to get the type in the handler as follows:\r\n\r\n```tsx\r\napp.get<{ Variables: { shops: Shop[] } }>(\r\n  '/shops',\r\n  async (c) => {\r\n    const shops = await getShops()\r\n    c.set('shops', shops) // shops is Shop[]\r\n  },\r\n  mwFn((c) => {\r\n    const shops = c.var.shops\r\n    return shops // shops is Shop[]\r\n  }),\r\n  ssgParams(async (c) => {\r\n    const shops = c.var.shops // shops is Shop[]\r\n    return shops.map((shop) => ({ id: shop.id }))\r\n  }),\r\n  async (c) => {\r\n    const shops = c.var.shops // shops is Shop[]\r\n    return c.render(\r\n      <div>\r\n        <ul>\r\n          {shops.map((shop) => {\r\n            return (\r\n              <li>\r\n                <a href={`/shops/${shop.id}`}>{shop.name}</a>\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n```\r\n\r\nThis is a breaking change, so a migration guide is needed when implementing it. However, the case of passing generics to `app.get()` is rare.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2080852340},{"id":2081187932,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1981","title":"feat(jsx/dom): rewrite renderer to use virtual tree","body":"By #1917 and #1955 we found that we could achieve \"render to dom\" with our own implementation and it made sense, but it was, to put it mildly, a rather dirty implementation and an impossible one to maintain.\r\n\r\nAs mentioned on https://github.com/honojs/hono/pull/1909#issuecomment-1880043938, I think the cost of implementation is high, but still, without a virtual tree approach, the code for this feature is I don't think it would be maintainable.\r\n\r\nSo, I would like to replace it with this implementation that creates a virtual tree.\r\n\r\n### Differences from #1917, #1955\r\n\r\n#### Async component is not supported\r\n\r\nUnfortunately, as with the original React, it is not possible to use async components when rendering to dom. I was very worried about this, but I still think it would be better not to support this because it would not be possible to match the policy for rendering JSX to DOM.\r\n\r\n```ts\r\nconst Component = async () => {\r\n  const num = await promise\r\n  return <div>{num}</div>;\r\n};\r\n```\r\n\r\n`use` hook is available and should be used when rendering to dom.\r\n\r\n```ts\r\nconst Component = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>;\r\n};\r\n```\r\n\r\n### Small\r\n\r\n\"src/jsx/dom/render.ts\"  is very small, about 3 Kb.\r\n\r\n```\r\n$ npx esbuild --minify src/jsx/dom/render.ts | wc\r\n       1      66    3132\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2081187932},{"id":2081312666,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1982","title":"Path parameter confusion when relying on routing priority","body":"### What version of Hono are you using?\r\n\r\n3.12.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```typescript\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/prefix/:a\", (c) => c.json({ a: c.req.param(\"a\") }));\r\napp.get(\"/:a\", (c) => c.json({ a: c.req.param(\"a\") }));\r\napp.get(\"/:b/:a\", (c) => c.json({ a: c.req.param(\"a\"), b: c.req.param(\"b\") }));\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nEach of these routes should return proper responses according to the routing rules:\r\n\r\n- `/prefix/hello` matches the first route and returns `{ a: \"hello\" }`\r\n- `/hello` matches the second route and returns `{ a: \"hello\" }`\r\n- `/another/hello` matches the third route and returns `{ a: \"hello\", b: \"another\" }`\r\n\r\n### What do you see instead?\r\n\r\nWhat the third route actually ends up returning is\r\n\r\n```json\r\n{\r\n    \"a\": \"another\",\r\n    \"b\": \"another\"\r\n}\r\n```\r\n\r\n### Additional information\r\n\r\nThis bug does not occur without the `/prefix/:a` route.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2081312666},{"id":2081378490,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1983","title":"fix(trie-router): fixed the issue same param name is used","body":"Fixes #1982\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2081378490},{"id":2081544258,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1984","title":"feat!(cloudflare-workers): make `manifest` required","body":"Fixes #1127 #1093\r\n\r\nThis is the same as #1804 by @Code-Hex .\r\n\r\nWith this PR, if you use the Cloudflare Workers adapter's `serve-static`, you should specify the `manifest` option.\r\n\r\n```ts\r\nimport manifest from '__STATIC_CONTENT_MANIFEST'\r\n\r\n// ...\r\n\r\napp.use('/static/*', serveStatic({ root: './assets', manifest }))\r\n```\r\n\r\nThis avoids a compile error if there is an import of \"`__STATIC_CONTENT_MANIFEST`\" in Hono core's code.\r\n\r\nThis is a BREAKING CHANGE, so we need to write the migration instructions in the migration guide.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2081544258},{"id":2081930616,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1985","title":"Path parameters getting trimmed when using conflicting route","body":"### What version of Hono are you using?\n\n3.12.4\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nThe following code example can help demonstrate the issue.\r\n\r\nFor context, we have a route that mimics the npm login endpoint (`/`) & up until now the following is the best implementation I have found to work (I'm terrible at regex).\r\n\r\n```ts\r\nimport { type Context, Hono } from \"hono\";\r\n\r\nconst logParamsHandler = (c: Context) => c.json(c.req.param());\r\n\r\nconst PREFIX = \"org.couchdb.user:\";\r\n\r\nconst app = new Hono()\r\n  .get(`/-/user/:${PREFIX}name`, logParamsHandler)\r\n  .get(\"/:a/:b/:c\", logParamsHandler)\r\n  .get(\"/:a/:b/:c/:d\", logParamsHandler);\r\n```\n\n### What is the expected behavior?\n\nIt seems since #1983 has been merged & subsequently version `3.12.4` has been published a complex route we use now no longer works.\r\n\r\nIf you make a request to the endpoint with the 3 path parameters (`/:a/:b/:c`) it will omit the first path parameter (`a`) / only return the final 2 parameters.\r\n\r\n```bash\r\n# /1/2/3\r\n{\r\n  \"b\": \"2\",\r\n  \"c\": \"3\"\r\n}\r\n```\r\n\r\nSimilarly if you make a request to the endpoint with 4 path parameters (`/:a/:b/:c/:d`) it will show that it will only return the parameters for `c` & `d`.\r\n\r\n```bash\r\n# /1/2/3/4\r\n{\r\n  \"c\": \"3\",\r\n  \"d\": \"4\"\r\n}\r\n```\n\n### What do you see instead?\n\nFor the 2 example requests above I would expect to see the following, respectively\r\n\r\n```bash\r\n{\r\n  \"a\": \"1\",\r\n  \"b\": \"2\",\r\n  \"c\": \"3\"\r\n}\r\n```\r\n\r\n```bash\r\n{\r\n  \"a\": \"1\",\r\n  \"b\": \"2\",\r\n  \"c\": \"3\",\r\n  \"d\": \"4\"\r\n}\r\n```\n\n### Additional information\n\nThis seems like a minor regression that is causing the \"login\" route (`/-/user/:${PREFIX}name`) to pin the max length or number of parameters that can be returned & resulting it it (somehow) trimming it to the final 2 parameters.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2081930616},{"id":2081963965,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1986","title":"feat(jsx/dom): provide jsx-runtime and jsx-dev-runtime via jsx/dom","body":"This PR is a continuation of #1981. The following two commits have been added so far.\r\n* 3a91643a231d6f8e9f898b1ef71373eeac7ebfa4\r\n* d1c9b1bdcfae637c00ab4528aa88d5b461038868\r\n\r\nIf `\"jsxImportSource\": \"hono/jsx\"` is specified, all the stringify code will be included and it will become large, so this can be excluded.\r\n\r\nEven if you bundle code that includes Suspense and ErrorBoundary, it will still be able to fit in about 4Kb.\r\n\r\n```\r\n$ npx esbuild --minify --minify-syntax --tree-shaking=true --bundle dom2.tsx | wc\r\n       1      98    4256\r\n```\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { Suspense, ErrorBoundary } from './src/jsx/dom'\r\nimport { render } from './src/jsx/dom'\r\nimport { use } from './src/jsx/hooks'\r\n\r\nconst promise = new Promise<number>((resolve) => setTimeout(() => resolve(1), 1000))\r\nconst UseComponent = () => {\r\n  const num = use(promise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nconst rejectedPromise = new Promise<number>((_, reject) => setTimeout(() => reject(1), 1000))\r\nconst ErrorComponent = () => {\r\n  const num = use(rejectedPromise)\r\n  return <div>{num}</div>\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <Suspense fallback={<div>Loading...</div>}>\r\n            <div>\r\n              <h3>UseComponent</h3>\r\n              <UseComponent />\r\n            </div>\r\n          </Suspense>\r\n\r\n          <ErrorBoundary fallback={<div>error</div>}>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <div>\r\n                <h3>ErrorComponent</h3>\r\n                <ErrorComponent />\r\n              </div>\r\n            </Suspense>\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2081963965},{"id":2082784232,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1989","title":"refactor: faster for loop","body":"For loop use the length of the array cached first.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2082784232},{"id":2082962439,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1990","title":"feat(ssg): Ignore Dynamic Route","body":"Resolves https://github.com/honojs/hono/issues/1966\r\n\r\nWe have added an implementation that excludes certain types of routes - specifically, wildcard, path parameters, and regex-based routing - from the SSG (Static Site Generation) process.\r\n\r\nIt's important to note that this does not take into account the ssgParams middleware. Depending on the timing of the merge, we can include support for this middleware in this PR if necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2082962439},{"id":2083009153,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1991","title":"feat: Add Type to request for Lambda@Edge adapter to support S3 origin","body":"The origin field in the request object in the Lambda@Edge adapter is assumed to be only a custom origin.\r\n\r\nReferring to \r\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html ,\r\nI have defined a TypeScript type that is also compatible with S3 origins.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083009153},{"id":2083026122,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1992","title":"fix(trie-router): fixed same name path params matter","body":"Fixes #1985\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083026122},{"id":2083050293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1993","title":"env() from hono/adapter does not load .env in node environment","body":"### What version of Hono are you using?\r\n\r\n3.12.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. checkout hono nodejs template: pnpm create hono my-app\r\n2. create .env file: URL=http://127.0.0.1:8090\r\n![Screenshot 2024-01-16 at 12 29 28](https://github.com/honojs/hono/assets/10789851/04942fca-ed1e-4851-be81-7ff39f9a57d1)\r\n3. add env() function to display URL in index.ts like this:\r\n![Screenshot 2024-01-16 at 12 33 29](https://github.com/honojs/hono/assets/10789851/8f9b5cfe-d01a-4e01-8271-0ba24c4d59a6)\r\n\r\n`import { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\nimport { env } from 'hono/adapter'\r\n\r\nconst app = new Hono()\r\n\r\ntype Environment = {\r\n  URL: string;\r\n};\r\n\r\napp.get('/', (c) => {\r\n  const { URL } = env<Environment>(c);\r\n  console.log('environment URL', URL);\r\n  return c.text(`Environment URL: ${URL}`)\r\n})\r\n\r\nconst port = 3000\r\nconsole.log(`Server is running on port ${port}`)\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port\r\n})\r\n`\r\n\r\n4. pnpm run dev\r\n5. Go to localhost:3000\r\n\r\n### What is the expected behavior?\r\n\r\nconsole.log will display: environment URL: http://127.0.0.1:8090\r\n\r\nlocalhost:3000 will also display http://127.0.0.1:8090\r\n\r\n### What do you see instead?\r\n\r\nI got undefined for environment URL\r\n\r\n![Screenshot 2024-01-16 at 12 21 32](https://github.com/honojs/hono/assets/10789851/c4f5b7e9-9b3c-481e-9ad0-1f5a1a787523)\r\n\r\n\r\n### Additional information\r\n\r\nMy node version is 20.3.0 if it helps","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083050293},{"id":2083441785,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1994","title":"chore: enables lint and format for `.tsx`","body":"### Author should do the followings, if applicable\r\n\r\nEnabled prettier and eslint for `.tsx` as they were not enabled before.\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083441785},{"id":2083580063,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1995","title":"fix(types): correct `c.get()` inference","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083580063},{"id":2083713940,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1996","title":"feat(jsx/dom): startTransition() and useTransition()","body":"#1986 + [abb62fa](https://github.com/honojs/hono/pull/1996/commits/abb62fa15b9a7414d27a0ab82f303c6ab041c60a)\r\n\r\nThis PR provides `startTransition()` and `useTransition()` hook\r\n\r\nI wrote the following example app based on the following site.\r\n\r\n* https://react.dev/reference/react/useTransition\r\n* https://zenn.dev/uhyo/books/react-concurrent-handson-2/viewer/use-starttransition\r\n\r\n```ts\r\nimport { Suspense } from './src/jsx/dom'\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, startTransition, useTransition } from './src/jsx/hooks'\r\n\r\nlet sleeping: boolean = true\r\nconst Sleep1s = () => {\r\n  if (sleeping) {\r\n    throw new Promise<void>((resolve) =>\r\n      setTimeout(() => {\r\n        sleeping = false\r\n        resolve()\r\n      }, 1000)\r\n    )\r\n  }\r\n  return <p>Hello!</p>\r\n}\r\n\r\nfunction SleepApp() {\r\n  const [sleepIsShown, setSleepIsShown] = useState(false)\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<p>Loading...</p>}>{sleepIsShown ? <Sleep1s /> : null}</Suspense>\r\n      <p>\r\n        <button\r\n          className='border p-1'\r\n          onClick={() => {\r\n            startTransition(() => {\r\n              setSleepIsShown(true)\r\n            })\r\n          }}\r\n        >\r\n          Show Sleep1s\r\n        </button>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst HeavyContent = ({ count }) => {\r\n  const startTime = performance.now()\r\n  while (performance.now() - startTime < 1000) {}\r\n  return <div>HeavyContent!!! {count}</div>\r\n}\r\n\r\nconst Transition = () => {\r\n  const [isPending, startTransition] = useTransition()\r\n  const [count, setCount] = useState(0)\r\n  const [showHeavy, setShowHeavy] = useState(false)\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          startTransition(() => {\r\n            setShowHeavy(true)\r\n            setCount((c) => c + 1)\r\n          })\r\n        }}\r\n      >\r\n        {isPending ? 'Pending...' : 'Click me'}\r\n      </button>\r\n      {showHeavy && (\r\n        <button\r\n          onClick={() => {\r\n            setShowHeavy(false)\r\n          }}\r\n          style=\"margin-left: 10px;\"\r\n        >\r\n          Hide HeavyContent\r\n        </button>\r\n      )}\r\n      <div>{showHeavy ? isPending ? '...' : <HeavyContent count={count} /> : count}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h3>startTransition with Suspense</h3>\r\n          <SleepApp />\r\n\r\n          <h3>useTransition</h3>\r\n          <Transition />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/aa611eec-a321-4c9e-880b-553b96be4979\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083713940},{"id":2083764810,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1997","title":"refactor(jsx): export components and hook function from top level 'hono/jsx'","body":"+ 15204380da15ef4ffea341475da3f22d7a7c56e1\r\n\r\nUp to this point, hook functions have been exported from \"hono/jsx/hooks\", but today, when tree shaking is commonplace, there is little motivation to separate export source modules.\r\nIt would be better if all JSX-related components and hook functions could be imported from \"hono/jsx\".\r\n\r\n```ts\r\nimport {\r\n  Suspense,\r\n  ErrorBoundary,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  use,\r\n  startTransition,\r\n  useTransition,\r\n} from 'hono/jsx'\r\nimport type { RefObject } from 'hono/jsx'\r\n```\r\n\r\nAs for dom-related or dom-specific items, they can continue to be imported as follows.\r\n\r\n```ts\r\nexport { render, Suspense, ErrorBoundary } from 'hono/jsx/dom'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2083764810},{"id":2084569127,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/1998","title":"No detailed type support for Deno.","body":"### What version of Hono are you using?\n\n3.12.3\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nI need to use // @deno-types=\"npm:hono\" to get the proper type suggestion.\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2084569127},{"id":2085161209,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/1999","title":"feat(jsx/dom): support createContext and useContext in jsx/dom","body":"```ts\r\nimport { createContext, useContext } from 'hono/jsx'\r\n// or dom specific version\r\n// import { createContext, useContext } from 'hono/jsx/dom'\r\n\r\nconst Context = createContext(0)\r\nconst Content = () => {\r\n  const num = useContext(Context)\r\n  return <p>{num}</p>\r\n}\r\nconst Component = () => {\r\n  return (\r\n    <>\r\n      <Context.Provider value={1}>\r\n        <Content />\r\n        <Context.Provider value={3}>\r\n          <Content />\r\n        </Context.Provider>\r\n        <Content />\r\n      </Context.Provider>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2085161209},{"id":2085681040,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2001","title":"feat: introduce Accepts Helper","body":"### Author should do the followings, if applicable\r\n\r\nResolve #1792 \r\nResolve #1897 \r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2085681040},{"id":2085788204,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2002","title":"`'use client'` or `islands` dir","body":"Thanks to @usualoma, JSX \"Client Components\" are working for real. Next, we need to figure out how to integrate it into the framework. Specifically, how to hydrate the Client Components in the HTML rendered by the server.\r\n\r\nHere, we discuss \"Which component becomes a Client Component?\" There are two ways. Using the `'use client'` directive and using the `islands` directory.\r\n\r\n### `'use client'`\r\n\r\nThe `'use client'` directive is an API in React, used in Next.js. Although it may not be the original usage of React, we can consider a component with `'use client'` at the beginning to be a client component.\r\n\r\n```tsx\r\n'use client'\r\n\r\nimport { useState } from 'hono/jsx'\r\n\r\nconst Counter = () => {\r\n  const [count, setCount] = useState(0)\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Increment</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Counter\r\n```\r\n\r\nThis is @usualoma implementing PoC. There are things we need to improve, but the approach to make it a Vite plugin would be good.\r\n\r\nhttps://github.com/usualoma/hono-dom-hcc\r\n\r\n### `islands` directory pattern\r\n\r\nThe `islands` directory pattern is an approach that puts the components you want to be client components in a specific directory, such as `/app/islands`. [Fresh](https://fresh.deno.dev/) uses it.\r\n\r\n[Sonik](https://github.com/sonikjs/sonik) also uses this approach. The Vite plugin loads the components in `/app/islands` and marks them as client components.\r\n\r\n### `'use client'` vs `islands` dir\r\n\r\nThe following are just a few things I can think of. If there are others, please let me know.\r\n\r\n`'use client'`:\r\n\r\n* Pros: You don't have to put it in the specific directory.\r\n* Pros: \"Trendy\".\r\n* Cons: Implementation is a little bit hacky.\r\n\r\n`islands` directory pattern:\r\n\r\n* Pros: Easy to implement; can use [Vite's glob import](https://vitejs.dev/guide/features#glob-import)\r\n* ~~Pros: Can use other UI libraries such as React and Preact. Sonik do it.~~ `use client` could also use other UI libraries.\r\n* Cons: You have to put files in a specific directory.\r\n\r\n### Make it a Vite plugin\r\n\r\nIf we decide to go either way, it would be implemented as a Vite plugin.\r\n\r\n---\r\n\r\nThis is just a matter of which component we consider the client component. But we have to decide.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2085788204},{"id":2085869955,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2003","title":"refactor(jsx/dom): make `useTransition()` handling more simple","body":"After relearning about TaskQueue and Microtask in JavaScript, I understood that execution by `setTimeout()` does not overtake the first `update()`. There is no need to use `promise` here.\r\nAlso, I don't think a 10ms wait is necessary.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2085869955},{"id":2086065918,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2005","title":"Refactor middleware, tests","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086065918},{"id":2086170633,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2006","title":"fix(ssg): fixed `isDynamicRoute` and `ssgParams` matter","body":"When introducing `ssgParams()`, tests fail. I've fixed the matter.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086170633},{"id":2086249793,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2007","title":"feat(dev): support `NO_COLOR`","body":"Many frameworks support `NO_COLOR` because color libraries like ~chalk~, [kleur](https://github.com/lukeed/kleur) and [picocolors](https://github.com/alexeyraspopov/picocolors) support the env.\r\nThis helps disabling colored text output for some developers.\r\nhttps://no-color.org/\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086249793},{"id":2086289118,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2008","title":"feat: add script for watch, remove tsc from test","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086289118},{"id":2086566495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2009","title":"refactor: cors","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086566495},{"id":2086626009,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2010","title":"Add build/deploy section for node and bun in docs","body":"### What is the feature you are proposing?\n\nCurrently docs for [node](https://hono.dev/getting-started/nodejs) and [bun](https://hono.dev/getting-started/bun) are missing build and deploy sections. Need detailed instructions on this in docs.\r\nAssuming app will be running behind reverse proxy (like nginx) as pure node/bun script on host os (via pm2) or in docker container.\r\n- How to compile production bundle?\r\n- How to run this bundle?\r\n- Additional use case to cover: when app is developed on node (starter template has node adapter), but will run on bun in production","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086626009},{"id":2086668625,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2011","title":"refactor: jwt","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2086668625},{"id":2087404694,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2012","title":"refactor(ssg): Removal of Libraries Dependent on Node.js","body":"These modifications were made to eliminate the dependency on Node.js. \r\n\r\n- Changes in the fs for the Bun Adaptor.\r\n- Revision of the Buffer type.\r\n- Changed to 'toDenoSSG', 'toBunSSG' for each adapter to address duplicate naming of toSSG for deno.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2087404694},{"id":2087424734,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2013","title":"perf(ssg): make route requests in parallel in default and add interval option for origin's ratelimit","body":"### Author should do the followings, if applicable\r\n\r\nTo increase the speed of ssg, all requests were made in parallel and used as the default.\r\nOn the other hand, this may result in multiplexing of requests and overloading the external API. Therefore, we made it possible to choose whether to parallelize requests or not, and also to allow for intervals between queries.\r\n\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2087424734},{"id":2087484416,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2014","title":"chore(package.json): specify the config in `test:deno`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2087484416},{"id":2087492494,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2015","title":"chore(runtime-test): add `deno.lock`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2087492494},{"id":2087546011,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2016","title":"Focus is lost on the `textarea`","body":"### What version of Hono are you using?\n\n4.0.0-rc.1\n\n### What runtime/platform is your app running on?\n\nclient\n\n### What steps can reproduce the bug?\n\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\nimport { useState } from 'hono/jsx'\r\n\r\nconst TextArea = () => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const handleChange = (e: Event) => {\r\n    const target = e.target as HTMLTextAreaElement\r\n    setValue(target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <textarea onChange={handleChange} />\r\n      <div>{value}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst root = document.getElementById('root') as HTMLElement\r\n\r\nrender(<TextArea />, root)\r\n```\n\n### What is the expected behavior?\n\nAs the same as React:\r\n\r\nhttps://github.com/honojs/hono/assets/10682/674e1c32-3386-4544-8aef-a7e1d3ac5fce\r\n\r\n\n\n### What do you see instead?\n\nAfter typing a single character in the text area, the focus is lost and I cannot type continually.\r\n\r\nhttps://github.com/honojs/hono/assets/10682/313bdef0-ff22-432b-8b85-d975f07fa54a\r\n\r\nDemo: https://hono-client-components.pages.dev/,\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2087546011},{"id":2087991147,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2017","title":"fix(jsx/dom): find \"insertBefore\" node from next node list if not found","body":"Fixes #2016\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2087991147},{"id":2088171368,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2018","title":"fix(types): use middlewares with different env types","body":"Hello!\r\nFirst off, thank you for creating Hono. I'm using it in my personal projects and it's been a great experience!\r\n\r\nThis pull request aims to improve type inference when extending context variables in middlewares.\r\n\r\nCurrently, When using handlers like `app.get` to register middlewares that extends context variables, the context type is correctly inferred.\r\n\r\n```typescript\r\nconst app = new Hono()\r\nconst mw = createMiddleware<{ Variables: { foo: string } }>(async () => {});\r\n\r\napp.get(mw, async (c) => {\r\n    // this is correctly typed.\r\n    const foo: string = c.var.foo\r\n})\r\n```\r\n\r\nHowever, when using `app.use`, the types aren't as well defined.\r\n\r\n```typescript\r\napp.use(mw).get(async (c) => {\r\n    // this isn't correctly typed before merging this PR.\r\n    const foo: string = c.var.foo\r\n})\r\n```\r\n\r\nWhile `app.use` can accept path parametrers like `app.use('/foo', ...)`, but the type inference in these cases is quite complex and isn't covered in this PR.\r\n\r\nI believe this improvement will make Hono even more robust for TypeScript users. Looking forward to your feedback!\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088171368},{"id":2088316585,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2019","title":"When chaining routes with middlewares, the context type might be incorrect.","body":"### What version of Hono are you using?\r\n\r\n3.12.5\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\nRun and type check the code below:\r\n\r\n```typescript\r\nimport { Hono, MiddlewareHandler } from 'hono'\r\n\r\nconst mw1: MiddlewareHandler<{ Variables: { foo1: string } }> = async (c, next) => { \r\n  c.set('foo1', 'foo1')\r\n  await next()\r\n}\r\nconst mw2: MiddlewareHandler<{ Variables: { foo2: string } }> = async (c, next) => {\r\n  c.set('foo2', 'foo2')\r\n  await next()\r\n}\r\n\r\nconst app = new Hono()\r\n  .get('/1', mw1, async (c) => {\r\n    // this is correctly typed.\r\n    return c.json({ foo1: c.var.foo1 })\r\n  })\r\n  .get('/1-then-2', mw1, mw2, async (c) => {\r\n    // this is also correctly typed.\r\n    return c.json({ foo1: c.var.foo1, foo2: c.var.foo2 })\r\n  })\r\n  .get('/nothing', async (c) => {\r\n    // In this scope, c.var should be empty because no middlewares are applied.\r\n    // However, c.var is typed as { foo1: string; foo2: string; }.\r\n    // In runtime, v is {}.\r\n    const v: { foo1: string, foo2: string } = c.var;\r\n    return c.json(v);\r\n  });\r\n\r\n\r\nconsole.log(await (await app.request('/1')).json())\r\n// => { foo1: 'foo1' }\r\n\r\nconsole.log(await (await app.request('/1-then-2')).json())\r\n// => { foo1: 'foo1', foo2: 'foo2' }\r\n\r\nconsole.log(await (await app.request('/nothing')).json())\r\n// => {}\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nIn the handler for `/nothing`, no middlewares are applied.\r\nSo, the type of `c.var` should be inferred as an empty object.\r\n\r\n### What do you see instead?\r\n\r\nIn the handler for `/nothing`, the type of `c.var` is  inferred as `{ foo1: string; foo2: string }`.\r\n\r\n### Additional information\r\n\r\nI believe the issue with Hono lies in the overloaded types of [HandlerInterface](https://github.com/honojs/hono/blob/a5d9ca88c025b2e604593d77abff5ece38eb55d3/src/types.ts#L81).\r\n\r\nThe HandlerInterface returns Hono<E, S, P>, where E is extended by the Env definitions of handlers. However, this extension is limited to the same handler scope.\r\n\r\nI attempted a fix ([see commit](https://github.com/agatan/hono/commit/e71c4b6fb7a1ae60b67fd857ca8a4b4f4cdc9d09)), but then realized that this might conflict with issue [#1666](https://github.com/honojs/hono/issues/1666).\r\n\r\nI believe that to achieve correct type inference, it's necessary to maintain information about the paths where middleware is applied at the type level. However, I think this could be quite challenging to implement.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088316585},{"id":2088327868,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2020","title":"feat(jsx/dom): Introduce startViewTransition()","body":"### Included in this PR\r\n\r\n* Introduce `startViewTransition()`\r\n* Partial support for `<Style />`\r\n\r\n### `startViewTransition()`\r\n\r\nThis is an API not found in the original React.\r\nThe usage of this API is the same as the existing `startTransition()`, with state updates wrapped and passed as callback\r\n\r\n#### Is this API something that is needed?\r\n\r\nIf you simply want to use `document.startViewTransition()`, you can do so by writing the following, although it is a bit long.\r\n\r\n```ts\r\n<button onClick={() => {\r\n  if (!document.startViewTransition) {\r\n    setCount((c) => c + 1)\r\n  }\r\n  else {\r\n    document.startViewTransition(() => {\r\n      setCount((c) => c + 1)\r\n    });\r\n  }\r\n}}>\r\n  {count}\r\n</button>\r\n```\r\n\r\nReplacing this with the `startViewTransition()` provided by hono here has the following two advantages.\r\n\r\n* Can be written in short\r\n* Transition can be applied to fallback by `Suspense` and subsequent delayed rendering.\r\n\r\n```ts\r\n<button onClick={() => {\r\n  startViewTransition(() => {\r\n    setCount((c) => c + 1)\r\n  });\r\n}}>\r\n  {count}\r\n</button>\r\n```\r\n\r\n#### Restrictions\r\n\r\nCurrently, it cannot be used with `useTransition()` at the same time. However, I am considering making it possible to use it at the same time in subsequent PRs.\r\n\r\n### Partial support for `<Style />`\r\n\r\n`<Style />` is not likely to be rendered dom in a production environment, but it is useful in a demo environment, so I partially supported it. API for passing global CSS to children is not yet supported.\r\n\r\n### Demo\r\n\r\nhttps://github.com/honojs/hono/assets/30598/7ffecf98-3c5b-4433-9655-00b27538fc8d\r\n\r\n```ts\r\nimport { Style, css } from './src/helper/css'\r\nimport { render, Suspense } from './src/jsx/dom'\r\nimport { useState, startViewTransition, use } from './src/jsx/hooks'\r\n\r\nconst imagePromise = new Map<string, Promise<string>>()\r\nconst loadImage = (src: string) => {\r\n  if (!imagePromise.has(src)) {\r\n    imagePromise.set(\r\n      src,\r\n      new Promise((resolve) => {\r\n        ;(async () => {\r\n          await new Promise((resolve) => setTimeout(resolve, 1000))\r\n          const image = new window.Image()\r\n          image.onload = () => resolve(src)\r\n          image.src = src\r\n        })()\r\n      })\r\n    )\r\n  }\r\n  return imagePromise.get(src) as Promise<string>\r\n}\r\n\r\nconst ThumbnailImage = () => <img src='https://avatars.githubusercontent.com/u/98495527' />\r\nconst OriginalImage = () => {\r\n  const image = use(\r\n    loadImage('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true')\r\n  )\r\n  return (\r\n    <div\r\n      class={css`\r\n        background: url('${image}');\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 600px;\r\n        height: 600px;\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nconst Image = () => {\r\n  const [showOriginalImage, setShowOriginalImage] = useState(false)\r\n  return (\r\n    <div\r\n      onClick={() => startViewTransition(() => setShowOriginalImage(!showOriginalImage))}\r\n      class={css`\r\n        img,\r\n        div {\r\n          view-transition-name: image;\r\n        }\r\n      `}\r\n    >\r\n      {showOriginalImage ? (\r\n        <Suspense\r\n          fallback={\r\n            <div\r\n              class={css`\r\n                width: 600px;\r\n                height: 600px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                background-image: url('https://avatars.githubusercontent.com/u/98495527');\r\n                background-size: contain;\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-color: rgba(255, 255, 255, 0.5);\r\n                background-blend-mode: lighten;\r\n              `}\r\n            >\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <OriginalImage />\r\n        </Suspense>\r\n      ) : (\r\n        <ThumbnailImage />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Style />\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <Image />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088327868},{"id":2088431591,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2021","title":"feat!: validator throws error rathar than `return c.json()`","body":"Fixes #1441\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088431591},{"id":2088532953,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2022","title":"add documentation on c.req.formData method","body":"### What is the feature you are proposing?\n\nI think the doc page at https://hono.dev/api/request should include a description of the `formData` method.","state":"open","labels":"[\"enhancement\",\"document\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088532953},{"id":2088837813,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2023","title":"`context.json(...)` returns content type `text/plain;charset=UTF-8`","body":"### What version of Hono are you using?\n\n3.12.0\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nI use zod to validate incoming requests. There seems to be a problem with the response content type when I create a response with `context.json(...)`.\r\n\r\nExample:\r\n\r\n```ts\r\n\r\nlicensesRoute.openapi(\r\n  createRoute({\r\n    method: \"delete\",\r\n    path: \"/\",\r\n    request: {\r\n      headers: z.object({\r\n        authorization: z.string(),\r\n      }),\r\n      query: z.object({\r\n        key: z.string(),\r\n      }),\r\n    },\r\n    responses: {\r\n      204: {\r\n        description: \"No content\",\r\n      },\r\n      404: {\r\n        description: \"License not found\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: z.object({\r\n              message: z.string(),\r\n            }),\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }),\r\n  async (context) => {\r\n    return context.json(\r\n      {\r\n        message: \"License not found.\",\r\n      },\r\n      { status: 404 },\r\n    );\r\n  },\r\n);\r\n```\r\n\r\n![grafik](https://github.com/honojs/hono/assets/13857929/801c89fa-bb93-490d-b811-2adf26436624)\r\n\r\nMy workaround is currently:\r\n\r\n```ts\r\nreturn context.json(\r\n  {\r\n    message: \"License not found.\",\r\n  },\r\n  { status: 404, headers: { \"content-type\": \"application/json\" } },\r\n);\r\n```\n\n### What is the expected behavior?\n\nI expect the response to always have the content type `application/json` by default when using `context.json(...)`. But this only works if I do not use zod.\n\n### What do you see instead?\n\nIf I use zod, then the response has the content type `text/plain`.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088837813},{"id":2088919093,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2024","title":"feat: improve `ssgParams` flexibility","body":"### Author should do the followings, if applicable\r\n\r\nContext Env generics support for `ssgParams` middleware.\r\nuse a simple array for `ssgParams` middleware's argument.\r\n\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2088919093},{"id":2089179373,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2025","title":"fix(context): fixed middleware + `c.json({}, requestInit)` problem","body":"Fixes #2023\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2089179373},{"id":2089488089,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2027","title":"feat!(deno): move middleware to helper","body":"This may also need to be noted in the Migration Guide.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2089488089},{"id":2089581106,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2028","title":"SSG: Certain extensions go wrong.","body":"### What version of Hono are you using?\n\n4.0.0-rc.1\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\ntoSSG `app.get('/about', (c) => c.text('About Page'))`.\r\n  \r\n\n\n### What is the expected behavior?\n\nOutput is index.html\n\n### What do you see instead?\n\nThe output is indexhtml. This is a bug that occurs only in the determineExtension case.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2089581106},{"id":2089611599,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2029","title":"fix(SSG): Correct extension of the file output","body":"fixed https://github.com/honojs/hono/issues/2028\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2089611599},{"id":2090138502,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2031","title":"[SSG] `FileSystemModule`'s `writeFile` data must not have `ArrayBuffer`?","body":"### What version of Hono are you using?\r\n\r\nLatest: https://github.com/honojs/hono/tree/24723ffb91e34ce42e1b9d01f818e636f6a2fb65\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport fs from 'node:fs/promises'\r\nimport { Hono } from '../../src'\r\nimport { toSSG } from '../../src/helper/ssg'\r\n\r\nconst app = new Hono()\r\n\r\ntoSSG(app, fs)\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThere is no type error.\r\n\r\n### What do you see instead?\r\n\r\nA type error.\r\n\r\n<img width=\"259\" alt=\"Screenshot 2024-01-19 at 18 58 12\" src=\"https://github.com/honojs/hono/assets/10682/3f773cc9-b99e-4ed5-b75a-92cba3a05bce\">\r\n\r\n\r\n### Additional information\r\n\r\nIf we just want to be compatible with Node.js `fs`, we can remove the `ArrayBuffer`.\r\n\r\n```diff\r\ndiff --git a/src/helper/ssg/index.ts b/src/helper/ssg/index.ts\r\nindex 3834b6e..ef078f7 100644\r\n--- a/src/helper/ssg/index.ts\r\n+++ b/src/helper/ssg/index.ts\r\n@@ -13,7 +13,7 @@ import { joinPaths, dirname } from './utils'\r\n  * The API might be changed.\r\n  */\r\n export interface FileSystemModule {\r\n-  writeFile(path: string, data: string | ArrayBuffer | Uint8Array): Promise<void>\r\n+  writeFile(path: string, data: string | Uint8Array): Promise<void>\r\n   mkdir(path: string, options: { recursive: boolean }): Promise<void | string>\r\n }\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090138502},{"id":2090230331,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2032","title":"fix(ssg): Remove ArrayBuffer from FileSystemModule's writeFile","body":"fixes: https://github.com/honojs/hono/issues/2031\r\n \r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090230331},{"id":2090287690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2033","title":"feat(SSG): Add `isSSG` and `isSSR` API","body":"I added `isSSG` and `isSSR` API to SSG helper.\r\nYou can switch SSG/SSR if you merge.\r\n\r\n#### Examples\r\nSSG-Based mode (default is `undefined`)\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { isSSG, isSSR, toSSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', c => c.html(<h1>Static Top Page</h1>))\r\napp.get('/api', isSSR(), c => c.json({ random: Math.random() }))\r\n\r\nawait toSSG(app, fs)\r\n```\r\nSSG-Based mode (default is `ssg`)\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { isSSG, isSSR, toSSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', c => c.html(<h1>Static Top Page</h1>))\r\napp.get('/api', isSSR(), c => c.json({ random: Math.random() }))\r\n\r\nawait toSSG(app, fs, {\r\n  default: 'ssg'\r\n})\r\n```\r\nSSR-Based mode (default is `ssr`)\r\n```tsx\r\nimport { Hono } from 'hono'\r\nimport { isSSG, isSSR, toSSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', isSSG(), c => c.html(<h1>Static Top Page</h1>))\r\napp.get('/api', c => c.json({ random: Math.random() }))\r\n\r\nawait toSSG(app, fs, {\r\n  default: 'ssg'\r\n})\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090287690},{"id":2090539525,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2034","title":"css helper is not working well with jsx/dom","body":"### What version of Hono are you using?\n\nv4.0.0-rc.1\n\n### What runtime/platform is your app running on?\n\nAny environment.\n\n### What steps can reproduce the bug?\n\n* Setting values to `class` may flicker because they are set via a `promise`\r\n  * We need to set it up synchronously, without promise\r\n* keyframes is not working\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090539525},{"id":2090569244,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2035","title":"helper function for startViewTransition","body":"### What is the feature you are proposing?\n\nThe idea of an API has not been finalized, but it would be nice to have a helper that behaves similarly to `css()`. For example, something like this.\r\n\r\n```ts\r\nimport { css, keyframes, viewTransition } from 'hono/dom/css'; // DOM-specific version of helper\r\n\r\nconst myKeyframes = keyframes`\r\nfrom {\r\n  left: 100%;\r\n}\r\nto {\r\n  left: 0%;\r\n}\r\n`\r\n\r\nconst myTransition = viewTransition(css`\r\n::view-transition-old() {\r\n  animation-name: ${myKeyframes};\r\n}\r\n\r\n::view-transition-new() {\r\n  animation-name: ${myKeyframes};\r\n}\r\n`) // Use css syntax highlighting\r\n\r\nconst myClass = css`\r\n${myTransition}\r\ncolor: red;\r\n`\r\nconst myImageClass = css`\r\n${myTransition}\r\nmax-width: 100%;\r\n`\r\n\r\nreturn (showImage ? <img class={myImageClass} /> : <div class={myClass}>text</div>)\r\n```\r\n\r\n```html\r\n<style>\r\n@keyframes css-12345 {\r\n  from {\r\n    left: 100%;\r\n  }\r\n  to {\r\n    left: 0%;\r\n  }\r\n}\r\n\r\n::view-transition-old(css-abcde) {\r\n  animation-name: css-12345;\r\n}\r\n\r\n::view-transition-new(css-abcde) {\r\n  animation-name: css-12345;\r\n}\r\n\r\n.css-foo {\r\n  view-transition-name: css-abcde;\r\n  color: red;\r\n}\r\n\r\n.css-bar {\r\n  view-transition-name: css-abcde;\r\n  max-width: 100%;\r\n}\r\n</style>\r\n\r\n<div class=\"css-foo\">text</div>\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090569244},{"id":2090594617,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2036","title":"refactor(jsx/dom): invoke update() in microtask","body":"This PR contains two refactorings, and fixes. This is the last PR regarding \"jsx/dom\" for v4 and is intended to be a feature freeze. (Continue to fix bugs and support CSS helpers.)\r\n\r\n### refactor(jsx/dom): invoke update() in microtask\r\n\r\nThis improves the following two issues\r\n\r\n* Multiple updates of stete in a single callback will now invoke `update()` only once.\r\n    * https://github.com/honojs/hono/compare/v4...usualoma:hono:feat/jsx-dom-render-in-microtask?expand=1#diff-8f050239e20450fd8425feb7efbda60df851ebbc32bec8139d6d9ad1b53a7bc0R189-R217\r\n* `useTransition` and `startViewTransition` can be used at the same time.\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { render } from './src/jsx/dom'\r\nimport { useState, useTransition, startViewTransition } from './src/jsx/hooks'\r\n\r\nconst HeavyContent = ({ count }) => {\r\n  const startTime = performance.now()\r\n  while (performance.now() - startTime < 1000) {}\r\n  return <div>HeavyContent!!! {count}</div>\r\n}\r\n\r\nconst Transition = () => {\r\n  const [isPending, startTransition] = useTransition()\r\n  const [count, setCount] = useState(0)\r\n  const [showHeavy, setShowHeavy] = useState(false)\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          startViewTransition(() => {\r\n            startTransition(() => {\r\n              setShowHeavy(true)\r\n              setCount((c) => c + 1)\r\n            })\r\n          })\r\n        }}\r\n      >\r\n        {'Click me'}\r\n      </button>\r\n      {showHeavy && (\r\n        <button\r\n          onClick={() => {\r\n            startViewTransition(() => {\r\n              setShowHeavy(false)\r\n            })\r\n          }}\r\n          style='margin-left: 10px;'\r\n        >\r\n          Hide HeavyContent\r\n        </button>\r\n      )}\r\n      <div>{showHeavy ? isPending ? '...' : <HeavyContent count={count} /> : count}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h3>useTransition</h3>\r\n          <Transition />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\nhttps://github.com/honojs/hono/assets/30598/c92a6f61-2246-44c8-ad36-df81680e8eee\r\n\r\n#### fix(jsx/dom): should not render removed node\r\n\r\nStable behavior when Suspense is shown and hidden repeatedly in a short period of time.\r\n\r\nhttps://github.com/honojs/hono/compare/v4...usualoma:hono:feat/jsx-dom-render-in-microtask?expand=1#diff-00be452f071d90d2904b8acdd0b15dc607fee092c4545b38387e2f52a6eba35fR95-R131\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090594617},{"id":2090748496,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2037","title":"endpoints returning raw values","body":"### What is the feature you are proposing?\n\nEndpoint code could be simplified a bit if:\r\n\r\n`return someString;` is equivalent to `return c.text(someString);`\r\n`return someJSX;` is equivalent to `return c.html(someJSX);`\r\n`return someObject;` is equivalent to `return c.json(someObject);`","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090748496},{"id":2090910815,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2038","title":"refactor: aws lambda createResult method","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2090910815},{"id":2091358098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2039","title":"refactor: secure headers middleware","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2091358098},{"id":2091710016,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2040","title":"refactor(types): name them `BlankSchema` or `BlankInput`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2091710016},{"id":2091731317,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2041","title":"feat(deno): export accpet helper for deno","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2091731317},{"id":2091733578,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2042","title":"Rename `accept` to `accepts`","body":"### What is the feature you are proposing?\r\n\r\nI think `src/helper/accept/*` should be `src/helper/accepts/*`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2091733578},{"id":2091813647,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2043","title":"Review of Hono/SSG names","body":"### What is the feature you are proposing?\n\nI've named it, hono/ssg, should I think of a cooler name than toSSG or before GA?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2091813647},{"id":2091894305,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2044","title":"fix(ssg): Skip the creation of meaningless static files.","body":"Currently, the toSSG function can generate static files, but there are routes where unexpected content, such as 404 Not Found, is retrieved. This can be identified in advance through a fetch process and prevented from being created.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2091894305},{"id":2092070085,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2045","title":"refactor: body parser","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092070085},{"id":2092084585,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2046","title":"fix!(types): Fix context type when chaining routes with middlewares","body":"Fix https://github.com/honojs/hono/issues/2019.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092084585},{"id":2092187587,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2049","title":"`stream.onAbort` is never called for `streamSSE` (Bun)","body":"### What version of Hono are you using?\n\n3.12.6\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nA simple modification of the provided example in the docs:\r\n\r\n```typescript\r\nlet id = 0;\r\n\r\napp.get(\"/sse\", async (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    let running = true;\r\n\r\n    stream.onAbort(async () => {\r\n      // This is never called.\r\n      console.log(\"Client closed connection\");\r\n      running = false;\r\n    });\r\n\r\n    while (running) {\r\n      const message = `It is ${new Date().toISOString()}`;\r\n      await stream.writeSSE({\r\n        data: message,\r\n        event: \"time-update\",\r\n        id: String(id++),\r\n      });\r\n      console.log(\"Server:\", message); // This gets called over and over, even if the client disconnected\r\n      await stream.sleep(1000);\r\n    }\r\n  });\r\n});\r\n```\n\n### What is the expected behavior?\n\nThe variable `running` should be set to false when the browser is closed, and the message \"Client closed connection\" should be displayed in stdout. \n\n### What do you see instead?\n\nThe server keeps writing to the stream, the variable `running` is never set to false and `console.log(\"Server:\", message);` is called over and over.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092187587},{"id":2092228732,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2050","title":"Hono streams immediately closes the connection unless sleep is used","body":"### What version of Hono are you using?\n\n3.12.0\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nAccording to the Hono documentation, to setup a stream and send SSE events, this is all that's needed\r\n\r\n```\r\nconst app = new Hono()\r\nlet id = 0\r\n\r\napp.get('/sse', async (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    while (true) {\r\n      const message = `It is ${new Date().toISOString()}`\r\n      await stream.writeSSE({\r\n        data: message,\r\n        event: 'time-update',\r\n        id: String(id++),\r\n      })\r\n      await stream.sleep(1000)\r\n    }\r\n  })\r\n})\r\n```\r\n\r\nWhile that is correct, the reason this works is because of the magic line `await stream.sleep(1000)` which basically keeps the connection open forever, extending it with 1000ms every loop. Basically the streamSSE callback never resolves.\r\n\r\nWithout this, Hono immediately resolves the callback, returns and closes the connection. And no more SSE events will be pushed.\r\n\r\nIn other words Hono does not keep the connection open unless you manually keep it open using some `await stream.sleep()` mechanism.\r\n\r\nAnd because a Hono request always requires a return, there's no other option then to increase the time with some sleep.\n\n### What is the expected behavior?\n\nI expect Hono to be able to keep a stream connection open so I can push future updates to it, without using stream.sleep.\n\n### What do you see instead?\n\nConnection getting closed if I don't use await.stream.sleep.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092228732},{"id":2092805204,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2052","title":"JSX Renderer: defaults `docType` as `true`","body":"### What is the feature you are proposing?\r\n\r\nI think we should just make `default:true` the default, since it's a pain to write `docType:true` every time.\r\n\r\n```ts\r\nexport default jsxRenderer(\r\n  ({ children, title }) => {\r\n    return (\r\n      <html lang='en'>\r\n        <head>\r\n          <meta charset='UTF-8' />\r\n          <meta name='viewport' content='width=device-width, initial-scale=1.0' />\r\n        </head>\r\n        <body>{children}</body>\r\n      </html>\r\n    )\r\n  },\r\n  {\r\n    docType: true, // make it as default\r\n  }\r\n)\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092805204},{"id":2092815414,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2053","title":"feat: Introduce `useViewTransition()` hook and `viewTransition()` helper","body":"Fixes #2034, #2035\r\n\r\n### Update `startViewTransition()` family\r\n\r\nForgot to mention in the previous PR that `document.startViewTransition()` is currently only available in Google Chrome and Edge.\r\nhttps://caniuse.com/mdn-api_document_startviewtransition\r\n\r\nThis PR adds the following new items\r\n```ts\r\nimport { useViewTransition } from 'hono/jsx'\r\nimport { viewTransition } from 'hono/css'\r\n// or dom-specific version import { viewTransition } from 'hono/jsx/dom/css'\r\n```\r\n\r\nIn the following, we will look at the usage of the `startViewTransition()` family along with these usages.\r\n\r\n#### Easiest example\r\n\r\nSimply call `startViewTransition()` function (not a hook).\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### Next Step\r\n\r\nYou can use `viewTransition()` helper for getting unique `view-transition-name`.\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() => viewTransition())\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### Use with `keyframes`\r\n\r\n`::view-transition-old()` is converted to `::view-transition-old(${uniqueName)`\r\n\r\n```tsx\r\nimport { startViewTransition } from 'hono/jsx'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nconst Content = () => {\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation-name: ${rotate};\r\n      }\r\n      ::view-transition-new() {\r\n        animation-name: ${rotate};\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n#### If you want to change the style only during the animation\r\n\r\nYou can use `useViewTransition()`.  This hook returns `[boolean, (callback: () => void) => void]` and they are `isUpdating` flag and `startViewTransition()` function.\r\nIf you want to change the style only during the animation, you can specify the style if `isUpdating` is `true`.\r\n\r\nWhen this hook is used, Component is evaluated at the following two times.\r\n* Inside the callback of a call to `startViewTransition()`.\r\n* When the `finish` promise becomes fulfilled\r\n    * https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition/finished\r\n\r\n\r\n```tsx\r\nimport { useViewTransition } from 'hono/jsx'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nconst Content = () => {\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n      ::view-transition-new() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>\r\n        Click!\r\n      </button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src='https://avatars.githubusercontent.com/u/98495527' class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n              position: relative;\r\n              ${isUpdating &&\r\n              css`\r\n                &:before {\r\n                  content: 'Loading...';\r\n                  position: absolute;\r\n                  top: 50%;\r\n                  left: 50%;\r\n                }\r\n              `}\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\r\n\r\n\r\n#### Example of overall use\r\n\r\nhttps://github.com/honojs/hono/assets/30598/f9514a08-d666-42c6-8109-1fd028af65d1\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx/dom */\r\nimport { render, Suspense } from './src/jsx/dom'\r\nimport { Style, css, keyframes, viewTransition } from './src/jsx/dom/css'\r\nimport { useState, useViewTransition, use } from './src/jsx/hooks'\r\n\r\nconst imagePromise = new Map<string, Promise<string>>()\r\nconst loadImage = (src: string) => {\r\n  if (!imagePromise.has(src)) {\r\n    imagePromise.set(\r\n      src,\r\n      new Promise((resolve) => {\r\n        ;(async () => {\r\n          await new Promise((resolve) => setTimeout(resolve, 700))\r\n          const image = new window.Image()\r\n          image.onload = () => resolve(src)\r\n          image.src = src\r\n        })()\r\n      })\r\n    )\r\n  }\r\n  return imagePromise.get(src) as Promise<string>\r\n}\r\n\r\nconst ThumbnailImage = ({ transition }: { transition: string }) => (\r\n  <img src='https://avatars.githubusercontent.com/u/98495527' class={transition} />\r\n)\r\nconst OriginalImage = ({\r\n  transition,\r\n  setIsImageShown,\r\n}: {\r\n  transition: string\r\n  setIsImageShown: (boolean) => void\r\n}) => {\r\n  const [isUpdating] = useViewTransition()\r\n  const image = use(\r\n    loadImage('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true')\r\n  )\r\n  if (!isUpdating) {\r\n    setIsImageShown(true)\r\n  }\r\n  return (\r\n    <div\r\n      class={css`\r\n        ${transition}\r\n        background: url('${image}');\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 600px;\r\n        height: 600px;\r\n      `}\r\n    />\r\n  )\r\n}\r\n\r\nconst Image = () => {\r\n  const [showOriginalImage, setShowOriginalImage] = useState(false)\r\n  const [isShown, setIsShown] = useState(false)\r\n  const [isImageShown, setIsImageShown] = useState(false)\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n\r\n\r\n  const rotate360 = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  transform: rotate(360deg);\r\n}\r\n`\r\n  const rotate20 = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n50% {\r\n  transform: rotate(20deg);\r\n}\r\n100% {\r\n  transform: rotate(0deg);\r\n}\r\n`\r\n  const fadeIn = keyframes`\r\n0% {\r\n  opacity: 0;\r\n}\r\n100% {\r\n  opacity: 1;\r\n}\r\n`\r\n  const fadeOut = keyframes`\r\n0% {\r\n  opacity: 1;\r\n}\r\n100% {\r\n  opacity: 0;\r\n}\r\n`\r\n  const loadingTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${rotate360} 0.5s ease-in-out;\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${rotate360} 0.5s ease-in-out;\r\n    }\r\n  `)\r\n  const loadedTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${fadeOut} 0.5s linear;\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${fadeIn} 0.5s linear;\r\n    }\r\n  `)\r\n  const switchTransition = viewTransition(css`\r\n    ::view-transition-old() {\r\n      animation: ${rotate20} 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n    }\r\n\r\n    ::view-transition-new() {\r\n      animation: ${rotate20} 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <div\r\n      onClick={() =>\r\n        startViewTransition(() => {\r\n          setShowOriginalImage(!showOriginalImage)\r\n          setIsShown(true)\r\n        })\r\n      }\r\n    >\r\n      {showOriginalImage ? (\r\n        <Suspense\r\n          fallback={\r\n            <div\r\n              class={css`\r\n                ${isUpdating ? loadingTransition : loadedTransition}\r\n                width: 600px;\r\n                height: 600px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                background-image: url('https://avatars.githubusercontent.com/u/98495527');\r\n                background-size: contain;\r\n                background-repeat: no-repeat;\r\n                background-position: center;\r\n                background-color: rgba(255, 255, 255, 0.5);\r\n                background-blend-mode: lighten;\r\n              `}\r\n            >\r\n              Loading...\r\n            </div>\r\n          }\r\n        >\r\n          <OriginalImage\r\n            transition={\r\n              isImageShown ? switchTransition : isUpdating ? loadingTransition : loadedTransition\r\n            }\r\n            setIsImageShown={setIsImageShown}\r\n          />\r\n        </Suspense>\r\n      ) : (\r\n        <ThumbnailImage transition={isShown ? switchTransition : loadingTransition} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Style />\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <Image />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nrender(<App />, document.getElementById('root'))\r\n```\r\n\r\n### Other changes\r\n\r\n#### Support `CSSProperties`\r\n\r\nMerging this PR would allow the following to be written.\r\n\r\n```tsx\r\n<h1 style={{fontSize: '20px'}}>Header</h1>\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092815414},{"id":2092948666,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2054","title":"feat(ssg): support Improve Hook Handling","body":"Following @yusukebe  advice, I have created the beforeRequestHook and AfterRequestHook. Users can now prevent unexpected outputs with these hooks.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2092948666},{"id":2093282397,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2056","title":"fix(ssg): Uniformly Convert Paths Ending with Slash to 'index.ext' Format","body":"- before:  `/api/` -> `./static/api/.html`\r\n- after:  `/api/` -> `./static/api/index.html`\r\n\r\n@yusukebe \r\nCurrently, the implementation uniformly converts paths like `/css/` to `/css/index.css`. Considering this, there are two possible approaches to the implementation, and I have chosen the first one:\r\n\r\n1. Treat all paths ending with a slash uniformly as `index.ext`, even for non-HTML files. Those who dislike this approach can use paths like `/css` without the trailing slash.\r\n2. For non-HTML files ending with a slash, complete them as `/css.css`. I did not adopt this approach as it seems counterintuitive\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2093282397},{"id":2093370442,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2057","title":"refactor: stream pull","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2093370442},{"id":2093518890,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2058","title":"refactor: url util splitRoutingPath","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2093518890},{"id":2093623309,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2059","title":"Could not resolve \"fastly:experimental\" when importing fastly:experimental","body":"### What version of Hono are you using?\n\n3.12.16\n\n### What runtime/platform is your app running on?\n\nFastly\n\n### What steps can reproduce the bug?\n\nAdding import { allowDynamicBackends } from \"fastly:experimental\";  and calling allowDynamicBackends(true); yields\r\n\r\n```\r\n✘ [ERROR] Could not resolve \"fastly:experimental\"\r\n\r\n    src/index.ts:6:37:\r\n      6 │ import { allowDynamicBackends } from \"fastly:experimental\";\r\n```\n\n### What is the expected behavior?\n\nA clean compile\n\n### What do you see instead?\n\n```\r\n✘ [ERROR] Could not resolve \"fastly:experimental\"\r\n\r\n    src/index.ts:6:37:\r\n      6 │ import { allowDynamicBackends } from \"fastly:experimental\";\r\n        ╵                                      ~~~~~~~~~~~~~~~~~~~~~\r\n\r\n  You can mark the path \"fastly:experimental\" as external to exclude it from the bundle, which will remove this error.\r\n\r\nError: Build failed with 1 error:\r\nsrc/index.ts:6:37: ERROR: Could not resolve \"fastly:experimental\"\r\n```\n\n### Additional information\n\nI'm able to use regular fastly functions, such as ConfigStore without importing it.\r\n\r\nOne side-effect of not being able to import fastly, I'm also unable to access Context.client.address.\r\n\r\nStuff like this also gives an error:\r\n```\r\n\r\n                 console.log(\"test:\", c._exCtx.client.address)\r\n                  console.log(\"test2:\", c.executionCtx.client.address)\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2093623309},{"id":2094008137,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2060","title":"Streaming a mp3 file","body":"### What version of Hono are you using?\n\n3.12.6\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nI'm trying to stream a file using `hono/streaming` `stream()` method.\r\n\r\nsomething like this\r\n```ts\r\napp.get('/stream', c => {\r\n    const mp3 = \"file.mp3\"\r\n\r\n    const fsStats = fs.statSync(mp3);\r\n\r\n    let start = 0;\r\n    let end = fsStats.size;\r\n\r\n    const rangeHeader = c.req.header()['range'];\r\n    if (rangeHeader) {\r\n        const array = rangeHeader.split(/bytes=([0-9]*)-([0-9]*)/);\r\n        start = parseInt(array[1]);\r\n\r\n        c.res.headers.set('Content-Range', `bytes ${start}-${end}/${fsStats.size}`);\r\n        c.res.headers.set('Content-Length', (end - start + 1).toString());\r\n        c.res.headers.set('Cache-Control', 'no-cache');\r\n        c.status(206);\r\n    } else {\r\n        c.res.headers.set('Content-Length', fsStats.size.toString());\r\n    }\r\n\r\n    const readStream = fs.createReadStream(mp3);\r\n    const file = Readable.toWeb(readStream);\r\n\r\n    c.res.headers.set('Content-Type', 'audio/mpeg');\r\n    c.res.headers.set('Accept-Ranges', 'bytes');\r\n\r\n    return stream(c, async stream => {\r\n        await stream.pipe(file);\r\n    });\r\n});\r\n```\r\n\r\nwhen moving the player progress bar, the first time is passed correctly, the range is parsed and working correctly. If I try again to skip to another timeframe, it does not work. The command is totally ignored. It also seems to completely ignore the content length\r\n\r\nTried both on chrome and firefox.\r\n\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nNode 20.11.0\r\nmacos 14.2.1 on apple silicon","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2094008137},{"id":2094262804,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2061","title":"NotFound Handler + Compress does not return body","body":"### What version of Hono are you using?\n\n3.12.6\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\n```typescript\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\nimport { compress } from 'hono/compress'\r\n\r\nconst app = new Hono()\r\napp.use('*', compress())\r\napp.notFound((c) => c.json({ message: 'error message' }, 400))\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port: 3000,\r\n})\r\n```\n\n### What is the expected behavior?\n\nReturns error body:\r\n```json\r\n{ \"message\": \"error message\" }\r\n```\n\n### What do you see instead?\n\nNo body content - browser default error page\n\n### Additional information\n\nMight be an issue in hono + compress or maybe in `@hono/node-server` package, as there were similar issues in regular handlers in older versions","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2094262804},{"id":2094275700,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2062","title":"refactor(test): change to not use `env` command","body":"`env` command can't work on Windows and move it to config.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2094275700},{"id":2094965053,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2063","title":"refactor: rename accept to accepts","body":"### Author should do the followings, if applicable\r\nhttps://github.com/honojs/hono/issues/2042\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2094965053},{"id":2094983778,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2064","title":"fix: use DOCTYPE by default ","body":"Fixes #2052\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2094983778},{"id":2095569475,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2065","title":"setCookie cannot set multiple cookies in Node.js v18.13 or under","body":"### What version of Hono are you using?\r\n\r\n3.11.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js\r\n\r\n### What steps can reproduce the bug?\r\n\r\nFirst, install Node.js v18.3.0 or under.\r\n\r\nThen, add two lines of code using `setCookie` in one of the route handlers, like this example:\r\n\r\n```ts\r\nimport { Hono } from \"hono\"\r\nimport { setCookie } from \"hono/cookie\"\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\"/\", async ctx => {\r\n    setCookie(ctx, \"cookie-1\", \"value1\")\r\n    setCookie(ctx, \"cookie-2\", \"value2\")\r\n    return ctx.text(\"Hello, World!\")\r\n})\r\n\r\nexport app\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe response header should contains two lines of `Set-Cookie`, like this\r\n\r\n```\r\nSet-Cookie: cookie-1=value1\r\nSet-Cookie: cookie-2=value2\r\n```\r\n\r\n### What do you see instead?\r\n\r\n```\r\nSet-Cookie: cookie-1=value1, cookie-2=value2\r\n```\r\n\r\n### Additional information\r\n\r\nThis problem doesn't appear in Node.js version higher than v18.13. e.g. v18.14.\r\n\r\nPossibly a Node.js bug in the implementation of `Headers` class. Can Hono add a compatible layer for this? After all, Hono says it supports Node.js v16.0+ in the `package.json`.\r\n\r\nPS: I encountered this issue in Ubuntu system, not sure whether it will or will not appear in other platforms.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2095569475},{"id":2096217240,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2067","title":"`mimes` option for serve-static","body":"### What is the feature you are proposing?\n\nThis feature supports rarely used content-types and great amount of types.\r\nAlso, I think to remove unnecessary default MIME to make it lighter in the future.\r\n```ts\r\n// HLS\r\nconst mimes = {\r\n  m3u8: 'application/x-mpegURL',\r\n  ts: 'video/mp2t'\r\n}\r\napp.use('/video/*', serveStatic({mimes}))\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2096217240},{"id":2096644299,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2068","title":"Handler stuck when awaiting aborted SSE stream","body":"### What version of Hono are you using?\n\n3.12.6\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nStart the following server and run this command `curl http://localhost:8000/sse`. After a few seconds stop the curl command.\r\n\r\n```js\r\nimport { serve } from \"@hono/node-server\";\r\nimport { Hono } from \"hono\";\r\nimport { streamSSE } from \"hono/streaming\";\r\n\r\nconst app = new Hono();\r\n\r\nlet testId = 0;\r\n\r\napp.get(\"/sse\", (c) =>\r\n  streamSSE(c, async (stream) => {\r\n    try {\r\n      const currentTestId = ++testId;\r\n      let aborted = false;\r\n      stream.onAbort(() => {\r\n        aborted = true;\r\n      });\r\n\r\n      for (let i = 0; i < 10; i++) {\r\n        console.log(currentTestId, \"Iteration\", i, aborted ? \"(aborted)\" : \"\");\r\n        // If I await the writeSSE like this, it sometimes never returns when the stream is aborted\r\n        await stream.writeSSE({ data: JSON.stringify({ iteration: i }) });\r\n        await stream.sleep(1000);\r\n      }\r\n      console.log(\"Done\");\r\n    } catch (error) {\r\n      console.error(\"Error\", error);\r\n    }\r\n  })\r\n);\r\n\r\nconst port = 8000;\r\nconsole.log(`Server is running on port ${port}`);\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port,\r\n});\r\n\r\n```\n\n### What is the expected behavior?\n\nI expect either the `await stream.writeSSE()` to \"succeed\" or to throw an exception. Now the call never completes after a for writes after the stream is aborted.\n\n### What do you see instead?\n\nThe server logging stops after a few writes and the handler never finishes.\r\n\r\nExample output:\r\n```\r\n1 Iteration 0 \r\n1 Iteration 1 \r\n1 Iteration 2 \r\n1 Iteration 3 \r\n1 Iteration 4 (aborted)\r\n1 Iteration 5 (aborted)\r\n```\r\n(it doesn't complete all the iterations and Done is not logged)\r\n\n\n### Additional information\n\nFor my use case I want to continue with all iterations even if the stream is closed. I think I have two workarounds:\r\n\r\n1) Skip awaiting `stream.writeSSE()`\r\n2) Skip calling `stream.writeSSE()` when the stream is aborted\r\n\r\nNot sure if there are any drawbacks of not awaiting the writes (1). And I'm a bit worried that handler can be stuck if there are issues with writing.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2096644299},{"id":2096956580,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2069","title":"test(jsx): add test for Context with Suspense","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2096956580},{"id":2097137782,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2070","title":"make `files` in `ToSSGResult` not optional","body":"### What is the feature you are proposing?\n\nI think it's convenient if it's not optional. If there are no files, it can be `[]`.\r\n\r\n```ts\r\nexport interface ToSSGResult {\r\n  success: boolean\r\n  files: string[]\r\n  error?: Error\r\n}\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097137782},{"id":2097238721,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2071","title":"fix:(ssg): make 'files' mandatory in ToSSGResult","body":"fixes https://github.com/honojs/hono/issues/2070\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097238721},{"id":2097254139,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2072","title":"fix: all statusCode (for type)","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097254139},{"id":2097284900,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2073","title":"feat(types): explicitly specify statusCode","body":"### Author should do the followings, if applicable\r\nexplicitly specify statusCode\r\nI explicitly specified all status codes defined in the specification.\r\n\r\n```ts\r\napp.get(\"/\", (c) => {\r\n   // redirect status code \r\n    return c.redirect(\"https://hono.dev\", 301);\r\n}).get(\"/2\", (c) => {\r\n    // general\r\n    // ...\r\n    return c.text(\"success!\", 201);\r\n})\r\n```\r\n\r\n```ts\r\napp.post(\"/3\", (c) => {\r\n    // type error\r\n    return c.text(\"bad status code\", 666)\r\n})\r\n```\r\n\r\nbut, if statusCode is unoffical statusCode\r\n```ts\r\nimport type { UnOfficalStatusCode } from \"hono/utils/http-status\";\r\n\r\napp.post(\"/4\", (c) => {\r\n    return c.text'(\"unoffical status code\", 666 as UnOfficalStatusCode)\r\n})\r\n```\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097284900},{"id":2097373640,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2074","title":"fix: await generate hook","body":"ref https://github.com/honojs/hono/pull/2054\r\n\r\nThe test appears to be failing accidentally. This is probably due to something not awaiting generatehook\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097373640},{"id":2097399344,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2075","title":"Proposal for SSGResultDetails","body":"### What is the feature you are proposing?\r\n\r\nWhen debugging files created by toSSG, it is not practical to check all the routes registered in app. I believe we should provide a way to know which routes have succeeded, failed, or skipped.\r\n\r\n```ts\r\ninterface SSGResultPaths {\r\n  successfulPaths: string[];\r\n  failedPaths: { path: string; error: Error }[];\r\n  excludedPaths: string[];\r\n}\r\n\r\ninterface ToSSGResult {\r\n  success: boolean;\r\n  files: string[];\r\n  error?: Error;\r\n  paths: SSGResultPaths;\r\n}\r\n```\r\n\r\nIf you agree with this I will create it.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097399344},{"id":2097579753,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2076","title":"Missing Documentation of Vercel App Router API methods.","body":"### What is the feature you are proposing?\n\nFor Vercel App Router Documentation Only Added GET request, causing problem on post request, getting \"405 Method Not Allowed\".\r\n![image](https://github.com/honojs/hono/assets/81101648/7c2d4f4d-8f8e-424a-a417-9d3f7a16a1d2)\r\nbut Vercel supports more","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097579753},{"id":2097704620,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2077","title":"feat: new built-in middleware bodyLimit","body":"### Author should do the followings, if applicable\r\nI saw this DISCUSSION and implemented it.\r\nhttps://github.com/orgs/honojs/discussions/2048\r\nIt takes a little time to prepare an explanation.\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2097704620},{"id":2098039969,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2078","title":"req.raw.cf types broken in 3.12.4","body":"### What version of Hono are you using?\r\n\r\n3.12.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```\r\nimport { Hono } from 'hono';\r\n\r\nconst app = new Hono();\r\n\r\ntype Variables = { userConfig: DataSchema }\r\n\r\napp.use('*', async (c, next) => {\r\n        const userConfig = { userCountry: c.req.raw.cf.country };\r\n\tc.set('userConfig', userCountry);\r\n        await next();\r\n});\r\n\r\nexport default app;\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nTo get user country without type errors\r\n\r\n### What do you see instead?\r\n\r\nIn version 3.12.4, the following TypeScript error is thrown:\r\n`Property 'cf' does not exist on type 'Request'.     ts(2339)`\r\n\r\n### Additional information\r\n\r\n[This was mentioned before on 3.7.4](https://github.com/honojs/hono/issues/1546), but it was fixed.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2098039969},{"id":2098167282,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2079","title":"test: compress middleware custom error message","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2098167282},{"id":2099376265,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2080","title":"fix(hono-base): fix not found handler calling timing when one middleware","body":"Fixes #2061\r\n\r\nFix problem where notFound was not handled correctly when the result returned from the router was a single middleware.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2099376265},{"id":2100298950,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2081","title":"fix(factory): correct types inside of `createMiddleware()`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2100298950},{"id":2100472584,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2082","title":"Good bye Lagon","body":"We have to remove all Lagon things. Thanks, Lagon.\r\n\r\n- [x] website\r\n- [x] starter template\r\n- [x] adaptor\r\n- [x] githubactions\r\n- [x] readme.md\r\n- [x] package.json","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2100472584},{"id":2101188470,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2085","title":"fix: enable to return Response like object ","body":"This PR fixes regression in the https://github.com/honojs/hono/pull/2080.\r\n\r\nAt first glance, it appears to be a significant change from the following code, but the conditions are the same.\r\n\r\n```ts\r\n      if (res instanceof Response) return res\r\n\r\n      return (async () => {\r\n        let awaited: Response | void\r\n        try {\r\n          awaited = await res\r\n          if (!awaited) {\r\n            return this.notFoundHandler(c)\r\n          }\r\n        } catch (err) {\r\n          return this.handleError(err, c)\r\n        }\r\n        return awaited\r\n      })()\r\n```\r\n\r\nIf `res instanceof Response` is `false`, whether it is a `Promise<Response>` or a Response-like object, it is resolved in the subsequent `await res`. Therefore, it is sufficient to check the type of res with `res instanceof Promise` and switch its behavior.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2101188470},{"id":2101200000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2086","title":"Examples for SSG","body":"I think the new SSG features are great. However, we need to understand real world use cases and find the missing features and bugs. It would be good to create some examples for this purpose.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2101200000},{"id":2101683736,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2087","title":"goodbye: lagon","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2101683736},{"id":2101949594,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2088","title":"refactor: request param","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2101949594},{"id":2102142931,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2090","title":"`helper/ssg/index.test.tsx` does not close well","body":"### What version of Hono are you using?\n\nlatest https://github.com/honojs/hono/tree/b98e85092474ebc11884fc76ddf27fb29365cea1\n\n### What runtime/platform is your app running on?\n\nCI/main\n\n### What steps can reproduce the bug?\n\nRun tests on CI.\n\n### What is the expected behavior?\n\nPassed.\n\n### What do you see instead?\n\nhttps://github.com/honojs/hono/actions/runs/7654663888/job/20880284814\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2102142931},{"id":2102395819,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2092","title":"refactor: faster for loop in jsx/dom","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2102395819},{"id":2102422909,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2093","title":"refactor: \"if\" on one line and deletion of unneeded variables","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2102422909},{"id":2102437218,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2094","title":"feat(serve-static): `mimes` option for serve-static","body":"close #2067 \r\n\r\nThis option enables you to set your own mime to serveStatic().\r\nThis `mimes` overwrites default mime in Hono.\r\n```ts\r\n// e.g. HLS\r\nconst mimes = {\r\n  m3u8: 'application/x-mpegURL',\r\n  ts: 'video/mp2t'\r\n}\r\napp.use('/video/*', serveStatic({mimes}))\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2102437218},{"id":2102516762,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2095","title":"chore: add development environment","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2102516762},{"id":2102670171,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2096","title":"fix: add typesVersions of accepts helper","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nSorry, I forgot this!","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2102670171},{"id":2103224886,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2098","title":"chore: vitest test.pool to 'forks'","body":"fixes https://github.com/honojs/hono/issues/2090\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2103224886},{"id":2103459831,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2099","title":"Hono Stack / RPC not working as expected (Validation with Zod)","body":"```ts\r\nimport { zValidator } from '@hono/zod-validator';\r\nimport { Hono } from 'hono';\r\nimport { hc } from 'hono/client';\r\nimport { z } from 'zod';\r\n\r\nconst app = new Hono().get(\r\n\t'/hello',\r\n\tzValidator('query', z.object({ name: z.string() })),\r\n\tasync (ctx) => {\r\n\t\tconst name = ctx.req.valid('query').name;\r\n\t\treturn ctx.json({ message: `Hello ${name}!` });\r\n\t}\r\n);\r\n\r\nconst client = hc<typeof app>('http://localhost');\r\nconst resp = await client.hello.$get();\r\n```\r\n\r\nWhen using the hono client, the hello route and the get method are typed properly but it does not show a typescript error even though i have not passed the `name` query param yet. It does not infer the `name` query as i start typing it inside `{query: {}}`\r\n\r\nDetails:\r\n```\r\n\"@hono/zod-validator\": \"^0.1.11\",\r\n\"hono\": \"^3.12.7\",\r\n\"zod\": \"^3.22.4\"\r\n\r\nRuntime - Bun 1.0.25\t\t\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2103459831},{"id":2103601023,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2100","title":"Path params are not inferred correctly","body":"### What version of Hono are you using?\n\n3.12.7\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n```ts\r\nimport { Hono } from 'hono';\r\nimport { hc } from 'hono/client';\r\n\r\nconst app1 = new Hono().get('/c/:d', async (c) => c.json({ message: c.req.param('d') }));\r\nconst app2 = new Hono().route('/a/:b', app1);\r\n\r\nconst client = hc<typeof app2>('http://localhost:80');\r\nclient.a[':b'].c[':d'].$get({ param: { b: '123', d: '456' } });\r\n```\n\n### What is the expected behavior?\n\nParameter `b` must be allowed\n\n### What do you see instead?\n\nParameter `b` is not allowed\r\n<img width=\"925\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/40269790/a0e17d9f-8cc0-45d9-83df-61ef8a825198\">\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2103601023},{"id":2103654557,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2101","title":"Change Linter","body":"### What is the feature you are proposing?\n\nIsn't it better to use the biome package instead of using the eslint package to reduce the complexity, for when the project becomes bigger?\r\n\r\nhttps://twitter.com/jullerino/status/1750469267949007122?s=19","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2103654557},{"id":2103788961,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2103","title":"feat: introduce Body Limit Middleware using stream","body":"This is an implementation of the feature proposed in #2077 using stream.\r\n\r\n### How to use\r\n\r\nSimply specify the maximum size.\r\n\r\n```ts\r\napp.post(\r\n  '/hello',\r\n  bodyLimit({\r\n    maxSize: 15 * Unit.b, // byte,\r\n    onError: (c) => {\r\n      return c.text('oveflow :(', 413)\r\n    },\r\n  }),\r\n  (c) => {\r\n    return c.text('pass :)')\r\n  }\r\n)\r\n```\r\n\r\n### Using stream\r\n\r\nThe problem discussed in #2077 that a body must be read at a time is solved by using stream.\r\n\r\n### `c.req.bodyCache`\r\n\r\nIt uses `c.req.bodyCache` used by the Validator implementation. By setting the loaded ArrayBuffer to `c.req.bodyCache.arrayBuffer`, such as `c.req.json()` will use that cached body from then on.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2103788961},{"id":2103831274,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2104","title":"feat(ssg): introduce `disableSSG` and `onlySSG`","body":"This PR introduces `disbleSSG` and `onlySSG` middleware.\r\n\r\n### Usage\r\n\r\nYour application:\r\n\r\n```ts\r\nconst app = new Hono()\r\napp.get('/', (c) => c.html(<h1>Hello</h1>))\r\napp.get('/api', disableSSG(), (c) => c.text('an-api'))\r\napp.get('/static-page', onlySSG(), (c) => c.html(<h1>Welcome to my site</h1>))\r\n```\r\n\r\n### Difference from #2033\r\n\r\nThis Middleware is similar to `isSSG` and `isSSR` proposed in #2033 but different.\r\n\r\n1. Focus on SSG - **SSG Helper is for SSG only** and does not take care of Server-Side-Rendering. Therefore, we can only specify whether to enable SSG or not.\r\n2. Using headers - Add custom headers instead of adding properties to the `Request`/`Response` object. We need to extend the objects. And, without using this middleware, it can check the Request header, and user can write their own process if it has `x-hono-ssg.`\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2103831274},{"id":2104120469,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2105","title":"chore: use Bun as a package manager","body":"This PR proposes to use Bun as a package manager instead of Yarn.\r\n\r\n## Motivation\r\n\r\nWe have been using Yarn v1. However, we are having problems with the slow installation of dependencies. Also, the development of Yarn v1 has stopped.\r\n\r\nI am not that much of a package manager, but I have an admiration for other modern tools such as Yarn v4 (Berry) and pnpm.\r\n\r\nHowever, we cannot use [np](https://github.com/sindresorhus/np) in yarn v4 or pnpm. We are currently using np for this honojs/hono release, which must be able to use it.\r\n\r\n## Bun\r\n\r\nHono supports Bun and loves Bun. Bun is also an excellent package manager. So this time we will use Bun as a package manager instead of Yarn v4 or pnpm.\r\n\r\nNote: Bun can be a bundler and a test environment, but in this case, we will use it as a package manager and task runner.\r\n\r\n## Bun vs Yarn v4/pnpm\r\n\r\nCompare Bun with package managers such as Yarn v4 and pnpm.\r\n\r\nBun:\r\n\r\n* Pros - Ultra-fast.\r\n* Pros - Bun can emit `yarn.lock` compatible with Yarn v1. - So, this project will include `bun.lockb` and `yarn.lock`.\r\n* Pros - We may use np.\r\n* Pros - Does not need `yarn`.\r\n* Cons - Need to install Bun.\r\n* Cons - Does not support Windows. - but will support it soon.\r\n\r\nYarn v4/pnpm:\r\n\r\n* Pros - Does not need to install Bun.\r\n* Pros - Many projects use it.\r\n* Cons - np does not support it.  Though supporting yarn v4, it can not upload to `registry.npmjs.org`.\r\n* Cons - Fast, but slower than Bun.\r\n\r\n## How fast?\r\n\r\nhttps://github.com/honojs/hono/assets/10682/0a53a4a7-455c-440d-a6a4-ff375e85f884\r\n\r\n## On which runtime will the tests be run?\r\n\r\nNode.js.\r\n\r\nWe're using Vitest, which means that tests run on Node.js. The result of `getRuntimeKey()` is `node`.\r\n\r\n## Changes\r\n\r\nThere are no major changes, but contributors will type the following commands.\r\n\r\n* `yarn test` => `bun run test`\r\n* `yarn denoify` => `bun run denoify` or `bun denoify`\r\n* `yarn build` => `bun run build`\r\n\r\nHowever, there is not only `bun.lockb` but also `yarn.lock`, so you can use the yarn commands.\r\n\r\n## Are you sure about this?\r\n\r\nYes. If there is a major problem, we can go back to yarn. Plus, Hono likes Bun.\r\n\r\n---\r\n\r\nRelated #2051 #1405\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2104120469},{"id":2104123546,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2106","title":"\"Uncaught TypeError: child.vR is not iterable (cannot read property undefined)\" in jsx/dom","body":"### What version of Hono are you using?\r\n\r\nv4.0.0-rc.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js v21\r\n\r\n### What steps can reproduce the bug?\r\n\r\nIt occurs when `react-swc` is selected in **vite** and the `React` application is rewritten with `hono/jsx`.\r\n\r\n### What is the expected behavior?\r\n\r\nCounter works as usual.\r\n\r\n### What do you see instead?\r\n\r\n<img width=\"957\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/121654029/501b9b86-6950-40f9-a7f7-9878c1052203\">\r\n\r\n\r\n### Additional information\r\n\r\n```tsx\r\n// main.ts\r\nimport App from './App.tsx'\r\nimport './index.css'\r\nimport { render } from 'hono/jsx/dom'\r\n\r\nrender(<App />, document.getElementById('root')!)\r\n```\r\n\r\n```tsx\r\n// App.tsx\r\nimport { useState } from 'hono/jsx'\r\nimport reactLogo from './assets/react.svg'\r\nimport viteLogo from '/vite.svg'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState<number>(0)\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <a href=\"https://vitejs.dev\" target=\"_blank\">\r\n          <img src={viteLogo} className=\"logo\" alt=\"Vite logo\" />\r\n        </a>\r\n        <a href=\"https://react.dev\" target=\"_blank\">\r\n          <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\r\n        </a>\r\n      </div>\r\n      <h1>Vite + React</h1>\r\n      <div className=\"card\">\r\n        <button onClick={() => {\r\n          setCount((count) => count + 1)\r\n        }}>\r\n          count is {count}\r\n        </button>\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to test HMR\r\n        </p>\r\n      </div>\r\n      <p className=\"read-the-docs\">\r\n        Click on the Vite and React logos to learn more\r\n      </p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2104123546},{"id":2104971089,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2107","title":"refactor: Improve readability of dispatch() in compose","body":"I was reading the base code when I came across this file. I tried to remove the extra curly braces and improve readability with a few changes.\r\n\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2104971089},{"id":2105357435,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2109","title":"feat(body-limit): Replace c.req.raw with body limit middleware proxy","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2105357435},{"id":2105443578,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2110","title":"serveStatic() does not work","body":"### What version of Hono are you using?\r\n\r\n3.12.7\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have recently started learning this framework and I am very excited. Today I understood serveStatic() in Bun does not work for me when I use it.\r\n\r\nMy code:\r\n```javascript\r\nimport { Hono } from 'hono'\r\nimport { serveStatic } from 'hono/bun'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('/static/*', serveStatic({ root: './static' }))\r\n```\r\n\r\nI was able to do my work with the following code (in a way contrary to the documentation):\r\n```javascript\r\nimport { Hono } from 'hono'\r\nimport { serveStatic } from 'hono/bun'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', serveStatic({ root: `${import.meta.dir}/static` }))\r\n\r\nexport default app\r\n```\r\n\r\nI also changed [`serveStatic()`](https://github.com/honojs/hono/blob/main/src/adapter/bun/serve-static.ts) code to:\r\n```javascript\r\n// 33 - 45 lines\r\n    let path = getFilePath({\r\n      filename: options.rewriteRequestPath ? options.rewriteRequestPath(filename) : filename,\r\n      root: options.root,\r\n      defaultDocument: DEFAULT_DOCUMENT,\r\n    })\r\n\r\n    if (!path) return await next()\r\n\r\n    path = `/${path}` // previously path = `./${path}`\r\n\r\n    if (existsSync(path)) {\r\n      const content = file(path)\r\n      if (content) {\r\n```\r\nAnd now it works fine for me. What do you think is the reason for this problem? Is it a bug or am I making a mistake?\r\n\r\n### Additional information\r\n\r\nAlso, I noticed that NodeJS modules are used in this file, I am interested in contributing and rewriting with Bun.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2105443578},{"id":2105480683,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2112","title":"chore(lint): set `curly` rule as `all`","body":"Related to https://github.com/orgs/honojs/discussions/2108\r\n\r\nAs mentioned above, the style of braces in if statements should be unified. It should not be changed by refactoring. Therefore, we add the eslint rule. The option `all` is the style preferred by me and @usualoma. We will go with that.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2105480683},{"id":2105641452,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2113","title":"docs(contributing): add `Installing dependencies`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2105641452},{"id":2105766810,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2115","title":"fix: replace fs.existsSync() with Bun.file().exists()","body":"- [x] Run tests","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2105766810},{"id":2106604476,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2117","title":"Environment variable documentation not clear ","body":"### What version of Hono are you using?\n\n3.12.8\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nIt's not clear in the documentation how to type and access environment variables in Hono.\r\n\r\n```ts\r\ntype Env = {\r\n  Variables: {\r\n    FOO: string\r\n  }\r\n  Bindings:{\r\n    BAR: string\r\n  }\r\n}\r\n\r\nconst middleware = createMiddleware<Env>(async (c)=>{\r\n  const foo1 = c.var.FOO // type string inferred\r\n  const foo2 = c.get('FOO') // type string inferred\r\n  const { FOO } = env(c) // typeof FOO is not inferred from `c`, but `BAR` is? \r\n});\r\n```\r\n\r\nA couple of things:\r\n1. I would expect that `FOO` to be inferred from the `c` variable (alongside `BAR`), given the documentation says:\r\n> retrieving environment variables across different runtimes, extending beyond just Cloudflare Workers' Bindings.\r\n2. It's not clear if I should use the `env()` helper, use `c.var` or `c.get()`. Could you explain the differences, and what the best practice should be? I'm happy to raise a PR to update the documentation to this effect.\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2106604476},{"id":2106895061,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2118","title":"`useRequestContext` returns incorrect URL","body":"### What version of Hono are you using?\n\n3.12.3\n\n### What runtime/platform is your app running on?\n\nCF Workers\n\n### What steps can reproduce the bug?\n\nFor a given component that is part of a larger layout:\r\n```tsx\r\nexport const NavBar: FC = async () => {\r\n  const ctx = useRequestContext();\r\n  console.log(ctx.req.url);\r\n\r\n  return (\r\n    <div\r\n      id=\"topNav\"\r\n      class=\"navbar sticky top-0 z-50 border-b border-base-300 bg-base-100 shadow-sm\"\r\n    >CONTENT</div>\r\n  )\r\n};\r\n```\r\n\r\nThe URL that is returned is always the same as the first request that was made. For example, if your first request is to `http://localhost:5173/test`, all subsequent requests will have `ctx.req.url` provided from `useRequestContext` as that same value, regardless of if you change routes.\r\n\r\nIt should be noted that this behavior was observed during local development, and I have not tested it against a deployed CF Pages.\n\n### What is the expected behavior?\n\nI would expect `ctx.req.url` to always reflect the current URL that is being displayed.\n\n### What do you see instead?\n\nThe value is always the URL of the first page that was accessed.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2106895061},{"id":2107856493,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2119","title":"feat!(mime): reduce default mimes","body":"As the number of MIME increases in the future, it will be impossible to support them all due to file size problems.\r\nWe think that it should primarily support files used by browsers.\r\nInstead, you can maintain the previous state by using mimes option #2094 .\r\n\r\n## Delete extension List\r\n\r\n**azw(application/vnd.amazon.ebook)**\r\nIf Amazon is using Hono, it should not be deleted.\r\n\r\n**abw, csh, doc, docs, xls, xlsx, odp, ods, odt, ppt, pptx, vsd**\r\nFiles used by specific software.\r\n\r\n**swf, xul**\r\nFiles for software whose support has ended.\r\n\r\n**mpkg, sh**\r\nInstaller and scripts.\r\n\r\n**jar, php**\r\nOther language files.\r\n\r\n**arc, bz, bz2, tar, 7z**\r\nArchive and compressed files.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2107856493},{"id":2107874715,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2120","title":"RPC Client isn't compatible with app.route()","body":"### What version of Hono are you using?\n\n3.12.8\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n```ts\r\n// routes/routerA.ts\r\nimport { Hono } from \"hono\";\r\nimport { zValidator } from \"@hono/zod-validator\";\r\nimport { z } from \"zod\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", (c) => {\r\n  return c.json({ message: \"Hello\" }, 200);\r\n});\r\n\r\napp.get(\r\n  \"/:id\",\r\n  zValidator(\r\n    \"param\",\r\n    z.object(\r\n      {\r\n        id: z.string()\r\n      })\r\n  ),\r\n  async (c) => {\r\n    return c.json({ message: `Hello ${c.req.param(\"id\")}` }, 200);\r\n  });\r\n\r\nexport default app;\r\n\r\n// index.ts\r\nimport { Hono } from \"hono\";\r\nimport { default as routerA } from \"./routes/routerA\";\r\nimport { hc } from \"hono/client\";\r\n\r\nconst app = new Hono();\r\n\r\nconst routes = app.route(\"/a\", routerA);\r\n\r\nexport default app;\r\nexport type RpcType = typeof routes;\r\n\r\nconst rpc = hc<RpcType>(\"http://localhost:3000/\");\r\n            ^ unknown\r\n```\n\n### What is the expected behavior?\n\nThe `rpc` object should have proper typings.\n\n### What do you see instead?\n\nThe `rpc` object doesn't have typings.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2107874715},{"id":2107982881,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2121","title":"feat(types): better `c.var` type","body":"I noticed `ContextVariableMap` is pretty much useless for `c.var` if `Env` in `Context` is `any` (the default), so I decided to make it respect it without breaking much code.\r\n\r\n## Before\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  export interface ContextVariableMap {\r\n    x: string;\r\n  }\r\n}\r\n\r\nconst c = new Context(...);\r\n\r\nc.var.x; // any\r\nc.var.y; // any\r\n```\r\n\r\n## Now\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  export interface ContextVariableMap {\r\n    x: string;\r\n  }\r\n}\r\n\r\nconst c = new Context(...);\r\n\r\nc.var.x; // string\r\nc.var.y; // still any, as to not break any code\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2107982881},{"id":2108971079,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2122","title":"fix(types): infer complex path params","body":"Fixes #2100\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2108971079},{"id":2109853210,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2124","title":"fix(jsx): fix context provider with async component","body":"### What will be fixed?\r\n\r\nIn JSX `toString()`, `useContext()` did not work correctly for nested async component. This PR fixes that problem.\r\nIt is possible that this PR will fix #2118, but it may be another cause, which will need to be confirmed after merged.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2109853210},{"id":2109904217,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2125","title":"Feature to Create a Sitemap","body":"### What is the feature you are proposing?\n\nWe will add a feature to create a sitemap, such as toSitemap, generateSitemap. This is needed when operating a site generated through Static Site Generation (SSG).\r\n\r\n※It won't be ready by February 9th. :)\r\n\r\n## Usage\r\nIf you are only targeting the results of SSG, this should suffice:\r\n\r\n```ts\r\ntoSSG(app, fs, {\r\n  afterGenerateHook: (result) => {\r\n    if (result.files) {\r\n      SSGToSitemap(result.files, fs, sitemapOptions)\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nIf there is a mix of SSG and other content, you would use it like this:\r\n\r\n```ts\r\ntoSitemap(app, fs, sitemapOptions)\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2109904217},{"id":2111317552,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2126","title":"Cannot access `req.param` in middleware","body":"### What version of Hono are you using?\n\n3.12.9\n\n### What runtime/platform is your app running on?\n\naws-lambda\n\n### What steps can reproduce the bug?\n\nThe `req.param` method returns an empty object `{}`in the middleware but works in the handler.\r\n```javascript\r\nimport { Hono } from 'hono';\r\nimport { createMiddleware } from 'hono/factory';\r\n\r\nconst partnerIdMiddleware = createMiddleware(async (c, next) => {\r\n  console.log('in middleware', c.req.param());\r\n\r\n  await next();\r\n});\r\n\r\nconst app = new Hono();\r\napp.use('/purchases/*', partnerIdMiddleware);\r\napp.get('/purchases/:partnerId/activate', (c) => {\r\n  console.log('in handler', c.req.param());\r\n\r\n  return c.text(c.req.param('partnerId'));\r\n});\r\n\r\nasync function test() {\r\n  const res = await app.request('/purchases/PARTNER234/activate');\r\n  console.log(res.status);\r\n}\r\n\r\ntest();\r\n//logs:\r\nin middleware {}\r\nin handler { partnerId: 'PARTNER234' }\r\n```\n\n### What is the expected behavior?\n\nExpected that the params are also accessible in the middleware\n\n### What do you see instead?\n\nEmpty object `{}`\n\n### Additional information\n\nMinimal reproduction here: https://stackblitz.com/edit/stackblitz-starters-yrrbsq?file=index.js","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2111317552},{"id":2113503321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2128","title":"fix(jsx-renderer): correct nested layouts","body":"Fixed not working correctly when there are more than 2 nested layouts.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2113503321},{"id":2113541012,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2129","title":"Performance improvement for RPC","body":"### What is the feature you are proposing?\n\nI don't think this is a very critical issue, but there is potential for improvement.\r\n\r\nRef: https://x.com/saltyAom/status/1752977796274720863","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2113541012},{"id":2113763941,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2130","title":"feat!(validator): supports transformation","body":"This PR allows changing the type of value returned by the validator.\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { validator } from 'hono/validator'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '/',\r\n  validator('query', () => {\r\n    return {\r\n      age: 123\r\n    }\r\n  }),\r\n  (c) => {\r\n    const { age } = c.req.valid('query')\r\n    return c.json({\r\n      'your age is': age // number\r\n    })\r\n  }\r\n)\r\n```\r\n\r\nThe Zod Validator will need to be modified later.\r\n\r\nRelated to https://github.com/honojs/middleware/issues/368\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2113763941},{"id":2113807843,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2131","title":"Improved compatibility with react","body":"### What is the feature you are proposing?\n\n### Specific Purpose\r\n\r\nWrite the following in vite.config.ts to make the existing module for 'react' work\r\n\r\n```ts\r\nimport { defineConfig } from 'vite'\r\nimport path from 'node:path'\r\n\r\nexport default defineConfig({\r\n  resolve: {\r\n    alias: {\r\n      'react': path.join(__dirname, 'node_modules', 'hono', 'dist', 'jsx', 'dom'),\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n### Example\r\n\r\nThe following projects should be made to work\r\n\r\nhttps://github.com/usualoma/hono-jsx-dnd","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2113807843},{"id":2113812108,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2132","title":"feat(jsx/dom): more react staff","body":"Merging this PR will accomplish the purpose of #2131.\r\n\r\n### New staff members\r\n\r\n`useMemo`, `useLeyoutEffect`, `isValidElement`, `cloneElement`\r\n\r\n### Fixed\r\n\r\n#### `useContext`\r\n\r\nFixed the same problem with dom version as #2124\r\n\r\n#### `useEffect`\r\n\r\nAs in the original React, useEffect is now executed asynchronously after the DOM is rendered, rather than synchronously.\r\n\r\n### Enable to use 'hono/jsx/dom' for replacement of 'react'. \r\n\r\nYou can use dom-specific version of hooks and utils by importing from 'hono/jsx/dom' by 09da043\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2113812108},{"id":2113833173,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2133","title":"Drop HONO_COMPONENT feature","body":"### What is the feature you are proposing?\n\nHONO_COMPONENT was an idea to make hydration easier, but is no longer used. It would make more sense to write this process on the build system side. Therefore, I think this code should be removed before v4 is released.\r\n\r\nhttps://github.com/usualoma/hono/blob/61202eda1453da8265c076ae80665ccc3e2e6d21/src/jsx/index.ts#L29-L30","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2113833173},{"id":2114054431,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2134","title":"Same parameter name issue of TrieRouter","body":"### What version of Hono are you using?\r\n\r\n3.12.9\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { getRouterName } from 'hono/dev'\r\nimport { createMiddleware } from 'hono/factory'\r\nimport { TrieRouter } from 'hono/router/trie-router'\r\n\r\nconst middleware = createMiddleware(async (c, next) => {\r\n  console.log('in middleware', c.req.param())\r\n  await next()\r\n})\r\n\r\nconst app = new Hono({\r\n  router: new TrieRouter(),\r\n})\r\n\r\napp.use('/:id/:id2/comments', middleware)\r\napp.get('/posts/:id/comments', (c) => {\r\n  console.log('in handler', c.req.param())\r\n  return c.text(c.req.param('id'))\r\n})\r\n\r\nasync function test() {\r\n  const res = await app.request('/posts/123/comments')\r\n  console.log(res.status)\r\n}\r\n\r\ntest()\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\n```txt\r\nin middleware {\r\n  id: \"posts\",\r\n  id2: \"123\",\r\n}\r\nin handler {\r\n  id: \"123\",\r\n}\r\n```\r\n\r\n### What do you see instead?\r\n\r\n\r\n```txt\r\nin middleware {\r\n  id: \"123\",\r\n  id2: \"123\",\r\n}\r\nin handler {\r\n  id: \"123\",\r\n}\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2114054431},{"id":2114901632,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2136","title":"fix(trie-router): fix same parameter name issue","body":"Fixes #2134\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2114901632},{"id":2114954270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2137","title":"Merge main into v4","body":"Hi @usualoma !\r\n\r\nCould you merge `main` into `v4`? I can probably do it, but there will be a conflict at JSX things and maybe I will have an accident.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2114954270},{"id":2115954910,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2139","title":"refactor(jsx): Remove unused HONO_COMPONENT feature","body":"Fixes #2133\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2115954910},{"id":2115994511,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2140","title":"Types for Events","body":"### What is the feature you are proposing?\r\n\r\nWe want to have React-like TypeScript types for HTML events like a `React.ChangeEvent`.\r\n\r\nFor example, the simple one could be implemented as the following:\r\n\r\n```tsx\r\ninterface ChangeEvent<T = Element> {\r\n  target: EventTarget & T\r\n}\r\n\r\nconst Input = (\r\n  <input\r\n    type=\"checkbox\"\r\n    onChange={(e: ChangeEvent<HTMLInputElement>) => setFoo(e.target.checked)}\r\n  />\r\n)\r\n```\r\n\r\nThere are some event types other than `React.ChangeEvent`:\r\n\r\n```ts\r\ntype Props = {\r\n  onClick: (event: React.MouseEvent<HTMLInputElement>) => void\r\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n  onKeypress: (event: React.KeyboardEvent<HTMLInputElement>) => void\r\n  onBlur: (event: React.FocusEvent<HTMLInputElement>) => void\r\n  onFocus: (event: React.FocusEvent<HTMLInputElement>) => void\r\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void\r\n  onClickDiv: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\r\n}\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2115994511},{"id":2115999244,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2141","title":"`className` as `class`","body":"### What is the feature you are proposing?\n\nWe have been using `class` instead of `className`, but still want to use `className` as well for React compatibility.\r\n\r\nSo why not make `className` an alias to `class`? Specifically, `className=\"light\"` is converted to `class=\"light\"`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2115999244},{"id":2116011907,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2142","title":"Remove \"children\" from FC","body":"### What is the feature you are proposing?\n\n(Due to my lack of insight) FC no longer includes children since React 18, so I would like to exclude children from hono accordingly.\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts#L853\r\n\r\n```diff\r\ndiff --git a/src/jsx/index.ts b/src/jsx/index.ts\r\nindex 60b1eb1a..a1c052e7 100644\r\n--- a/src/jsx/index.ts\r\n+++ b/src/jsx/index.ts\r\n@@ -273,9 +273,7 @@ export const jsxFn = (\r\n   }\r\n }\r\n \r\n-export type FC<T = Props> = (\r\n-  props: T & { children?: Child }\r\n-) => HtmlEscapedString | Promise<HtmlEscapedString>\r\n+export type FC<T = Props> = (props: T) => HtmlEscapedString | Promise<HtmlEscapedString>\r\n \r\n const shallowEqual = (a: Props, b: Props): boolean => {\r\n   if (a === b) {\r\n\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2116011907},{"id":2116392888,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2143","title":"fix(html): Remove circular dependencies in `hono/html`","body":"# Why\r\nThere is a circular dependency between `src/helper/html/index.ts` and `src/utils/html.ts`. This PR removes this circular dependency by removing imports to helper files in utility files.\r\n\r\nI found this circular dependency while running Hono in [Expo API Routes](https://blog.expo.dev/rfc-api-routes-cce5a3b9f25d). Displaying warnings for node_modules dependencies is [a bug](https://github.com/expo/expo/issues/26613) in Expo but I believe it's good to remove circular dependencies in the first place. \r\n\r\n<img width=\"704\" alt=\"Screenshot 2024-02-03 at 18 31 40\" src=\"https://github.com/honojs/hono/assets/13040/4fe07f2f-42ed-4d0e-9948-f9c43029cd00\">\r\n\r\n# How\r\nMove the `raw` function to `src/utils/html.ts` and re-export `raw` in `src/helper/html/index.ts`\r\n\r\n# Test Plan\r\n- Run the following command to find circular dependencies warnings disappear after the change.\r\n```\r\nnpx dpdm --transform --no-tree ./src/helper/html/index.ts\r\n```\r\n<img width=\"816\" alt=\"Screenshot 2024-02-03 at 18 14 13\" src=\"https://github.com/honojs/hono/assets/13040/818c1182-925b-4096-8817-6796a1dd14f2\">\r\n\r\n- Tests for the `raw` remain in the `src/helper/html/index.ts` file so that we continue to test all public API surfaces there. \r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2116392888},{"id":2116441919,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2144","title":"refactor: run `prettier` and `linter`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2116441919},{"id":2116679094,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2145","title":"Merge main into v4","body":"Fixes #2137","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2116679094},{"id":2116692095,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2146","title":"feat(jsx): \"className\" is now an alias for \"class\"","body":"Fixes #2141\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2116692095},{"id":2117242254,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2148","title":"Regression: type error when using `param` validation and `.route`","body":"### What version of Hono are you using?\r\n\r\n3.12.10\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n[Link to TS Playground](https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAIgAt0JiBuAKFElkTgC8A1AQwBtgATdmaNjwEixAALkMAemYQeAWgBuXXv2jU64aPCTMh+QiVk8NNAMboAzvHZgwAJQgBXGAFMocALxw0rgO4oFAAUAJS0FmjWcJZOAEaOLu5ePv6BGKG05lbwBImWyTHxzm5QAHQA5q4wQcRSAFy8xAA0LBzcfAJQNWDsUOwgzSylELEAVq5m1Ug0cHC8dUPWUMBo5aFNNFghIS3slgCeaGZwEW4AHvCeAHwn6OcwpaOW6DWkwMTbmRFRtg7FrvlvL8EiVSrk3DUpM8QFU3qtBuCAWEaCj6NomKRjjgDKJJBApGZuK40DBTN94ITgMTLnBMQAeGD7MCuCC4ODA-6WK41D5fIkk0rQ2ErcoAbWIDRMAF1SgASSpTGZwHp9EALBBK2bzEhLEXEJVYTZhIA)\r\n\r\nWhen using `.route` method to attach routes and validators for `param`, `hc` infers params type as `never`:\r\n\r\n![CleanShot 2024-02-04 at 19 08 01@2x](https://github.com/honojs/hono/assets/16190582/92fec28c-2f34-4d1e-aa28-c3a60361ec2c)\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nThe input type for client should be `{ id: string }`, and not `never`\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nThis is a regression introduced in [`v3.12.9`](https://github.com/honojs/hono/releases/tag/v3.12.9) (confirmed by downgrading to `v3.12.8`). Probably PR to blame is #2122.\r\n\r\nThis type error only occurs when using `.route` method.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2117242254},{"id":2117280942,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2149","title":"TODO for releasing v4","body":"This is just like a note, it will be edited.\r\n\r\n- [x] Merge https://github.com/honojs/node-server/pull/135 for Node.js Adapter\r\n- [x] Update starter templates.\r\n- [x] Merge `v4` branch to `main`. #2167\r\n- [x] Merge v4 into main for the website. https://github.com/honojs/website/pull/235\r\n- [x] Write a migration guide. #2159\r\n- [x] Finish writing the v4 document for the website.\r\n- [x] Write a release note.\r\n- [x] Add new starter templates.\r\n- [x] ~~Remove some experimental flags.~~ => later\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2117280942},{"id":2117292904,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2150","title":"fix!(deno): put SSG helper into `helper.ts`","body":"It would be better to have that in `helper.ts` than in `middleware.ts`. We can use it like this:\r\n\r\n```ts\r\nimport { toSSG } from 'https://deno.land/x/hono/helper.ts'\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2117292904},{"id":2117309524,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2151","title":"refactor(jsx): Tidyup the types to be exported","body":"Tidyup and organize the type definitions exported from hono/jsx in src/jsx/types.ts.\r\n\r\nI don't think this will affect most users, but it could be a breaking change for a small percentage of users, so I think this should be included in a major version upgrade (v4).\r\n\r\n### New exported type\r\n\r\n* PropsWithChildren #2142\r\n\r\n### Changed types\r\n\r\n* Remove \"children\" from FC #2142\r\n* JSXNode\r\n    * The previous \"class as a value\" import is no longer available, and only \"type\" import is now available.\r\n        * `import { JSXNode } from 'hono/jsx'` is no longer available, only `import type { JSXNode } from 'hono/jsx'` is available.\r\n\r\n### No longer be exported\r\n\r\nUntil now, the types used internally were over-exported. With this PR change, types needed only internally should not be exported.\r\n\r\n* Props\r\n* JSXFragmentNode\r\n* jsxFn\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2117309524},{"id":2118460703,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2152","title":"fix(types): `MergeSchemePath` infers param types correctly","body":"Fixes #2148\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2118460703},{"id":2119489050,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2153","title":"Regression: type error when using `json` validation and route with `param` validation","body":"### What version of Hono are you using?\n\n3.12.11\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nhttps://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAIgAt0JiBuAKFElkTgC8A1AQwBtgATdmaNjwEixAALkMAemYQeAWgBuXXv2jU64aPCTMh+QiVk8NNAMboAzvHZgwAJQgBXGAFMocALxw0rgO4oFAAUAJS0FmjWcJZOAEaOLu5ePv6BGKG05lbwBImWyTHxzm5QAHSQ1kHEUgBcvMQANCwc3HwCUFVg7FDsII0spRCxAFauZjBBSDRwcLw1A9ZQwGgA5qENNFghIU1sKm3QVcOW6P3MgyNjE1Mz7OPA6PPnrmhOIEEA2sQAIgCiADK-AAqv36xAAgt9vsQALpwdj5CLWHabbZNBEATzQZjgETcAA94J4AHy49AEmClY7oKqkYDEbaZJE2OwJNz5by2BzFdylXJuKpSE4gVwwOmrfr81yWMI0OX0bRMUg4nAGUSSCBSMzcF4wUzM3E6tBEuDKgA8MAxYFcEFw8NZPMsxKqDKZRspwtF4pWXzqJhhpQAJBVrtM4F0eiB5ggwzM5iRFssVsQw1gNjNqWho7G4KnUVQgA\r\n\r\n![image](https://github.com/honojs/hono/assets/31007601/63f3feee-6e95-4bbe-9c66-f0ae61d15b74)\r\n\n\n### What is the expected behavior?\n\nThe `json` type for client should be `{ action: \"DELETE\" | \"ADD\" }`.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2119489050},{"id":2119649985,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2154","title":"fix(types): `MergeSchemaPath` infer inputs not only params","body":"Fixes #2153\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2119649985},{"id":2119896973,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2155","title":"Hono Client AppType broken after update ","body":"### What version of Hono are you using?\n\n3.12.11\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nSimply importing the result of `export type AppType = typeof app;` from the server project in a client project should trigger the error\n\n### What is the expected behavior?\n\nFully typed hono client\n\n### What do you see instead?\n\nType 'Hono<Env, MergeSchemaPath<ToSchema<\"get\", \"/:id\", { param: { id: string; }; }, { createdAt: string; id: number; position: number; userId: string; type: string; workoutId: number; } | undefined> & ToSchema<...> & ToSchema<...> & ToSchema<...> & ToSchema<...>, \"/activities\"> & ... 5 more ... & MergeSchemaPath<...>, \"/\">' does not satisfy the constraint 'Hono<any, any, any>'.\r\n  Property '#private' in type 'Hono' refers to a different member that cannot be accessed from within type 'Hono'.\r\n\r\n<img width=\"1449\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/7391612/a59f7426-edab-44d3-8954-742f25a3ff5a\">\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2119896973},{"id":2120665417,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2156","title":"aws-lambda / HTTP API V2 / broken req.url encoding","body":"### What version of Hono are you using?\n\n3.12.8\n\n### What runtime/platform is your app running on?\n\nAWS Lambda / Node 20 / API Gateway HTTP API V2\n\n### What steps can reproduce the bug?\n\nThe content of the Hono `req.url` is wrongly encoded which breaks the url!\r\n\r\n**Expample POST request:**\r\n`POST /RSC/%40id%2Fassets%2Frsf0.js%23save.txt`\r\n\r\n**wrong Result:** `req.url: /RSC/@id/assets/rsf0.js#save.txt`\r\n\r\n\n\n### What is the expected behavior?\n\n**expected:** `http://localhost/RSC/%40id%2Fassets%2Frsf0.js%23save.txt`\r\n\n\n### What do you see instead?\n\n**wrong:** `http://localhost/RSC/@id/assets/rsf0.js#save.txt`\r\n\n\n### Additional information\n\nThe problem stems from the already encoded url `rawPath` provided by the AWS API Gateway in the [JSON Event Format HTTP API V2](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html). This looks like a bug in the API Gateway HTTP API - specific to **Version 2.0** Events. \r\n\r\nI do not see any way to fix this problem on this layer :-(\r\nEncoding the whole path will produce a different broken result - e.g. `%2FRSC%2F%40id%2Fassets%2Frsf0.js%23save.txt`\r\n\r\nExample with API Gateway Event:\r\n```ts\r\nimport { handle } from 'hono/aws-lambda'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.post('*', (c) => {\r\n  return c.text(`c.req.url: \"${c.req.url}\"`)\r\n})\r\n\r\nconst handler = handle(app)\r\n\r\n// a simplified version of an original AWS API Gateway Event received in an AWS Lambda handler\r\nconst postEvent = (path:string)=>({\r\n  version: '2.0',\r\n  routeKey: '$default',\r\n  rawPath: path,\r\n  rawQueryString: '',\r\n  headers: {\r\n    'accept-encoding': 'gzip, deflate, br',\r\n    'content-length': '154',\r\n    'content-type': 'text/plain;charset=UTF-8',\r\n    host: 'yyy.execute-api.us-east-1.amazonaws.com',\r\n    origin: 'https://xxx.cloudfront.net',\r\n    'user-agent': 'Amazon CloudFront'\r\n  },\r\n  requestContext: {\r\n    domainName: 'yyy.execute-api.us-east-1.amazonaws.com',\r\n    domainPrefix: 'yyy',\r\n    http: {\r\n      method: 'POST',\r\n      path: path,\r\n      protocol: 'HTTP/1.1',\r\n      userAgent: 'Amazon CloudFront'\r\n    },\r\n  },\r\n  body: '',\r\n  isBase64Encoded: false\r\n})\r\n\r\nconst response =await handler(postEvent('/RSC/@id/assets/rsf0.js#save.txt'), {})\r\nconsole.log(response)\r\n\r\n```\r\n\r\n**response output:**\r\n```\r\n{\r\n  body: 'c.req.url: \"https://yyy.execute-api.us-east-1.amazonaws.com/RSC/@id/assets/rsf0.js#save.txt\"',\r\n  headers: { 'content-type': 'text/plain;charset=UTF-8' },\r\n  statusCode: 200,\r\n  isBase64Encoded: false\r\n}\r\n```\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2120665417},{"id":2120710290,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2157","title":"`viewTransition` should accept Promise","body":"### What version of Hono are you using?\n\n4.0.0-rc.4\n\n### What runtime/platform is your app running on?\n\nany\n\n### What steps can reproduce the bug?\n\n```tsx\r\nimport { useViewTransition, useState } from 'hono/jsx'\r\nimport { viewTransition } from 'hono/jsx/dom/css'\r\nimport { css, keyframes, Style } from 'hono/css'\r\n\r\nconst rotate = keyframes`\r\n  from {\r\n    rotate: 0deg;\r\n  }\r\n  to {\r\n    rotate: 360deg;\r\n  }\r\n`\r\n\r\nexport default function App() {\r\n  const [isUpdating, startViewTransition] = useViewTransition()\r\n  const [showLargeImage, setShowLargeImage] = useState(false)\r\n  const [transitionNameClass] = useState(() =>\r\n    viewTransition(css`\r\n      ::view-transition-old() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n      ::view-transition-new() {\r\n        animation: ${rotate} 2s ease-in-out;\r\n      }\r\n    `)\r\n  )\r\n  return (\r\n    <>\r\n      <Style />\r\n      <button onClick={() => startViewTransition(() => setShowLargeImage((state) => !state))}>Click!</button>\r\n      <div>\r\n        {!showLargeImage ? (\r\n          <img src=\"https://avatars.githubusercontent.com/u/98495527\" class={transitionNameClass} />\r\n        ) : (\r\n          <div\r\n            class={css`\r\n              ${transitionNameClass}\r\n              background: url('https://github.com/honojs/hono/blob/main/docs/images/hono-logo.png?raw=true');\r\n              background-size: contain;\r\n              background-repeat: no-repeat;\r\n              background-position: center;\r\n              width: 600px;\r\n              height: 600px;\r\n              position: relative;\r\n              ${isUpdating &&\r\n              css`\r\n                &:before {\r\n                  content: 'Loading...';\r\n                  position: absolute;\r\n                  top: 50%;\r\n                  left: 50%;\r\n                }\r\n              `}\r\n            `}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```\n\n### What is the expected behavior?\n\nType errors:\r\n\r\n<img width=\"563\" alt=\"Screenshot 2024-02-06 at 21 52 52\" src=\"https://github.com/honojs/hono/assets/10682/ca03f781-2a3a-4581-aa94-514dc5e67cea\">\r\n\n\n### What do you see instead?\n\nDon't throw the error.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2120710290},{"id":2120926277,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2158","title":"Type Inference Not Working with `@hono/zod-openapi` in RPC Mode","body":"### What version of Hono are you using?\r\n\r\n^3.12.9\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js(Next.js)\r\n\r\n### What steps can reproduce the bug?\r\n\r\n\r\n1. Define a route using `@hono/zod-openapi` that includes path parameters, as shown in the code snippet below.\r\n2. Attempt to use the defined route with Hono's RPC mode client.\r\n3. Observe that the type completion for `param` in the `$get` method does not work as expected, resulting in a `never` type being inferred.\r\n\r\n\r\n```ts\r\n// Routing Definition\r\nconst app = new OpenAPIHono().basePath(\"/users\").openapi(\r\n  createRoute({\r\n    method: \"get\",\r\n    path: \"/:id/exist\",\r\n    responses: {\r\n      200: {\r\n        content: {\r\n          \"application/json\": {\r\n            schema: z.boolean(),\r\n          },\r\n        },\r\n      },\r\n    },\r\n    request: {\r\n      params: z.object({\r\n        id: z.string(),\r\n      }),\r\n    },\r\n  }),\r\n  async (c) => {\r\n    const id = c.req.param(\"id\");\r\n    const userExists = await new UserServerService()\r\n      .getUserById(id)\r\n      .then((user) => !!user)\r\n      .catch(() => false);\r\n    return c.json(userExists);\r\n  },\r\n);\r\n\r\ntype AppType = typeof app;\r\n\r\n// Use in RPC mode on the client\r\nconst client = hc<AppType>('/').users[\":id\"].exist.$get({\r\n  param: { id: \"1\" } as never, // The type does not work here and becomes `param: never`\r\n});\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nThe type of the argument for `$get` should be inferred to require `id` in `param`.\r\n\r\n### What do you see instead?\r\n\r\nWhen executing `hc<AppType>('/').users[\":id\"].exist.$get`, the type of the argument for `$get` is inferred as `param: never`, indicating that the expected type completion is not functioning.\r\n\r\n### Additional information\r\n\r\nWhen using `@hono/zod-openapi` with Hono's RPC mode, the type inference for param does not seem to work as expected. This issue does not occur with standard Hono routing; it is specific to when `@hono/zod-openapi` is utilized.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2120926277},{"id":2120959363,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2159","title":"docs: update the migration guide for releasing v4","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2120959363},{"id":2122132877,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2161","title":"Fix/function for attribute","body":"Like React's `renderToString()`, the value should be ignored if the key starts with \"on\" and an error should occur if the key does not.\r\n\r\nhttps://github.com/honojs/hono/compare/v4...usualoma:hono:fix/function-for-attribute?expand=1#diff-bbb085cf2da64bb28cf34775197b5fb966c1f425b9d12087a4f6e892a7324557R296-R308\r\n\r\nDepending on the configuration of the application, users may want to pass functions as strings. However, it is not a good behavior for hono to automatically convert functions to strings, since the stringified function may unintentionally contain server-side code. If an application needs to stringify functions, it should explicitly stringify them using `toString()`.\r\n\r\n```tsx\r\n<button data-handler={((ev) => { clientSideCode(ev) }).toString()}>Click</button>\r\n```\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2122132877},{"id":2122199471,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2162","title":"fix(jsx): The third argument of jsx(), key, is optional","body":"As shown in the following example, if key is unspecified, the third argument is not passed, so it is correct that it is optional.\r\n\r\n![image](https://github.com/honojs/hono/assets/30598/7186880e-3143-475a-9cb1-a7589d3523ca)\r\nhttps://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2122199471},{"id":2122332119,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2163","title":"Inconsistent Request Body Caching Between c.req.json() and Validator Middleware","body":"### What version of Hono are you using?\r\n\r\n3.12.11\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI've encountered an issue with how Hono caches the request body in different formats, leading to unexpected behavior when using middlewares in a specific order. \r\n\r\nWhen one middleware calls `c.req.json()`, it updates `bodyCache[json]` without also updating `bodyCache[arrayBuffer]`. \r\nIf we later use the `validator` middleware, which expects the `arrayBuffer` to be cached, it results in an error for a malformed request.\r\n\r\n```ts\r\napp.post(\r\n  '/test',\r\n  async (c, next) => {\r\n    const body = await c.req.json();\r\n    await next();\r\n  },\r\n  validator('json', (value, c) => {\r\n    return value;\r\n  }),\r\n  async (c) => {\r\n    return c.json({ message: 'OK' }, 200);\r\n  },\r\n);\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe request passes through both middlewares without issues, with the validator correctly validating the parsed JSON.\r\n\r\n### What do you see instead?\r\n\r\nReceive a 400 Bad Request error.\r\n```\r\n[  <-- POST /TEST]: undefined\r\n✘ [ERROR] Error: Malformed JSON in request body\r\n```\r\n\r\n### Additional information\r\n\r\nThe validator middleware throws an error indicating a malformed request body, despite the body being valid JSON. This seems to occur because c.req.json() does not update bodyCache[arrayBuffer], leading to a mismatch in the cached body data.\r\n\r\n```ts\r\n// request.ts\r\n  private cachedBody = (key: keyof Body) => {\r\n// ...\r\n    if (bodyCache.arrayBuffer) {\r\n      return (async () => {\r\n        return await new Response(bodyCache.arrayBuffer)[key]()\r\n      })()\r\n    }\r\n    return (bodyCache[key] = raw[key]()) // doesn't update arrayBuffer\r\n  }\r\n```\r\n\r\n```ts\r\n// validator/validator.ts\r\n        /**\r\n         * Get the arrayBuffer first, create JSON object via Response,\r\n         * and cache the arrayBuffer in the c.req.bodyCache.\r\n         */\r\n        try {\r\n          const arrayBuffer = c.req.bodyCache.arrayBuffer ?? (await c.req.raw.arrayBuffer()) // Uses arrayBuffer\r\n          value = await new Response(arrayBuffer).json()\r\n          c.req.bodyCache.json = value\r\n          c.req.bodyCache.arrayBuffer = arrayBuffer\r\n        } catch {\r\n          console.error('Error: Malformed JSON in request body')\r\n          return c.json(\r\n            {\r\n              success: false,\r\n              message: 'Malformed JSON in request body',\r\n            },\r\n            400\r\n          )\r\n        }\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2122332119},{"id":2122893992,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2164","title":"Throwing (unhandled) exception in streamSSE brings down server","body":"### What version of Hono are you using?\n\n3.12.11\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\n```ts\r\napp.get(\"/sse-error\", (c) =>\r\n  streamSSE(c, async (stream) => {\r\n    stream.writeSSE({ data: \"Hello\" });\r\n    throw new Error(\"Test error\");\r\n  }),\r\n);\r\n```\r\n\r\nFrom the client the first call looks good, but the second one can't connect\r\n\r\n```\r\n$ curl http://localhost:8000/sse-error\r\ndata: Hello\r\n\r\n$ curl http://localhost:8000/sse-error\r\ncurl: (7) Failed to connect to localhost port 8000 after 0 ms: Couldn't connect to server\r\n```\r\n\r\nThe log on the server\r\n```\r\n  <-- GET /sse-error\r\n  --> GET /sse-error 200 6ms\r\n/project/src/index.ts:114\r\n    throw new Error(\"Test error\");\r\n          ^\r\n\r\n\r\nError: Test error\r\n    at <anonymous> (/project/src/index.ts:114:11)\r\n    at streamSSE (file:///project/node_modules/hono/dist/helper/streaming/sse.js:24:3)\r\n    at <anonymous> (/project/src/index.ts:112:3)\r\n    at dispatch (file:///project/node_modules/hono/dist/compose.js:29:23)\r\n    at file:///project/node_modules/hono/dist/compose.js:30:20\r\n    at logger2 (file:///project/node_modules/hono/dist/middleware/logger/index.js:35:11)\r\n    at dispatch (file:///project/node_modules/hono/dist/compose.js:29:23)\r\n    at file:///project/node_modules/hono/dist/compose.js:6:12\r\n    at file:///project/node_modules/hono/dist/hono-base.js:243:31\r\n    at Hono.dispatch (file:///project/node_modules/hono/dist/hono-base.js:253:7)\r\n\r\nNode.js v20.9.0\r\n\r\n```\n\n### What is the expected behavior?\n\nI expect the server to keep on running even if I throw an exception. I will make sure that I catch all exceptions going forward, but still I think Hono could be more robust.\n\n### What do you see instead?\n\nThe server stops responding.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2122893992},{"id":2122962253,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2165","title":"Feat/more jsx event","body":"fixes #2140\r\n\r\n### Event types\r\n\r\nIn hono, handlers are registered directly with `addEventListener`, so we defined the raw Event as it is.\r\nThe list of events is referenced below.\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement#events\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#events\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/input_event\r\n\r\n\r\nSome events may be missing, in which case you can add your own events.\r\n\r\n```ts\r\ndeclare global {\r\n  namespace Hono {\r\n    interface EventAttributes {\r\n      onMyCustomEvent?: (event: Event) => void\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Support event capture phase\r\n\r\nAs with React, if the event name ends with `Capture`, it is considered a capture phase handler.\r\n\r\n### Names are now strictly handled\r\n\r\nReact requires the `on` to be followed by an uppercase letter, as in `onClick`. This PR will add a type, and I don't think any user will write it like `onclick`, so I think it would be less confusing to adapt hono to React as well.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2122962253},{"id":2123519038,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2167","title":"v4","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2123519038},{"id":2123580103,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2168","title":"perf(mime): make `getExtension()` fast","body":"`find` method is generally slower than for loop.\r\nThis PR replace it with for loop. More than 10x faster.\r\n## Benchmark on Deno\r\n<details>\r\n\r\n<summary>Source code</summary>\r\n\r\n\r\n```ts\r\n// Run `deno bench`\r\n\r\nexport const getExtension1 = (mimeType: string): string | undefined => {\r\n  return Object.keys(baseMimes).find((ext) => baseMimes[ext] === mimeType);\r\n};\r\nexport const getExtension2 = (mimeType: string): string | undefined => {\r\n  for (const ext in baseMimes) {\r\n    if (baseMimes[ext] === mimeType) {\r\n      return ext;\r\n    }\r\n  }\r\n};\r\nconst baseMimes: Record<string, string> = {\r\n  aac: \"audio/aac\",\r\n  avi: \"video/x-msvideo\",\r\n  avif: \"image/avif\",\r\n  av1: \"video/av1\",\r\n  bin: \"application/octet-stream\",\r\n  bmp: \"image/bmp\",\r\n  css: \"text/css\",\r\n  csv: \"text/csv\",\r\n  eot: \"application/vnd.ms-fontobject\",\r\n  epub: \"application/epub+zip\",\r\n  gif: \"image/gif\",\r\n  gz: \"application/gzip\",\r\n  htm: \"text/html\",\r\n  html: \"text/html\",\r\n  ico: \"image/x-icon\",\r\n  ics: \"text/calendar\",\r\n  jpeg: \"image/jpeg\",\r\n  jpg: \"image/jpeg\",\r\n  js: \"text/javascript\",\r\n  json: \"application/json\",\r\n  jsonld: \"application/ld+json\",\r\n  map: \"application/json\",\r\n  mid: \"audio/x-midi\",\r\n  midi: \"audio/x-midi\",\r\n  mjs: \"text/javascript\",\r\n  mp3: \"audio/mpeg\",\r\n  mp4: \"video/mp4\",\r\n  mpeg: \"video/mpeg\",\r\n  oga: \"audio/ogg\",\r\n  ogv: \"video/ogg\",\r\n  ogx: \"application/ogg\",\r\n  opus: \"audio/opus\",\r\n  otf: \"font/otf\",\r\n  pdf: \"application/pdf\",\r\n  png: \"image/png\",\r\n  rtf: \"application/rtf\",\r\n  svg: \"image/svg+xml\",\r\n  tif: \"image/tiff\",\r\n  tiff: \"image/tiff\",\r\n  ts: \"video/mp2t\",\r\n  ttf: \"font/ttf\",\r\n  txt: \"text/plain\",\r\n  wasm: \"application/wasm\",\r\n  webm: \"video/webm\",\r\n  weba: \"audio/webm\",\r\n  webp: \"image/webp\",\r\n  woff: \"font/woff\",\r\n  woff2: \"font/woff2\",\r\n  xhtml: \"application/xhtml+xml\",\r\n  xml: \"application/xml\",\r\n  zip: \"application/zip\",\r\n  \"3gp\": \"video/3gpp\",\r\n  \"3g2\": \"video/3gpp2\",\r\n  gltf: \"model/gltf+json\",\r\n  glb: \"model/gltf-binary\",\r\n};\r\n\r\nDeno.bench(\"Old: getExtension() find `text/html`\", () => {\r\n  getExtension1(\"text/html\");\r\n});\r\nDeno.bench(\"New: getExtension() find `text/html`\", () => {\r\n  getExtension2(\"text/html\");\r\n});\r\nDeno.bench(\"Old: getExtension() find default non-existent extensions\", () => {\r\n  getExtension1(\"hono/hono\");\r\n});\r\nDeno.bench(\"New: getExtension() find default non-existent extensions\", () => {\r\n  getExtension2(\"hono/hono\");\r\n});\r\n```\r\n\r\n</details>\r\n\r\n```\r\nbenchmark                                                     time (avg)        iter/s             (min … max)       p75       p99      p995\r\n-------------------------------------------------------------------------------------------------------------- -----------------------------\r\nOld: getExtension() find `text/html`                         317.18 ns/iter   3,152,772.1  (287.25 ns … 456.3 ns)  328.2 ns 436.62 ns  456.3 ns\r\nNew: getExtension() find `text/html`                          26.67 ns/iter  37,496,954.0   (24.54 ns … 69.92 ns)   25.6 ns  59.25 ns  62.88 ns\r\nOld: getExtension() find default non-existent extensions       1.15 µs/iter     871,974.7     (1.07 µs … 2.56 µs)   1.13 µs   2.56 µs   2.56 µs\r\nNew: getExtension() find default non-existent extensions      96.86 ns/iter  10,323,689.8  (91.29 ns … 172.49 ns)  95.53 ns 160.97 ns 169.22 ns\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2123580103},{"id":2124342881,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2169","title":"PoC: feat(ssg): generate files concurrently","body":"This PR refers to v4, but I believe the merge to v4 can be done at a later date.\r\n\r\n### Overview\r\n\r\n#2013 is great. However, in SSG, as well as requests to external APIs, writing to the file system is also a heavy process, so I think it would be better to parallelize everything, including writing to the file system. Also in v4, the SSG feature reads all pages into memory before writing them out, but it would be preferable to be able to parallelize the generation and writing so that not all pages are read.\r\n\r\nIn this PR, the following number of requests are processed in parallel at the same time.\r\nhttps://github.com/honojs/hono/compare/v4...usualoma:hono:feat/ssg-generator?expand=1#diff-5bc74b06798a0aee17368e4fb5a84c845e66631cab1e30a35342a8b5a4f7d545R1\r\n\r\n### Usage\r\n\r\n```ts\r\ntoSSG(app, fs) // Default number of parallelism\r\n```\r\n\r\n```ts\r\ntoSSG(app, fs, {\r\n  concurrency: 2,\r\n}) // Change the number of parallels to 2\r\n```\r\n\r\n\r\n### Throttling of external API calls\r\n\r\nWhen it comes to external API calls, I don't think limiting the number of concurrent executions is inherently the job of the SSG. I think we should use something like `createPool()` added in this PR to limit it when calling the fetch API. \r\n\r\n```ts\r\nconst fetchPoolMap: Record<string, Pool> = {}\r\n// maximum 2 fetches per host at the same time\r\nconst throttledFetch = async (url: string, init?: RequestInit) => {\r\n  const host = new URL(url).host\r\n  const pool = fetchPoolMap[host] ||= createPool({ concurrency: 2 })\r\n  return pool.run(() => fetch(url, init))\r\n}\r\n```\r\n\r\nNevertheless, well, it may be useful to be able to limit the SSG when it is a hassle to set up the `fetch` yourself.\r\n\r\n### Benchmark - slow external API\r\n\r\n<details>\r\n<summary>code</summary>\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx */\r\nimport fs from 'fs/promises'\r\nimport { Hono } from './src'\r\nimport { toSSG, ssgParams } from './src/helper/ssg'\r\nimport { jsxRenderer } from './src/middleware/jsx-renderer'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      docType: true,\r\n    }\r\n  )\r\n)\r\n\r\nconst getShops = async () => {\r\n  await new Promise((resolve) => setTimeout(resolve, 1000))\r\n  return [\r\n    { id: '1', name: 'Shop 1' },\r\n    { id: '2', name: 'Shop 2' },\r\n    { id: '3', name: 'Shop 3' },\r\n    { id: '4', name: 'Shop 4' },\r\n    { id: '5', name: 'Shop 5' },\r\n    { id: '6', name: 'Shop 6' },\r\n    { id: '7', name: 'Shop 7' },\r\n    { id: '8', name: 'Shop 8' },\r\n    { id: '9', name: 'Shop 9' },\r\n    { id: '10', name: 'Shop 10' },\r\n  ]\r\n}\r\n\r\nconst getShop = async (id: string) => {\r\n  await new Promise((resolve) => setTimeout(resolve, 1000))\r\n  return (await getShops()).find((shop) => shop.id === id)\r\n}\r\n\r\napp.get(\r\n  '/shops/:id',\r\n  ssgParams(async () => {\r\n    const shops = await getShops()\r\n    return shops.map((shop) => ({ id: shop.id }))\r\n  }),\r\n  async (c) => {\r\n    const shop = await getShop(c.req.param('id'))\r\n    if (!shop) {\r\n      return c.notFound()\r\n    }\r\n    return c.render(\r\n      <div>\r\n        <h1>{shop.name}</h1>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\ntoSSG(app, fs)\r\n```\r\n</details>\r\n\r\n```\r\n$ npx esbuild --platform=node --bundle ssg-app.tsx | time node # with this PR\r\nnode  0.06s user 0.04s system 2% cpu 3.765 total\r\n$ npx esbuild --platform=node --bundle ssg-app.tsx | time node # v4\r\nnode  0.12s user 0.05s system 0% cpu 33.748 total\r\n```\r\n\r\n\r\n### Benchmark - large site\r\n\r\n<details>\r\n<summary>code</summary>\r\n\r\n```ts\r\n/** @jsxRuntime automatic @jsxImportSource ./src/jsx */\r\nimport fs from 'fs/promises'\r\nimport { Hono } from './src'\r\nimport { toSSG, ssgParams } from './src/helper/ssg'\r\nimport { jsxRenderer } from './src/middleware/jsx-renderer'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '*',\r\n  jsxRenderer(\r\n    ({ children }) => {\r\n      return (\r\n        <html>\r\n          <body>{children}</body>\r\n        </html>\r\n      )\r\n    },\r\n    {\r\n      docType: true,\r\n    }\r\n  )\r\n)\r\n\r\nconst shops = new Array(10000).fill(0).map((_, i) => ({ id: String(i + 1), name: `Shop ${i + 1}` }))\r\nconst getShops = async () => {\r\n  return shops\r\n}\r\n\r\nconst getShop = async (id: string) => {\r\n  return (await getShops()).find((shop) => shop.id === id)\r\n}\r\n\r\napp.get(\r\n  '/shops/:id',\r\n  ssgParams(async () => {\r\n    const shops = await getShops()\r\n    return shops.map((shop) => ({ id: shop.id }))\r\n  }),\r\n  async (c) => {\r\n    const shop = await getShop(c.req.param('id'))\r\n    if (!shop) {\r\n      return c.notFound()\r\n    }\r\n    return c.render(\r\n      <div>\r\n        <h1>{shop.name}</h1>\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\ntoSSG(app, fs)\r\n```\r\n</details>\r\n\r\n```\r\n$ npx esbuild --platform=node --bundle ssg-app.tsx | time node # with this PR\r\nnode  1.44s user 2.37s system 139% cpu 2.733 total\r\n$ npx esbuild --platform=node --bundle ssg-app.tsx | time node # v4\r\nnode  19.70s user 5.25s system 218% cpu 11.410 total\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2124342881},{"id":2124746985,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2170","title":"Add a \"cause\" option to HTTPException","body":"### What is the feature you are proposing?\n\nThe JavaScript Error class can be passed the [cause option](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause).\r\nThis is a property that indicates the cause of the error and is used to catch the error and construct the error including the original error when it is thrown again.\r\n\r\nThe [HTTPException class](https://github.com/honojs/hono/blob/main/src/http-exception.ts) defined by Hono does not have a cause property.\r\nThis makes it impossible for monitoring tools such as Sentry to determine the detailed cause of the error when throwing an HTTPException error.\r\nIt would be easier to debug if the cause property could be passed to HTTPException as well.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2124746985},{"id":2125925152,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2172","title":"Allow sending `retry` for SSE connection","body":"### What is the feature you are proposing?\r\n\r\nAdding a `retry` field to the SSEMessage interface, which Hono has defined as the following:\r\n\r\n```\r\nexport interface SSEMessage {\r\n    data: string;\r\n    event?: string;\r\n    id?: string;\r\n}\r\n```\r\n\r\nThis interface is incomplete, as there is also [a `retry` field](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#retry) (also, here's a [link to the actual standard](https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation)).","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2125925152},{"id":2126230435,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2174","title":"WIP: refactor(ssg): invoke callback in ssgParams only once","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126230435},{"id":2126236765,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2175","title":"Invoke callback for `ssgParams()` only once","body":"### What is the feature you are proposing?\r\n\r\nSame issue as @nakasyou mentions below, but now `ssgParams()` is pure middleware and also not handling special skipping internally, so it is called many times during SSG.\r\nhttps://github.com/honojs/hono/pull/2169#issuecomment-1934040823\r\n\r\nI think the following tests need to be success (now it will fail)\r\n\r\n```ts\r\ndescribe('ssgParams', () => {\r\n  it('callback', async() => {\r\n    const app = new Hono()\r\n    const cb = vi.fn(() => [{ post: '1' }, { post: '2' }])\r\n    app.get(\r\n      '/post/:post',\r\n      ssgParams(cb),\r\n      (c) => c.html(<h1>{c.req.param('post')}</h1>)\r\n    )\r\n    const fsMock: FileSystemModule = {\r\n      writeFile: vi.fn(() => Promise.resolve()),\r\n      mkdir: vi.fn(() => Promise.resolve()),\r\n    }\r\n    await toSSG(app, fsMock)\r\n\r\n    expect(cb).toHaveBeenCalledTimes(1)\r\n  })\r\n})\r\n```\r\n\r\n### Does `ssgParams()` need to be a REAL middleware?\r\n\r\nI understand that it is better to have it in `app.get(...)` for the appearance of the definition. However, if it functions as REAL middleware, it will be called on every request at the time of creation, which is a useless overhead.\r\n\r\nI think it would be better to introduce the concept of \"PSEUDO middleware\" in hono and solve the problem as shown in the following PR. The test passed without any major changes.\r\n\r\n#2174","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126236765},{"id":2126394048,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2176","title":"Improve `onlySSG()`","body":"### What is the feature you are proposing?\n\nSince request headers can be arbitrarily specified by visitors from the outside, there is a possibility that information that you do not want to disclose will be made public.\r\n\r\n```ts\r\nimport { Hono } from './src'\r\nimport { onlySSG } from './src/helper/ssg'\r\n\r\nconst app = new Hono()\r\napp.get('/only-ssg', onlySSG(), (c) => c.text('This is only for SSG'))\r\n\r\nexport default app\r\n```\r\n\r\n```\r\n$ curl http://localhost:3000/only-ssg\r\n404 Not Found\r\n$ curl -H 'x-hono-ssg: true' http://localhost:3000/only-ssg\r\nThis is only for SS\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126394048},{"id":2126404195,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2177","title":"refactor(ssh): create request from saved requestInit in order to avoid memory leak warnings","body":"Unfortunately, in nodejs, when a Request object is passed to requestInit, `req.signal.addEventlistener()` is called and events are added. Something similar happens with `req.clone()`.\r\n\r\nhttps://github.com/nodejs/undici/blob/0a069ab1f2d111b8e74f2d444d7f5678e302f39d/lib/fetch/request.js#L113\r\nhttps://github.com/nodejs/undici/blob/0a069ab1f2d111b8e74f2d444d7f5678e302f39d/lib/fetch/request.js#L759\r\n\r\nThis would result in the following warning output if there were about 1,000 pages in a single routing. To avoid this problem, we would prefer to copy only the \"headers\" and \"method\".\r\n\r\n```\r\n...\r\n(node:33127) MaxListenersExceededWarning: Possible EventTarget memory leak detected. 996 abort listeners added to [AbortSignal]. Use events.setMaxListeners() to increase limit\r\n(node:33127) MaxListenersExceededWarning: Possible EventTarget memory leak detected. 997 abort listeners added to [AbortSignal]. Use events.setMaxListeners() to increase limit\r\n(node:33127) MaxListenersExceededWarning: Possible EventTarget memory leak detected. 998 abort listeners added to [AbortSignal]. Use events.setMaxListeners() to increase limit\r\n(node:33127) MaxListenersExceededWarning: Possible EventTarget memory leak detected. 999 abort listeners added to [AbortSignal]. Use events.setMaxListeners() to increase limit\r\n(node:33127) MaxListenersExceededWarning: Possible EventTarget memory leak detected. 1000 abort listeners added to [AbortSignal]. Use events.setMaxListeners() to increase limit\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126404195},{"id":2126408971,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2178","title":"WIP: refactor(ssg): invoke callback in ssgParams only once - 2","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126408971},{"id":2126808527,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2179","title":"refactor(ssg): check `c.env` variables to disable/enable SSG","body":"Fixes #2176\r\n\r\n### refactor(ssg): generate static files only for GET or ALL routes\r\n\r\nOnly GET and METHOD_NAME_ALL will be output. I don't think this will be disputed.\r\n\r\n### Introduce `isSSGContext()`\r\n\r\nAdded a utility function to check that the context is an SSG context.\r\n\r\n```\r\napp.get('/', (c) => c.html(<h1>{isSSGContext(c) ? 'SSG' : 'noSSG'}</h1>))\r\n```\r\n\r\n### use environment variable and special response object to disable/enable SSG\r\n\r\nThe header-based approach is not a bad one, but should not be used because visitors may insert headers, or the headers may reveal more information than necessary. Instead, environment variables and objects can be used to determine whether they are enabled or disabled.\r\n\r\nThe following is excluded from this PR, as they appear to be issues currently handled by `afterResponseHook`.\r\n\r\n<del>\r\n### throw error when fetch failed\r\n\r\nIf the status code is not 200, it should be an error. There may be cases where it is better to continue without exiting, but I think it would be better to add that function in another PR.\r\n\r\n</del>\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126808527},{"id":2126823100,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2180","title":"SSG: If the status code is anything other than 200, we should raise an error by default","body":"### What is the feature you are proposing?\r\n\r\nEven now, `afterResponseHook` can be used to check status codes and process errors, but by default, processing continues with any status code other than 200. In general, if a request for SSG returns anything other than 200, an error should be reported. (Ignoring it and continuing is also not a good idea.)","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2126823100},{"id":2127045742,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2181","title":"refactor(ssg): filter SSG Route","body":"Note: This overlaps with some aspects of the issue discussed here: https://github.com/honojs/hono/pull/2179.\r\n\r\nWe have ceased relying on inspectRoute and instead are filtering using a custom method for the following reasons.\r\n\r\n1. Unnecessary information: Information such as Middleware and HandlerName is not needed. \r\n2. Avoiding bloat in fetchContentRoutes: If we are to apply filters for isMiddleware as well as for GET and ALL methods, it is more efficient to filter right from the start.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2127045742},{"id":2127268068,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2182","title":"Can't Run Cloudflare Pages Template On Fresh Initialization on Windows","body":"### What version of Hono are you using?\r\n\r\n4.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Pages\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```bash\r\n$ npm create hono@latest # create a new cloudflare-pages template hono app\r\n\r\ncreate-hono version 0.3.2\r\n√ Target directory ... test\r\n√ Which template do you want to use? » cloudflare-pages\r\ncloned honojs/starter#main to ${pwd}/test\r\n\r\n$ cd test # navigate to the folder\r\n$ npm i\r\n$ npm run build # create the `/dist/` directory for preview\r\n$ npm run preview\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe worker should work locally and it should run successfully and let me `GET http://127.0.0.1:8788` to return a `<h1>Hello!</h1>`.\r\n\r\n### What do you see instead?\r\n\r\nAn error stating `service core:user:worker: Uncaught Error: Can't import modules from ['/srcindex.tsx','/appserver.ts']`.\r\n\r\nHere are my logs:\r\n````bash\r\n$ npm run preview\r\n\r\n> preview\r\n> wrangler pages dev dist\r\n\r\n▲ [WARNING] No compatibility_date was specified. Using today's date: 2024-02-09.\r\n\r\n  Pass it in your terminal:\r\n  ```\r\n  --compatibility-date=2024-02-09\r\n  ```\r\n  See https://developers.cloudflare.com/workers/platform/compatibility-dates/ for more information.\r\n\r\n\r\n✨ Compiled Worker successfully\r\n ⛅️ wrangler 3.28.1\r\n-------------------\r\n⎔ Starting local server...\r\n[wrangler:inf] Ready on http://127.0.0.1:8788\r\nX [ERROR] service core:user:worker: Uncaught Error: Can't import modules from ['/srcindex.tsx','/appserver.ts']\r\n\r\n    at null.<anonymous> (bundledWorker-0.49025778765513106.js:904:9)\r\n````\r\n\r\n### Additional information\r\n\r\nI was originally testing it on Windows, but after switching to my Ubuntu WSL development environment, deleting `node_modules` and doing `npm i` again, I managed to make it work.\r\n\r\nPerhaps there is a compatibility issue with Windows machines, for anyone getting the same error as me, try initializing the project on a Linux-based environment (delete `node_modules` and reinstall) and see if the issue still persists.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2127268068},{"id":2127919551,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2184","title":"Docker setup throwing : error TS2307: Cannot find module 'node:http' or its corresponding type declarations.","body":"### What version of Hono are you using?\n\n4.0.0\n\n### What runtime/platform is your app running on?\n\nNode.js\n\n### What steps can reproduce the bug?\n\nFollow the documentation on this page:\r\nhttps://hono.dev/getting-started/nodejs\r\n\r\n```bash\r\nnpm create hono@latest my-app\r\n```\r\n\r\n```bash\r\ncd my-app\r\nnpm i\r\n```\r\n\r\nYou will have this in your index.ts\r\n```javascript\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello Hono!')\r\n})\r\n\r\nconst port = 3005\r\nconsole.log(`Server is running on port ${port}`)\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port\r\n})\r\n\r\n```\r\n\r\nCreating the Dockerfile\r\n```yml\r\nFROM node:20-alpine AS base\r\n\r\nFROM base AS builder\r\n\r\nRUN apk add --no-cache libc6-compat\r\nWORKDIR /app\r\n\r\nCOPY package*json tsconfig.json src ./\r\n\r\nRUN npm install -g npm@10.4.0\r\n\r\nRUN npm i && \\\r\n    npm run build && \\\r\n    npm prune --production\r\n\r\nFROM base AS runner\r\nWORKDIR /app\r\n\r\nRUN addgroup --system --gid 1001 nodejs\r\nRUN adduser --system --uid 1001 hono\r\n\r\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\r\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\r\n\r\nUSER hono\r\nEXPOSE 3000\r\n\r\nCMD [\"node\", \"/app/dist/index.js\"]\r\n```\r\n\r\nThe following steps shall be taken in advance.\r\n\r\nAdd \"outDir\": \". /dist\" to the compilerOptions section tsconfig.json.\r\nAdd \"exclude\": [\"node_modules\"] to tsconfig.json.\r\nAdd \"build\": \"tsc\" to script section of package.json.\r\nRun npm install typescript --save-dev.\r\n\r\n\r\nWhen you finally go to create the docker image with\r\n```bash\r\ndocker build -t hono-docker .\r\n```\r\n\r\nYou will get the error:\r\n```log\r\n > [builder 4/4] RUN npm ci &&     npm run build &&     npm prune --production:\r\n1.615 \r\n1.615 added 11 packages, and audited 12 packages in 1s\r\n1.615 \r\n1.615 2 packages are looking for funding\r\n1.615   run `npm fund` for details\r\n1.615 \r\n1.615 found 0 vulnerabilities\r\n1.616 npm notice \r\n1.616 npm notice New minor version of npm available! 10.2.4 -> 10.4.0\r\n1.616 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v10.4.0>\r\n1.616 npm notice Run `npm install -g npm@10.4.0` to update!\r\n1.616 npm notice \r\n1.742 \r\n1.742 > build\r\n1.742 > tsc\r\n1.742 \r\n2.555 node_modules/@hono/node-server/dist/listener.d.ts(1,49): error TS2307: Cannot find module 'node:http' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/listener.d.ts(2,57): error TS2307: Cannot find module 'node:http2' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/server.d.ts(1,29): error TS2307: Cannot find module 'node:net' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/types.d.ts(1,105): error TS2307: Cannot find module 'node:http' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/types.d.ts(2,196): error TS2307: Cannot find module 'node:http2' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/types.d.ts(3,82): error TS2307: Cannot find module 'node:https' or its corresponding type declarations.\r\n2.555 node_modules/hono/dist/types/context.d.ts(54,5): error TS18028: Private identifiers are only available when targeting ECMAScript 2015 and higher.\r\n2.555 node_modules/hono/dist/types/context.d.ts(134,5): error TS2300: Duplicate identifier 'render'.\r\n2.556 node_modules/hono/dist/types/hono-base.d.ts(58,5): error TS18028: Private identifiers are only available when targeting ECMAScript 2015 and higher.\r\n2.556 node_modules/hono/dist/types/request.d.ts(16,5): error TS18028: Private identifiers are only available when targeting ECMAScript 2015 and higher.\r\n------\r\nDockerfile:10\r\n--------------------\r\n   9 |     \r\n  10 | >>> RUN npm ci && \\\r\n  11 | >>>     npm run build && \\\r\n  12 | >>>     npm prune --production\r\n  13 |     \r\n--------------------\r\nERROR: failed to solve: process \"/bin/sh -c npm ci &&     npm run build &&     npm prune --production\" did not complete successfully: exit code: 2\r\n\r\nView build details: docker-desktop://dashboard/build/desktop-linux/desktop-linux/4azjzio33qpvfftx7cblxkp8j\r\n```\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2127919551},{"id":2127920593,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2185","title":"Docker setup throwing : error TS2307: Cannot find module 'node:http' or its corresponding type declarations.","body":"### What version of Hono are you using?\r\n\r\n4.0.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js\r\n\r\n### What steps can reproduce the bug?\r\n\r\nFollow the documentation on this page:\r\nhttps://hono.dev/getting-started/nodejs\r\n\r\n```bash\r\nnpm create hono@latest my-app\r\n```\r\n\r\n```bash\r\ncd my-app\r\nnpm i\r\n```\r\n\r\nYou will have this in your index.ts\r\n```javascript\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello Hono!')\r\n})\r\n\r\nconst port = 3005\r\nconsole.log(`Server is running on port ${port}`)\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port\r\n})\r\n\r\n```\r\n\r\nCreating the Dockerfile\r\n```yml\r\nFROM node:20-alpine AS base\r\n\r\nFROM base AS builder\r\n\r\nRUN apk add --no-cache libc6-compat\r\nWORKDIR /app\r\n\r\nCOPY package*json tsconfig.json src ./\r\n\r\nRUN npm ci && \\\r\n    npm run build && \\\r\n    npm prune --production\r\n\r\nFROM base AS runner\r\nWORKDIR /app\r\n\r\nRUN addgroup --system --gid 1001 nodejs\r\nRUN adduser --system --uid 1001 hono\r\n\r\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\r\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\r\n\r\nUSER hono\r\nEXPOSE 3000\r\n\r\nCMD [\"node\", \"/app/dist/index.js\"]\r\n```\r\n\r\nThe following steps shall be taken in advance.\r\n\r\nAdd \"outDir\": \". /dist\" to the compilerOptions section tsconfig.json.\r\nAdd \"exclude\": [\"node_modules\"] to tsconfig.json.\r\nAdd \"build\": \"tsc\" to script section of package.json.\r\nRun npm install typescript --save-dev.\r\n\r\n\r\nWhen you finally go to create the docker image with\r\n```bash\r\ndocker build -t hono-docker .\r\n```\r\n\r\nYou will get the error:\r\n```log\r\n > [builder 4/4] RUN npm ci &&     npm run build &&     npm prune --production:\r\n1.615 \r\n1.615 added 11 packages, and audited 12 packages in 1s\r\n1.615 \r\n1.615 2 packages are looking for funding\r\n1.615   run `npm fund` for details\r\n1.615 \r\n1.615 found 0 vulnerabilities\r\n1.616 npm notice \r\n1.616 npm notice New minor version of npm available! 10.2.4 -> 10.4.0\r\n1.616 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v10.4.0>\r\n1.616 npm notice Run `npm install -g npm@10.4.0` to update!\r\n1.616 npm notice \r\n1.742 \r\n1.742 > build\r\n1.742 > tsc\r\n1.742 \r\n2.555 node_modules/@hono/node-server/dist/listener.d.ts(1,49): error TS2307: Cannot find module 'node:http' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/listener.d.ts(2,57): error TS2307: Cannot find module 'node:http2' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/server.d.ts(1,29): error TS2307: Cannot find module 'node:net' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/types.d.ts(1,105): error TS2307: Cannot find module 'node:http' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/types.d.ts(2,196): error TS2307: Cannot find module 'node:http2' or its corresponding type declarations.\r\n2.555 node_modules/@hono/node-server/dist/types.d.ts(3,82): error TS2307: Cannot find module 'node:https' or its corresponding type declarations.\r\n2.555 node_modules/hono/dist/types/context.d.ts(54,5): error TS18028: Private identifiers are only available when targeting ECMAScript 2015 and higher.\r\n2.555 node_modules/hono/dist/types/context.d.ts(134,5): error TS2300: Duplicate identifier 'render'.\r\n2.556 node_modules/hono/dist/types/hono-base.d.ts(58,5): error TS18028: Private identifiers are only available when targeting ECMAScript 2015 and higher.\r\n2.556 node_modules/hono/dist/types/request.d.ts(16,5): error TS18028: Private identifiers are only available when targeting ECMAScript 2015 and higher.\r\n------\r\nDockerfile:10\r\n--------------------\r\n   9 |     \r\n  10 | >>> RUN npm ci && \\\r\n  11 | >>>     npm run build && \\\r\n  12 | >>>     npm prune --production\r\n  13 |     \r\n--------------------\r\nERROR: failed to solve: process \"/bin/sh -c npm ci &&     npm run build &&     npm prune --production\" did not complete successfully: exit code: 2\r\n\r\nView build details: docker-desktop://dashboard/build/desktop-linux/desktop-linux/4azjzio33qpvfftx7cblxkp8j\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nAfter following the instructions I am able to successfully build a containerized hono node.js application.\r\n\r\n### What do you see instead?\r\n\r\nAfter following the instructions I get and error when building the docker container.\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2127920593},{"id":2128010773,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2186","title":"refactor(ssg): create request from saved requestInit in order to avoid memory leak warnings","body":"Continued from #2177\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128010773},{"id":2128013916,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2187","title":"feat(ssg): generate files concurrently","body":"Continued from #2169.\r\n\r\n### Deletion of Commit\r\n\r\nI've divided detailed topics into separate PRs and issues.\r\n\r\n* #2186\r\n* https://github.com/honojs/hono/issues/2175\r\n    * https://github.com/honojs/hono/pull/2174\r\n    * https://github.com/honojs/hono/pull/2178\r\n\r\n### The default number of concurrency in SSG is 2.\r\n\r\nThe default value is debatable, but for this PR it was set to 2. The reasons are as follows.\r\n* Even at 2 (or 1), this PR will parallelize writes to the file system, which is expected to be a sufficient speed improvement over the current main\r\n* When calling external APIs, it is not good if the default is too large\r\n\r\nUsers can easily specify their own values with `concurrency`, so a small default is fine.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128013916},{"id":2128069625,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2188","title":"feat(sse): Allow sending retry for SSE connection","body":"fixes: https://github.com/honojs/hono/issues/2172\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128069625},{"id":2128136186,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2189","title":"SSG: Generate 404 page","body":"### What is the feature you are proposing?\n\nGenerate app.notFound page with toSSG() or vite-ssg.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128136186},{"id":2128700724,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2190","title":"`hono/client` is overriding React types in a Next.js project","body":"### What version of Hono are you using?\r\n\r\n4.0.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js 20\r\n\r\n### What steps can reproduce the bug?\r\n\r\nIf we're on a Next.js 14.1 project and we're importing `hono` as a dependency to use the `hono/client`, we can't use the following code : \r\n```typescript\r\nimport type { ComponentProps, ElementType, PropsWithChildren, ReactNode } from \"react\";\r\n\r\ntype Props = Omit<ComponentProps<\"div\">, \"className\"> & {\r\n  as?: ElementType;\r\n  children: ReactNode;\r\n};\r\n\r\nexport function Container({ className, children, as }: Props) {\r\n  const Tag = as || \"div\";\r\n  return (\r\n    <Tag>\r\n      {children}\r\n    </Tag>\r\n  );\r\n}\r\n```\r\n\r\nBecause the following lines are overriding the JSX.ElementType type\r\nhttps://github.com/honojs/hono/blob/ca6f36511094522b84b6575d99bde4728bcea87c/src/jsx/base.ts#L13C1-L24C2\r\n\r\n\r\nHere is a reproduction: https://codesandbox.io/p/devbox/elegant-bogdan-ktsdc4\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nWe shouldn't have the following errors : \r\n> 1. JSX element type 'Tag' does not have any construct or call signatures. [2604]\r\n> 2. 'Tag' cannot be used as a JSX component.\r\n     Its type 'React.ElementType' is not a valid JSX element type.\r\n       Type 'number' is not assignable to type 'ElementType'. [2786]\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128700724},{"id":2128729745,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2191","title":"fix(context): remove duplicate definition of render method","body":"The `render` method was defined twice in the `Context` class. This duplicate definition was causing a TypeScript error below if `tsc` is used to compile the project:\r\n\r\n```\r\nnode_modules/hono/dist/types/context.d.ts(134,5): error TS2300: Duplicate identifier 'render'.\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128729745},{"id":2128807959,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2192","title":"fix: `createHandler` Response Types (handler x1)","body":"I tried to resolve https://github.com/honojs/honox/issues/24.\r\nBut I can't resolve it because HonoX's `createRoute` is missing response type.\r\n`createRoute` is using Hono's`createFactory`\r\nSo I search it, I found cause.\r\n\r\n`createHandler` is missing response type when there is **one** handler.\r\nWe can solve this bug if this PR merged.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2128807959},{"id":2129093273,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2193","title":"Fix regex pattern with length limit at replaceUrlParam","body":"\r\n### Summary\r\n\r\nThere seems to be an issue with the function `replaceUrlParam` that replaces regular expressions in the path within the Client. Specifically, the problem arises when there's a length specification (`{}`) within the regular expression, and it appears at the end of the regex section.\r\n\r\n```\r\n/year/:year{[0-9]{4}}/month/:month{[0-9]{1,2}}\r\n```\r\n\r\nIn this case, when the Client is given the params:\r\n\r\n```\r\n param: {\r\n   year: \"2024\",\r\n   month: \"2\",\r\n }\r\n```\r\n\r\nit parses them as:\r\n\r\n```\r\n/year/2024}/month/2}\r\n```\r\n\r\n### Proposed Changes\r\n\r\nThe regular expression that \"detects the regex section\" within the path was only matching a single `}`. I propose to modify this to match one or more times (`+`), ensuring correct detection even when the length specification (`{}`) is at the end of the section.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2129093273},{"id":2129129474,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2194","title":"html renderer `isEscaped` TypeError","body":"### What version of Hono are you using?\n\n4.0.1\n\n### What runtime/platform is your app running on?\n\ndeno 1.40.4 (release, aarch64-apple-darwin)\n\n### What steps can reproduce the bug?\n\nI'm trying to transition an open-source pet project from preact to hono.\r\n\r\nRunning the project via that branch (`deno task dev`), `html` is throwing an error when I try to render to html string:\r\nhttps://github.com/bpevs/fridaypoetry.org/blob/feat/hono/source/components/html.tsx#L16\r\n\r\nRendered via this route:\r\nhttps://github.com/bpevs/fridaypoetry.org/blob/feat/hono/source/main.tsx#L30\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n```\r\nTypeError: Cannot read properties of null (reading 'isEscaped')\r\n    at JSXFunctionNode.toStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:218:64)\r\n    at childrenToStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:79:13)\r\n    at JSXNode.toStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:185:5)\r\n    at childrenToStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:79:13)\r\n    at JSXFragmentNode.toStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:228:5)\r\n    at JSXFunctionNode.toStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:217:11)\r\n    at JSXFunctionNode.toStringToBuffer (https://deno.land/x/hono@v4.0.1/jsx/base.ts:217:11)\r\n    at JSXFunctionNode.toString (https://deno.land/x/hono@v4.0.1/jsx/base.ts:115:12)\r\n    at html (https://deno.land/x/hono@v4.0.1/helper/html/index.ts:28:27)\r\n    at Html (file:///Users/ben/Vault/20-29%20Projects/20%20Code/20.09%20fridaypoetry.org/source/components/html.tsx:16:14)\r\n```\n\n### Additional information\n\nGoing straight from Preact to Hono 4.x.x, so this may be user error / I'm not sure if the expected api is now different from [honojs/examples](https://github.com/honojs/examples/tree/main/deno), which is running 3.x.x\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2129129474},{"id":2129242018,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2196","title":"fix(jsx/dom): Do not call insertBefore if the element position does not change","body":"Fixed the same problem as #2016 when one child is updated in an element having multiple children.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2129242018},{"id":2129282383,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2197","title":"feat(jsx): more react staff","body":"Once #2196  and this PR are merged, I believe the following example will work with 'hono/jsx/dom' (without react).\r\n\r\nhttps://tutorial.jotai.org/examples/textLenght\r\n\r\n### New staff members\r\n\r\n`useReducer`, `useDebugValue`, `createElement`\r\n\r\n`useDebugValue` is just a dummy and useless, but it was added to avoid import errors.\r\n\r\n### export default\r\n\r\nAlthough rarely used in this way today, the following library for React, which is written as follows, can be used as is without modification.\r\n\r\n```ts\r\nimport React from 'react' // reaplced with 'hono/jsx/dom'\r\n\r\nconst App = () => {\r\n  const [value, updateValue] = React.useState(0)\r\n  // ...\r\n}\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2129282383},{"id":2129305064,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2198","title":"x-served-by header is being truncated.","body":"### What version of Hono are you using?\n\n3.12.8\n\n### What runtime/platform is your app running on?\n\nFastly\n\n### What steps can reproduce the bug?\n\nProxy a request at Fastly, and view headers.\r\n\r\n```\r\nFrom origin \r\n172046317ns: Response Header => response: 1, x-served-by: cache-gnv1820032-GNV, cache-gnv1820026-GNV, cache-den8282-DEN, cache-den8282-DEN\r\n172046414ns: Response Header => response: 1, x-cache: MISS, MISS, MISS, MISS\r\n\r\nTo Client \r\n174420496ns: Response Header => response: 0, x-served-by: cache-den8282-DEN\r\n174420883ns: Response Header => response: 0, x-cache: MISS, MISS, MISS, MISS\r\n``` \n\n### What is the expected behavior?\n\nx-served-by with 5 entries, not 1.\n\n### What do you see instead?\n\nTrucnated x-served-by to 1 entry\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2129305064},{"id":2130452774,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2199","title":"setCookie didnt work with trpc middleware ","body":"### What version of Hono are you using?\r\n\r\n^4.0.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nnode.js v20.3.1\r\n\r\n### What steps can reproduce the bug?\r\n\r\n# I'm using trpc with hono, trying to set cookie in trpc query by using `setCookie` \r\nbut it seems like `setCookie` didn't work properly, the `set-cookie` filed don't even exits in request \r\n\r\n```ts\r\nexport const helloWorld = publicProcedure.query(async ({ ctx }) => {\r\n // request cookie header didn't even exists\r\n  setCookie(ctx.holoCtx, 'some_var', 'test');\r\n\r\n  return 'Hello world!';\r\n});\r\n```\r\n### Trpc middleware\r\n```ts\r\n\r\n// trpc.ts\r\nexport const createContext = (opts: FetchCreateContextFnOptions, holoCtx: Context) => ({\r\n  ...opts,\r\n  holoCtx,\r\n  uid: '',\r\n});\r\n\r\n// main.ts\r\napp.use('/trpc/*', (c) => {\r\n  return fetchRequestHandler({\r\n    req: c.req.raw,\r\n    router: appRouter,\r\n    endpoint: '/trpc',\r\n    createContext: (opts) => createContext(opts, c),\r\n    onError(opts) {\r\n      const { error, type, path, input, ctx, req } = opts;\r\n      if (error.code === 'INTERNAL_SERVER_ERROR') {\r\n        console.log('Internal server error');\r\n      }\r\n      console.error('Error:', error);\r\n    },\r\n  });\r\n});\r\n```\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n`set-cookie` didn't even exists on request headers\r\n\r\n### Additional information\r\n\r\n# I trayed to change `setCookie` \r\n\r\n## from \r\n```ts\r\nconst setCookie = (c, name, value, opt) => {\r\n  const cookie = (0, import_cookie.serialize)(name, value, { path: \"/\", ...opt });\r\n  c.header(\"set-cookie\", cookie, { append: true });\r\n};\r\n```\r\n\r\n## to \r\n```ts\r\nconst setCookie = (c, name, value, opt) => {\r\n  const cookie = (0, import_cookie.serialize)(name, value, { path: \"/\", ...opt });\r\n  c.res.headers.set(\"set-cookie\", cookie)\r\n  // c.header(\"set-cookie\", cookie, { append: true });\r\n};\r\n```\r\n\r\nand after this change `setCookie` start working, i have some guesses that it's duo to context headers method implementation ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2130452774},{"id":2130915864,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2200","title":"Bun \"serveStatic\" doesn't seem to serve at url","body":"### What version of Hono are you using?\r\n\r\n3.12.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI am trying to recreate the example: https://hono.dev/getting-started/bun#serve-static-files but I can't seem to get it working. \r\n\r\n### What is the expected behavior?\r\n\r\nThat I can access the static files provided with the `serverStatic` function\r\n\r\n### What do you see instead?\r\n\r\nI am getting status 404 whatever I try.\r\n\r\n### Additional information\r\n\r\n```js\r\nimport apiRoutes from \"api/routes\";\r\nimport appRoutes from \"app/routes\";\r\nimport { Hono } from \"hono\";\r\nimport { serveStatic } from \"hono/bun\";\r\n\r\nconst app = new Hono();\r\n\r\n\r\napp.use(\r\n  \"/static/*\",\r\n  serveStatic({\r\n    root: \"/\",\r\n    onNotFound: (path, c) => {\r\n      console.log(`${path} is not found, you access ${c.req.path}`);\r\n    },\r\n  })\r\n);\r\napp.use(\"/favicon.ico\", serveStatic({ path: \"./favicon.ico\" }));\r\napp.route(\"/\", appRoutes);\r\napp.route(\"/api\", apiRoutes);\r\n\r\nexport default app;\r\n```\r\n\r\nTrying to access it from RootLayout: \r\n\r\n```js\r\nimport { Style } from \"hono/css\";\r\nimport type { FC } from \"hono/jsx\";\r\nimport Footer from \"../components/Footer\";\r\nimport Header from \"../components/Header\";\r\n\r\ntype Props = {\r\n  title: string;\r\n};\r\n\r\nconst RootLayout: FC<Props> = ({ children, title }) => (\r\n  <html>\r\n    <head>\r\n      {/* CSS Style for Hono */}\r\n      <Style />\r\n      {/* StyleSheets */}\r\n      <StyleSheets />\r\n      {/* Scripts */}\r\n      <Scripts />\r\n      <title>{title}</title>\r\n    </head>\r\n    <body>\r\n      <Header />\r\n      {children}\r\n      <Footer />\r\n    </body>\r\n  </html>\r\n);\r\n\r\nconst StyleSheets: FC = () => (\r\n  <>\r\n    {/* Open Props Variables */}\r\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/open-props\" />\r\n    {/* Normalize CSS */}\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\"\r\n    />\r\n    <link rel=\"stylesheet\" href=\"static/css/style.css\" />\r\n  </>\r\n);\r\n\r\nconst Scripts: FC = () => (\r\n  <>\r\n    {/* AlpineJS */}\r\n    <script\r\n      defer\r\n      src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"\r\n    ></script>\r\n  </>\r\n);\r\n\r\nexport default RootLayout;\r\n\r\n```\r\n\r\nThis is my structure: \r\n```markdown\r\n├── api\r\n│   └── routes.ts\r\n├── app\r\n│   ├── routes.tsx\r\n│   └── views\r\n│       ├── components\r\n│       │   ├── Footer.tsx\r\n│       │   ├── Grid\r\n│       │   │   ├── Grid.tsx\r\n│       │   │   ├── index.ts\r\n│       │   │   └── styles.ts\r\n│       │   ├── Header\r\n│       │   │   ├── Header.tsx\r\n│       │   │   ├── index.ts\r\n│       │   │   └── styles.ts\r\n│       │   ├── Modules\r\n│       │   │   └── Hero\r\n│       │   │       ├── Hero.tsx\r\n│       │   │       ├── index.ts\r\n│       │   │       └── styles.ts\r\n│       │   └── UI\r\n│       │       ├── Accordion\r\n│       │       │   ├── Accordion.tsx\r\n│       │       │   ├── index.ts\r\n│       │       │   └── styles.ts\r\n│       │       ├── Button\r\n│       │       │   ├── Button.tsx\r\n│       │       │   ├── index.ts\r\n│       │       │   └── styles.ts\r\n│       │       ├── Dialog\r\n│       │       │   ├── Dialog.tsx\r\n│       │       │   ├── index.ts\r\n│       │       │   └── styles.ts\r\n│       │       ├── Icons\r\n│       │       │   ├── ArrowLeft.tsx\r\n│       │       │   ├── ArrowRight.tsx\r\n│       │       │   ├── Spinner.tsx\r\n│       │       │   └── X.tsx\r\n│       │       ├── Link\r\n│       │       │   ├── Link.tsx\r\n│       │       │   ├── index.ts\r\n│       │       │   └── styles.ts\r\n│       │       └── Typography\r\n│       │           ├── Headline\r\n│       │           │   ├── Headline.tsx\r\n│       │           │   ├── index.ts\r\n│       │           │   └── styles.ts\r\n│       │           └── Text\r\n│       │               ├── Text.tsx\r\n│       │               ├── index.ts\r\n│       │               └── styles.ts\r\n│       ├── layout\r\n│       │   └── Root.tsx\r\n│       └── pages\r\n│           ├── Home.tsx\r\n│           └── UI\r\n│               ├── UI.tsx\r\n│               ├── index.ts\r\n│               └── styles.ts\r\n├── directory.structure\r\n├── index.ts\r\n└── static\r\n    ├── css\r\n    │   └── style.css\r\n    ├── favicon.ico\r\n    └── placeholder.jpg\r\n\r\n23 directories, 44 files\r\n```\r\n","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2130915864},{"id":2131361473,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2201","title":"Support JSR","body":"### What is the feature you are proposing?\n\nA new package repository:\r\n\r\nhttps://jsr.io/\r\n\r\nI've already got the namespace:\r\n\r\n<img width=\"421\" alt=\"Screenshot 2024-02-13 at 11 41 16\" src=\"https://github.com/honojs/hono/assets/10682/2d376c36-0c03-458b-94b5-0debf40f1e22\">\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2131361473},{"id":2131399856,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2202","title":"JSX Renderer Middleware with name","body":"### What is the feature you are proposing?\r\n\r\nHello! 👋 \r\n\r\nI propose providing a middleware for `jsxRendererWithName(name: string, component, options)` and an API like `c.renderWithName(name, <h1>Hello, World!</h1>)`.\r\n\r\nThis would be useful in cases where we want to create multiple layouts within a single application.\r\n\r\nCurrently, I believe `jsxRenderer` is designed to handle only one template. As a workaround to enable the above case, we would have to dynamically switch the rendering content based on the request path from the context. However, this approach leads to the problem of extending the values passed as options for each template.\r\n\r\nI believe this proposal can solve these issues.\r\n\r\nhttps://hono.dev/middleware/builtin/jsx-renderer","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2131399856},{"id":2131577777,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2203","title":"LinearRouter and PatternRouter does not support regexp \"quantifiers\"","body":"### What version of Hono are you using?\n\n4.0.1\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n```ts\r\nimport { Hono } from 'hono'\r\nimport { getRouterName } from 'hono/dev'\r\nimport { LinearRouter } from 'hono/router/linear-router'\r\nimport { PatternRouter } from 'hono/router/pattern-router'\r\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\r\nimport { TrieRouter } from 'hono/router/trie-router'\r\n\r\nconst routers = [new TrieRouter(), new RegExpRouter(), new LinearRouter(), new PatternRouter()]\r\n\r\nfor (const router of routers) {\r\n  const app = new Hono({ router })\r\n  app.get('/year/:year{[0-9]{4}}/month/:month{[0-9]{1,2}}', (c) => {\r\n    return c.json(c.req.param())\r\n  })\r\n  const res = await app.request('/year/2024/month/2')\r\n  console.log(getRouterName(app), res.status)\r\n}\r\n```\n\n### What is the expected behavior?\n\n```\r\nTrieRouter 200\r\nRegExpRouter 200\r\nLinearRouter 200\r\nPatternRouter 200\r\n```\n\n### What do you see instead?\n\n```\r\nTrieRouter 200\r\nRegExpRouter 200\r\nLinearRouter 404\r\nPatternRouter 404\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2131577777},{"id":2132243451,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2204","title":"docs(readme): tweak","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2132243451},{"id":2132591808,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2205","title":"`hono/cache` expansion","body":"### What is the feature you are proposing?\n\nFollowup from Discord.\r\n\r\nI'm contemplating expanding the capabilities of `hono/cache` to support a wider value of `cache-control` directives, but I had a few questions before I go about doing so.\r\n1. Should the `cacheControl` parameter of the middleware automatically be applied for the client/server cache, or should it be split in two so that you can control each individually?\r\n2. When handling a `stale-if-error` directive, should it act based on the response code of later handlers, an error thrown, or both?","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2132591808},{"id":2133442441,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2207","title":"Get response [object Promise] in async await jsxRenderer","body":"### What version of Hono are you using?\r\n\r\n4.0.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nThis code will render `[object Promise]`\r\n\r\n```ts\r\napp\r\n    .use(\r\n      '/test',\r\n      jsxRenderer(async ({ children }) => { // w/o async, await, will be successful\r\n        return await (<div>{children}</div>);\r\n      }),\r\n    )\r\n    .get('/test', async (c) => {\r\n      return await c.render(<span>Hello</span>);\r\n    });\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nGet response like below:\r\n```\r\n<div><span>Hello</span></div>\r\n```\r\n\r\n### What do you see instead?\r\n\r\n[object Promise] \r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2133442441},{"id":2133446900,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2208","title":"Never responds html via Suspense","body":"### What version of Hono are you using?\n\n4.0.1\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n```ts\r\n  const Layout2: FC = async ({ children }) => {\r\n    return await html`<div>${children}</div>`;\r\n  };\r\n\r\n  const Layout: FC = async ({ children }) => {\r\n    // return await html`<div>${Layout2({ children })}</div>`; // Will be successful\r\n    return await html`<div>${await Layout2({ children })}</div>`;\r\n  };\r\n\r\n  app\r\n    .use(\r\n      '/suspense',\r\n      jsxRenderer(\r\n         ({ children }) => {\r\n          return (<Layout>{children}</Layout>);\r\n        },\r\n        { stream: true },\r\n      ),\r\n    )\r\n    .get('/suspense', async (c) => {\r\n      const AsyncComponent: FC = async () => {\r\n        await new Promise((r) => setTimeout(r, 1000)); // sleep 1s\r\n        return await (<Layout>Hello</Layout>);\r\n      };\r\n      return await c.render(\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <AsyncComponent />\r\n        </Suspense>,\r\n      );\r\n    });\r\n```\n\n### What is the expected behavior?\n\nRender Layout2 component after finished sleep 1s\n\n### What do you see instead?\n\nLoading...\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2133446900},{"id":2133826743,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2209","title":"fix(router): LinearRouter and PatternRouter support regexp quantifiers","body":"Fixes #2203\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2133826743},{"id":2133856881,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2210","title":"Can't use async setRenderer","body":"### What version of Hono are you using?\n\n4\n\n### What runtime/platform is your app running on?\n\nbun\n\n### What steps can reproduce the bug?\n\nI'm getting an error in vscode:\r\n\r\n> Argument of type '(page: string, props: object | undefined) => Promise<Response>' is not assignable to parameter of type 'ContextRenderer'.\r\n  Type 'Promise<Response>' is missing the following properties from type 'Response': headers, ok, redirected, status, and 11 more.\r\n\r\nIt is crying because I'm trying to use `async` callable for `setRenderer`:\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport { renderToReadableStream } from \"react-dom/server\";\r\n\r\ndeclare module \"hono\" {\r\n    interface ContextRenderer {\r\n        (page: string, props?: object): Response;\r\n    }\r\n}\r\n\r\nconst app = new Hono();\r\n\r\napp.use(async (c, next) => {\r\n    c.setRenderer(async (page, props) => {\r\n        const { default: Page } = await import(\r\n            `./app/components/pages/${page}.tsx`\r\n        );\r\n\r\n        const stream = await renderToReadableStream(<Page {...props} />);\r\n\r\n        return c.body(stream);\r\n    });\r\n\r\n    await next();\r\n});\r\n\r\napp.get(\"/\", (c) => c.text(\"Hello Bun!\"));\r\n\r\napp.get(\"/home\", (c) => c.render(\"Home\"));\r\n\r\napp.get(\"/about\", (c) => c.render(\"About\", { name: \"joe\" }));\r\n\r\nexport default app;\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2133856881},{"id":2134010481,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2211","title":"fix(jsx-renderer): support async component","body":"Fixes #2207\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2134010481},{"id":2134131153,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2212","title":"Chain `c.status()`","body":"### What is the feature you are proposing?\n\nApologies if this has been discussed before, I searched GH and couldn't find a corresponding issue.\r\n\r\nWould you consider returning `this` from `c.status()` so that it could be chained:\r\n\r\n```js\r\nc.status(500)\r\nreturn c.json({ error: 'error message' })\r\n```\r\n\r\nvs.\r\n\r\n```js\r\nc.status(500).json({ error: 'error message' })\r\n```\r\n\r\nhttps://github.com/honojs/hono/blob/4c9d50f212ab0330415491e0cf5f42c77ceac29b/src/context.ts#L293-L296\r\n\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2134131153},{"id":2134502437,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2214","title":"Re-export `Context` type from `./types`","body":"### What is the feature you are proposing?\n\nHello! I like Hono APIs for building... APIs. One nitpick is that while I've read the best practice on the docs page to not create a controller-like handler, for some reason I can't avoid creating one because of some reasons. I'm using Typescript, so I would need something like:\r\n\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport type { Context } from \"hono/types\";\r\n\r\nconst app = new Hono();\r\n\r\nfunction handler(c: Context): Promise<Response> {\r\n  return c.text(\"Hello world\");\r\n}\r\n\r\napp.get(\"/\", (c) => handler(c));\r\n```\r\n\r\nI saw the code that exports the types to the end-users here:\r\nhttps://github.com/honojs/hono/blob/4c9d50f212ab0330415491e0cf5f42c77ceac29b/package.json#L42-L46\r\n\r\nThe `Context` type is imported here:\r\nhttps://github.com/honojs/hono/blob/4c9d50f212ab0330415491e0cf5f42c77ceac29b/src/types.ts#L4\r\n\r\nYet it never got re-exported. The closest thing that I can use is the `Handler` type, yet that is not what I'm aiming for, it's not compatible with my current code. \r\nhttps://github.com/honojs/hono/blob/4c9d50f212ab0330415491e0cf5f42c77ceac29b/src/types.ts#L52-L57\r\n\r\nSo...\r\n1. Can we have  `Context` type re-exported?\r\n2. If the answer is \"no\", is there any specific reason on why not?","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2134502437},{"id":2135579122,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2216","title":"refactor: jsx streaming","body":"There is no change in behavior, but it is not a useful refactoring for existing applications, so it is a question of whether to include it in a patch version. A minor version might be fine.\r\n\r\n* 867f85722b33038606a8f3d7b826742d490a0134 : Depending on the content, it may look like the following, and in this case a JS error occurs.\r\n    * `<template id=\"E:0\"></template><! -E:0->`\r\n* 71c8ec52bbcedf1149420a81bb9fd0b53ce791ec : When handling https://github.com/honojs/honox/issues/47, it is useful to be able to retrieve the resolved value later, so the data attribute was added. The data will be slightly larger, but I don't think it will be a problem.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2135579122},{"id":2135636894,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2217","title":"feat(helper): toPunyCode Helper","body":"before\r\n```ts\r\nc.redirect(\"https://🔥.com\") // throw Error\r\n```\r\n\r\nafter\r\n```ts\r\nimport { toPunyCode } from \"hono/punycode\"\r\n...\r\nc.redirect(toPunyCode(\"https://🔥.com\")) // redirect to https://xn--4v8h.com\r\n```\r\n\r\n## Options\r\n```ts\r\ntoPunyCode(\"🔥.com\", {\r\n    strict: true\r\n}) // 🔥.com => 🔥.com (not URL)\r\n\r\ntoPunyCode(\"🔥.com\", {\r\n    strict: false\r\n}) // 🔥.com => /xn--4v8h.com (URL)\r\n\r\n// default strict is true\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2135636894},{"id":2135988330,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2218","title":"fix(context): Inherit current status if not specified","body":"There is a problem that the status code is not inherited when using `jsxRenderer` with `stream:true`.\r\n\r\n```ts\r\n      app.use(\r\n        '*',\r\n        jsxRenderer(\r\n          ({ children }) => {\r\n            return (\r\n              <html>\r\n                <body>{children}</body>\r\n              </html>\r\n            )\r\n          },\r\n          { stream: true }\r\n        )\r\n      )\r\n```\r\n\r\nHere we call `c.body()` with two arguments, but since status is not inherited in this call, it is always 200.\r\n\r\nhttps://github.com/honojs/hono/blob/48c6ce9b6f630e215bd1142af2b52307c3f1ac52/src/middleware/jsx-renderer/index.ts#L54-L62\r\n\r\nThis issue has caused problems with 404s turning into 200s in uses such as honox.\r\n\r\nhttps://github.com/honojs/honox/blob/main/src/server/server.ts#L179-L182\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2135988330},{"id":2136269265,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2219","title":"feat(helper): new helper toPunyCode","body":"before\r\n```ts\r\nc.redirect(\"https://🔥.com\") // throw Error\r\n```\r\n\r\nafter\r\n```ts\r\nimport { toPunyCode } from \"hono/punycode\"\r\n...\r\nc.redirect(toPunyCode(\"https://🔥.com\")) // redirect to https://xn--4v8h.com\r\n```\r\n\r\n## Options\r\n```ts\r\ntoPunyCode(\"🔥.com\", {\r\n    strict: true\r\n}) // 🔥.com => 🔥.com (not URL)\r\n\r\ntoPunyCode(\"🔥.com\", {\r\n    strict: false\r\n}) // 🔥.com => xn--4v8h.com (URL)\r\n\r\n// default strict is true\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2136269265},{"id":2136900276,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2220","title":"fix(hono-base): custom not found with middleware like compress","body":"Fixed Custom NotFound not working with middleware that creates a new Response object after `next()` such as Compress Middleware. And added proper tests.\r\n\r\nThis was fixed by #2080, but it may not be merged to the main branch well. And there is no test to handle it, so we can't notice it has the bug.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2136900276},{"id":2137082438,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2221","title":"Improve test execution speed on WSL","body":"### What is the feature you are proposing?\n\n### Run test time\r\nOS: Windows10(Ubuntu20.04)\r\nCPU: Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz\r\n- `bun run test`: 75.70 + 14.62 + 12.58 = 102.9s\r\n- `yarn test`: 7.85 + 2.30 + 2.10 = 12.25s\r\n\r\n\r\n\r\n<details>\r\n\r\n<summary>Bun logs</summary>\r\n\r\n```sh\r\nxxxxx@yyyyy:/mnt/c/Users/xxxxx/repo/hono$ bun run test\r\n$ tsc --noEmit && vitest --run && vitest -c .vitest.config/jsx-runtime-default.ts --run && vitest -c .vitest.config/jsx-runtime-dom.ts --run\r\n\r\n RUN  v1.2.2 /mnt/c/Users/xxxxx/repo/hono\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > logging and custom header\r\nGET : http://localhost/hello\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > logging and custom header with named param\r\nGET : http://localhost/hello/message\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > should return correct the content-type header\r\nGET : http://localhost/json\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > not found\r\nGET : http://localhost/foo\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > internal server error\r\nGET : http://localhost/error\r\nInternal Server Error\r\n\r\nstderr | src/hono.test.ts > Middleware > Basic > internal server error\r\nError: Error!\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:973:13\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:46:20\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:930:13\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:46:20\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:925:13\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:18:12\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:357:31\r\n\r\nstderr | src/hono.test.ts > Error handling in middleware > Should handle the error in middleware\r\nError: Error message\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:1400:11\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:46:20\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:1381:11\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:18:12\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:357:31\r\n    at Hono.dispatch (/mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:368:5)\r\n    at Hono.fetch (/mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:376:17)\r\n    at Hono.request (/mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:406:17)\r\n\r\nstderr | src/hono.test.ts > Error handling in middleware > Should handle the error in middleware - async\r\nError: Error message\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:1404:11\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:46:20\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono.test.ts:1389:11\r\n    at dispatch (/mnt/c/Users/xxxxx/repo/hono/src/compose.ts:45:23)\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/compose.ts:18:12\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:357:31\r\n    at Hono.dispatch (/mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:368:5)\r\n    at Hono.fetch (/mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:376:17)\r\n    at Hono.request (/mnt/c/Users/xxxxx/repo/hono/src/hono-base.ts:406:17)\r\n\r\nstdout | src/helper/ssg/index.test.tsx > toSSG function > should execute additional processing using afterGenerateHook\r\nstatic/index.html\r\nstatic/about.html\r\nstatic/about/some.txt\r\nstatic/bravo.html\r\nstatic/Charlie.html\r\nstatic/post/1.html\r\nstatic/post/2.html\r\nstatic/user/1.html\r\nstatic/user/2.html\r\nstatic/user/3.html\r\n\r\nstderr | src/jsx/streaming.test.tsx > Streaming > reject()\r\nTrace: undefined\r\n    at /mnt/c/Users/xxxxx/repo/hono/src/jsx/streaming.ts:137:23\r\n    at async Promise.all (index 0)\r\n    at Object.start (/mnt/c/Users/xxxxx/repo/hono/src/jsx/streaming.ts:158:9)\r\n\r\n ✓ src/router/trie-router/node.test.ts (77)\r\n ✓ src/router/pattern-router/router.test.ts (52)\r\n ✓ src/router/reg-exp-router/router.test.ts (60)\r\n ✓ src/compose.test.ts (31)\r\n ✓ src/validator/validator.test.ts (30)\r\n ✓ src/hono.test.ts (179) 489ms\r\n ✓ src/jsx/index.test.tsx (62)\r\n ↓ src/helper/css/common.test.tsx (1) [skipped]\r\n ✓ src/helper/ssg/index.test.tsx (24)\r\n ✓ src/types.test.ts (38)\r\n ✓ src/client/client.test.ts (28)\r\n ✓ src/jsx/streaming.test.tsx (17) 503ms\r\n ✓ src/jsx/dom/index.test.tsx (49) 866ms\r\n ✓ src/router/linear-router/router.test.ts (34)\r\n ✓ src/helper/cookie/index.test.ts (17)\r\n ✓ src/utils/url.test.ts (15)\r\n ✓ src/middleware/jsx-renderer/index.test.tsx (11)\r\n ✓ src/context.test.ts (30)\r\n ✓ src/middleware/secure-headers/index.test.ts (10)\r\n ✓ src/utils/cookie.test.ts (22)\r\n ✓ src/router/trie-router/router.test.ts (24)\r\n ✓ src/middleware/csrf/index.test.ts (14)\r\n ✓ src/request.test.ts (14)\r\n ✓ src/utils/jwt/jwt.test.ts (10)\r\n ✓ src/middleware/jwt/index.test.ts (12)\r\n ✓ src/adapter/cloudflare-workers/serve-static.test.ts (15)\r\n ✓ src/helper/css/index.test.tsx (36) 741ms\r\n ✓ src/helper/accepts/accepts.test.ts (8)\r\n ✓ src/helper/dev/index.test.ts (8)\r\n ✓ src/middleware/basic-auth/index.test.ts (7)\r\n ✓ src/jsx/components.test.tsx (18) 307ms\r\n ✓ src/middleware/bearer-auth/index.test.ts (9)\r\n ✓ src/middleware/cors/index.test.ts (7)\r\n ✓ src/jsx/hooks/dom.test.tsx (10) 320ms\r\n ✓ src/helper/factory/index.test.ts (7)\r\n ✓ src/utils/stream.test.ts (8)\r\n ✓ src/middleware/logger/index.test.ts (10) 2065ms\r\n ✓ src/middleware/etag/index.test.ts (8)\r\n ✓ src/router/smart-router/router.test.ts (6)\r\n ✓ src/helper/streaming/sse.test.ts (3) 427ms\r\n ✓ src/middleware/cache/index.test.ts (6)\r\n ✓ src/utils/buffer.test.ts (5)\r\n ✓ src/client/utils.test.ts (7)\r\n ✓ src/utils/body.test.ts (6)\r\n ✓ src/utils/filepath.test.ts (1)\r\n ✓ src/utils/encode.test.ts (44)\r\n ✓ src/helper/html/index.test.ts (10)\r\n ✓ src/helper/ssg/utils.test.ts (3)\r\n ✓ src/middleware/timing/index.test.ts (3)\r\n ✓ src/utils/types.test.ts (4)\r\n ✓ src/utils/crypto.test.ts (5)\r\n ✓ src/middleware/compress/index.test.ts (4)\r\n ✓ src/utils/mime.test.ts (3)\r\n ✓ src/adapter/aws-lambda/handler.test.ts (2)\r\n ✓ src/helper/streaming/text.test.ts (1)\r\n ✓ src/helper/streaming/stream.test.ts (2)\r\n ✓ src/jsx/dom/components.test.tsx (16) 506ms\r\n ✓ src/adapter/vercel/handler.test.ts (2)\r\n ✓ src/adapter/cloudflare-pages/handler.test.ts (2)\r\n ✓ src/jsx/jsx-runtime.test.tsx (6)\r\n ✓ src/adapter/cloudflare-workers/utils.test.ts (1)\r\n ✓ src/middleware/pretty-json/index.test.ts (2)\r\n ✓ src/utils/html.test.ts (1)\r\n ✓ src/adapter/lambda-edge/handler.test.ts (1)\r\n ✓ src/jsx/dom/context.test.tsx (8)\r\n ✓ src/helper/testing/index.test.ts (2)\r\n ✓ src/http-exception.test.ts (1)\r\n ✓ src/middleware/powered-by/index.test.ts (2)\r\n ✓ src/utils/jwt/types.test.ts (1)\r\n ✓ src/helper/adapter/index.test.ts (1)\r\n ✓ src/jsx/dom/css.test.tsx (27)\r\n\r\n Test Files  70 passed | 1 skipped (71)\r\n      Tests  1193 passed | 7 skipped (1200)\r\n   Start at  00:27:23\r\n   Duration  75.70s (transform 59.87s, setup 27.65s, collect 310.53s, tests 9.35s, environment 36ms, prepare 291.23s)\r\n\r\n\r\n RUN  v1.2.2 /mnt/c/Users/xxxxx/repo/hono\r\n\r\n ✓ src/jsx/dom/index.test.tsx (49) 803ms\r\n ✓ src/jsx/dom/context.test.tsx (8)\r\n ✓ src/jsx/hooks/dom.test.tsx (10) 428ms\r\n ✓ src/jsx/dom/components.test.tsx (16) 358ms\r\n ✓ src/jsx/dom/css.test.tsx (27)\r\n\r\n Test Files  5 passed (5)\r\n      Tests  106 passed | 4 skipped (110)\r\n   Start at  00:28:45\r\n   Duration  14.62s (transform 4.65s, setup 2.12s, collect 48.46s, tests 2.04s, environment 1ms, prepare 9.41s)\r\n\r\n\r\n RUN  v1.2.2 /mnt/c/Users/xxxxx/repo/hono\r\n\r\n ✓ src/jsx/dom/index.test.tsx (49) 744ms\r\n ✓ src/jsx/hooks/dom.test.tsx (10)\r\n ✓ src/jsx/dom/context.test.tsx (8)\r\n ✓ src/jsx/dom/css.test.tsx (27) 665ms\r\n ✓ src/jsx/dom/components.test.tsx (16) 322ms\r\n\r\n Test Files  5 passed (5)\r\n      Tests  106 passed | 4 skipped (110)\r\n   Start at  00:29:06\r\n   Duration  12.58s (transform 5.31s, setup 1.84s, collect 39.74s, tests 2.20s, environment 1ms, prepare 9.63s)\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Yarn logs</summary>\r\n\r\n```sh\r\nC:\\Users\\xxxxx\\repo\\hono>yarn test\r\nyarn run v1.22.19\r\n$ tsc --noEmit && vitest --run && vitest -c .vitest.config/jsx-runtime-default.ts --run && vitest -c .vitest.config/jsx-runtime-dom.ts --run\r\n\r\n RUN  v1.2.2 C:/Users/xxxxx/repo/hono\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > logging and custom header\r\nGET : http://localhost/hello\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > logging and custom header with named param\r\nGET : http://localhost/hello/message\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > should return correct the content-type header\r\nGET : http://localhost/json\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > not found\r\nGET : http://localhost/foo\r\n\r\nstdout | src/hono.test.ts > Middleware > Basic > internal server error\r\nGET : http://localhost/error\r\nInternal Server Error\r\n\r\nstderr | src/hono.test.ts > Middleware > Basic > internal server error\r\nError: Error!\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:973:13\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:46:20\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:930:13\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:46:20\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:925:13\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:18:12\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:357:31\r\n\r\nstderr | src/hono.test.ts > Error handling in middleware > Should handle the error in middleware\r\nError: Error message\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:1400:11\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:46:20\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:1381:11\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:18:12\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:357:31\r\n    at Hono.dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:368:5)\r\n    at Hono.fetch (C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:376:17)\r\n    at Hono.request (C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:406:17)\r\n\r\nstderr | src/hono.test.ts > Error handling in middleware > Should handle the error in middleware - async\r\nError: Error message\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:1404:11\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:46:20\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono.test.ts:1389:11\r\n    at dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:45:23)\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\compose.ts:18:12\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:357:31\r\n    at Hono.dispatch (C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:368:5)\r\n    at Hono.fetch (C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:376:17)\r\n    at Hono.request (C:\\Users\\xxxxx\\repo\\hono\\src\\hono-base.ts:406:17)\r\n\r\nstderr | src/jsx/streaming.test.tsx > Streaming > reject()\r\nTrace: undefined\r\n    at C:\\Users\\xxxxx\\repo\\hono\\src\\jsx\\streaming.ts:137:23\r\n    at async Promise.all (index 0)\r\n    at Object.start (C:\\Users\\xxxxx\\repo\\hono\\src\\jsx\\streaming.ts:158:9)\r\n\r\nstdout | src/helper/ssg/index.test.tsx > toSSG function > should execute additional processing using afterGenerateHook\r\nstatic/index.html\r\nstatic/about.html\r\nstatic/about/some.txt\r\nstatic/bravo.html\r\nstatic/Charlie.html\r\nstatic/post/1.html\r\nstatic/post/2.html\r\nstatic/user/1.html\r\nstatic/user/2.html\r\nstatic/user/3.html\r\n\r\n ✓ src/router/pattern-router/router.test.ts (52)\r\n ✓ src/router/trie-router/node.test.ts (77)\r\n ✓ src/router/reg-exp-router/router.test.ts (60)\r\n ✓ src/compose.test.ts (31)\r\n ✓ src/validator/validator.test.ts (30)\r\n ✓ src/hono.test.ts (179) 398ms\r\n ✓ src/client/client.test.ts (28)\r\n ✓ src/jsx/index.test.tsx (62)\r\n ✓ src/jsx/streaming.test.tsx (17) 657ms\r\n ↓ src/helper/css/common.test.tsx (1) [skipped]\r\n ✓ src/jsx/dom/index.test.tsx (49) 1037ms\r\n ✓ src/types.test.ts (38)\r\n ✓ src/helper/ssg/index.test.tsx (24)\r\n ✓ src/router/linear-router/router.test.ts (34)\r\n ✓ src/middleware/jsx-renderer/index.test.tsx (11)\r\n ✓ src/jsx/components.test.tsx (18) 394ms\r\n ✓ src/utils/url.test.ts (15)\r\n ✓ src/context.test.ts (30)\r\n ✓ src/helper/cookie/index.test.ts (17)\r\n ✓ src/utils/cookie.test.ts (22)\r\n ✓ src/middleware/secure-headers/index.test.ts (10)\r\n ✓ src/jsx/hooks/dom.test.tsx (10) 397ms\r\n ✓ src/middleware/csrf/index.test.ts (14)\r\n ✓ src/router/trie-router/router.test.ts (24)\r\n ✓ src/request.test.ts (14)\r\n ✓ src/utils/jwt/jwt.test.ts (10)\r\n ✓ src/middleware/jwt/index.test.ts (12)\r\n ✓ src/adapter/cloudflare-workers/serve-static.test.ts (15)\r\n ✓ src/helper/accepts/accepts.test.ts (8)\r\n ✓ src/helper/dev/index.test.ts (8)\r\n ✓ src/helper/css/index.test.tsx (36)\r\n ✓ src/middleware/cors/index.test.ts (7)\r\n ✓ src/middleware/basic-auth/index.test.ts (7)\r\n ✓ src/middleware/bearer-auth/index.test.ts (9)\r\n ✓ src/jsx/dom/components.test.tsx (16) 622ms\r\n ✓ src/middleware/etag/index.test.ts (8)\r\n ✓ src/middleware/logger/index.test.ts (10) 2054ms\r\n ✓ src/helper/factory/index.test.ts (7)\r\n ✓ src/utils/stream.test.ts (8)\r\n ✓ src/router/smart-router/router.test.ts (6)\r\n ✓ src/middleware/cache/index.test.ts (6)\r\n ✓ src/helper/streaming/sse.test.ts (3) 429ms\r\n ✓ src/utils/buffer.test.ts (5)\r\n ✓ src/client/utils.test.ts (7)\r\n ✓ src/utils/body.test.ts (6)\r\n ✓ src/utils/filepath.test.ts (1)\r\n ✓ src/utils/encode.test.ts (44)\r\n ✓ src/jsx/dom/context.test.tsx (8) 329ms\r\n ✓ src/helper/html/index.test.ts (10)\r\n ✓ src/helper/ssg/utils.test.ts (3)\r\n ✓ src/middleware/timing/index.test.ts (3)\r\n ✓ src/middleware/compress/index.test.ts (4)\r\n ✓ src/utils/crypto.test.ts (5)\r\n ✓ src/utils/mime.test.ts (3)\r\n ✓ src/jsx/dom/css.test.tsx (27) 590ms\r\n ✓ src/utils/types.test.ts (4)\r\n ✓ src/adapter/cloudflare-pages/handler.test.ts (2)\r\n ✓ src/adapter/aws-lambda/handler.test.ts (2)\r\n ✓ src/adapter/vercel/handler.test.ts (2)\r\n ✓ src/helper/streaming/stream.test.ts (2)\r\n ✓ src/adapter/cloudflare-workers/utils.test.ts (1)\r\n ✓ src/helper/streaming/text.test.ts (1)\r\n ✓ src/adapter/lambda-edge/handler.test.ts (1)\r\n ✓ src/middleware/pretty-json/index.test.ts (2)\r\n ✓ src/jsx/jsx-runtime.test.tsx (6)\r\n ✓ src/middleware/powered-by/index.test.ts (2)\r\n ✓ src/utils/html.test.ts (1)\r\n ✓ src/helper/testing/index.test.ts (2)\r\n ✓ src/http-exception.test.ts (1)\r\n ✓ src/utils/jwt/types.test.ts (1)\r\n ✓ src/helper/adapter/index.test.ts (1)\r\n\r\n Test Files  70 passed | 1 skipped (71)\r\n      Tests  1193 passed | 7 skipped (1200)\r\n   Start at  00:30:31\r\n   Duration  7.85s (transform 7.80s, setup 2.32s, collect 24.43s, tests 9.59s, environment 27ms, prepare 20.33s)\r\n\r\n\r\n RUN  v1.2.2 C:/Users/xxxxx/repo/hono\r\n\r\n ✓ src/jsx/hooks/dom.test.tsx (10)\r\n ✓ src/jsx/dom/index.test.tsx (49) 749ms\r\n ✓ src/jsx/dom/components.test.tsx (16) 370ms\r\n ✓ src/jsx/dom/context.test.tsx (8)\r\n ✓ src/jsx/dom/css.test.tsx (27) 385ms\r\n\r\n Test Files  5 passed (5)\r\n      Tests  106 passed | 4 skipped (110)\r\n   Start at  00:30:39\r\n   Duration  2.30s (transform 874ms, setup 96ms, collect 5.19s, tests 2.03s, environment 1ms, prepare 823ms)\r\n\r\n\r\n RUN  v1.2.2 C:/Users/xxxxx/repo/hono\r\n\r\n ✓ src/jsx/hooks/dom.test.tsx (10)\r\n ✓ src/jsx/dom/index.test.tsx (49) 595ms\r\n ✓ src/jsx/dom/context.test.tsx (8)\r\n ✓ src/jsx/dom/components.test.tsx (16)\r\n ✓ src/jsx/dom/css.test.tsx (27)\r\n\r\n Test Files  5 passed (5)\r\n      Tests  106 passed | 4 skipped (110)\r\n   Start at  00:30:42\r\n   Duration  2.10s (transform 1.18s, setup 127ms, collect 4.64s, tests 1.53s, environment 1ms, prepare 1.25s)\r\n\r\nDone in 21.50s.\r\n```\r\n</details>\r\n\r\nIt's too slow so I am testing by replacing `bun run` with `yarn` in package.json\r\nWindows users have difficulty testing Hono with Bun on WSL.\r\nIf you use Windows and can test faster, please let me know.\r\nMy computer is old.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2137082438},{"id":2137948025,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2224","title":"feat: Add a \"cause\" option to HTTPException","body":"Add a \"cause\" option to HTTPException for easier debugging.\r\nclose #2170 \r\n\r\n### How to use\r\n\r\n```ts\r\napp.get('/users', (c) => {\r\n  try {\r\n    const result = await db.select().from(users);\r\n    return c.json(result);\r\n  } catch (error) {\r\n    throw new HTTPException(500, {\r\n      message: 'Internal Server Error',\r\n      cause: error,\r\n    })\r\n  }\r\n})\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2137948025},{"id":2138595962,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2225","title":"Types not working in VSCode: `Type 'HtmlEscapedString | Promise<HtmlEscapedString>' is not assignable to type 'ReactNode'`","body":"### What version of Hono are you using?\n\n4.0.3\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nExample from docs (https://hono.dev/guides/jsx#usage):\r\n\r\n```tsx\r\nimport { Hono } from \"hono\";\r\nimport type { FC } from \"hono/jsx\";\r\n\r\nconst app = new Hono();\r\n\r\nconst Layout: FC = (props) => {\r\n  return (\r\n    <html>\r\n      <body>{props.children}</body>\r\n    </html>\r\n  );\r\n};\r\n\r\nconst Top: FC<{ messages: Array<string> }> = (props: {\r\n  messages: Array<string>;\r\n}) => {\r\n  return (\r\n    <Layout>\r\n      <h1>Hello Hono!</h1>\r\n      <ul>\r\n        {props.messages.map((message) => {\r\n          return <li>{message}!!</li>;\r\n        })}\r\n      </ul>\r\n    </Layout>\r\n  );\r\n};\r\n\r\napp.get(\"/\", (c) => {\r\n  const messages = [\"Good Morning\", \"Good Evening\", \"Good Night\"];\r\n  return c.html(<Top messages={messages} />);\r\n});\r\n```\r\n\n\n### What is the expected behavior?\n\nI expect the types works correctly in the editor.\r\n\r\nI assume configuration is correct because does compile running `tsc`.\n\n### What do you see instead?\n\nHovering elements in VSCode returns:\r\n\r\n```\r\nType 'Element' is not assignable to type 'ReactNode'.ts(2322)\r\nindex.d.ts(1420, 9): The expected type comes from property 'children' which is declared here on type 'DetailedHTMLProps<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>'\r\n```\r\nor\r\n```\r\n'Layout' cannot be used as a JSX component.\r\n  Its type 'FC' is not a valid JSX element type.\r\n    Type 'FC' is not assignable to type '(props: any, deprecatedLegacyContext?: any) => ReactNode'.\r\n      Type 'HtmlEscapedString | Promise<HtmlEscapedString>' is not assignable to type 'ReactNode'.ts(2786)\r\n```\r\nor\r\n```\r\n'Top' cannot be used as a JSX component.\r\n  Its type 'FC<{ messages: string[]; }>' is not a valid JSX element type.\r\n    Type 'FC<{ messages: string[]; }>' is not assignable to type '(props: any, deprecatedLegacyContext?: any) => ReactNode'.\r\n      Type 'HtmlEscapedString | Promise<HtmlEscapedString>' is not assignable to type 'ReactNode'.\r\n        Type 'Promise<HtmlEscapedString>' is not assignable to type 'ReactNode'.ts(2786)\r\n```\n\n### Additional information\n\n`tsconfig.json`:\r\n```json\r\n{\r\n  // snip\r\n  \"compilerOptions\": {\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxImportSource\": \"hono/jsx\",\r\n  },\r\n  // snip\r\n}\r\n```\r\n\r\n`package.json`:\r\n```json\r\n{\r\n  \"private\": true,\r\n  \"sideEffects\": [],\r\n  \"type\": \"module\",\r\n  \"engines\": {\r\n    \"node\": \">=20\"\r\n  },\r\n  \"scripts\": {\r\n    \"predev\": \"rimraf -- .tsimp/\",\r\n    \"dev\": \"nodemon --signal SIGINT --ext .ts,.tsx --watch index.ts --exec 'node --import=tsimp/import index.ts'\",\r\n  },\r\n  \"dependencies\": {\r\n    \"@hono/node-server\": \"1.7.0\",\r\n    \"hono\": \"4.0.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"20.11.17\",\r\n    \"nodemon\": \"3.0.3\",\r\n    \"rimraf\": \"5.0.5\",\r\n    \"tsimp\": \"2.0.11\",\r\n    \"typescript\": \"5.3.3\"\r\n  }\r\n}\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2138595962},{"id":2138634270,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2226","title":"request with body type multipart/form-data returning 403 error","body":"### What version of Hono are you using?\r\n\r\n3.12.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun v1.0.25\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI am sending a http request with content type set to multipart/form-data.\r\nHono is not handling the request and throwing an HTTPException error with status code of 403.\r\n\r\nRequest from frontend : \r\n\r\n```js\r\nconst formData = new FormData();\r\nformData.append(\"id\",\"123\")\r\nfetch(`http://localhost:5173/api/v1/admin/image`, {\r\n    method: \"PATCH\",\r\n    credentials: \"include\",\r\n    mode: \"cors\",\r\n    body: formData,\r\n    headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n})\r\n```\r\nMy backend code using Hono :\r\n\r\n```js\r\nconst app = new Hono()\r\n\r\napp.use('*', csrf())\r\napp.use('*', cors({ credentials: true, origin: \"localhost:5173\" }));\r\napp.patch('/api/v1/admin/image', (c,next) => {\r\n    console.log(\"Image update ran\")\r\n    return c.json({success:true})\r\n})\r\n\r\n```\r\n\r\nInstead of getting the json response i am getting the following error in Hono app console\r\n\r\n```\r\n1 | // src/http-exception.ts\r\n2 | var HTTPException = class extends Error {\r\n3 |   constructor(status = 500, options) {\r\n4 |     super(options?.message);\r\n        ^\r\nerror: Error\r\n      at new HTTPException (/Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/http-exception.js:4:5)\r\n      at /Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/middleware/csrf/index.js:28:13\r\n      at cors (/Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/middleware/csrf/index.js:23:30)\r\n      at /Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/compose.js:29:23\r\n      at dispatch (/Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/compose.js:7:32)\r\n      at /Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/hono-base.js:226:31\r\n      at /Users/singh/Code/Dev/Haiga/haiga-api-hono-all/node_modules/hono/dist/hono-base.js:224:13\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2138634270},{"id":2139025414,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2227","title":"Uncaught Error: Disallowed operation called within global scope with hono/jwt in CloudflareWorkers","body":"### What version of Hono are you using?\n\n4.0.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n```js\r\nimport { Hono } from 'hono'\r\nimport { sign } from 'hono/jwt'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', async (c) => {\r\n  const payload = {\r\n    sub: 'user123',\r\n    role: 'admin',\r\n  }\r\n  const secret = 'mySecretKey'\r\n  const token = await sign(payload, secret)\r\n  return c.json({ token }, 200)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nThe above code calls the sign function of ```hono/jwt``` and creates an endpoint that creates and returns a JWT token.\r\n\r\nRun a local environment for ```CloudflareWorkers```.\r\nThe package manager is ```pnpm```.\r\n\r\n\n\n### What is the expected behavior?\n\nAbility to create JWT tokens by calling the ```sign``` function within Hono's handler.\n\n### What do you see instead?\n\nI ran the above code in the local environment of CloudflareWorkers and got the following error.\r\n\r\n```\r\n⎔ Starting local server...\r\n[wrangler:inf] Ready on http://localhost:8787\r\n✘ [ERROR] service core:user:carcharhinus: Uncaught Error: Disallowed operation called within global scope. Asynchronous I/O (ex: fetch() or connect()), setting a timeout, and generating random values are not allowed within global scope. To fix this error, perform this operation within a handler. https://developers.cloudflare.com/workers/runtime-apis/handlers/\r\n\r\n    at null.<anonymous> (index.js:27321:29)\r\n\r\n\r\n✘ [ERROR] MiniflareCoreError [ERR_RUNTIME_FAILURE]: The Workers runtime failed to start. There is likely additional logging output above.\r\n```\r\n\r\nIt is suggested to use it in the handler instead of the global scope, but I am getting an error even though I am using it in a Hono handler.\n\n### Additional information\n\nThe error about ```hono/jwt``` confirms that there is also an error about the JWT Auth Middleware.\r\n\r\nI confirmed the same error as above when I run it in Cloudflare Workers local environment using jwt Middleware as per the official documentation.\r\n\r\n```js\r\nimport { Hono } from 'hono'\r\nimport { jwt } from 'hono/jwt'\r\n\r\nconst app = new Hono()\r\n\r\napp.use(\r\n  '/auth/*',\r\n  jwt({\r\n    secret: 'it-is-very-secret',\r\n  })\r\n)\r\n\r\napp.get('/auth/page', (c) => {\r\n  return c.text('You are authorized')\r\n})\r\n\r\nexport default app\r\n\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139025414},{"id":2139098248,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2228","title":"feat(logger): support `NO_COLOR`","body":"Related: https://github.com/honojs/hono/pull/2007\r\nThis PR adds `utils/colors.ts`.\r\n\r\nWe have to support `NO_COLOR`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139098248},{"id":2139113548,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2229","title":"docs(contribution): add install flag `--frozen-lockfile`","body":"Match the install command with Installing dependencies.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139113548},{"id":2139758319,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2230","title":"fix(jsx/dom): fix finding element to insert before","body":"fixes https://github.com/honojs/honox/issues/68\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139758319},{"id":2139770513,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2231","title":"refactor(jsx): shorten use hook a bit","body":"This is a very small refactoring and changes nothing in the specifications.\r\n\r\nWhen processing the result of an \"if/else\" type of promise, it is shorter and clearer to pass two functions to `.then()` than to use `.catch()`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139770513},{"id":2139841178,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2232","title":"bug: conflicting JSX types when using Hono JSX in a React project.","body":"It seems when using Hono JSX in an existing React project (ie. Next.js project). The registered Hono JSX types seem to conflict with the registered React JSX types. Related to https://github.com/honojs/hono/issues/2190.\r\n\r\nHere is a sample error (taken from the minimal reproducible repo below):\r\n\r\n```bash\r\napp/api/[[...route]]/route.tsx:12:17 - error TS2769: No overload matches this call.\r\n  Overload 1 of 2, '(html: string | Promise<string>, status?: StatusCode | undefined, headers?: HeaderRecord | undefined): Response | Promise<Response>', gave the following error.\r\n    Argument of type 'Element' is not assignable to parameter of type 'string | Promise<string>'.\r\n  Overload 2 of 2, '(html: string | Promise<string>, init?: ResponseInit | undefined): Response | Promise<Response>', gave the following error.\r\n    Argument of type 'Element' is not assignable to parameter of type 'string | Promise<string>'.\r\n\r\n12   return c.html(<div>hello world</div>)\r\n                   ~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n### What version of Hono are you using?\r\n\r\n4.0.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nN/A\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Clone this repo: https://github.com/jxom/hono-react-jsx-repro\r\n2. `bun install`\r\n3. `bun run typecheck`\r\n4. Error will be shown.\r\n\r\n### What is the expected behavior?\r\n\r\nNo errors emitted.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139841178},{"id":2139852161,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2233","title":"feat(jsx): support HtmlEscapedString in html tag function","body":"fixes #2208\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139852161},{"id":2139902179,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2234","title":"fix(validator): use the cached content","body":"Fixes #2163\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139902179},{"id":2139910289,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2235","title":"chore(package.json): remove `@edge` for `compute`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139910289},{"id":2139987855,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2236","title":"fix(ssg): path of already extention","body":"\r\n- before\r\n    - /index.html -> static/index.html.html \r\n- after\r\n    - /index.html -> static/index.html\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2139987855},{"id":2140073747,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2238","title":"fix(jwt): import cookie helper correctly","body":"Fixes #2227\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2140073747},{"id":2140633575,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2239","title":"Improvement of extension determination","body":"### What is the feature you are proposing?\n\nWith #2236, the presence or absence of extensions is now automatically determined, but I think this behavior should be improved.\r\n\r\n### Test\r\n\r\nCurrently, adding the following test succeeds, but is this the expected result?\r\n\r\n```diff\r\ndiff --git a/src/helper/ssg/index.test.tsx b/src/helper/ssg/index.test.tsx\r\nindex dde90e5a..07726d04 100644\r\n--- a/src/helper/ssg/index.test.tsx\r\n+++ b/src/helper/ssg/index.test.tsx\r\n@@ -297,6 +297,10 @@ describe('saveContentToFiles function', () => {\r\n       ['/about/', { content: 'About Page', mimeType: 'text/html' }],\r\n       ['/bravo/index.html', { content: 'About Page', mimeType: 'text/html' }],\r\n       ['/bravo/index.tar.gz', { content: 'About Page', mimeType: 'application/gzip' }],\r\n+      ['/bravo/release-4.0.0', { content: 'Release 4.0.0', mimeType: 'text/html' }],\r\n+      ['/bravo/2024.02.18-sweet-memories', { content: 'Sweet Memories', mimeType: 'text/html' }],\r\n+      ['/bravo/deep.dive.to.html', { content: 'Deep Dive To HTML', mimeType: 'text/html' }],\r\n+      ['/bravo/alert.js', { content: 'alert(\"evil content\")', mimeType: 'text/html' }],\r\n       ['/bravo.text/index.html', { content: 'About Page', mimeType: 'text/html' }],\r\n       ['/bravo.text/', { content: 'Bravo Page', mimeType: 'text/html' }],\r\n     ])\r\n@@ -312,6 +316,10 @@ describe('saveContentToFiles function', () => {\r\n     expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo/index.tar.gz', 'About Page')\r\n     expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo.text/index.html', 'About Page')\r\n     expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo.text/index.html', 'Bravo Page')\r\n+    expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo/release-4.0.0', 'Release 4.0.0')\r\n+    expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo/deep.dive.to.html', 'Deep Dive To HTML')\r\n+    expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo/2024.02.18-sweet-memories', 'Sweet Memories')\r\n+    expect(fsMock.writeFile).toHaveBeenCalledWith('static/bravo/alert.js', 'alert(\"evil content\")')\r\n   })\r\n \r\n   it('should correctly create directories if they do not exist', async () => {\r\n\r\n```\r\n\r\n### Review\r\n\r\n#### Consideration of additional settings\r\n\r\nTo begin with, is this something that should be inferred from the file path, as is the current implementation? It seems to me that there are very few cases where \"only a part of the site we are trying to export has a URL extension, and we want that extension to be exported as it is.\r\n\r\nI think it is usually the scope of the \"entire site\" or \"entire routing\" that determines whether the URL already contains the extension or not.\r\n\r\n```ts\r\ntoSSG(app, fs, {\r\n  guessExtension: true,\r\n})\r\n```\r\n\r\nor\r\n\r\n```ts\r\napp.get(\r\n  '/shops/:id',\r\n  ssgConfig(() => ({ // new method\r\n    guessExtension: false,\r\n    params: [ ... ], // works the same way as ssgParams\r\n  })),\r\n  async (c) => { ... }\r\n)\r\n```\r\n\r\n#### Consideration of conditions\r\n\r\nIf we do not want to add the settings I have indicated above, but want the decision to be automatic, as in the current implementation, I think we need to make the conditions a bit stricter. I think it is very problematic for this to be exported in .js.\r\n\r\n```\r\n['/bravo/alert.js', { content: 'alert(\"evil content\")', mimeType: 'text/html' }],\r\n```\r\n\r\nIf an URL has an extension that does not match the mime type, I think the mime type should be given priority for SSG. The reason is that in many cases, when the exported file is served from a web server, the mime type is guessed from the file extension, so it will differ from the mime type specified when output from the app.\r\n\r\nAs an aside. \r\nThis is the same problem as https://github.com/honojs/hono/issues/2180. In #2180, \"app returns 404, but when the exported file is served, it is 200\".","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2140633575},{"id":2141170014,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2240","title":"fix(context): fix queries and headers types","body":"### Importance of Implementation\r\n\r\nThe current routing system lacks enforcement of query parameters and headers, allowing them to be `undefined` if middleware fails to validate them. This behavior can lead to errors caused by type mismatches. To address this issue and align with the framework's behavior, the `undefined` type has been introduced. It is currently applicable for calls with keys like `Context.req.query('name')`, but not for those without keys such as `Context.req.query()`.\r\n\r\n### Practical Example\r\n\r\nConsider the following code snippet, which will not exhibit type issues but is prone to runtime failures:\r\n\r\n```ts\r\napp.get('/capitalized-name', (c) => {\r\n  // At this point, 'name' is assumed to be a string\r\n  const { name } = c.req.query();\r\n  // This line is at risk of failure if the API is invoked without the 'name' query parameter\r\n  return c.text(name.toUpperCase());\r\n})\r\n```\r\n\r\nWith this pull request, an error will be triggered on the last line, indicating that `name` could potentially be of type `undefined`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n### Related\r\n\r\n- https://github.com/honojs/hono/issues/1632\r\nThis PR does not add generics as requested in the issue. However, if they are ever implemented, the `undefined` should be present and serve as the foundation for all generics, unless a router can filter query parameters.","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2141170014},{"id":2141236877,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2241","title":"feat(jsx/dom): support namespace for svg and mathml elements","body":"fixes https://github.com/honojs/honox/issues/71\r\n\r\nIn the case of SVG and MathML elements, it is necessary to use createElementNS instead of createElement to support them.\r\n\r\n### Differences from React\r\n\r\nIn React, it is necessary to specify in lower camel case, and I think the output will be converted to kebab case. This PR does not do that conversion, but I think it is OK to have hono specify kebab case from the beginning. If there are many requests, we will consider adding a conversion process.\r\n\r\n```tsx\r\n   // in React \r\n   <circle\r\n     cx=\"40\"\r\n     cy=\"40\"\r\n     r=\"35\"\r\n     stroke=\"black\"\r\n     strokeWidth=\"4\"\r\n     fill=\"lightgrey\"\r\n   /> // => <circle cx=\"40\" cy=\"40\" r=\"35\" stroke=\"black\" stroke-width=\"4\" fill=\"lightgrey\" />\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2141236877},{"id":2141847229,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2243","title":"fix: Dot-containing paths do not correctly receive extension completion.","body":"fixes: https://github.com/honojs/hono/pull/2236\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2141847229},{"id":2141903375,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2244","title":"SSG: Should the default Content-Type be text/plain?","body":"### What is the feature you are proposing?\n\nCurrently, if Content-Type is not found, it is processed as text/plain, resulting in a .txt file name.\r\nhttps://github.com/usualoma/hono/blob/dcb740176f8e4e26783bac05ba5bd6ea7ef4e09d/src/helper/ssg/index.ts#L164\r\n\r\nI wonder if there is a case where this fallback works effectively. \r\n\r\nhono's app and external APIs almost never return a response without Content-Type, and if Content-Type is not found, it is most likely that \"some error has occurred\". I think it is better to make it an error as the default behavior.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2141903375},{"id":2143995175,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2247","title":"fix(ssg):  Error when ContentType is missing","body":"fixes: https://github.com/honojs/hono/issues/2244\r\n\r\n\r\nThis sets the specification for the defaultContentType of SSG, which was implicitly set to `text/plain` until now.\r\n\r\nHowever, as per the issue mentioned above, this may not be appropriate. Therefore, we have added the option defaultContentType. In normal settings, routes like c.redirect, which include no content-type, will result in an error.\r\n\r\n If set, it will fallback to the specified value. One issue is that setting the DefaultContent-type to an arbitrary value like 'aaaa' results in an empty .html file being output. This is because the default value in determineExtension is .html, but there is room for discussion on what the specification should be regarding this issue.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2143995175},{"id":2144197704,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2248","title":"refactor(context): skip jsx type import","body":"Maybe fixes #2190\r\n\r\n### #2190 What is at stake here?\r\n\r\nImporting \"hono/client\" is causing problems because hono's JSX types are being read.\r\n\r\n```ts\r\nimport { hc } from \"hono/client\";\r\n```\r\n\r\nThis is because \"context.ts\" imports \"hono/jsx\" and \"hono/middleware/jsx-renderer\". This PR eliminates this.\r\n\r\n\r\n### Where are the conflicts?\r\n\r\nHowever, even after resolving this, if I try to use `React.ElementType` and \"hono/jsx\" at the same time (I am not aware if there is such a case or not), we still have problems. \r\n\r\nThe following part cannot avoid conflict with the `React.ElementType` definition in any way.\r\nhttps://github.com/usualoma/hono/blob/33f2d484f651ea55913ebe7022ed028e8ac7743f/src/jsx/base.ts#L20-L22\r\n\r\nIf a workaround is needed, I think the only way is to remove `[tagName: string]: Props`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2144197704},{"id":2146331517,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2249","title":"Discourage usage of ContextVariableMap and provide helper ExtractEnv","body":"### What is the feature you are proposing?\n\nWe currently build a large application with multiple nested routes and the need for different middleware\r\n\r\n````tsx\r\nconst app = new Hono().use(ipAddress).use(logger);\r\n\r\napp.route(\"/private\",privateRoutes);\r\napp.route(\"/frontend\", frontendRoutes);\r\napp.route(\"/management\", managmentRoutes);\r\n\r\n// managementRoutes.tsx\r\nexport const managmentRoutes = new Hono().use(jwt);\r\n... do something\r\n\r\n// ipAddress.tsx\r\nexport const ipAddress: MiddlewareHandler<{\r\n  Variables: {\r\n    remoteIp: string;\r\n  };\r\n}> = async (c, next) => {\r\n ....\r\n}\r\n````\r\n\r\nWhere we now have 2 issues at the same time.\r\n\r\n1. The type `remoteIp` which is a global middleware is not available in any of the mounted mounted `Hono` instance \r\n2. The type `jwtPayload` is available in all hono instances even though it is not set as the middleware is only bound to managementRoutes\r\n\r\nI believe the [ContextVariableMap ](https://hono.dev/api/context#contextvariablemap) is really convinient, but it also provides incorrect typings and now we can not trust the IDE anymore and have to either just assume we are right or use some additional checks everywhere.\r\n\r\nA better solution would be to provide a utility type to extract the ENV generic and let the user manually pass it down to the mounted Hono instances.\r\n\r\n````tsx\r\nconst app = new Hono().use(ipAddress).use(logger);\r\n\r\ntype ExtractEnv<T> = T extends Hono<infer Env, any,any> ? Env : never;\r\nexport type BaseAppEnv = ExtractEnv<typeof app>;\r\n\r\n// managementRoutes.tsx\r\nexport const managmentRoutes = new Hono<BaseAppEnv>().use(jwt);\r\n````\r\n\r\nIf usability is favored over correctness we should at least have a section in the docs hinting that such a type helper could be used. \r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2146331517},{"id":2147401066,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2250","title":"chore: use official deno installer","body":"Deno installer support ARM64 builds from [v1.40.4](https://github.com/denoland/deno/releases/tag/v1.40.4).\r\nThe third party installer we are currently using has officially come to an end.\r\nhttps://github.com/LukeChannings/deno-arm64\r\n\r\nWe can use the official installer.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2147401066},{"id":2147919973,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2251","title":"serveStatic doesn't work with extensionless files","body":"### What version of Hono are you using?\n\n4.0.5\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nI'm using [Pagefind](https://pagefind.app/) which generates the following file structure:\r\n<img width=\"575\" alt=\"imaxe\" src=\"https://github.com/honojs/hono/assets/377873/1c554d29-d6ba-4b12-bb6e-a9876632815e\">\n\n### What is the expected behavior?\n\nWhen the browser request the file `/pagefind/pagefind.unknown_278027f53872923.pf_meta` it should be served correctly.\n\n### What do you see instead?\n\nThe browser gets a 404 error, and Hono logs\r\n\r\n```\r\nError: Not a directory (os error 20): open './_site/pagefind/pagefind.unknown_278027f53872923.pf_meta/index.html'\r\n```\n\n### Additional information\n\nThis is because Hono automatically add `/index.html` to any file without an extension (See the code here: https://github.com/honojs/hono/blob/main/src/utils/filepath.ts#L19-L21)\r\n\r\nIt should check first if the file exist before adding the `defaultDocument` sufix.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2147919973},{"id":2148784558,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2253","title":"Deeply nested route grouping with regexp breaks client param type inference","body":"### What version of Hono are you using?\n\n4.0.4\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n[TypeScript Playground](https://tsplay.dev/wE2B4N)\r\n\r\n```ts\r\nimport { Hono } from 'hono';\r\nimport { hc } from 'hono/client';\r\n\r\nconst foo = new Hono().route(\r\n  '/',\r\n  new Hono().get('/:foo{[a-z]+}', (c) => c.json({ ok: true })),\r\n);\r\nhc<typeof foo>('/')[':foo{[a-z]+}'].$get({ param: {} });\r\n//                                            ^? { foo: string }\r\n\r\nconst bar = new Hono().route(\r\n  '/',\r\n  new Hono().route(\r\n    '/:foo{[a-z]+}',\r\n    new Hono().get('/', (c) => c.json({ ok: true })),\r\n  ),\r\n);\r\nhc<typeof bar>('/')[':foo{[a-z]+}'].$get({ param: {} });\r\n//                                            ^? { \":foo{[a-z]+}\": string }\r\n```\n\n### What is the expected behavior?\n\nUsing the example above, ideally the a fix for the types such that the `param`'s required for the client correct strip out the regex pattern.\r\n\r\nTesting this locally it is just a case of the types being wrong / broken. If you try to pass in the property with the regex the request will fail. But if you ignore the type error & pass in what should be the correct property, in this case `foo`, it works just fine.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2148784558},{"id":2148962825,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2254","title":"Exception occured when send invalid HTTP method to RegExpRouter","body":"### What version of Hono are you using?\n\n4.0.5\n\n### What runtime/platform is your app running on?\n\ndeno\n\n### What steps can reproduce the bug?\n\n### 1. Run HTTP Server\r\n\r\nRun below script by `deno run --allow-net`\r\n\r\n```ts\r\nimport { Hono, RegExpRouter, SmartRouter } from \"https://deno.land/x/hono@v4.0.5/mod.ts\";\r\n\r\nconst app = new Hono({\r\n    router: new SmartRouter(\r\n        {routers: [new RegExpRouter()]}\r\n    )\r\n});\r\n\r\napp.all(\"/\", c => c.text(\"Hello Hono!\"));\r\n\r\nDeno.serve(app.fetch);\r\n```\r\n\r\n### 2. Send request with invalid HTTP method\r\n\r\n```sh\r\ncurl -X \"FOOBAR\" \"http://localhost:8000\"\r\n```\r\n\r\nHono returns `500 Internal Server Error` and dumps error log below.\r\n\r\n```\r\nTypeError: Cannot read properties of undefined (reading '2')\r\n    at RegExpRouter.match (https://deno.land/x/hono@v4.0.5/router/reg-exp-router/router.ts:217:34)\r\n    at RegExpRouter.match (https://deno.land/x/hono@v4.0.5/router/reg-exp-router/router.ts:231:17)\r\n    at SmartRouter.match (https://deno.land/x/hono@v4.0.5/router/smart-router/router.ts:37:22)\r\n    at Hono.matchRoute (https://deno.land/x/hono@v4.0.5/hono-base.ts:300:24)\r\n    at Hono.dispatch (https://deno.land/x/hono@v4.0.5/hono-base.ts:323:30)\r\n    at fetch (https://deno.land/x/hono@v4.0.5/hono-base.ts:375:17)\r\n    at ext:deno_http/00_serve.js:455:24\r\n    at ext:deno_http/00_serve.js:689:29\r\n    at eventLoopTick (ext:core/01_core.js:65:7)\r\n```\r\n\r\n### 3. send valid request\r\n\r\n```sh\r\ncurl \"http://localhost:8000\"\r\n```\r\n\r\nIt is valid request, But Hono returns `500 Internal Server Error` and dumps error.\r\n\r\n```\r\nError: Can not add a route since the matcher is already built.\r\n    at RegExpRouter.add (https://deno.land/x/hono@v4.0.5/router/reg-exp-router/router.ts:137:13)\r\n    at https://deno.land/x/hono@v4.0.5/router/smart-router/router.ts:35:18\r\n    at Array.forEach (<anonymous>)\r\n    at SmartRouter.match (https://deno.land/x/hono@v4.0.5/router/smart-router/router.ts:34:16)\r\n    at Hono.matchRoute (https://deno.land/x/hono@v4.0.5/hono-base.ts:300:24)\r\n    at Hono.dispatch (https://deno.land/x/hono@v4.0.5/hono-base.ts:323:30)\r\n    at fetch (https://deno.land/x/hono@v4.0.5/hono-base.ts:375:17)\r\n    at ext:deno_http/00_serve.js:455:24\r\n    at ext:deno_http/00_serve.js:689:29\r\n    at eventLoopTick (ext:core/01_core.js:65:7)\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nThe error of step 3. only occured when using `SmartRouter` with `RegExpRouter`.\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2148962825},{"id":2149051045,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2255","title":"fix(reg-exp-router): use matchers[METHOD_NAME_ALL] as fallback for unknown method","body":"fixes #2254\r\n\r\nFixed an error when accessed by an unknown method. I don't think there is a compatibility issue.\r\n\r\nI will think about #1953 later.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2149051045},{"id":2150414665,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2258","title":"test: add router/common.case.test.ts","body":"fixes #1953\r\n\r\n### Tidy up\r\n\r\nSuppress errors from `yarn lint:fix`\r\n\r\n* 2c521b2b771bacbba6b90072b52c7cc0849714fe\r\n* 57cef10b0dee45a40b75e7fde8a0bd097bd23976\r\n\r\n### Tweaks vitest.config.ts\r\n\r\nExclude \"\\*.case.test.ts\" from vitest\r\n\r\nThese special files are used to share test cases between different modules or runtime environments.\r\n* shared among multiple routers\r\n* shared by renderToString and renderToDom\r\n\r\nSince these files are test files, they should be excluded from the build, in which case it is convenient to name them \"\\*.test.ts\". However, the file itself does not contain the test execution, so it should be excluded from `vitest watch`. With that motivation, we added \"\\*.case.test.ts\" to the exclude of vitest.\r\n\r\n### src/router/common.case.test.ts\r\n\r\nAll routers run tests using `runTest` exported from this file. For routers other than \"TireRouter\", there are a few test cases that do not pass (this was intended at the time of implementation), so we need to explicitly specify to skip them and instead add router-specific tests.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2150414665},{"id":2150595612,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2259","title":"[jsx/dom] Value set in `input.value` is not updated","body":"### What version of Hono are you using?\r\n\r\n4.0.5\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nany\r\n\r\n### What steps can reproduce the bug?\r\n\r\nFor instance, TODO list using `hono/jsx/dom`:\r\n\r\n```tsx\r\nimport { useState } from 'hono/jsx'\r\n\r\ntype Todo = {\r\n  title: string\r\n}\r\n\r\nexport default function Todo() {\r\n  const [title, setTitle] = useState('')\r\n  const [todos, setTodos] = useState<Todo[]>([])\r\n  return (\r\n    <div>\r\n      <h1>Todo</h1>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault()\r\n          setTodos((todos) => [...todos, { title }])\r\n          setTitle('') // clear the value\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          value={title}\r\n          onChange={(e) => {\r\n            if (e.target instanceof HTMLInputElement) {\r\n              setTitle(e.target.value)\r\n            }\r\n          }}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      <ul>\r\n        {todos.map((todo) => {\r\n          return <li>{todo.title}</li>\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe `input.value` is cleared when the todos are updated.\r\n\r\n### What do you see instead?\r\n\r\nThe `input.value` not is cleared:\r\n\r\nhttps://github.com/honojs/hono/assets/10682/d0d76a93-e6ca-4ccc-a5fa-dc8e497771c9\r\n\r\n\r\n\r\n### Additional information\r\n\r\nThe project to reproduce the bug:\r\n\r\nhttps://github.com/yusukebe/hono-jsx-todos","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2150595612},{"id":2150953728,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2260","title":"fix(serve-static): support extensionless files and refactor","body":"Fixes #2251 and refactored.\r\n\r\nRefactoring methods:\r\n\r\n* Created `middleware/serve-static`, which is not used by users directly.\r\n* Wrap the middleware by the environment, such as Deno, Bun, and Cloudflare Workers.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2150953728},{"id":2151068371,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2261","title":"fix: assign value to element's property for input, textarea, select","body":"fixes https://github.com/honojs/hono/issues/2259\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2151068371},{"id":2151137120,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2262","title":"fix(stream): avoid hang up when stream helper's callback throw error","body":"resolve: #2164\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2151137120},{"id":2151628498,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2263","title":"Support serve files without extension","body":"## Author should do the followings, if applicable\r\n\r\n[x] Add tests\r\n[x] Run tests\r\n[x] yarn denoify to generate files for Deno\r\n\r\n**News**\r\n- Add support to serve static files without extension.\r\nThis is because I need certbot validate the domain and it generate files without extension.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2151628498},{"id":2151996922,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2264","title":"perf(jsx/dom): update textContent only when content changes","body":"When there is no update, assing to textContent is not performed to improve performance.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2151996922},{"id":2152106970,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2265","title":"feat: Introduce WebSocket Helper / Adapter","body":"Reference: https://github.com/honojs/hono/issues/1153\r\n\r\nIf we marge this PR, we can use WebSocket API through Hono easier.\r\n\r\nExample (Bun):\r\n```tsx\r\n// app.tsx\r\n\r\n/** @jsx jsx */\r\n/** @jsxImportSource ./hono/src/jsx */\r\nimport { Hono } from 'hono'\r\nimport { createBunWebSocket } from 'hono/ws/bun'\r\n\r\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', c => {\r\n  return c.html(\r\n  <html>\r\n    <head>\r\n      <meta charset=\"UTF-8\" />\r\n    </head>\r\n    <body>\r\n      <h1>Hono WebSocket Example</h1>\r\n      <div id=\"now-time\"></div>\r\n      <script dangerouslySetInnerHTML={{\r\n        __html: `\r\n        const ws = new WebSocket('/ws')\r\n        const $nowTime = document.getElementById('now-time')\r\n        ws.onmessage = evt => {\r\n          $nowTime.textContent = evt.data\r\n        }\r\n        `\r\n      }}></script>\r\n    </body>\r\n  </html>)\r\n})\r\n\r\nconst ws = app.get('/ws', upgradeWebSocket(c => {\r\n  let intervalId: number\r\n  return {\r\n    onOpen(evt, ws) {\r\n      intervalId = setInterval(() => {\r\n        ws.send(new Date().toString())\r\n      }, 200) as unknown as number\r\n    },\r\n    onClose () {\r\n      clearInterval(intervalId)\r\n    }\r\n  }\r\n}))\r\n\r\nexport type AppType = typeof ws\r\n\r\nBun.serve({\r\n  fetch: app.fetch,\r\n  port: 3030,\r\n  websocket\r\n})\r\n```\r\nThen, it is working!\r\n\r\nhttps://github.com/honojs/hono/assets/79000684/100d4bba-36fd-4c56-a74a-f779d5cb55c9\r\n\r\nIn Cloudflare workers, it probably work (I didn't test it):\r\n```ts\r\n// Replace\r\nimport { createBunWebSocket } from 'hono/ws/bun'\r\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\r\n// To\r\nimport { upgradeWebSocket } from 'hono/ws/cloudflare-workers'\r\n```\r\n\r\nAnd, Hono client can work on it!\r\n```ts\r\nimport type { AppType } from './app'\r\nimport { hc } from 'hono/client'\r\n\r\nconst client = hc<AppType>('/')\r\nconst socket = client.ws.$ws() // socket is just `WebSocket` instance\r\n\r\nsocket.onmessage = ...\r\n```\r\nCons for client:\r\n - This implementing code is not smart, I think good solution it is exists.\r\n - Not type safe\r\n\r\n### Implemented adapters:\r\n- [x] Bun\r\n- [x] Cloudflare Workers\r\n- [ ] Node.js\r\n- [ ] AWS lambda\r\n- [x] Cloudflare Pages\r\n- [x] Deno\r\n- [ ] lambda-edge\r\n- [ ] netlify\r\n- [ ] ~~Vercel~~ (Vercel doesn't support WebSockets)\r\n\r\n\r\n### ~~New `devDependencies`~~\r\n- ~~[`bun-types`](https://www.npmjs.com/package/bun-types)~~\r\n  - ~~The reason is to make Bun Adapter~~\r\n  - ~~It is only included Types.~~\r\n### Author should do the followings, if applicable\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152106970},{"id":2152219675,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2266","title":"On incorrect Content-Type, Validator should inform client instead of throwing 500.","body":"### What is the feature you are proposing?\n\nIf I send a request with an empty body or incorrect Content-Type to a route that validates some JSON schema, it should inform the client of the expected content type and data schema instead of throwing HTTPException and sending 500.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152219675},{"id":2152462210,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2267","title":"Cannot set property duplex of #<_Request> which has only a getter","body":"### What version of Hono are you using?\r\n\r\n4.0.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nnode\r\n\r\n### What steps can reproduce the bug?\r\n\r\n\r\n```ts\r\napp.mount('/',(req)=>new Response(new ReadableStream()))\r\n```\r\n\r\n```ts\r\ncurl http://0.0.0.0:8787/xyz -X OPTIONS\r\n```\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nWorks as expected\r\n\r\n### What do you see instead?\r\n\r\n```\r\nTypeError: Cannot set property duplex of #<_Request> which has only a getter\r\n    at new Request (file:///app/node_modules/.pnpm/@hono+node-server@1.8.1/node_modules/@hono/node-server/dist/index.mjs:15:22)\r\n    at handler (file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/hono-base.js:169:9)\r\n    at dispatch (file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/compose.js:29:23)\r\n    at file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/compose.js:30:20\r\n    at logger2 (file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/middleware/logger/index.js:35:11)\r\n    at dispatch (file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/compose.js:29:23)\r\n    at file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/compose.js:6:12\r\n    at file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/hono-base.js:226:31\r\n    at Hono.dispatch (file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/hono-base.js:236:7)\r\n    at fetch (file:///app/node_modules/.pnpm/hono@4.0.4/node_modules/hono/dist/hono-base.js:60:19)\r\n\r\n```\r\n\r\n### Additional information\r\n\r\nSeems triggered by \r\n\r\nhttps://github.com/honojs/node-server/blob/826b77bbf0d10c103fd03e66956bbfd1f01c41ea/src/request.ts#L14-L18\r\n\r\nBut this is not allowed see https://github.com/sindresorhus/ky/issues/467","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152462210},{"id":2152507861,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2268","title":"fix(jsx/dom): import from correct file for avoiding circular dependency","body":"Fixes https://github.com/honojs/honox/issues/92\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152507861},{"id":2152617473,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2269","title":"feat(cookie): add secure and host prefix support","body":"Hello @yusukebe!\r\n\r\nI have added support for secure and host prefixes. This PR resolves https://github.com/honojs/hono/issues/1203\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\ncc: @Code-Hex ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152617473},{"id":2152704125,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2270","title":"Hono infers the output for all client endpoints as an empty object when building type defs","body":"### What version of Hono are you using?\n\n4.0.6\n\n### What runtime/platform is your app running on?\n\nCloudflare Pages, Vite\n\n### What steps can reproduce the bug?\n\n- Create a simple REST api with Hono and Vite, including zod validators.\r\n- Enable library mode in the Vite config file, and add the `vite-plugin-dts` plugin.\r\n- Create a client module, which exports a Hono client, typed using the app object:\r\n\r\n  ```ts\r\n  export const client = hc<typeof app>(\"http://localhost:5173/\");\r\n  ```\r\n- Build the package.\r\n- Open the generated `.d.ts` file for the client, and see that all the `output` fields are inferred as `{}`.\r\n\r\nSource code for the project I'm experiencing this in is available here: https://github.com/lipu-linku/sona/tree/main/api. Build the project using `pnpm run build --mode lib` and open `api/dist/client/client.d.ts` to see the result.\n\n### What is the expected behavior?\n\nThe output types should be correctly inferred from the types used in the actual project.\n\n### What do you see instead?\n\nAll the output types are `{}`, even though in dev (hovering over the output types in-editor) they're correctly inferred.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152704125},{"id":2152761972,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2271","title":"fix(types): `MergeSchemaPath` supports regexp path params","body":"Fixes #2253\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152761972},{"id":2152820891,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2272","title":"fix(ssg): allow `app: Hono<any, any, any>` for `toSSG`","body":"Fixing the type error. The type here is never used, so it can be loose.\r\n\r\n<img width=\"376\" alt=\"Screenshot 2024-02-26 at 0 39 40\" src=\"https://github.com/honojs/hono/assets/10682/3da9ef09-1b2e-4095-83be-49ee5fdb4589\">\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152820891},{"id":2152825692,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2273","title":"Handler stuck when awaiting aborted SSE stream","body":"Fixes: #2068\r\nIn the current version of Hono, the `stream.writeSSE` method was getting blocked indefinitely when the user disconnects from the SSE stream prematurely. Consider this example (taken from #2068):\r\n\r\n```typescript\r\nimport { serve } from \"@hono/node-server\";\r\nimport { Hono } from \"hono\";\r\nimport { streamSSE } from \"hono/streaming\";\r\n\r\nconst app = new Hono();\r\n\r\nlet testId = 0;\r\n\r\napp.get(\"/sse\", (c) =>\r\n  streamSSE(c, async (stream) => {\r\n    try {\r\n      const currentTestId = ++testId;\r\n      let aborted = false;\r\n      stream.onAbort(() => {\r\n        aborted = true;\r\n      });\r\n\r\n      for (let i = 0; i < 10; i++) {\r\n        console.log(currentTestId, \"Iteration\", i, aborted ? \"(aborted)\" : \"\");\r\n        // If I await the writeSSE like this, it sometimes never returns when the stream is aborted\r\n        await stream.writeSSE({ data: JSON.stringify({ iteration: i }) });\r\n        await stream.sleep(1000);\r\n      }\r\n      console.log(\"Done\");\r\n    } catch (error) {\r\n      console.error(\"Error\", error);\r\n    }\r\n  })\r\n);\r\n\r\nconst port = 8000;\r\nconsole.log(`Server is running on port ${port}`);\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port,\r\n});\r\n```\r\n\r\nWhen the client disconnects from the stream while the loop is still going on, the following things happen:\r\nIn the file `src/utils/stream.ts`:\r\n```typescript\r\nthis.responseReadable = new ReadableStream({\r\n  async pull(controller) {\r\n    const { done, value } = await reader.read()\r\n    done ? controller.close() : controller.enqueue(value)\r\n  },\r\n  cancel: () => {\r\n    this.abortSubscribers.forEach((subscriber) => subscriber())\r\n  },\r\n})\r\n```\r\n\r\n`cancel` function runs, thereby running all the abort subscribers, but due to the loop in the test code provided above, the `pull` function still receives `done` as `false` and some value from the `reader`, and gets blocked indefinitely because the `controller` enqueued it.\r\n\r\nIt is difficult to reproduce this behaviour in the test suites, because aborting the request from code works fine. This is not the case when using a client such as `curl` or postman.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152825692},{"id":2152907838,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2274","title":"SSG: Binary files corrupted when using SSG helper","body":"### What version of Hono are you using?\n\n4.0.7\n\n### What runtime/platform is your app running on?\n\nNode, Bun\n\n### What steps can reproduce the bug?\n\nJust `return c.body(/* some binary, like a png */)` and `toSSG`\r\n\r\nsee. https://github.com/berlysia/repro-hono-ssg-binary-broken\n\n### What is the expected behavior?\n\nThe generated files are identical at the binary level.\n\n### What do you see instead?\n\nFiles work as expected on development server and pages, but corrupt in SSG output.\n\n### Additional information\n\nI think this is runtime agnostic.\r\n\r\nOn the routes which respond binary, `bufferToString` is always applied. This means all binaries are decoded in UTF-8.\r\nsee. https://github.com/honojs/hono/blob/a32482ddb0d8c9b75310c28750389a1819be6618/src/helper/ssg/index.ts#L204-L205","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152907838},{"id":2152910631,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2275","title":"fix(ssg): preserve binary files as-is","body":"resolve #2274\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2152910631},{"id":2153499630,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2277","title":"fix(devDependencies): Fix the problem of missing glob package","body":"Resolved the issue of the glob package being unlocated due to its phantom dependency status during dependency installation via pnpm.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2153499630},{"id":2153927382,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2278","title":"fix: fix comment","body":"`c.jsonT` is removed now, but there is a reference to it in the comment.\r\nI found it when I was reading the code, it may cause confusion for contributors, so I fixed it.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2153927382},{"id":2155589026,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2280","title":"Returning context.notFound() on a route breaks client typing","body":"### What version of Hono are you using?\n\n4.0.6\n\n### What runtime/platform is your app running on?\n\nnextjs route/handler\n\n### What steps can reproduce the bug?\n\napp.ts\r\n```\r\nexport const app = new Hono()\r\n  .basePath(\"/api\")\r\n  .get(\"/users/:id\", async (context) => {\r\n    const { id } = context.req.param();\r\n\r\n    const user = await getUserById(id);\r\n    if (!user) {\r\n      // commenting out this line fixes the issue\r\n      return context.notFound();\r\n    }\r\n\r\n    return context.json(user);\r\n  });\r\nexport type AppType = typeof app\r\n```\r\nclient.ts\r\n`export const client = hc<AppType>(\"http://localhost:3000\").api;`\r\n\r\npage.ts\r\n```\r\nconst response = await client.users[\":id\"].$get({\r\n  param: { id },\r\n});\r\n// user type is inferred as never\r\nconst user = await response.json();\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\n\n### What is the expected behavior?\n\nresponse type is inferred correctly with context.notFound().\n\n### What do you see instead?\n\nresponse type is inferred as never.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2155589026},{"id":2158066599,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2283","title":"fix(deno/jsx-precompile): use html() tag function if value is a promise","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2158066599},{"id":2158430553,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2284","title":"Content-type is not specified when returning c.text in bun","body":"### What version of Hono are you using?\r\n\r\n4.0.7\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello Hono!')\r\n})\r\napp.get('/text', (c) => c.text('Text Response'))\r\napp.get('/html', (c) => c.html('<p>HTML Response</p>'))\r\napp.get('/json', (c) => c.json({ message: 'JSON Response' }))\r\napp.get('/no-content-type', (c) => {\r\n  return c.redirect('no content')\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n```bash\r\ncurl -I localhost:3000/json\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=UTF-8\r\nDate: Wed, 28 Feb 2024 08:40:43 GMT\r\nContent-Length: 0\r\n\r\ncurl -I localhost:3000/text\r\nHTTP/1.1 200 OK\r\nDate: Wed, 28 Feb 2024 08:41:05 GMT\r\nContent-Length: 0\r\n\r\ncurl -I localhost:3000/html\r\nHTTP/1.1 200 OK\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Wed, 28 Feb 2024 08:41:09 GMT\r\nContent-Length: 0\r\n\r\ncurl -I localhost:3000/no-content-type\r\nHTTP/1.1 302 Found\r\nLocation: no content\r\nDate: Wed, 28 Feb 2024 08:41:21 GMT\r\nContent-Length: 0\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nI would like it to work as `'Content-Type', 'text/plain; charset=UTF-8'`.\r\n\r\nI am concerned if this should be addressed on the Adaptor side as it seems to be a problem on the Bun side.\r\nhttps://github.com/oven-sh/bun/issues/8530\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nI found this CI Bun from the failure.\r\nhttps://github.com/honojs/hono/pull/2247\r\n\r\nIn other words, this leads to the possibility that the specification \"SSG to error on those without Content-type\" may be difficult to implement due to the differences in Bun. There are three possible approaches\r\n\r\n1. fix Bun Adaptor.\r\n2. to fix SSG from hono/bun.\r\n3. temporarily forgo the creation of a Content-type check function for SSG.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2158430553},{"id":2158700796,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2285","title":"Optimize RegExpRouter and maybe more","body":"I'm not done yet.\r\n\r\nGonna do more optimizations to the build step as well.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2158700796},{"id":2160064219,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2286","title":"Vite HMR fails for client components","body":"### What version of Hono are you using?\n\n4.0.8\n\n### What runtime/platform is your app running on?\n\ndev\n\n### What steps can reproduce the bug?\n\nRefer to this repository: https://github.com/emirotin/hono-vite-repro\r\n_Note:_ it's using PNPM, but you should see the same results with NPM\r\n\r\n1. Run `npm run dev` and open the app in the browser. You should see two H1's, one from the server, another from the client component\r\n2. Edit the `src/App.tsx` file. The second header will disappear in the browser\r\n\r\n# What is happening\r\n\r\n\r\nThis repository was created using the hono `create hono`, then the client component was added following https://hono.dev/guides/jsx-dom and https://hono.dev/getting-started/cloudflare-pages#client-side, finally, the App component was moved to a separate file.\r\n\r\nWhen you first load the page, the `App.tsx` file is loaded as http://localhost:5174/src/App.tsx\r\nWhen the file is edited, Vite (?) adds the cache busting param and tries to load the file as http://localhost:5174/src/App.tsx?t=1709163721558\r\n\r\nThis ultimately fails, giving 404. Any query prams in that URL result in the same.\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2160064219},{"id":2160646802,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2289","title":"Why is onAbort returning a promise?","body":"Perhaps I'm uninformed, but my understanding is that the onAbort is unnecessarily marked as async which can confuse consumers of the `StreamingApi`\r\n\r\nhttps://github.com/honojs/hono/blob/81264a9cf5837462c9af6b5653ea1675759fa8db/src/utils/stream.ts#L68","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2160646802},{"id":2162862766,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2293","title":"fix(stream): remove async from onabort","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nresolve #2289","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2162862766},{"id":2164684851,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2300","title":"Tried to build an api with multer and cloudinary","body":"### What is the feature you are proposing?\r\n\r\nHey, i hope this issue reaches you, well i was trying to build an api which takes user images and store it into cloudinary cloud storage, the flow was once user provide his/her images, it will get uploaded to a temp file through *multer* and then the file will get uploaded to cloudinary deleting it from our local fileSystem, it is quite easy in Node due to built in FS module, but i cant figure it out in Hono. \r\n\r\nThe code in node was this\r\n```\r\nimport {v2 as cloudinary} from \"cloudinary\"\r\nimport fs from \"fs\"\r\n\r\n\r\ncloudinary.config({ \r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME, \r\n  api_key: process.env.CLOUDINARY_API_KEY, \r\n  api_secret: process.env.CLOUDINARY_API_SECRET \r\n});\r\n\r\nconst uploadOnCloudinary = async (localFilePath) => {\r\n    try {\r\n        if (!localFilePath) return null\r\n        //upload the file on cloudinary\r\n        const response = await cloudinary.uploader.upload(localFilePath, {\r\n            resource_type: \"auto\"\r\n        })\r\n        // file has been uploaded successfull\r\n        //console.log(\"file is uploaded on cloudinary \", response.url);\r\n        fs.unlinkSync(localFilePath)\r\n        return response;\r\n\r\n    } catch (error) {\r\n        fs.unlinkSync(localFilePath) // remove the locally saved temporary file as the upload operation got failed\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {uploadOnCloudinary}\r\n```\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2164684851},{"id":2164767680,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2301","title":"Add `hydrateRoot` function to `hono/jsx/dom`","body":"### What is the feature you are proposing?\n\nCurrently the hydration mechanism is located in the `honox`. However, I would like to have access to it from the hono package. \r\n\r\nI'm currently building an [island util in val.town](https://val.town/v/pomdtr/island_demo), and I would love to switch from react to hono for rendering jsx.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2164767680},{"id":2165022875,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2303","title":"Client components: ref values are not reflected in the UI","body":"### What version of Hono are you using?\n\n4.0.8\n\n### What runtime/platform is your app running on?\n\ndev\n\n### What steps can reproduce the bug?\n\n# Preface\r\n\r\nI have just recently tried Hono Client Components, and it's definitely great to operate the same primitives (like JSX) om both sides of the wire.\r\n\r\nI have some fundamental issue, though. The documentation is very brief and doesn't give much insight into how they work. Are they using VDOM? Reconciliation? Surgical updates? Do I need to provide keys when rendering an array? How do I type my component functions so that the TS language server understands that I can pass the special props, like `key`?\r\n\r\nFor the lack of docs, I base my assumptions on how React operates, given Hono CCs are clearly modeled after it.\r\n\r\n# The Issue\r\n\r\nThe specific issue I have encountered just now is: updating the state doesn't seem to cause the full component rerender. In particular, the earlier updated ref values are not reflected in the UI.\r\n\r\n**Example**\r\n\r\n[This React app](https://reactplayground.vercel.app/#N4IgLgziBcBmCGAbCBTANCAbrK1QEsA7AExQA8A6AK1xHwFsAHAewCcwACAQUcY9lbN6HAOQUA9D0bUIZEQB1CDFuw4AlFPADGnAUNGtNOhUqZtOwDlsPwwKNc2acAvv0HCRNnQFpiQ8VqI+CiEYCaKWsyEEJyRofBEKKwcALwcfloArvQhYBQA5ihgAKKIKDmhAEIAngCSxAAUno5hAJQRUTEcgk6pVjZ2Dk4NcWAJhEnthD15hiRJDYoc6kZ51pp2peW5i4TLyxraeQDKYKz4OgCyzKRoS-uEmYiId3v7hzoU67YoWxVgDSkU2WU1aIAwUhkZBgdDMqg+YDQHEsmVQGlgSNRKFOPw4rj0Hi8YUUynMHBi1TKxDc+hEFKp3kiZgmoQg4QmZBUukyhB0+Ci3F4DVayPucS68D6WPRDQQyBQrQA3GLOpwANoAIyRqDAlQAulLUDi7LKkKglYp7oYwJlWHtdvsOAAeAB890dTsYLq40GRp3OhHyDXgX1tczArWcTvEXvd+09LsqvuA-qIQY1kejsbeHo1mTAYCiccdUQAwkEtABrFLAYWpF2inOO-YhrKscN9M6ZFDKpvN8lFSoNLsK3v95bOZzFjhuvv7Y5FDiVDiFlesbvT6N5gtRWf94CtsO5DgAMhPHA1p-PCYA8gBpLMuqdN6N7jgWwjPjrRTiVfOFvY0npFBiAobcAIAA3uWAojAbwIHwAAvFBfQAJkMeheygwhFHILl0hQBAnk4KQQEnIA) is using a ref and a state variable. When the state is updated, the UI rerenders, and the most recent ref value is displayed.\r\n\r\nhttps://github.com/emirotin/hono-vite-repro represents the equivalent Hono app. Unfortunately, the new ref value is never reflected in the UI.\r\n\r\n# Background\r\n\r\nThis contrived example is in fact based on the real issue. In my app, I'm processing the streaming data, and under the certain circumstances I set a flag (must survive re-renders) that we have reached the certain point. Finally, after the stream is drained, I set the state variable to cause re-render. Finally, I display the action element (button) iff the processing is done, and we have seen the point of interest in the stream.\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2165022875},{"id":2165064924,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2304","title":"app.mount doesn't include formData","body":"### What version of Hono are you using?\n\n4.0.8\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n```tsx\r\n// index.tsx\r\nimport { Hono } from 'hono'\r\nimport test from './test'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.html(\r\n  <form method=\"post\">\r\n    <button type=\"submit\">submit</button>\r\n    <label htmlfor=\"name\">Name</label>\r\n    <input type=\"text\" id=\"name\" name=\"name\" />\r\n  </form>\r\n  )\r\n})\r\napp.post('/', async (c) => {\r\n  const body = await c.req.formData()\r\n  const name = String(body.get('name'))\r\n  return c.text(name)\r\n})\r\n\r\napp.mount('/test', test.fetch)\r\n\r\nexport default app\r\n```\r\n```tsx\r\n// test.tsx\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.html(\r\n  <form method=\"post\">\r\n    <button type=\"submit\">submit</button>\r\n    <label htmlfor=\"name\">Name</label>\r\n    <input type=\"text\" id=\"name\" name=\"name\" />\r\n  </form>\r\n  )\r\n})\r\napp.post('/', async (c) => {\r\n  const body = await c.req.formData()\r\n  const name = String(body.get('name'))\r\n  return c.text(name)\r\n})\r\n\r\nexport default app\r\n```\r\n![err](https://github.com/honojs/hono/assets/131413638/3fb5a1b3-75a8-4508-8b98-e749e9a4afdc)\r\n\n\n### What is the expected behavior?\n\nc.req.formData() can be obtained\n\n### What do you see instead?\n\nNull\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2165064924},{"id":2165154542,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2305","title":"fix(types): use `{}` instead of Partial","body":"If it uses `Partial`, the type will include `undefined`. It causes unexpected behavior in validators like Zod Validator.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2165154542},{"id":2165396316,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2306","title":"perf: don't use `#`","body":"I haven't found a source that says it explicitly, but adding `#` to private properties will significantly degrade performance. \"Hello World\" was slower than `fetch` and itty-router, so I thought it was strange, investigated, and found it.\r\n\r\nThe benchmark results:\r\n\r\nNode.js:\r\n\r\n```\r\ncpu: Apple M1 Pro\r\nruntime: node v20.10.0 (arm64-darwin)\r\n\r\nbenchmark                time (avg)             (min … max)       p75       p99      p995\r\n----------------------------------------------------------- -----------------------------\r\nnoop                 325.93 ps/iter     (300 ps … 11.16 ns)    325 ps  345.8 ps  354.2 ps\r\n\r\n• Get /hello\r\n----------------------------------------------------------- -----------------------------\r\nfetch                  4.43 µs/iter     (3.58 µs … 1.04 ms)      4 µs   8.96 µs  11.38 µs\r\nHono                   5.48 µs/iter     (5.29 µs … 6.22 µs)   5.52 µs   6.22 µs   6.22 µs\r\nHono without sharps    4.17 µs/iter     (4.03 µs … 4.45 µs)   4.25 µs   4.45 µs   4.45 µs\r\nitty-router            4.73 µs/iter      (4.6 µs … 4.92 µs)   4.76 µs   4.92 µs   4.92 µs\r\n\r\nsummary for Get /hello\r\n  Hono without sharps\r\n   1.06x faster than fetch\r\n   1.13x faster than itty-router\r\n   1.31x faster than Hono\r\n```\r\n\r\nBun:\r\n```\r\ncpu: Apple M1 Pro\r\nruntime: bun 1.0.25 (arm64-darwin)\r\n\r\nbenchmark                time (avg)             (min … max)       p75       p99      p995\r\n----------------------------------------------------------- -----------------------------\r\nnoop                 327.07 ps/iter   (304.1 ps … 12.31 ns)    325 ps    350 ps  358.4 ps\r\n\r\n• Get /hello\r\n----------------------------------------------------------- -----------------------------\r\nfetch                573.14 ns/iter (522.54 ns … 747.17 ns) 580.23 ns 747.17 ns 747.17 ns\r\nHono                   1.06 µs/iter   (680.44 ns … 1.68 µs)   1.32 µs   1.68 µs   1.68 µs\r\nHono without sharps  492.24 ns/iter (430.88 ns … 600.82 ns) 518.88 ns 569.58 ns 600.82 ns\r\nitty-router            1.17 µs/iter     (1.05 µs … 1.41 µs)   1.21 µs   1.41 µs   1.41 µs\r\n\r\nsummary for Get /hello\r\n  Hono without sharps\r\n   1.16x faster than fetch\r\n   2.15x faster than Hono\r\n   2.37x faster than itty-router\r\n```\r\n\r\nThe benchmark script: https://github.com/yusukebe/cloudflare-workshop-examples/tree/main/projects/benchmarks\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2165396316},{"id":2165548955,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2307","title":"fix (jsx/dom): keep ref.current value during lifecycle.","body":"fixes #2303\r\n\r\nWe have had simple examples that worked, but the actual implementation was almost what we would call a mock😢  This PR will make sure that the values are properly stored within the lifecycle.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2165548955},{"id":2166764764,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2309","title":"feat: introduce Body Limit Middleware using stream ","body":"I was supposed to merge #2103 into next, but I mistakenly merged it into main, so I will create a new PR.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2166764764},{"id":2168473829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2311","title":" API rate limit exceeded","body":"### What version of Hono are you using?\n\nlatest\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\n```\r\nyarn create hono\r\ndeno run -A npm:create-hono\r\n```\r\n\r\nUnable to initialize a brand new project\r\n\n\n### What is the expected behavior?\n\nAble to initialize project\n\n### What do you see instead?\n\nError: API rate limit exceeded for 104.28.254.74. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2168473829},{"id":2169721947,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2313","title":"`ContextVariableMap` Counterpart for env `type Bindings` for Global Context Types","body":"### What is the feature you are proposing?\n\n# Suggestion\r\n\r\nThere is no simple way to type environment bindings (like for Cloudflare Worker secrets) and you'll need to pass a constructor like this `const app = new Hono<{ Bindings: Bindings; Variables: Variables }>()` to your Hono apps.\r\n\r\nThe problem occurs when you want to use `app.route` and create multiple Hono apps with the same variables or bindings.\r\n\r\nIf only there was a `ContextBindingMap`, similar to [`ContextVariableMap`](https://hono.dev/api/context#contextvariablemap), to declare a module interface to write any global bindings there, then you can simply type your context like `(c: Context)` in a route to be able to get types in your `c.env` or `env(c)` Bindings.\r\n\r\nA simple example to use this potential feature is like so:\r\n\r\n```ts\r\nimport { Context } from 'hono';\r\n\r\ndeclare module 'hono' {\r\n  // can be used with (c: Context)\r\n  interface ContextBindingMap {\r\n    SECRET: string;\r\n  }\r\n}\r\n\r\nconst app = new Hono();\r\n\r\napp.get('/path', (c: Context) => c.text(c.env.SECRET)); // typed as string, not any\r\n```\r\n\r\nBy extension of this feature being implemented, the documentation website should also be updated to reflect the new API.\r\n\r\n## Status Quo\r\n\r\nCurrently, in the Hono Documentation Website, there is a section on adding global types to your context's `c.var` interface via [`ContextVariableMap`](https://hono.dev/api/context#contextvariablemap).\r\n\r\nOnce you make a route handler with the `('/path', (c: Context) => ...)` arguments, you can access `c.var` variables without having to make an `Env` generic for the Context like `Context<Env>`.\r\n\r\n```ts\r\n// global.d.ts\r\ndeclare module 'hono' {\r\n  // can be used with (c: Context)\r\n  interface ContextVariableMap {\r\n    foo: string;\r\n  }\r\n  \r\n  // can be used with (c: Context<Env>)\r\n  interface Env {\r\n    // c.var\r\n    Variables: {\r\n      bar: number;\r\n    };\r\n\r\n    // c.env\r\n    Bindings: {\r\n      MY_SECRET: string;\r\n    };\r\n  }\r\n}\r\n```\r\n\r\n```ts\r\n// index.ts\r\nimport { Env, Context } from 'hono';\r\n\r\nfunction handleRouteWithAny(c) {\r\n c.get(\"foo\");  // any\r\n c.var.foo;     // any\r\n\r\n c.get(\"bar\");  // any\r\n c.var.bar;     // any\r\n \r\n c.env.MY_SECRET; // any\r\n}\r\n\r\nfunction handleRouteWithContext(c: Context) {\r\n c.get(\"foo\");  // this works, Get <\"client\">(key: \"client\") => number\r\n c.var.foo;     // this works, (property) foo: string\r\n\r\n c.get(\"bar\");  // cannot infer type, Get <\"bar\">(key: \"bar\") => any (+1 overload)\r\n c.var.bar;     // no type at all, any\r\n \r\n c.env.MY_SECRET; // any\r\n}\r\n\r\nfunction handleRouteWithEnvGeneric(c: Context<Env>) {\r\n c.get(\"foo\");  // this works, Get <\"client\">(key: \"client\") => number\r\n c.var.foo;     // this works, (property) foo: string\r\n\r\n c.get(\"bar\");  // works now, Get <\"bar\">(key: \"bar\") => number (+1 overload)\r\n c.var.bar;     // works now, (property) bar: number\r\n \r\n c.env.MY_SECRET; // (property) MY_SECRET: string\r\n}\r\n```\r\n\r\nHere are the sections that talk about it typing the context `c.var` or `c.env` properties in your `new Hono()` instance using `type Bindings` and `type Variables`:\r\n\r\n### Exhibit A: `/helpers/factory`\r\nThere is documentation on how to use the`Env` generic using the [`createFactory` helper](https://hono.dev/helpers/factory).\r\n> You can pass your Env types as Generics:\r\n> ```ts\r\n> type Env = {\r\n>   Variables: {\r\n>     foo: string\r\n>   }\r\n> }\r\n> \r\n> const factory = createFactory<Env>()\r\n> ```\r\n\r\n> [!Caution]\r\n> There is no official documentation on the `Env` generic.\r\n\r\n### Exhibit B: `/api/context`\r\n\r\nThe [Generics](https://hono.dev/api/hono#generics) documentation shows that we can pass our `Variables` and `Bindings` to our `new Hono()` constructor. This documentation is consistent with Exhibit A, showcasing the fact that a factory is just saving the config of the Hono instance so that we can pass `type Variables` to the constructors to type our `c.var` properties.\r\n\r\n> ```ts\r\n> type Bindings = {\r\n>   TOKEN: string\r\n> }\r\n> \r\n> type Variables = {\r\n>   user: User\r\n> }\r\n> \r\n> const app = new Hono<{ Bindings: Bindings; Variables: Variables }>()\r\n> \r\n> app.use('/auth/*', async (c, next) => {\r\n>   const token = c.env.TOKEN // token is `string`\r\n>   // ...\r\n>   c.set('user', user) // user should be `User`\r\n>   await next()\r\n> })\r\n> ```\r\n\r\n> [!Tip]\r\n> This is useful for defining local variables or bindings for a single `new Hono()` app.\r\n\r\nThere's also similar usage in the [`set() / get() docs`](https://hono.dev/api/context#set-get).","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2169721947},{"id":2169898096,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2314","title":"feat(cookie): Add Cookie bis condition check","body":"New Cookie RFC (a.k.a cookie-bis) and CHIPS includes some best practices for Cookie settings which developers should follow.\r\n\r\nThis PR adding some condition check for Cookie handling especially.\r\n\r\n- [RFC6265bis-13](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-13)\r\n  - `Max-Age`/`Expires` limitation\r\n  - `--Host-`/`--Secure_` prefix limitation \r\n- [CHIPS-01](https://www.ietf.org/archive/id/draft-cutler-httpbis-partitioned-cookies-01.html)\r\n  - `Partitioned` limitation\r\n\r\nNote: I'm adding link to latest draft in each comment, but should be updated to RFC link.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2169898096},{"id":2170508121,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2315","title":"refactor(SSG): separate middleware logic","body":"We will organize the file structure of the ssg helper. Specifically, we will separate the middleware-related processes from the core logic and place them in a file named `middleware.ts`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2170508121},{"id":2170588474,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2316","title":"`basicAuth` and `bearerAuth` should support dynamic users","body":"### What is the feature you are proposing?\n\nHaving a fix set of credentials that never changes during the course of the process lifetime is not particular realistic.\r\nWith the current implementation I don't see a good way to connect the auth implementations to a database.\r\nThey both would need some form of a callback function instead of just passing in all the date in as config.\r\n\r\nhttps://github.com/honojs/hono/blob/4ca5f60def726731b3afbf3f6137f0a4b92d8b27/src/middleware/bearer-auth/index.ts#L8","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2170588474},{"id":2171816672,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2318","title":"Improvement Suggestion for CORS Configuration Documentation on Hono","body":"### Comparison: CORS Configuration for Hono\r\n\r\nMost of the learners like me encountering challenges with the provided CORS configuration documentation. After exploring the documentation and implementing the suggested setup, I faced errors that hindered the seamless integration of my applications with the API. To enhance the user experience and prevent similar issues for future users, I suggest refining the documentation \r\n\r\nActual Provided Code:\r\n\r\n```javascript\r\napp.use(\r\n  '/api2/*',\r\n  cors({\r\n    origin: 'http://example.com',\r\n    allowHeaders: ['X-Custom-Header', 'Upgrade-Insecure-Requests'],\r\n    allowMethods: ['POST', 'GET', 'OPTIONS'],\r\n    exposeHeaders: ['Content-Length', 'X-Kuma-Revision'],\r\n    maxAge: 600,\r\n    credentials: true,\r\n  })\r\n);\r\n```\r\n<img width=\"946\" alt=\"HonoApi\" src=\"https://github.com/honojs/hono/assets/136100903/0fef6a4a-dca7-46f1-9b5c-db0fc51aea99\">\r\n\r\nSuggested code\r\n\r\n```javascript\r\napp.use('*', async (c, next) => {\r\n  const corsMiddleware = cors({\r\n    origin: 'http://example.com',\r\n    allowedHeaders: ['Origin', 'Content-Type', 'Authorization'],\r\n    allowMethods: ['GET', 'OPTIONS', 'POST', 'PUT', 'DELETE'],\r\n    credentials: true,\r\n  });\r\n  return await corsMiddleware(c, next);\r\n});\r\n\r\n```\r\n\r\nI might Suggest to give <code>async</code> and <code>return await</code>\r\nSo that Learner's like me who have struggled with CORS error can overcome :)\r\nThank you.....Hono\r\n\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2171816672},{"id":2172357999,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2319","title":"StreamSSE not working","body":"### What version of Hono are you using?\n\nlatest\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\nAttach video\r\n![Screen Recording 2024-03-06 at 21 15 27](https://github.com/honojs/hono/assets/7398909/a2c0c1c4-eb10-4567-99fd-6ab8c75beaba)\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nHono code: \r\n```\r\napp.get(\"/sse\", async (c) => {\r\n  return streamSSE(c, async (stream) => {\r\n    const user = c.get(\"user\");\r\n\r\n    stream.writeSSE({\r\n      data: \"Hello, world!\",\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n\r\nFrontend code\r\n\r\n```\r\nconst eventSource = new EventSource(`http://localhost:3000/sse`, {\r\n              withCredentials: true,\r\n            });\r\n\r\n            eventSource.onmessage = (event) => {\r\n              console.log(\"Received message:\", event.data);\r\n              sseData.value.push(event.data);\r\n            };\r\n\r\n            eventSource.onerror = (error) => {\r\n              console.error(\"EventSource failed:\", error);\r\n              eventSource.close();\r\n            };\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2172357999},{"id":2172579501,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2320","title":"fix(streaming): Fix stream SSE, not necessary close stream.","body":"### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nRelated to this issue: https://github.com/honojs/hono/issues/2319","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2172579501},{"id":2172691331,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2321","title":"Session flash?","body":"### What is the feature you are proposing?\n\nI don't have a strong opinion on this and I'm fine with the way Hono currently works.\r\n\r\nHowever, I'm wondering if something for making flash messages easier would make sense to be in the core? For example, to show a message after a successful POST request and a redirect.\r\n\r\nHere are three options that I see:\r\n\r\n1. Create a `setFlash` and `getFlash`\r\n2. Make `deleteCookie` return the deleted value\r\n3. No changes and keep Hono core small\r\n\r\nWhat do you think?","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2172691331},{"id":2173060773,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2323","title":"chore: bump up `@hono/node-server`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2173060773},{"id":2173199571,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2324","title":"fix(body-limit): export `bodyLimit` for Deno","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2173199571},{"id":2173277789,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2325","title":"fix(websocket): export WebSocket helper for Deno","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2173277789},{"id":2173753611,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2327","title":"Next","body":"For v4.1.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2173753611},{"id":2174901915,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2328","title":"showRoutes print `undefined`","body":"### What version of Hono are you using?\n\nlatest\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nthe showRoutes function print `undefined`\u001b\r\n<img width=\"357\" alt=\"Screenshot 2024-03-07 at 23 08 48\" src=\"https://github.com/honojs/hono/assets/7398909/edd0a887-fc05-4185-919e-daa2e79d49f1\">\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2174901915},{"id":2177159546,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2332","title":"No req.header() in version 4","body":"### What version of Hono are you using?\r\n\r\n4.0.10\r\n\r\n### What runtime/platform is your app running on?\r\n\r\ncloudflare workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have a simple example that works with Hono v3.  This is a websocket example, but the issue seems to be that there are no req.header() when fetching on /ws when using Hono v4\r\n\r\nsrc/index.ts\r\n```\r\nimport { Hono } from 'hono'\r\nexport { SignalServer } from './signalserver'\r\n\r\ntype Bindings = {\r\n  SIGNAL_SERVER: DurableObjectNamespace\r\n}\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\napp.use('*', (c) => {\r\n  const id = c.env.SIGNAL_SERVER.idFromName('A')\r\n  const obj = c.env.SIGNAL_SERVER.get(id)\r\n  // console.log('url:', c.req.url, c.req.header()). // HEADERS EXIST HERE\r\n  return obj.fetch(c.req.url, c.req)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nsrc/signalServer.ts\r\n```\r\nimport { Hono } from 'hono'\r\nimport RX from './rx.html'\r\n\r\n\r\nexport class SignalServer {\r\n  state: DurableObjectState\r\n  app: Hono = new Hono()\r\n\r\n  constructor(state: DurableObjectState) {\r\n    this.state = state\r\n\r\n    this.app.get('/ws', async (c) => {\r\n      const upgradeHeader = c.req.header('Upgrade')\r\n      console.log('headers:', c.req.header()) //  IN V3,  HEADERS EXIST.  IN V4, THERE ARE NO HEADERS HERE\r\n      if (upgradeHeader !== 'websocket') {\r\n        console.log('NO upgrade HEADER', upgradeHeader)\r\n        return c.text('Expected websocket', 400)\r\n      }\r\n\r\n      let currentValue = await this.state.storage?.get<number>('count') || 0\r\n      currentValue = currentValue + 1\r\n      await this.state.storage?.put('count', currentValue)\r\n\r\n      const [client, server] = Object.values(new WebSocketPair())\r\n\r\n      this.state.acceptWebSocket(server, ['signal'])\r\n      return new Response(null, {\r\n        status: 101,\r\n        webSocket: client,\r\n      })\r\n    })\r\n\r\n    this.app.get('/', async () => {\r\n      return new Response('<html><head></head><body>hello</body></html>', { headers: { 'Content-Type': 'text/html;charset=UTF-8' } })\r\n    })\r\n    this.app.get('/rx', async () => {\r\n      return new Response(RX, { headers: { 'Content-Type': 'text/html;charset=UTF-8' } })\r\n    })\r\n  }\r\n  async fetch(request: Request) {\r\n    return this.app.fetch(request)\r\n  }\r\n}\r\n```\r\n\r\nsrc/rx.html\r\n```\r\n<html>\r\n  <head>\r\n    <style>\r\n      body {\r\n        margin: 1rem;\r\n        font-family: monospace;\r\n      }\r\n    </style>\r\n    </head>\r\n<body>\r\nRX\r\n<script>\r\n \r\n  let ws\r\n\r\n  async function websocket(url) {\r\n    console.log('url', url)\r\n    ws = new WebSocket(url)\r\n\r\n    if (!ws) {\r\n      throw new Error(\"server didn't accept ws\")\r\n    }\r\n\r\n    ws.addEventListener(\"open\", () => {\r\n      console.log('Opened websocket')\r\n    })\r\n\r\n    ws.addEventListener(\"message\", ({ data }) => {\r\n      try {\r\n        const msg = JSON.parse(data)\r\n        console.log('msg', msg)\r\n      } catch (error) {\r\n        console.log('msg decode error:', error)\r\n      }\r\n    })\r\n\r\n    ws.addEventListener(\"close\", () => {\r\n      console.log('Closed websocket')\r\n    })\r\n  }    ws.addEventListener(\"close\", () => {\r\n      console.log('Closed websocket')\r\n    })\r\n  }\r\n\r\n  const url = new URL(window.location)\r\n  url.protocol =  url.protocol === 'https:' ? \"wss\" : \"ws\"\r\n  url.pathname = \"/ws\"\r\n  console.log('url', url.href)\r\n  websocket(url.href)\r\n\r\n  </script>\r\n </body>\r\n</html>\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nI would expect Hono V3 and V4 to be identical here and pass the headers through.\r\n\r\n### What do you see instead?\r\n\r\nIn Hono V4, the `c.req.header()` is empty on `this.app.get('/ws', async (c) => ....`\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2177159546},{"id":2177410884,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2334","title":"Redirect respecting sub-routes","body":"### What is the feature you are proposing?\r\n\r\nCurrently, `c.redirect(location)` simply returns `Location: ${location}` header: https://github.com/honojs/hono/blob/4ca5f60def726731b3afbf3f6137f0a4b92d8b27/src/context.ts#L533\r\n\r\nHowever, when using sub-routes, each sub-routes need to know their real routes to set the correct location. For example:\r\n\r\n```ts\r\nconst sub = new Hono()\r\n  .get(\"/\", ...)  // <= This is the redirect target.\r\n  .post(\"/\", (c) => {\r\n    return c.redirect(\"/\");     // <= This won't redirect back to \"/sub\". It's \"/\" and 404.\r\n    return c.redirect(\"/sub\");  // <= This works but \"/sub\" is external knowledge injected below.\r\n  });\r\n\r\nconst app = new Hono()\r\n  .route(\"/sub\", sub);\r\n\r\nexport default app;\r\n```\r\n\r\nIf there is a way to redirect with respecting the sub-routes path, the sub routes don't need to know their real paths and become more decoupled from the main app.\r\n\r\nChanging `c.redirect()`'s behavior would impact the existing applications, so it would be better to introduce a new option e.g. `c.redirect(location, { subroute: true })` or a new method.\r\n\r\n\r\n\r\n\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2177410884},{"id":2177796804,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2336","title":"Missing 'end' event listeners for ctx.res in Deno runtime","body":"### What is the feature you are proposing?\n\nIn some situations, we often have to do some work right after the response is fully sent to the client. It even gets worse when we send response as stream. For readable stream, we also don't have any way to know when the stream is done loading.\r\n\r\nDeno has a lot of missing thing that Hono also suffers from.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2177796804},{"id":2180663198,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2339","title":"feat(jwt): supported RS256, RS384, RS512 algorithm for JWT","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2180663198},{"id":2180668289,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2340","title":"Increase JWS's ability to validate","body":"### What is the feature you are proposing?\r\n\r\nI would like to send a PR to make the following mandatory, as they are not currently verified. (JSON Web Signature)\r\n\r\nhttps://jwt.io/libraries\r\n\r\nhttps://github.com/honojs/hono/tree/jwt-algorithms\r\n\r\n### Header\r\n- [ ] kid\r\n\r\n### Payload\r\n- [ ] iss\r\n- [ ] sub\r\n- [ ] aud\r\n- [ ] jti\r\n- [ ] typ\r\n\r\n### Algorithm\r\n- [x] RS*: #2339 \r\n- [x] PS*: #2352\r\n- [x] ES*: #2352\r\n- [x] EdDSA: #2352\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2180668289},{"id":2181914728,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2341","title":"ExecutionContext type missing `abort` method","body":"### What version of Hono are you using?\r\n\r\n4.1.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nThe latest version of Hono uses a type like this:\r\n```ts\r\ndeclare interface ExecutionContext {\r\n  waitUntil(promise: Promise<any>): void;\r\n  passThroughOnException(): void;\r\n}\r\n```\r\n\r\nBut the latest version of Workers Types (`4.20240312.0`) now includes an `abort` method, so it looks like this:\r\n```ts\r\ndeclare interface ExecutionContext {\r\n  waitUntil(promise: Promise<any>): void;\r\n  passThroughOnException(): void;\r\n  abort(reason?: any): void;\r\n}\r\n```\r\n\r\nReference: https://github.com/Cloudflare-Mining/Cloudflare-Datamining/blob/f3eb65cf6548395775b58955b5c0d4543b9e2d2a/data/workers-types/experimental/index.ts#L313\r\n\r\nSo if you have a function that expects a context like:\r\n\r\n```ts\r\nfunction fooBar(ctx: ExecutionContext) {\r\n\t///stuff\r\n}\r\n```\r\n\r\nAnd then try to pass it `context.executionCtx`, you now get an error:\r\n```Property 'abort' is missing in type 'import(\"e:/xxx/node_modules/hono/dist/types/context\").ExecutionContext' but required in type 'ExecutionContext'.```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nNot to error\r\n\r\n### What do you see instead?\r\n\r\n```Property 'abort' is missing in type 'import(\"e:/xxx/node_modules/hono/dist/types/context\").ExecutionContext' but required in type 'ExecutionContext'.```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2181914728},{"id":2182717857,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2343","title":"c.json returning empty string for undefined values","body":"### Discussed in https://github.com/orgs/honojs/discussions/2338\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **marcosrjjunior** March 11, 2024</sup>\r\nI'm mainly creating this ticket to understand a bit more about why this is happening and potentially flag an issue.\r\n\r\n\r\nOne of my functions was returning `undefined` instead of `false` and the `c.json` is forcing the response to be an \"\" (empty string) instead of throwing an error.\r\n![Screenshot 2024-03-11 at 8 51 27 am](https://github.com/honojs/hono/assets/5287262/4ca77143-ce93-4643-824b-b5bf6a188368)\r\n**Response:** \"\"\r\n\r\n---\r\n\r\nReading the [json implementation here](https://github.com/honojs/hono/blob/4ca5f60def726731b3afbf3f6137f0a4b92d8b27/src/context.ts#L469) (hopefully that is the correct place).\r\n\r\nI noticed that there possibly some extra things going on there:\r\n- `JSON.stringify(object)`. Why do we need to run throguh a JSON.stringify before returning?\r\n- Re-creating the response\r\n\r\nBecause of the issues mentioned above I replaced it to use the main [response](https://developer.mozilla.org/en-US/docs/Web/API/Response/json_static) instead.\r\n![Screenshot 2024-03-11 at 8 51 36 am](https://github.com/honojs/hono/assets/5287262/d4c41bba-3362-47b0-8b9d-3e96411ceb1a)</div>","state":"open","labels":"[\"enhancement\",\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2182717857},{"id":2182801015,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2344","title":"fix(client): Remove trailing slash from /index for precise path matching","body":"This PR addresses an issue where the `removeIndexString` function was leaving a trailing slash when removing `/index` from URLs, which conflicted with Hono's exact matching behavior for route definitions. This behavior was observed in Hono v4.1.0 running on Cloudflare Workers, where the presence of a trailing slash would cause an otherwise valid endpoint to return a 404 error.\r\n\r\n### Changes\r\n- Updated `removeIndexString` function within the Hono Client to ensure the trailing slash is removed along with `/index`, aligning URL formats with the expected endpoint paths for exact matching.\r\n\r\n### Example Scenario and Code Snippet:\r\nBelow is an example highlighting the issue and demonstrating how the current implementation may lead to unexpected behavior:\r\n\r\n```ts\r\nconst app = new Hono().basePath(\"/api/v1\");\r\nexport const getMe = new Hono().get(\"\", async (c) => {\r\n  return c.json({ name: \"hono\" });\r\n});\r\n\r\nexport const meRoute = new Hono().route(\"\", getMe);\r\n\r\nconst route = app.route(\"/me\", meRoute);\r\ntype AppType = typeof route;\r\n\r\n// Previously, this would result in a request to http://localhost:8787/api/v1/me/ instead of http://localhost:8787/api/v1/me\r\nhc<AppType>(\"http://localhost:8787\").api.v1.me.index.$get();\r\n```\r\n\r\n### Additional Consideration\r\n\r\nAdditionally, when using the Hono Client's `$url` method, the `/index` segment is not removed as expected, resulting in URLs that could potentially cause fetch errors. For example, `hc<AppType>(\"http://localhost:8787\").api.v1.me.index.$url().href` returns `http://localhost:8787/api/v1/me/index`, which is not ideal. I'm considering submitting a separate PR to address this issue by enhancing the $url method to remove the /index segment when generating URLs. Feedback on this proposal would be greatly appreciated.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2182801015},{"id":2182858720,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2345","title":"Middleware not applied correctly when path contains $","body":"### What version of Hono are you using?\n\n4.1.0\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nI understand this might be an edge case, but it caused an actual security risk in my app. When I create a nested router for the route `/$$$` the middleware for `*` are not running. This seems to be specific to the route name containing dollar signs.\r\n\r\nRepro:\r\n\r\n```\r\nimport { Hono } from \"hono\";\r\nconst app = new Hono();\r\napp.get(\"/\", (c) => c.text(\"Hono!\"));\r\nconst userApp = new Hono();\r\nuserApp.use(\"*\", (c, next) => {\r\n  console.log(\"User middleware\");\r\n  return next();\r\n});\r\nuserApp.get(\"/:id\", (c) => c.text(\"User \" + c.req.param().id));\r\nuserApp.get(\"/\", (c) => c.text(\"User\"));\r\napp.route(\"/$$$\", userApp);\r\nexport default app;\r\n```\r\n\n\n### What is the expected behavior?\n\nThe middleware logging \"User middleware\" is not executed when accessing `/$$$` or `/$$$/123`\n\n### What do you see instead?\n\nThe middleware should log `\"User middleware\"` on all routes of `/$$$`\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2182858720},{"id":2183329163,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2346","title":"fix(context): export `ExecutionContext` from `hono`","body":"With this change, you can re-define `ExecutionContext` types in your app:\r\n\r\n```ts\r\ndeclare module 'hono' {\r\n  interface ExecutionContext {\r\n    waitUntil(promise: Promise<any>): void\r\n    passThroughOnException(): void\r\n    abort(reason?: any): void\r\n  }\r\n}\r\n```\r\n\r\nFixes #2341\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2183329163},{"id":2183603194,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2347","title":"fix(client): Update $url() Method to Remove /index with Future API Considerations","body":"This PR is a follow-up to [#2344](https://github.com/honojs/hono/pull/2344), implementing changes to the `$url()` method to ensure that `/index` is removed from URLs. This aligns with the existing behavior in Hono Client, where automatically added `/index` segments are stripped to match the expected endpoint paths for routing.\r\n\r\n**Changes:**\r\n- Modified the `$url()` method to remove `/index` from generated URLs, ensuring consistency with the way Hono Client handles route matching.\r\n\r\n**Concerns & Future Considerations:**\r\nWhile this change improves consistency with existing behaviors, it introduces a concern regarding the handling of explicitly added `/index` segments by users. Currently, both automatically added and explicitly added `/index` segments are removed, which might not always align with user expectations for route definitions.\r\n\r\nThis behavior, although aligned with current implementations, signals the need for a potential API change in the future to distinguish between automatically added and user-defined `/index` segments more clearly. Such a change would allow for greater flexibility and accuracy in route matching and endpoint definition.\r\n\r\n**Example Code:**\r\n```typescript\r\nconst app = new Hono();\r\n\r\nconst route = app\r\n  // The /index in this URL is automatically added by the routing system when the path is empty.\r\n  .route(\r\n    '/me',\r\n    new Hono().route(\r\n      '',\r\n      new Hono().get('', async (c) => {\r\n        return c.json({ name: 'hono' })\r\n      })\r\n    )\r\n  )\r\n  // The /index in this URL is explicitly added by the user in the route definition.\r\n  .get('/index', (c) => c.json({ hello: 'world' }));\r\n\r\n// Currently, the system does not differentiate between these two scenarios:\r\n// - Automatically added /index when accessing `hc<AppType>(\"http://localhost:8787\").api.v1.me.index.$url();`\r\n// - Explicitly defined /index in `hc<AppType>(\"http://localhost:8787\").api.v1.index.$url();`\r\n// Future API changes should aim to preserve user-defined /index segments while removing automatically added ones.\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2183603194},{"id":2185031748,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2349","title":"Add expires to JWT helper","body":"### What is the feature you are proposing?\n\nHello, I would like to request a feature to add an \"expires\" parameter to the JWT sign function. This would help me implement access tokens and refresh tokens more effectively. Thank you.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2185031748},{"id":2185448797,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2350","title":"feat(utils/cookie): Typesafe cookie options","body":"add Types for settings cookie options and make below operations typesafe\r\n\r\n- `--Secure_` prefix\r\n- `--Host_` prefix\r\n- `Partitoned` option\r\n\r\nas discussed in https://github.com/honojs/hono/pull/2314#issuecomment-1980809011\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [N/A] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2185448797},{"id":2185611827,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2351","title":"fix(lambda-edge): Lambda@Edge GET/HEAD body error.","body":"This PR addresses the issue where the exception Request with GET/HEAD method cannot have body. is raised when using the GET or HEAD method with Lambda@Edge.\r\n\r\n```typescript\r\nimport { Hono } from \"hono\";\r\nimport { handle } from \"hono/lambda-edge\";\r\napp.get(\"/\", (c, next) => {\r\n    return c.json({}, 200);\r\n});\r\napp.post(\"/\", (c, next) => {\r\n    return c.json({}, 200);\r\n});\r\n\r\nexport const handler = handle(app);\r\n```\r\n\r\nWhile POST requests work without any issues, sending a GET request results in an error.\r\n\r\n\r\n### Changes\r\nMade sure that the request does not include a body when the method is GET or HEAD.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2185611827},{"id":2186148018,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2352","title":"added remain algorithm for JWT","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2186148018},{"id":2187670580,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2354","title":"StatusCode type not exported","body":"### What version of Hono are you using?\r\n\r\n4.1.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNodeJs\r\n\r\n### What steps can reproduce the bug?\r\n\r\n// Argument of type number is not assignable to parameter of type StatusCode | undefined\r\nconst httpStatusCode: number = 500;\r\nreturn c.json({success: true}, httpStatusCode);\r\n\r\n// TS2305: Module \"hono\" has no exported member StatusCode\r\nimport {StatusCode} from \"hono\";\r\n\r\n// TS2307: Cannot find module hono/utils/http-status.js or its corresponding type declarations.\r\nimport {StatusCode} from \"hono/utils/http-status.js\";\r\n\r\n// TS2307: Cannot find module hono/utils or its corresponding type declarations.\r\nimport {StatusCode} from \"hono/utils\";\r\n\r\n### What is the expected behavior?\r\n\r\nc.json() should accept type \"number\" for HTTP status codes or Hono's type StatusCode should be exported.\r\n\r\n### What do you see instead?\r\n\r\nIf attempting to use a number in place of a StatusCode:\r\nArgument of type number is not assignable to parameter of type StatusCode | undefined\r\n\r\nIf attempting to import StatusCode:\r\nTS2305: Module \"hono\" has no exported member StatusCode\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2187670580},{"id":2189209112,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2357","title":"fix(router): wildcard paths when using js reserved words (like constructor and __proto__)","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189209112},{"id":2189749874,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2358","title":"[Discussion] A 'listen' function for Hono seems a good pattern?","body":"### What is the feature you are proposing?\n\n[@Hono/node-server](https://github.com/honojs/node-server) is really great lib for the Web Standard web framework to handle IncomingMessage, and I'm using it in [EdgeQL](https://github.com/metrue/EdgeQL), and implementation like this,\r\n\r\n```typescript\r\nimport { serve } from '@hono/node-server'\r\nimport { EdgeQL } from '../'\r\n\r\nexport class NodeEdgeQL extends EdgeQL {\r\n  listen(\r\n    { port, hostname }: { port?: number; hostname?: string },\r\n    listener?: (info: { address: string; family: string; port: number }) => void\r\n  ): void {\r\n    serve(\r\n      {\r\n        fetch: this.fetch,\r\n        port: port ?? 3000,\r\n        hostname: hostname ?? '0.0.0.0',\r\n      },\r\n      listener\r\n    )\r\n  }\r\n}\r\n```\r\nThen we start a server just just call `listen` by invoking instance function.\r\n\r\n```typescript\r\nconst app = new Hono()\r\napp.listen(3000, (info) => { })\r\n```\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189749874},{"id":2189791163,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2359","title":"feat(timing): allow crossOrigin in TimingOptions to be a function","body":"Currently, `hono/timing` allows you to specify a value for `crossOrigin` in `TimingOptions` which is used to define the `Timing-Allow-Origin` header. In one of my apps, I wanted to change what origins are allowed programmatically (similar to how you might want to set different CORS headers depending on what route is triggered). This PR support for that.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189791163},{"id":2189880123,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2360","title":"hc with Credentials?","body":"### Discussed in https://github.com/orgs/honojs/discussions/2291\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **lajbel** March  1, 2024</sup>\r\nLooks pretty obvious to have something like `credentials` in the configuration of `hc`, something like this\r\n\r\n```js\r\nconst authClient = hc<SomeType>(\"/api/auth/\", {\r\n    headers: {} // You can already set headers!\r\n    credentials: \"include\",\r\n});\r\n```\r\n\r\nI was searching here and there's only one option available to do this approach\r\n\r\n```js\r\nconst api = hc<AppType>(\"api/auth\", {\r\n  fetch: (req, init) =>\r\n    fetch(req, {\r\n      ...init,\r\n      credentials: \"include\", // Why not have all fetch options too?\r\n    })\r\n})\r\n```\r\n\r\nRPC is pretty awesome, but some things are missing</div>","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189880123},{"id":2189914888,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2361","title":"refactor(jsx-renderer): remove unnecessary comments for eslint","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189914888},{"id":2189934495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2362","title":"ci: fix bun version for `denoify`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189934495},{"id":2189948689,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2363","title":"fix(jsx-renderer): don't overwrite headers if stream is `true`","body":"Fixes the issue as same as https://github.com/honojs/middleware/issues/418\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189948689},{"id":2189962805,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2364","title":"fix(context): set headers correctly if it has `this.#headers`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189962805},{"id":2189993693,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2365","title":"fix(types): `MergePath` merge blank paths correctly","body":"This PR may fix the issue that PR #2347 tries to fix.\r\n\r\nEven though the app includes `app.route()` with blank path `''`, it should infer the path in the client correctly:\r\n\r\n```ts\r\n// Server\r\nconst app = new Hono().basePath('/api/v1')\r\nconst routes = app.route(\r\n  '/me',\r\n  new Hono().route(\r\n    '',\r\n    new Hono().get('', async (c) => {\r\n      return c.json({ name: 'hono' })\r\n    })\r\n  )\r\n)const app = new Hono().basePath('/api/v1')\r\nconst routes = app.route(\r\n  '/me',\r\n  new Hono().route(\r\n    '',\r\n    new Hono().get('', async (c) => {\r\n      return c.json({ name: 'hono' })\r\n    })\r\n  )\r\n)\r\n\r\n// Client\r\n\r\nconst client = hc<typeof routes>('http://localhost')\r\nclient.api.v1.me // <=== correct\r\n```\r\n\r\nBut, in the current implementation, it can't infer correctly:\r\n\r\n<img width=\"588\" alt=\"Screenshot 2024-03-16 at 23 00 04\" src=\"https://github.com/honojs/hono/assets/10682/d28e2643-d9c0-40d8-ab85-d96936c0c0b2\">\r\n\r\nThis PR will fix the issue by fixing the `MergePath` behavior.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2189993693},{"id":2190130110,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2366","title":"Uploading does not work as mentioned in docs","body":"### What version of Hono are you using?\n\n4.1.0\n\n### What runtime/platform is your app running on?\n\nnode v20\n\n### What steps can reproduce the bug?\n\nCreate a new project using `yarn create hono` and copy this code in `src/index.ts`\r\n\r\n```ts\r\nimport { serve } from '@hono/node-server';\r\nimport { Hono } from 'hono';\r\n\r\nconst app = new Hono();\r\n\r\napp\r\n  .get('/', (c) => {\r\n    return c.text('Hello Hono!');\r\n  })\r\n  .post('/upload', async (c) => {\r\n    // form\r\n    const form = await c.req.formData(); // error\r\n    const file = form.get('file');\r\n    console.log(file);\r\n\r\n    // or body\r\n    const body = await c.req.parseBody();\r\n    console.log(body); // {}\r\n\r\n    return c.text('file upload');\r\n  });\r\n\r\nconst port = 3000;\r\nconsole.log(`Server is running on port ${port}`);\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port,\r\n});\r\n\r\n```\r\n\r\n![image](https://github.com/honojs/hono/assets/54232641/b308a198-0c99-455c-ada7-497006f7fa14)\r\n\n\n### What is the expected behavior?\n\nI should get a `File` in the form or at least in the body as you described in the docs [here](https://hono.dev/snippets/file-upload).\n\n### What do you see instead?\n\n## Body\r\nI get an empty object `{}`.\r\n\r\n## Form\r\nI get an error :\r\n\r\n```bash\r\nTypeError: Request.formData: Could not parse content as FormData.\r\n    at webidl.errors.exception (node:internal/deps/undici/undici:1581:14)\r\n    at Request.formData (node:internal/deps/undici/undici:5276:33)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at Array.<anonymous> (/home/ri/workspace/hono-upload/src/index.ts:12:18)\r\n    at responseViaResponseObject (/home/ri/workspace/hono-upload/node_modules/@hono/node-server/dist/index.js:347:13)\r\n```\n\n### Additional information\n\nI am using `WSL 2`.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190130110},{"id":2190153311,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2367","title":"Hono with Vercel gives error on start: Unhandled Runtime Error Error: Objects are not valid as a React child (found: object with keys {isEscaped, tag, props, children, key}). If you meant to render a collection of children, use an array instead.","body":"### What version of Hono are you using?\n\n4.0.1\n\n### What runtime/platform is your app running on?\n\nVercel\n\n### What steps can reproduce the bug?\n\njust run the command\r\n\r\n> npm run dev \r\n\r\nit flash the main page for a second then throw error on page\r\n\r\nUnhandled Runtime Error\r\nError: Objects are not valid as a React child (found: object with keys {isEscaped, tag, props, children, key}). If you meant to render a collection of children, use an array instead.\n\n### What is the expected behavior?\n\nit shoukd load the page which was running fine few hrs back. I have installed tsx and try to make some changes in hono server route file but revert back the changes ; also some changes in tsconfig.json\n\n### What do you see instead?\n\nI see this error page on localhost:3000\r\n\r\n![image](https://github.com/honojs/hono/assets/415219/1a7d53c5-efab-4881-ac08-45e305d5f99e)\r\n\n\n### Additional information\n\nhere is the repo detail. https://github.com/xkeshav/honor","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190153311},{"id":2190406819,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2368","title":"feat(jwt): support remaining algorithms","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190406819},{"id":2190635371,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2369","title":"feat(jsr): reduce slow types","body":"I reduced [JSR slow types](https://jsr.io/docs/about-slow-types).\r\nIt make a piece for creating the JSR version of Hono.\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190635371},{"id":2190753541,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2372","title":"acceptable CryptoKey in JWT sign and verify","body":"### What I did\r\n\r\n- acceptable private key to verify jwt\r\n- fixed code to accept CryptoKey object\r\n- To clarify the responsibilities of jwa and jws, we have added files that refer to each and moved the logic to them.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190753541},{"id":2190774937,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2373","title":"acceptable CryptoKey in JWT sign and verify","body":"This is the last PR for https://github.com/honojs/hono/pull/2368\r\n\r\n### What I did\r\n\r\n- acceptable private key to verify jwt\r\n- fixed code to accept CryptoKey object\r\n- To clarify the responsibilities of jwa and jws, we have added files that refer to each and moved the logic to them.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190774937},{"id":2190915590,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2375","title":"fix(router): accept reg exp meta characters in path","body":"Fixes #2345\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2190915590},{"id":2191535081,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2376","title":"perf(utils/url): use `slice` + `indexOf` for `getPath()`","body":"For `getPath()`, the `slice` + `indexOf` is faster than RegExp.\r\n\r\nNode.js:\r\n\r\n```txt\r\ncpu: Apple M1 Pro\r\nruntime: node v20.10.0 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min … max)       p75       p99      p999\r\n------------------------------------------------------- -----------------------------\r\nnoop                 61 ps/iter        (20 ps … 257 ns)     61 ps     81 ps    143 ps !\r\n\r\n• getPath\r\n------------------------------------------------------- -----------------------------\r\nslice + indexOf   35.85 ns/iter     (21.28 ns … 162 ns)  36.11 ns  38.84 ns  47.32 ns\r\nregexp            57.76 ns/iter     (45.29 ns … 215 ns)  55.81 ns    134 ns    185 ns\r\n\r\nsummary for getPath\r\n  slice + indexOf\r\n   1.61x faster than regexp\r\n```\r\n\r\nBun:\r\n\r\n```\r\ncpu: Apple M1 Pro\r\nruntime: bun 1.0.31 (arm64-darwin)\r\n\r\nbenchmark            time (avg)             (min … max)       p75       p99      p999\r\n------------------------------------------------------- -----------------------------\r\nnoop                 50 ps/iter       (0 ps … 66.08 ns)     61 ps     81 ps    264 ps !\r\n\r\n• getPath\r\n------------------------------------------------------- -----------------------------\r\nslice + indexOf   31.45 ns/iter     (29.62 ns … 319 ns)   31.8 ns  38.78 ns    184 ns\r\nregexp            40.87 ns/iter     (36.68 ns … 324 ns)  41.22 ns  59.59 ns    237 ns\r\n\r\nsummary for getPath\r\n  slice + indexOf\r\n   1.3x faster than regexp\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2191535081},{"id":2191718528,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2378","title":"streamSSE doesn't work","body":"### What version of Hono are you using?\r\n\r\n4.1.1\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nvercel\r\n\r\n### What steps can reproduce the bug?\r\n\r\nusing 4.1.1 streamSSE Helper\r\n\r\nerror message in console: \r\n```\r\n ⨯ uncaughtException: Error: aborted\r\n    at abortIncoming (node:_http_server:794:17)\r\n    at socketOnClose (node:_http_server:788:3)\r\n    at Socket.emit (node:events:531:35)\r\n    at TCP.<anonymous> (node:net:337:12) {\r\n  code: 'ECONNRESET'\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\ndowngrade to 4.1.0, everything is ok!","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2191718528},{"id":2194330466,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2379","title":"Deno middleware does not export a JWT helper (e.g., sign).","body":"### What version of Hono are you using?\r\n\r\n4.1.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\nhono jwt middleware cannot export sign and other auxiliary functions in deno environment。\r\n```ts\r\nimport { sign } from 'https://deno.land/x/hono/middleware.ts'\r\n```\r\n\r\nhttps://github.com/honojs/hono/blob/main/deno_dist/middleware.ts#L12\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2194330466},{"id":2195389836,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2381","title":"feat(ssg): Support asynchronous hooks ","body":"ref:  https://github.com/honojs/middleware/pull/412\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2195389836},{"id":2195463179,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2382","title":"feat(ssg): Support `extentionMap`","body":"ref: https://github.com/honojs/middleware/pull/412\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2195463179},{"id":2195948379,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2383","title":"Unable to add content to the link element of JSX","body":"### What version of Hono are you using?\r\n\r\n4.1.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI understand that it may seem unusual, but I do need to add content to the link element.\r\n\r\nI am using Hono to render RSS in [RSSHub](https://github.com/DIYgod/RSSHub). There is a crucial field called \"link\" in the RSS feed that should contain a link within the link element instead of being placed as an attribute, which is the usual practice.\r\n\r\nYou can find specific code details at: https://github.com/DIYgod/RSSHub/pull/14863/files#diff-af123bfb44d396186ec16b495df4fa9bf75a998975fe41b5ec71ebf84669744fR12\r\n\r\nYou can view the rendering result here: https://github.com/DIYgod/RSSHub/pull/14863#issuecomment-2008053080\r\n\r\nThe issue lies in the rendering result where the link appears as `<link />` instead of the expected `<link>https://example.com</link>`\r\n\r\nFurthermore, I checked Hono's code, I discovered that it forcefully designates link as `emptyTags` at: https://github.com/honojs/hono/blob/95be96c2848d56e3c920b84b15ee5ec2448b5d12/src/jsx/base.ts#L36\r\n\r\n(but I am not sure if it is the only limitation)\r\n\r\nWhile this setting makes sense in most scenarios, I propose disabling these emptyTags settings when `jsxRenderer` is set to a non-html `docType`(just like https://github.com/DIYgod/RSSHub/pull/14863/files#diff-c1bf8fd1428bd389c2d6600077ad5b013d95300ea7ad861ca0b7f93eabe9418dR34) or allowing for customization of emptyTags.\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2195948379},{"id":2196113238,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2384","title":"fix(jsx): use self closing tag only if element has no children","body":"Fixes https://github.com/honojs/hono/issues/2383\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2196113238},{"id":2196449160,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2385","title":"fix(deno): export jwt helpers for Deno in `src/helper.ts`","body":"Fixes #2379\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2196449160},{"id":2196537583,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2386","title":"If path parameter is an encoded URL, the request is not routed correctly","body":"### What version of Hono are you using?\r\n\r\n4.1.0\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js\r\n\r\n### What steps can reproduce the bug?\r\n\r\nAdd this to the route:\r\n```\r\napp.get('/entity/:id', async (c, next) => {\r\n  console.log(c.req.param('id'));\r\n  return c.json({});\r\n}\r\n```\r\nAnd do HTTP GET /entity/https%3A%2F%2Ftest.com%2F123\r\nThat route handler will not be called.\r\n\r\n### What is the expected behavior?\r\n\r\nIt should print `https://test.com/123` on the console\r\n\r\n### What do you see instead?\r\n\r\nNothing in the console, and 404 response\r\n\r\n### Additional information\r\n\r\nThe string passed to id parameter is generated using `encodeURLcomponent('https://test.com/123')` so I believe it should be treated just like a path component as a whole instead of being parsed before the route matching.\r\nIf I add a middleware to log the `req.path`, it will print `/entity/https:/test.com/123`.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2196537583},{"id":2196656159,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2387","title":"Add useId() hook","body":"### What is the feature you are proposing?\n\nCurrently, [Hono does not provide the useId hook among React Hooks](https://hono.dev/guides/jsx-dom#hooks-compatible-with-react), and we would like to add it.\r\n\r\nOfficial Documentation on React's useId: \r\nhttps://react.dev/reference/react/useId\r\n\r\nImplementation location of useId in React: \r\nhttps://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L3097-L3132\r\n \r\n## Example usage\r\nThis is primarily used for accessibility attributes.\r\n By using useId to provide a unique ID, rather than hardcoding the ID, we can ensure that the generated IDs do not overlap even when the same component is rendered multiple times.\r\n\r\nFor example:\r\n```tsx\r\nimport { useId } from 'react';\r\n\r\nfunction PasswordField() {\r\n  // In the first PasswordField, it outputs id=':r1:'\r\n  // In the second PasswordField, it outputs id=':r2:'\r\n  const passwordHintId = useId();\r\n\r\n  return (\r\n    <>\r\n      <label>\r\n        Password:\r\n        <input\r\n          type=\"password\"\r\n          aria-describedby={passwordHintId}\r\n        />\r\n      </label>\r\n      <p id={passwordHintId}>\r\n        The password should contain at least 18 characters\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <h2>Choose password</h2>\r\n      <PasswordField />\r\n      <h2>Confirm password</h2>\r\n      <PasswordField />\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\n## Suggestion\r\nIf you are open to this issue, I would like to submit a PR. \r\nHowever, this would be my first major contribution to an open-source project, so there might be areas where I lack experience. I would appreciate your support in such cases!","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2196656159},{"id":2196703275,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2388","title":"Bug in jsx renderer rendering style attribute","body":"### What version of Hono are you using?\n\n4.1.2\n\n### What runtime/platform is your app running on?\n\nNode v20.11.0\n\n### What steps can reproduce the bug?\n\nExecute the following script:\r\n```ts\r\nimport { Hono } from \"hono\";\r\nimport React from \"hono/jsx\"\r\n\r\nconst app = new Hono().get(\"/\", (c) => c.html(<div style={{\"font\": '\"NotoSans\"'}}/>));\r\n\r\n// expect: <html><div style=\"font:&quot;NotoSans&quot;\"></div></html>\r\n// actual: <html><div style=\"font:\"NotoSans\"\"></div></html>\r\nconsole.log(await (await app.request(\"/\")).text());\r\n```\n\n### What is the expected behavior?\n\nprint `<html><div style=\"font:&quot;NotoSans&quot;\"></div></html>`\n\n### What do you see instead?\n\nprint `<html><div style=\"font:\"NotoSans\"\"></div></html>`\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2196703275},{"id":2197060051,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2389","title":"feat(jsx): add useId hook","body":"### Why is it so simple in \"hono/jsx\"?\r\n\r\nhttps://github.com/honojs/hono/issues/2387#issuecomment-2009251402\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2197060051},{"id":2197096543,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2390","title":"fix(jsx): escape attribute value for \"style\"","body":"fixes #2388\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2197096543},{"id":2197291209,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2391","title":"Incorrect JSX type error when one child element is undefined","body":"### What version of Hono are you using?\r\n\r\n4.0.6\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\nTry to pass children from one JSX component typed with `PropsWithChildren` to another:\r\n\r\n```tsx\r\nimport type { PropsWithChildren } from \"hono/jsx\";\r\n\r\nfunction Main({ children }: PropsWithChildren) {\r\n  return (\r\n    <main>{children}</main>\r\n  )\r\n}\r\n\r\nfunction Layout({ children }: PropsWithChildren) {\r\n  return (\r\n    <Main>\r\n      <nav><a href=\"/\">Home</a></nav>\r\n      {children}\r\n    </Main>\r\n  )\r\n}\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nNo type error, since children should be valid children of another component. A single undefined child is fine, so an array with an undefined child should also be fine.\r\n\r\n### What do you see instead?\r\n\r\nA type error:\r\n\r\n```\r\nType 'Child | undefined' is not assignable to type 'Child'.\r\n  Type 'undefined' is not assignable to type 'Child'.ts(2322)\r\n```\r\n\r\n### Additional information\r\n\r\nThis only occurs when passing multiple children. I assume this is because TS narrows the `Child | undefined` type to `Child[]`. Since `Child` is not allowed to be undefined this means an array of children cannot contain any undefined elements.\r\n\r\nI think the easiest solution would be to add `undefined` to the `Child` union.\r\n\r\nMy current work around is to wrap the children in a useless fragment, to avoid creating an array of children.\r\n\r\nEdit: I think #1193 is the same underlying problem.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2197291209},{"id":2197411507,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2392","title":"fix(validator): use cached body for `json` and `form` validation","body":"Fixes #2163\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2197411507},{"id":2198743624,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2394","title":"fix(jsx): allow null, undefined, and boolean as children","body":"fixes #2391\r\n\r\n### Insufficient type definitions\r\n\r\n`null` and `undefined` should also be allowed for JSX child elements, and even hono was implemented with this assumption in the following places, but it was omitted from the type definition. This will be fixed in c16c6c0e839188742f24eec6f86266ead02ec707\r\n\r\nhttps://github.com/usualoma/hono/blob/b5ad5f4418a6ed50ac61bdb07b8f016693bfd533/src/jsx/base.ts#L76-L77\r\n\r\n### Insufficient null/undefined/boolean handling\r\n\r\nThere were some child elements of `Suspense` and `ErrorBoundary` that had insufficient handling of `null` and `undefined`, which were fixed with e151c792cf40751cacd988fc2745ef5e08ae56e9.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2198743624},{"id":2199181289,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2395","title":"Support for `Vary` Header in Cache Middleware","body":"### What is the feature you are proposing?\n\nI suggest adding support for the `Vary` header in the cache middleware to improve content negotiation, particularly for image optimization use cases. This enhancement would allow serving different image formats based on the client's capabilities, enhancing compatibility across various browsers.\r\n\r\nHere's a proposed change to include the `Vary` header:\r\n\r\n```diff\r\nexport const cache = (options: {\r\n  cacheName: string\r\n  wait?: boolean\r\n  cacheControl?: string,\r\n+ vary?: string\r\n}): MiddlewareHandler => {\r\n  ```\r\n\r\n```diff\r\nawait next()\r\nif (!c.res.ok) {\r\n  return\r\n}\r\naddHeader(c)\r\n+ if (options.vary !== undefined) {\r\n+   c.header('Vary', options.vary)\r\n+ }\r\nconst res = c.res.clone()\r\n```\r\n\r\nIncorporating this option would allow for more flexible and efficient caching strategies, particularly for serving optimized images in formats like AVIF, which may not be supported by all browsers. This could be a simple yet impactful improvement to the middleware.\r\n\r\nWould love to hear your thoughts on this addition.\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2199181289},{"id":2199187188,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2396","title":"Cloudflare queue and app routing","body":"### What version of Hono are you using?\n\n4.1.2\n\n### What runtime/platform is your app running on?\n\nCloudflare pages\n\n### What steps can reproduce the bug?\n\nI am hosting the same project in Cloudflare pages for API, and Cloudflare worker for `Queue()` and `Scheduled()`. So I used the provided example  - https://hono.dev/snippets/cloudflare-queue\r\n\r\n```\r\nconst app = new Hono<{ Bindings: Bindings }>();\r\n\r\napp.route('v1/campaigns', campaigns);\r\n\r\nexport default {\r\n  fetch: app.fetch,\r\n  async queue(batch: MessageBatch<Error>, env: Env) {\r\n    try {\r\n      batch.ackAll();\r\n      for (const message of batch.messages) {\r\n        //await startJob(env, message.body as any);\r\n        console.log('m', message);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Queue error', err);\r\n    }\r\n  },\r\n};\r\n```\r\n\r\nFor some reason, the routes doesn't work when I am using `export default`, while it was working fine when I was using the `export const onRequest = handle(app);`\r\n\r\n![image](https://github.com/honojs/hono/assets/6106479/98f2dabb-75f3-4a11-8452-edea45d17cc9)\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2199187188},{"id":2201093341,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2398","title":"Use Signed Cookies in jwt Middleware","body":"### What version of Hono are you using?\n\n4.1.3\n\n### What runtime/platform is your app running on?\n\nNode.JS\n\n### What steps can reproduce the bug?\n\nSet up a signed cookie with jwt:\r\n```js\r\nconst payload = {\r\n  sub: 'user123',\r\n  role: 'admin',\r\n}\r\nconst secret = 'mySecretKey';\r\nawait setSignedCookie(c, 'session', await sign(payload, secret), 'secret ingredient', {\r\n  path: '/',\r\n  secure: true,\r\n  domain: 'example.com',\r\n  httpOnly: true,\r\n  maxAge: 1000,\r\n  expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\r\n  sameSite: 'Strict',\r\n});\r\n```\r\n\r\nThen set up the jwt middleware:\r\n```js\r\nconst secret = 'mySecretKey';\r\napp.use(\r\n  '/auth/*',\r\n  jwt({\r\n    secret,\r\n    cookie: 'session'\r\n  })\r\n)\r\n```\r\n\n\n### What is the expected behavior?\n\nI should be able to access a resource when the cookie is set.\n\n### What do you see instead?\n\nTrying to access a resource that is using the jwt middleware returns with a 401.\n\n### Additional information\n\njwt middleware needs a parameter to specify the secret for the cookie and needs to be able to handle signed cookies.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2201093341},{"id":2201882677,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2399","title":"[Perf] Type instantiation is excessively deep and possibly infinite.","body":"### Discussed in https://github.com/orgs/honojs/discussions/2380\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **RomanNabukhotnyi** March 19, 2024</sup>\r\nHey! I have a large application using hono and I'm running into a problem with types.\r\n\r\n[Repo with a reproduction](https://github.com/cellajs/hono-case)\r\n\r\nIn the `main` branch I moved all my routes and added one additional test route and then the error appeared.\r\n\r\n<img width=\"527\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/97584054/6e377d31-c9c6-4308-85ed-16cfd33f5919\">\r\n<img width=\"752\" alt=\"image\" src=\"https://github.com/honojs/hono/assets/97584054/379eb41b-76bc-48cf-ad55-7602a5f7f831\">\r\n\r\nIn the `test` branch I moved all the routes from the modules into one file and was able to add 35 additional routes without this error.\r\n\r\n\r\n\r\nI also managed to compare the difference between Hono and Elysia\r\nWith Elysia I was able to manage 1410 routes (470 routes / 3 instances) and with Hono - 120 (40 / 3).\r\n[Repo](https://github.com/cellajs/hono-elysia-test)\r\nI might miss or forget something here, in that case please let me know.</div>","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2201882677},{"id":2202067014,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2401","title":"AWS Lambda Streaming only works with response bodies","body":"### What version of Hono are you using?\n\n4.1.3\n\n### What runtime/platform is your app running on?\n\nNode.js + AWS Lambda\n\n### What steps can reproduce the bug?\n\n- Create an app which just sends a redirect\r\n- Deploy that to lambda with the streaming API\r\n- It will not return the redirect\n\n### What is the expected behavior?\n\nThe Lambda streaming should respect responses without body.\n\n### What do you see instead?\n\nThe lambda only setup response metadata when a body is given.\r\n\n\n### Additional information\n\nThese are the lines in the code which are limiting and leading to the described behavior.\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/adapter/aws-lambda/handler.ts#L129-L134\r\n\r\nIf it's welcome I'll try to create a fix for it.\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2202067014},{"id":2202273227,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2402","title":"An error occurred while inserting Google AdSense in jsx.","body":"### What version of Hono are you using?\n\n4.1.3\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nIf you insert an ad using the old Google AdSense insertion method, the object disappears when you push the script and an error occurs in the browser.\r\n```\r\n<ins\r\n  class='adsbygoogle adsbyadsense\r\n  data-ad-client=''\r\n  data-ad-slot=''\r\n  data-ad-format='horizontal'\r\n  data-full-width-responsive='false'></ins>\r\n <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>\r\n```\r\nIf you insert the above code into jsx, `{}` will disappear in the push of the `(adsbygoogle = window.adsbygoogle || []).push({});` script, and an error will occur in the browser.\n\n### What is the expected behavior?\n\nThe empty object in the `(adsbygoogle = window.adsbygoogle || []).push({});` script should not disappear\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nMy guess is that `{}` in `.push({})` is judged to be an empty object and is removed from hono","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2202273227},{"id":2202498061,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2403","title":"feat(jwt): Pass Cookie Options from jwt Middleware to getCookie/getSignedCookie ","body":"Fixes #2398. Adds support for getSignedCookie while also allowing for all options to getCookie/getSignedCookie to be set. Sets the cookie option to have the type:\r\n\r\n```ts\r\ncookie: string | { key: string, secret?: string | BufferSource, prefixOptions?: CookiePrefixOptions }\r\n```\r\n\r\nThe key names reflect the parameter names from getCookie and getSignedCookie. Tests still need to be added and ran for this.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2202498061},{"id":2203275093,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2404","title":"Provide a way to skip `.route()` group prefixing for certain routes / methods","body":"### What is the feature you are proposing?\n\nLinking with NamesMT/hono-adapter-aws-lambda#1\r\nThe linked repo is my fork of `hono/aws-lambda` adapter, which adds support for LambdaTriggerEvents like S3, SQS triggers.\r\nThe support works by registering routes on `TRIGGER` method, like:\r\n`TRIGGER aws:s3`, in which, the `eventSource`, which is `aws:s3`, should never be prefixed.\r\n\r\nA way to skip `.route()` group prefixing for certain routes/methods would be amazing.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2203275093},{"id":2203818955,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2406","title":"feat(middleware/jwt): improve error handling","body":"Improves error handling in the JWT middleware by passing error descriptions to `message` prop in `HTTPExceptionOptions`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2203818955},{"id":2203858786,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2407","title":"Add IAT(issued at) and exp (expiration time)for jwt Tokens .","body":"### What is the feature you are proposing?\n\nThe hono/jwt sign function doesn't have a feature for setting the expiration time and issued time of the token. \r\n1) the sign function should have an exp payload for setting the time expiration time of the token. ","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2203858786},{"id":2203865231,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2408","title":"feat: add middlewares resolve trailing slashes on GET request","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nAs titled. Tests provided and denoified.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2203865231},{"id":2204196617,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2410","title":"Expand `basicAuth` and `bearerAuth` middleware","body":"### What is the feature you are proposing?\n\nI'm interested in bearer token authentication for APIs with Hono. I noticed that Hono has a [built-in middleware](https://hono.dev/middleware/builtin/bearer-auth) for this. Upon reading the docs, I found myself with two unanswered questions:\r\n\r\n1. Is a pre-fetched / hardcoded whitelist of valid tokens the only way to use this middleware?\r\n1. If so, what is the actual use case for the built-in bearer token middleware beyond _extremely_ simple applications?\r\n\r\nI thought perhaps it was just me, but then I've just been reading through #2316 and I think @tcurdt is talking a lot of sense, and I'd like to see if others have input on this matter.\r\n\r\nWhen I authenticate using bearer tokens, I expect to check the token (somehow) and decide if it's valid or not. Maybe it's encrypted/encoded, or I need to verify a signature, or look up in a DB. Simply having a pre-determined list of tokens that are acceptable is not going to cut it for 99% of applications, and I personally feel that in Hono's official bearer token middleware, such a limitation is bad DX and also does not look good to potential evaluators. Something does not feel right about having such basic functionality missing from an official middleware.\r\n\r\nI believe this would be a reasonably simple change to make (which I can contribute), but I should gather opinions first.\r\n\r\nAlso - all of the above applies to the basic auth middleware too!\r\n\r\nThanks.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2204196617},{"id":2204653493,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2411","title":"fix(reg-exp-router): escape meta characters for find middleware","body":"fixes #2345\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2204653493},{"id":2205070229,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2412","title":"refactor(types): optimize inferring handler types","body":"I've refactored the code for some matters about types.\r\n\r\n* Fixed the handlers' overload order. This improves performance when inferring handler return types.\r\n* Fixed some bugs for types.\r\n* Apply `Prettify`.\r\n* Fixed `tsc` errors.\r\n\r\nRelated to #2399\r\n\r\n### Performance improvement\r\n\r\nGetting faster inferring handler return types. Below are the results if it's a simple case that it has one handler.\r\n\r\nBefore:\r\n\r\n<img width=\"1066\" alt=\"Screenshot 2024-03-25 at 16 16 31\" src=\"https://github.com/honojs/hono/assets/10682/fb00d72d-9b9e-4de7-9e4d-563026fad45b\">\r\n\r\nThis PR:\r\n\r\n<img width=\"564\" alt=\"Screenshot 2024-03-25 at 16 15 59\" src=\"https://github.com/honojs/hono/assets/10682/bfda368e-ee7c-42df-8b8a-de4cee04e9cd\">\r\n\r\nThis improves RPC-mode performance but does not change much because the implementation of the `hc` function is not so good.\r\n\r\n#### The scripts for measuring \r\n\r\n```ts\r\n// create.ts\r\nimport { writeFileSync } from 'fs'\r\n\r\nlet code = `\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono()\r\n\r\nconst routes = app\r\n`\r\nfor (let i = 1; i < 300; i++) {\r\n  code += `.get('/route${i}', (c) => {\r\n    return c.json({\r\n      ok: true\r\n    })\r\n  })`\r\n}\r\n\r\ncode += `\r\n\r\nexport type AppType = typeof routes\r\nexport default routes\r\n`\r\n\r\nwriteFileSync(import.meta.dir + '/index.ts', code)\r\n```\r\n\r\n```ts\r\n// client.ts\r\nimport { hc } from 'hono/client'\r\nimport { AppType } from '.'\r\n\r\nconst client = hc<AppType>('/')\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2205070229},{"id":2205232870,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2413","title":"fix(aws-lambda): handle response without body (#2401)","body":"In case of a streaming lambda, the response should still contain metadata\r\nlike status and content type, even if no body is given.\r\nThis could be for example a redirect response.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2205232870},{"id":2205764099,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2415","title":"Less readable status for JWT mismatch and invalid JWT token","body":"### What is the feature you are proposing?\n\nWe receive the Status Code ```401 JwtTokenSignatureMismatched: token() signature mismatched``` whenever a token is mismatched during verification.\r\nThis long string compromises readability due to long token string that it appends in the status\r\nMay be we can strip it down to ```401 JwtTokenSignatureMismatched```\r\n\r\nsimilar issue with ```401 JwtTokenInvalid```\r\n\r\n![image](https://github.com/honojs/hono/assets/96934308/2bbc4e7d-b238-41d3-96ac-009314abc4bb)\r\n\r\nI am using the jwt middleware \r\n\r\n```\r\nconst app = new Hono()\r\napp.route(\"/api/v1\",router)\r\n\r\n```\r\n```\r\nrouter.use(\"/*\", async (c, next) => {\r\n    const middleware = jwt({secret: c.env.JWT_SECRET})\r\n    return middleware(c, next)\r\n})\r\n```\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2205764099},{"id":2206492597,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2416","title":"feat(request): cache body for reusing","body":"Closes #1499 \r\n\r\nAs mentioned in #1499,`c.req.json()` throws an error if `c.req.text()` is called before it. With this PR, the body content created by `c.req.text()`, `c.req.arrayBuffer()`, and others will be cached correctly and reused so the error will not be thrown.\r\n\r\nA concern is that there will be more code in `request.ts`, but this change is important for DX, so we will introduce it\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2206492597},{"id":2206766834,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2418","title":"Streaming","body":"### Discussed in https://github.com/orgs/honojs/discussions/2417\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **K4leri** March 25, 2024</sup>\r\nI found that _**hono/streaming**_ libriry is not accessable. Is their any way to implement streaming functionality ?\r\n\r\nUPD: i found that streams are exactly the part of the hono libriry so in such case that is an error in docs\r\n[This should be edited](https://hono.dev/helpers/streaming#streamsse)</div>","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2206766834},{"id":2207006312,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2419","title":"perf: Don't use `Arrap.prototype.map` if it is not needed return value","body":"I replaced some `Arrap.prototype.map` to `Arrap.prototype.forEach` to up performance a little.\r\n`forEach` doesn't make result value, so It's faster than `map` a little.\r\n\r\n[perf.link](https://perf.link/#eyJpZCI6InM1MHQwMWhhODZmIiwidGl0bGUiOiJGaW5kaW5nIG51bWJlcnMgaW4gYW4gYXJyYXkgb2YgMTAwMCIsImJlZm9yZSI6ImNvbnN0IGFyciA9IG5ldyBBcnJheSgxMDAwKS5maWxsKE1hdGgucmFuZG9tKCkpIiwidGVzdHMiOlt7Im5hbWUiOiJVc2luZyBgbWFwYCIsImNvZGUiOiJjb25zdCBuZXdBcnIgPSBbXVxuYXJyLm1hcCgoZSkgPT4ge1xuXHRuZXdBcnIucHVzaChlKVxufSkiLCJydW5zIjpbODMzMywzMzMzLDIwMDAwLDEwNjY2LDEwNjY2LDEwNjY2LDIzMzMzLDExNjY2LDc2NjYsMTA2NjYsMzMzMywyMzMzMywxMDY2NiwxMDY2NiwxMDY2NiwxMDY2NiwxMDMzMywxMDY2NiwxMDY2NiwxMTAwMCw5MzMzLDI2NjYsMjMzMzMsOTY2NiwxNDAwMCw2MDAwLDI0NjY2LDIwMzMzLDE1MzMzLDEwNjY2LDIzMzMzLDEwNjY2LDI5MDAwLDEzMDAwLDkzMzMsMTA2NjYsNzMzMywxMDY2NiwxMDY2NiwxMDY2NiwzMzMzLDk2NjYsMjY2NiwyNDMzMywxMDY2Niw3MzMzLDk2NjYsMzMzMzMsMTA2NjYsMTg2NjYsNDAwMCwyNjMzMywxMDY2NiwxMDY2Niw0MzMzLDE2MzMzLDEwNjY2LDEyMzMzLDYzMzMsMjM2NjYsMTA2NjYsMTA2NjYsMTAzMzMsMTA2NjYsNzMzMywxMDY2NiwxMDY2NiwxNzMzMywxMDY2NiwxMTAwMCwxMjY2NiwxNTMzMywxMTY2NiwyMzMzMywyMTMzMywyNTAwMCwxMjMzMywxMDY2NiwxOTMzMywxMDY2NiwxMDY2NiwyNTAwMCwxNjAwMCwxMDY2NiwyMjMzMyw3MzMzLDIyMzMzLDEwNjY2LDEwNjY2LDMzMzMsNDMzMywyMzMzMyw1NjY2LDEwNjY2LDI2MzMzLDEyMzMzLDE5NjY2LDEwNjY2LDEwMzMzLDUzMzNdLCJvcHMiOjEyOTU5fSx7Im5hbWUiOiJVc2luZyBgZm9yRWFjaGAiLCJjb2RlIjoiY29uc3QgbmV3QXJyID0gW11cbmFyci5mb3JFYWNoKChlKSA9PiB7XG5cdG5ld0Fyci5wdXNoKGUpXG59KSIsInJ1bnMiOlsxNDAwMCwxNjY2LDE0MzMzLDEwMDAwLDIyNjY2LDI0NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDE2NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDE1MDAwLDEzMDAwLDE1MDAwLDE1MDAwLDMyNjY2LDE5MDAwLDE1MDAwLDMwMDAwLDMyNjY2LDE1MDAwLDE1MDAwLDMwNjY2LDE1MDAwLDE1MDAwLDMyNjY2LDE1MDAwLDE1MDAwLDEzNjY2LDMyNjY2LDE1MDAwLDE1MDAwLDE1MDAwLDMxMDAwLDE1MDAwLDk2NjYsMTUwMDAsMzI2NjYsMTUwMDAsMzEzMzMsMTI2NjYsMTUwMDAsMzY2Niw0MTAwMCwxNTAwMCwxNTAwMCw5MzMzLDM2NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDE1MDAwLDE5MDAwLDMyNjY2LDE1MDAwLDMyNjY2LDE1MDAwLDE1MDAwLDE1MDAwLDMyNjY2LDE0NjY2LDQ3NjY2LDEyNjY2LDMyNjY2LDExNjY2LDExMzMzLDkzMzMsMzI2NjYsMTI2NjYsMTUwMDAsNjY2NiwxOTAwMCwxNTAwMCwxNTAwMCwxNTAwMCwxNTAwMCwxMTMzMywzMjY2Niw5NjY2LDE1MDAwLDE1MDAwLDQwMDAsMTEwMDAsMTUwMDAsMTUwMDAsMTUwMDAsMzI2NjYsMTUwMDAsNzY2Niw5NjY2LDE1MDAwLDE1MDAwLDE1MDAwLDI2NjY2LDEzMzMzLDE1MDAwLDE1MDAwLDMyNjY2XSwib3BzIjoxODAzM31dLCJ1cGRhdGVkIjoiMjAyNC0wMy0yNlQwMDozOTozNS42MTlaIn0%3D)\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2207006312},{"id":2208312372,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2420","title":"feat: introduce Method Override Middleware","body":"This PR introduces new middleware, \"Method Override Middleware.\"\r\n\r\nThis middleware executes the handler of the specified method, which is different from the actual method of the request, depending on the value of the form, header, or query, and returns its response.\r\n\r\nFor example, since HTML forms cannot send a DELETE method, you can put the value `DELETE` in the property named `_method` and send it. And the handler for `app.delete()` will be executed.\r\n\r\nThe HTML form:\r\n\r\n```html\r\n<form action='/posts' method='POST'>\r\n  <input type='hidden' name='_method' value='DELETE' />\r\n  <input type='text' name='id' />\r\n</form>\r\n```\r\n\r\nThe application:\r\n\r\n```ts\r\nimport { methodOverride } from 'hono/method-override'\r\n\r\nconst app = new Hono()\r\napp.use('/posts', methodOverride({ app }))\r\n\r\napp.delete('/posts', () => {\r\n  // ...\r\n})\r\n```\r\n\r\nYou can change the default values or use the header value and query value:\r\n\r\n```ts\r\napp.use('/posts', methodOverride({ app, form: '_custom_name' }))\r\napp.use('/posts', methodOverride({ app, header: 'X-METHOD-OVERRIDE' }))\r\napp.use('/posts', methodOverride({ app, query: '_method' }))\r\n```\r\n\r\n### TODO\r\n\r\n- [x] Ignore a GET request\r\n- [x] Write tests for Header\r\n- [x] Write tests for Query\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2208312372},{"id":2208403648,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2421","title":"middleware next() return type is inaccurate","body":"### What version of Hono are you using?\n\n4.1.4\n\n### What runtime/platform is your app running on?\n\nCloudflare workers\n\n### What steps can reproduce the bug?\n\nUse a bare bones middleware, and log in the middleware\r\n\r\n```typescript\r\nimport { Hono } from 'hono';\r\n\r\nconst app = new Hono()\r\n\r\napp.use(async (ctx, next) => {\r\n  // typed as void, but actual value is a Context object.\r\n  const nextResult = await next();\r\n  console.log('nextResult', nextResult);\r\n});\r\n```\r\n\r\n\n\n### What is the expected behavior?\n\nI expect the result of `await next()` to be `undefined`, since the return type is `void`.\n\n### What do you see instead?\n\nI see the actual value as a full Hono `Context` object.\n\n### Additional information\n\n- Also tested on Hono `4.0.1`.\r\n- 💭 The returned Context object enables a lot of additional use cases. ie. checking `ctx.error` for if a wrapped middleware `threw`. Otherwise, middlewares are unable to detect if any wrapped middleware has `throw`n, since `await next()` does not appear to ever `throw`.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2208403648},{"id":2208681075,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2422","title":"Route defined by multiple paths not handled","body":"### What version of Hono are you using?\n\n3.11.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nHello,\r\n\r\nDefine a route with multiple paths like this : \r\n\r\n```\r\napp.on(\r\n  'GET',\r\n  [\r\n    '/blog/*',\r\n    ...LANGUAGES.map((lang) => `/${lang}/blog/*`),\r\n    '/_elderjs/*',\r\n    ...LANGUAGES.map((lang) => `/${lang}/_elderjs/*`),\r\n  ],\r\n  ...proxifyBlogMiddleware(),\r\n)\r\n```\r\n\r\n\n\n### What is the expected behavior?\n\nThe handle should be called when matching following routes : \r\n\r\n- `/blog`\r\n- `/blog/1234`\r\n- `/en/blog/1234`\n\n### What do you see instead?\n\nA 404 is returned. \n\n### Additional information\n\nIf I define routes like this : \r\n\r\n```\r\nconst blogRoutes = [\r\n  '/blog/*',\r\n  ...LANGUAGES.map((lang) => `/${lang}/blog/*`),\r\n  '/_elderjs/*',\r\n  ...LANGUAGES.map((lang) => `/${lang}/_elderjs/*`),\r\n]\r\n\r\nfor (const route of blogRoutes) {\r\n  app.get(route, ...proxifyBlogMiddleware())\r\n}\r\n```\r\n\r\nEverything works as expected.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2208681075},{"id":2208917109,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2423","title":"Example at https://hono.dev/helpers/websocket#websocket-helper doesn't work with deno.","body":"### What version of Hono are you using?\n\n2.0.2\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nJust run the example code:\r\n```ts\r\nimport { Hono } from \"https://deno.land/x/hono@v2.0.2/mod.ts\";\r\nimport { upgradeWebSocket } from \"https://deno.land/x/hono@v4.1.4/helper.ts\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\r\n  \"/ws\",\r\n  upgradeWebSocket((c) => {\r\n    return {\r\n      onMessage(event, ws) {\r\n        console.log(`Message from client: ${event.data}`);\r\n        ws.send(\"Hello from server!\");\r\n      },\r\n      onClose: () => {\r\n        console.log(\"Connection closed\");\r\n      },\r\n    };\r\n  }),\r\n);\r\n\r\nDeno.serve(app.fetch);\r\n```\r\n\r\nAnd try to connect it in a browser console.\r\n```const socket = new WebSocket('ws://localhost:8000/')```\n\n### What is the expected behavior?\n\nI expect the client to connect to the server.\n\n### What do you see instead?\n\nI get a ts error like this:\r\n```\r\nNo overload matches this call.\r\n  The last overload gave the following error.\r\n    Argument of type 'string' is not assignable to parameter of type 'Handler<string, Env>'.\r\n```\r\nand when I try to connect to it I get a runtime error like this.\r\n```\r\nTypeError: Cannot read properties of undefined (reading 'Symbol(request)')\r\n    at toInnerRequest (ext:deno_fetch/23_request.js:560:17)\r\n    at Object.upgradeWebSocket (ext:deno_http/01_http.js:410:17)\r\n    at https://deno.land/x/hono@v4.1.4/adapter/deno/websocket.ts:7:37\r\n    at dispatch (https://deno.land/x/hono@v2.0.2/compose.ts:28:30)\r\n    at https://deno.land/x/hono@v2.0.2/compose.ts:12:12\r\n    at Hono.dispatch (https://deno.land/x/hono@v2.0.2/hono.ts:182:23)\r\n    at fetch (https://deno.land/x/hono@v2.0.2/hono.ts:203:17)\r\n    at ext:deno_http/00_serve.js:455:24\r\n    at ext:deno_http/00_serve.js:689:29\r\n    at eventLoopTick (ext:core/01_core.js:169:7)\r\n```\n\n### Additional information\n\nOS: Windows 11\r\n\r\nDeno version: \r\n- deno 1.41.3 (release, x86_64-pc-windows-msvc)\r\n- v8 12.3.219.9\r\n- typescript 5.3.3","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2208917109},{"id":2209805186,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2424","title":"feat(jwt): Add type helper to `payload`","body":"I added type hints to jwt sign function's `payload`.\r\nIf we merged this PR, we can write payload easier.\r\nJose also is doing like it.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2209805186},{"id":2209888482,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2425","title":"Adapter/Handler for Astro","body":"### What is the feature you are proposing?\n\nI think it would be a great idea making an adapter for [astro](https://astro.build/) endpoints","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2209888482},{"id":2210299085,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2426","title":"feat: support for `vary` header in cache middleware","body":"This PR adds support for the `Vary` header in cache middleware, allowing developers to specify headers that should trigger separate cache entries. This feature is essential for applications serving content that varies based on client headers, such as Accept or Accept-Language, enhancing content negotiation and caching efficiency.\r\n\r\nclosed: https://github.com/honojs/hono/issues/2395\r\n\r\n### Example Usage\r\n\r\n```ts\r\napp.use('/example/*', cache({ cacheName: 'my-app-cache', vary: 'Accept, Accept-Encoding' }));\r\napp.get('/example/', (c) => {\r\n  return c.text('This content is cached with Vary header.');\r\n});\r\n```\r\n\r\nThis simple addition enables the server to cache different versions of a resource based on the specified header(s), ensuring that clients receive content that's tailored to their needs, such as different image formats or languages.\r\n\r\n\r\n**Author should do the following, if applicable:**\r\n- [X] Add tests.\r\n- [X] Run tests.\r\n- [X] `yarn denoify` to generate files for Deno.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2210299085},{"id":2211211768,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2428","title":"hono/zod-openapi + RPC not working ","body":"### What version of Hono are you using?\r\n\r\nHono＠4.0.10, @hono/zod-openapi@0.9.9\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno(1.41.3)\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI have prepared a minimally configured project in this repository.\r\n\r\nhttps://github.com/Octo8080X/inspect-fresh-hono-openapi-rpc\r\n\r\nDue to some issues, it appears that hono(RPC) + hono/zod-openapi is not working.\r\n\r\nAs one of the causes, there seems to be no `openapi()` in the object provided by the `z` method provided by `@hono/zod-openapi`.\r\n\r\n```ts routes\\api\\[...path].ts\r\nimport { Handler } from \"$fresh/server.ts\";\r\nimport { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";\r\n\r\nconst ParamsSchema = z.object({});\r\n\r\nconsole.log(z.string());\r\n// => ZodString {\r\n//      spa: [Function: bound safeParseAsync] AsyncFunction,\r\n//      _def: { checks: [], typeName: \"ZodString\", coerce: false },\r\n//      parse: [Function: bound parse],\r\n//      safeParse: [Function: bound safeParse],\r\n//      parseAsync: [Function: bound parseAsync] AsyncFunction,\r\n//      safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,\r\n//      refine: [Function: bound ],\r\n//      refinement: [Function: bound refinement],\r\n//      superRefine: [Function: bound superRefine],\r\n//      optional: [Function: bound ],\r\n//      nullable: [Function: bound ],\r\n//      nullish: [Function: bound nullish],\r\n//      array: [Function: bound array],\r\n//      promise: [Function: bound promise],\r\n//      or: [Function: bound or],\r\n//      and: [Function: bound and],\r\n//      transform: [Function: bound ],\r\n//      brand: [Function: bound brand],\r\n//      default: [Function: bound ],\r\n//      catch: [Function: bound catch],\r\n//      describe: [Function: bound describe],\r\n//      pipe: [Function: bound pipe],\r\n//      readonly: [Function: bound readonly],\r\n//      isNullable: [Function: bound isNullable],\r\n//      isOptional: [Function: bound isOptional]\r\n//    }\r\n\r\nconst HeloWorldSchema = z\r\n  .object({\r\n    message: z.string().openapi({  // <= Property 'openapi' does not exist on type 'ZodString'.\r\n      example: \"Hello World!\",\r\n    }),\r\n  })\r\n  .openapi(\"HeloWorldResponse\");  // <= Property 'openapi' does not exist on type 'ZodObject<{ message: any; }, \"strip\", ZodTypeAny, { [x: string]: any; message?: any; }, { [x: string]: any; message?: any; }>'\r\n\r\nconst route = createRoute({\r\n  method: \"get\",\r\n  path: \"/api/hello_world\",\r\n  request: {\r\n    params: ParamsSchema,\r\n  },\r\n  responses: {\r\n    200: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: HeloWorldSchema,\r\n        },\r\n      },\r\n      description: \"Retrieve the user\",\r\n    },\r\n  },\r\n});\r\n\r\nconst app = new OpenAPIHono();\r\n\r\nconst appRoutes = app.openapi(route, (c) => {\r\n  return c.json({\r\n    message: \"Hello World!\",\r\n  });\r\n});\r\n\r\nexport type AppRoutesType = typeof appRoutes;\r\n```\r\n\r\nAgain, an error is made here by creating a client using a type created from a definition that is probably faulty in some way.\r\n\r\n```ts islands\\HelloWorld.tsx\r\nimport { useEffect, useState } from \"preact/hooks\";\r\nimport { hc } from \"$hono/mod.ts\";\r\nimport type { AppRoutesType } from \"../routes/api/[...path].ts\";\r\nconst client = hc<AppRoutesType>(\"http://localhost:8000/\");   //  <= Type mismatch\r\n\r\nexport default function HelloWorld() {\r\n  // omission\r\n}\r\n```\r\n\r\nRPC with openapi removed works correctly.\r\n\r\n\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nRPC can be used without causing type errors.\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n\r\nPerhaps this issue illustrates the same problem.\r\nhttps://github.com/honojs/hono/issues/1784","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2211211768},{"id":2211923962,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2429","title":"refactor(method-override)","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2211923962},{"id":2211937255,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2430","title":"fix(validator): `await` cached contents","body":"Fixes #2163\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2211937255},{"id":2212179387,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2431","title":"chore(benchmark): add \"loop\" script","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2212179387},{"id":2215668159,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2436","title":"feat(middleware/cors): pass context to options.origin function","body":"Hello!\r\nI opened this PR because I wanted to use a context in the options.origin function as follows:\r\n```\r\napp.use(\r\n  '/api/*',\r\n  cors({\r\n    origin: (origin, c) => {\r\n      return c.env.MY_ALLOW_ORIGIN\r\n    },\r\n  })\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2215668159},{"id":2216145835,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2438","title":"Long Polling middleware and client?","body":"### What is the feature you are proposing?\n\nMost of web clients have supported WebSockets.\r\n\r\nBut currently, many proxies may be blocking WebSockets. It includes workplace and school proxies. Engine.io, as Socket.io core's [README](https://github.com/socketio/engine.io?tab=readme-ov-file#goals) has such a description.\r\n\r\nIn my school, we often enjoy real-time web games for learning. Our school's iPad proxy is blocking WebSockets, but those games is able to working. I think the reason is those games is using Long Polling.\r\n\r\nOther than this, I found many articles what workplace proxies blocked WebSocket, but I don't write it because articles is Japanese articles.\r\n\r\nSo I would like have Long Polling middleware.\r\nIf Hono has this middleware, Hono may be \"Web standard alternative to Socket.io\"","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2216145835},{"id":2216204780,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2439","title":"Response serialization and validation","body":"### What is the feature you are proposing?\r\n\r\nCertain frameworks (eg: [fastify](https://fastify.dev/docs/latest/Reference/Validation-and-Serialization/#serialization)) provide response validation for success or error payloads.\r\nIs there support for such feature in hono? If not, is it something planned?\r\n\r\n### Context\r\nApart from obvious advantages like schema-first approach, this feature would greatly help securing API internals.\r\nFor example, when you have multiple unique IDs for DB records and you want to make sure that only `external_id` IDs are ever returned without accidentally leaking `internal_id` IDs.\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2216204780},{"id":2216851751,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2443","title":"fix(cache): not enabled if `caches` is not defined","body":"Fixes #1756\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2216851751},{"id":2216869167,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2444","title":"fix(cache): check `globalThis.caches`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2216869167},{"id":2216978571,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2445","title":"test: stub `crypto` if not exist","body":"Stub only when there is no `crypto` in global.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2216978571},{"id":2217139007,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2446","title":"feat(jwt): literal typed `alg` option value","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2217139007},{"id":2217150296,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2447","title":"test(ssg): add test for content-type includes `;`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2217150296},{"id":2217181156,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2448","title":"feat(jwt): add `JwtTokenInvalid` object as `cause` when JWT is invalid","body":"Fixes #2415\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2217181156},{"id":2217194176,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2449","title":"feat(bearer-auth): add `verifyToken` option","body":"This PR will fix #2316 and #2410.\r\n\r\nWith this PR, it enables passing the function to verify the token in Bearer Middleware.\r\n\r\n```ts\r\napp.use(\r\n  '/auth-verify-token/*',\r\n  bearerAuth({\r\n    verifyToken: async (token) => {\r\n      return token === 'dynamic-token'\r\n    },\r\n  })\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2217194176},{"id":2217222765,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2450","title":"feat(basic-auth): add `verifyUser` option","body":"This PR will fix #2316 and #2410.\r\n\r\nWith this PR, it enables passing the function to verify the username and password in Basic Auth Middleware.\r\n\r\n```ts\r\napp.use(\r\n  basicAuth({\r\n    verifyUser: (username, password, c) => {\r\n        return (\r\n          username === 'dynamic-user' &&\r\n          password === 'hono-password'\r\n        )\r\n    },\r\n  })\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2217222765},{"id":2220169322,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2454","title":"Next","body":"Ready for **v4.2**.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2220169322},{"id":2221566763,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2458","title":"fix(jws): Only import necessary helper (not all helpers)","body":"This change prevents bundlers from pulling in all helpers, including the \"ssg\" helper which is not compatible with Cloudflare workers as it creates a \"Request\" in the global scope, and only imports the required (adapter) helper.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2221566763},{"id":2222772079,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2459","title":"feat(jsx-renderer): pass the context as 2nd arg","body":"Fixes https://github.com/honojs/honox/issues/132\r\n\r\nWith this PR, you can get the context object in the component:\r\n\r\n```ts\r\napp.use(\r\n  jsxRenderer(\r\n    ({ children }, c) => {\r\n      return (\r\n        <div>\r\n          {children} at {c.req.path}\r\n        </div>\r\n      )\r\n    },\r\n    { docType: false }\r\n  )\r\n)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2222772079},{"id":2223255816,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2460","title":"hc with dynamic headers","body":"### What is the feature you are proposing?\n\nIt would be very handy if you could pass a function to `hc` that gets called on every request and returns the headers. My use case would be to get the JWT from localStorage on every request because the JWT is managed by another library and can change at any time.\r\n\r\n```ts\r\nconst client = hc<App>(\"https://example.com\", {\r\n  headers: () => ({\r\n    Authorization: `Bearer ${localStorage.getItem(\"jwt\")}`,\r\n  }),\r\n});\r\n```\r\n\r\nThis would eliminate the need to create a new client whenever the JWT changes.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2223255816},{"id":2223340288,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2461","title":"feat(client): accept a function that provides dynamic headers to hc","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nFixes #2460\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2223340288},{"id":2223350550,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2462","title":"We need catch all exceptions in \"onError\" method, not just Error and its derivatives","body":"### What is the feature you are proposing?\n\n**When you use the onError method to catch exceptions, it only responds to exceptions defined on the Error class.**\r\n\r\n![codeimage-snippet_3](https://github.com/honojs/hono/assets/66062057/e08ab1a2-ed39-47df-a89d-90463c26e98b)\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2223350550},{"id":2224021869,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2463","title":"Error on .jsx file","body":"### What version of Hono are you using?\n\n4.2.1\n\n### What runtime/platform is your app running on?\n\nnodejs\n\n### What steps can reproduce the bug?\n\nIn starter template I choose nodejs and rename file index.js to index.jsx and update package.json. When I go to route I get error on line with `c` from line with `return c.html()` that render JSX.\n\n### What is the expected behavior?\n\n.jsx should be supported like .tsx.\n\n### What do you see instead?\n\n```\r\nReferenceError: React is not defined\r\n    at Array.<anonymous> (my-app/src/index.jsx:29:16)\r\n    at Hono.dispatch (my-app/node_modules/.pnpm/hono@4.2.1/node_modules/hono/dist/cjs/hono-base.js:198:38)\r\n    at fetch (my-app/node_modules/.pnpm/hono@4.2.1/node_modules/hono/dist/cjs/hono-base.js:224:17)\r\n    at Server.<anonymous> (my-app/node_modules/.pnpm/@hono+node-server@1.9.1/node_modules/@hono/node-server/dist/index.js:404:13)\r\n```\n\n### Additional information\n\nThis is tsconfig.json\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\": \"ESNext\",\r\n    \"module\": \"ESNext\",\r\n    \"moduleResolution\": \"Bundler\",\r\n    \"strict\": true,\r\n    \"types\": [\r\n      \"node\"\r\n    ],\r\n    \"jsx\": \"react-jsx\",\r\n    \"jsxImportSource\": \"hono/jsx\",\r\n  }\r\n}\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2224021869},{"id":2224683277,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2465","title":"hc ClientResponse<T>.json() method removes null from T union","body":"### What version of Hono are you using?\n\n4.2.1\n\n### What runtime/platform is your app running on?\n\nNode.js\n\n### What steps can reproduce the bug?\n\n```ts\r\n// server.ts\r\nconst app = new Hono();\r\napp.get(\"/\", async c => {\r\n  return c.json(null);\r\n})\r\n\r\nexport type AppType = typeof app;\r\n```\r\n\r\n```ts\r\n// client.ts\r\nimport type { AppType } from \"./server.ts\";\r\nconst client = hc<AppType>(\"http://example.com\")\r\n\r\nconst result = await client.index.$get().then(x => x.json());\r\n//    ^? never\r\n```\n\n### What is the expected behavior?\n\nThe type of `result` should be `null`\n\n### What do you see instead?\n\nThe type of `result` is `never`\n\n### Additional information\n\nThis also happens for unions. For example if my route can return either a json object or null the result type will remove null from this union","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2224683277},{"id":2225230504,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2466","title":"nextjs app router + nodejs not working","body":"### What version of Hono are you using?\n\n4.2.1\n\n### What runtime/platform is your app running on?\n\nnodejs\n\n### What steps can reproduce the bug?\n\n```\r\n    \"next\": \"14.1.4\",\r\n    \"@hono/node-server\": \"^1.9.1\",\r\n    \"hono\": \"^4.2.1\",\r\n```\r\n\r\n`src\\app\\api\\[[...route]]\\route.ts`\r\n```\r\nimport { Hono } from 'hono';\r\nimport { handle } from '@hono/node-server/vercel';\r\n\r\nconst app = new Hono().basePath('/api');\r\n\r\napp.get('/hello', (c) => {\r\n  return c.json({\r\n    message: 'Hello from Hono!',\r\n  });\r\n});\r\n\r\n// export const GET = handle(app);\r\nexport default handle(app);\r\n\r\n```\r\nwith\r\n`export const GET = handle(app);`\r\n\r\nerror \r\n```\r\n ⨯ TypeError: outgoing.on is not a function\r\n    at eval (webpack-internal:///(rsc)/./node_modules/.pnpm/@hono+node-server@1.9.1/node_modules/@hono/node-server/dist/vercel.mjs:364:14)\r\n```\r\n\r\nwith default export\r\n`export default handle(app);`\r\n\r\nerror\r\n```\r\nFailed to find Response internal state key\r\n ⨯ Detected default export in 'F:\\code\\xxxx\\src\\app\\api\\[[...route]]\\route.ts'. Export a named export for each HTTP method instead.\r\n ⨯ No HTTP methods exported in 'F:\\code\\xxxx\\src\\app\\api\\[[...route]]\\route.ts'. Export a named export for each HTTP method.\r\n```\r\n\r\n\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2225230504},{"id":2225938375,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2467","title":"Transform request body","body":"### What is the feature you are proposing?\n\nRoutes get request body with functions like `await c.req.json()`. In middleware you should be able to intercept and change the value the route gets with something like `c.req.setJson(someTransformMethod(await c.req.json()))`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2225938375},{"id":2227287515,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2469","title":"fix(client): infer `null` correctly","body":"Fixes #2465\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2227287515},{"id":2229026297,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2471","title":"fix(jsx): Add catch to async function's promise","body":"The `.then(async function())` returns a new promise, that the above .catch() does not catch, resulting in rapid refreshing of the page to cause a fatal uncatchable error. Adding this second .catch fixes that.\r\n\r\n\r\n## The problem: \r\n\r\nIf you're streaming a response, via renderToReadableStream from hono/jsx/streaming, and you rapidly refresh your page, you can trigger an error:\r\n\r\n```sh\r\nTypeError: Invalid state: Controller is already closed\r\n    at new NodeError (node:internal/errors:405:5)\r\n    at ReadableStreamDefaultController.enqueue (node:internal/webstreams/readablestream:1038:13)\r\n    at /Users/markwilkins/projects/wilkins-software-nx-v2/node_modules/hono/dist/cjs/jsx/streaming.js:137:24\r\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n```\r\n\r\nwhich is uncatchable as far as I can tell. \r\n\r\n![Apr-05-2024 21-53-51](https://github.com/honojs/hono/assets/21322162/3c21e83b-0771-47ce-9278-388300916bd2)\r\n\r\n## The fix:\r\n\r\nSince the [catch block](https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/src/jsx/streaming.ts#L138) above is applied to the `promise` variable, but not to the promise returned by [the async function in the .then()](https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/src/jsx/streaming.ts#L142), the call to enqueue on [line 150](https://github.com/honojs/hono/blob/e428a053161e6c7f29d7e9776675fa1f7e7cceec/src/jsx/streaming.ts#L150) can fail due to a closed connection. \r\n\r\n\r\nFixing it is as simple as adding another .catch, as funny as it looks at first glance. \r\n\r\n![Apr-05-2024 21-56-58](https://github.com/honojs/hono/assets/21322162/de63af22-09e8-45c0-b97a-e72373e2fc6e)\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2229026297},{"id":2230380180,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2474","title":"Error in execution of project Cloudflare workers","body":"### What version of Hono are you using?\n\n4.2.2\n\n### What runtime/platform is your app running on?\n\nCloudflare workers\n\n### What steps can reproduce the bug?\n\nnpm run dev\n\n### What is the expected behavior?\n\nit should start a server\n\n### What do you see instead?\n\n![image](https://github.com/honojs/hono/assets/116882181/7299eb50-9993-4e96-916b-60fe15b005cd)\r\n\n\n### Additional information\n\nCheck error in discussion also.\r\n[Error in execution of project #2473\r\n](https://github.com/orgs/honojs/discussions/2473)\r\n","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2230380180},{"id":2230959929,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2476","title":"onlySSG middleware not support Cloudflare worker","body":"### What version of Hono are you using?\n\n4.2.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nDemo Code:\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport { onlySSG } from 'hono/ssg'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', onlySSG(), (c) => {\r\n  return c.html('<h2>Hello Hono!</h2>')\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nRun command: `npm run dev`, will got error.\n\n### What is the expected behavior?\n\nMiniflare start normal without error.\n\n### What do you see instead?\n\n✘ [ERROR] service core:user:pagereader: Uncaught Error: Disallowed operation called within global scope. Asynchronous I/O (ex: fetch() or connect()), setting a timeout, and generating random values are not allowed within global scope. To fix this error, perform this operation within a handler. https://developers.cloudflare.com/workers/runtime-apis/handlers/\r\n\r\n    at null.<anonymous> (index.js:1521:29)\r\n\r\n\r\n✘ [ERROR] MiniflareCoreError [ERR_RUNTIME_FAILURE]: The Workers runtime failed to start. There is likely additional logging output above.\n\n### Additional information\n\nI has install the vite-ssg plugin with this command: `npm i -D vite @hono/vite-ssg`","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2230959929},{"id":2231192421,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2477","title":"fix(ssg): use response header to mark as disabled routes for SSG","body":"Fixes #2476, https://github.com/honojs/honox/issues/58\r\n\r\nAs for #2179, using `c.env` to make the decision was a good change, but the decision in the response header should have been left as is. The response header is used again in this PR.\r\n\r\nSince we use response headers in this PR, we can also remove the `new Response` before the request that causes an error in Cloudflare worker, but since it should not be changed in the patch version, we leave it marked as deprecated.\r\n\r\nAlso, if we can make it so that the response headers are used, the following issue will be fixed.\r\nhttps://github.com/honojs/honox/issues/58\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2231192421},{"id":2231526604,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2478","title":"Cloudflare worker SSG build failed with serveStatic use","body":"### What version of Hono are you using?\r\n\r\n4.2.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nDemo code:\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport { serveStatic } from 'hono/cloudflare-workers'\r\nimport manifest from '__STATIC_CONTENT_MANIFEST'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/assets/*', serveStatic({ root: './', manifest }))\r\n\r\nexport default app\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nNo error, sucessfully build.\r\n\r\n### What do you see instead?\r\n\r\nWhen run npm run build, report an error with below:\r\n```shell\r\nerror during build:\r\nError: Cannot find module '__STATIC_CONTENT_MANIFEST' imported from '/project/src/index.ts'\r\n```\r\n\r\n### Additional information\r\n\r\nThese command `npm run dev` and `npm run deploy` is normal without error.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2231526604},{"id":2231850676,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2479","title":"fix(client): fix websocket client protocol","body":"This PR fixes an issue in the Hono client where WebSocket connections could not be established due to the `hc` function's `baseUrl` containing `http` or `https` schemes. Given that the WebSocket API requires URLs to use the `ws` or `wss` schemes, our existing implementation led to errors when attempting WebSocket connections with `http` or `https` URLs.\r\n\r\nTo address this, we've introduced a utility function, `replaceUrlProtocol`, which converts `http` URLs to `ws` and `https` URLs to `wss` for WebSocket connections. This ensures compatibility with the WebSocket API and resolves the protocol mismatch issue.\r\n\r\nThis change allows for seamless WebSocket communication within Hono applications by correctly handling the URL schemes required for WebSocket connections.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2231850676},{"id":2232434817,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2481","title":"Typesafe enum query param in RPC client?","body":"### Discussed in https://github.com/orgs/honojs/discussions/2475\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **branislav-brincko** April  8, 2024</sup>\r\nThis is my backend: \r\n\r\n![image](https://github.com/honojs/hono/assets/118365024/fa8f6652-24d2-47ec-918a-3cbcdbd7c65f)\r\n\r\nAnd this is my frontend: \r\n\r\n![image](https://github.com/honojs/hono/assets/118365024/4355660c-8ad5-46d7-9206-1d74ae90aff2)\r\n\r\nIs there a way how to make \"order\" on the frontend inferred not as string | string[] but as a \"asc\" | \"desc\"? (In other words, how to make typescript check if I passed the correct value?) \r\n</div>","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2232434817},{"id":2232529929,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2482","title":"trimTrailingSlash having issue to import","body":"### What version of Hono are you using?\r\n\r\n4.2.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nDocument: https://hono.dev/middleware/builtin/trailing-slash\r\nIssue: Getting the error when test the code locally.\r\n\r\n```\r\nimport { trimTrailingSlash } from 'hono/trailing-slash'\r\napp.use(trimTrailingSlash())\r\n```\r\nAfter run `bun run dev`, the following error shows up:\r\n\r\n```\r\n[1] /Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:859\r\n[1]     return new TSError(diagnosticText, diagnosticCodes, diagnostics);\r\n[1]            ^\r\n[1] TSError: ⨯ Unable to compile TypeScript:\r\n[1] index.ts(13,35): error TS2307: Cannot find module 'hono/trailing-slash' or its corresponding type declarations.\r\n[1] \r\n[1]     at createTSError (/Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:859:12)\r\n[1]     at reportTSError (/Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:863:19)\r\n[1]     at getOutput (/Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:1077:36)\r\n[1]     at Object.compile (/Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:1433:41)\r\n[1]     at Module.m._compile (/Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:1617:30)\r\n[1]     at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)\r\n[1]     at Object.require.extensions.<computed> [as .ts] (/Users/maxtrunk/Project_Hono_Demo/node_modules/ts-node/src/index.ts:1621:12)\r\n[1]     at Module.load (node:internal/modules/cjs/loader:1207:32)\r\n[1]     at Function.Module._load (node:internal/modules/cjs/loader:1023:12)\r\n[1]     at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:135:12) {\r\n[1]   diagnosticCodes: [ 2307 ]\r\n[1] }\r\n```\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2232529929},{"id":2232800602,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2483","title":"fix(trailing-slash): export types in `package.json` correctly","body":"Fixes #2482\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2232800602},{"id":2232864540,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2484","title":"set method not working when passing a key and value","body":"### What version of Hono are you using?\n\n4.2.1\n\n### What runtime/platform is your app running on?\n\nbun\n\n### What steps can reproduce the bug?\n\n`\r\napp.use(async (c, next) => {\r\n    c.set('message', 'Hono is cool!!')\r\n    await next()\r\n})\r\napp.get(\"/\", (c) => {\r\n    const message = c.get(\"message\")\r\n    return c.text(`${message}`)\r\n})\r\n`\n\n### What is the expected behavior?\n\nIt must work fine when passing the key \"message\" and the value \"honor is cool!\" \n\n### What do you see instead?\n\nunderneath the key, I encountered an error: \"No overload matches this call.\r\n  Overload 1 of 2, '(key: never, value: never): void', gave the following error\".\n\n### Additional information\n\n_No response_","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2232864540},{"id":2233070823,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2485","title":"hc with Credentials?","body":"### Discussed in https://github.com/orgs/honojs/discussions/2291\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **lajbel** March  1, 2024</sup>\r\nLooks pretty obvious to have something like `credentials` in the configuration of `hc`, something like this\r\n\r\n```js\r\nconst authClient = hc<SomeType>(\"/api/auth/\", {\r\n    headers: {} // You can already set headers!\r\n    credentials: \"include\",\r\n});\r\n```\r\n\r\nI was searching here and there's only one option available to do this approach\r\n\r\n```js\r\nconst api = hc<AppType>(\"api/auth\", {\r\n  fetch: (req, init) =>\r\n    fetch(req, {\r\n      ...init,\r\n      credentials: \"include\", // Why not have all fetch options too?\r\n    })\r\n})\r\n```\r\n\r\nRPC is pretty awesome, but some things are missing</div>","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2233070823},{"id":2234053086,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2487","title":"Cloudflare Workers RPC: TypeError: Fetch API cannot load","body":"### What version of Hono are you using?\n\n4.2.3\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nI was following RPC documentation on [hono.dev](https://hono.dev/guides/rpc), specifically trying to get [custom fetch](https://hono.dev/guides/rpc#custom-fetch-method) working with Cloudflare Workers. I created two workers - `worker_a` with the procedure and `worker_b` with binding to the latter. Unfortunately, communication results in `TypeError: Fetch API cannot load`.\r\n\r\nSteps to reproduce:\r\n1. Clone the example repo illustrating the issue: `git clone https://gitlab.com/b00jum/hono-workers-rpc`\r\n2. Install both workers dependencies by `cd`'ing to their respective folders and running `npm i`\r\n3. According to the [Cloudflare docs](https://developers.cloudflare.com/workers/runtime-apis/bindings/service-bindings/#configuration) worker with the binding must be on your Cloudflare account. `cd` to `worker-b` and run `npm run deploy`.\r\n4. Start `worker-a` by executing `npm start` in its folder, worker starts just fine.\r\n5. Start `worker-b` by executing `npm start` in its folder, worker starts just fine.\r\n6. Execute `curl http://localhost:3002` and observe `Internal Server Error` as well as error from `worker-b`:\r\n```sh\r\n$ npm start\r\n\r\n> start\r\n> wrangler dev src/index.ts\r\n\r\n ⛅️ wrangler 3.48.0\r\n -------------------\r\n ▲ [WARNING] This worker is bound to live services: hello (worker_a)\r\n\r\n\r\n Your worker has access to the following bindings:\r\n - Services:\r\n   - hello: worker_a\r\n ▲ [WARNING] ⎔ Support for service bindings in local mode is experimental and may change.\r\n\r\n\r\n ⎔ Starting local server...\r\n ⎔ Reloading local server...\r\n ⎔ Reloading local server...\r\n [wrangler:inf] Ready on http://localhost:3002\r\n ✘ [ERROR] TypeError: Fetch API cannot load: /api/rpc?name=Hono\r\n\r\n       at ClientRequestImpl.fetch\r\n   (file:///home/user/rpc/worker-b/node_modules/hono/dist/client/client.js:96:27)\r\n       at null.<anonymous>\r\n   (file:///home/user/rpc/worker-b/node_modules/hono/dist/client/client.js:131:16)\r\n       at Object.apply\r\n   (file:///home/user/rpc/worker-b/node_modules/hono/dist/client/client.js:20:14)\r\n       at Array.<anonymous> (file:///home/user/rpc/worker-b/src/index.ts:15:36)\r\n       at Hono2.dispatch\r\n   (file:///home/user/rpc/worker-b/node_modules/hono/dist/hono-base.js:175:37)\r\n       at Hono2.fetch\r\n   (file:///home/user/rpc/worker-b/node_modules/hono/dist/hono-base.js:201:17)\r\n       at fetchDispatcher\r\n   (file:///home/user/rpc/worker-b/.wrangler/tmp/bundle-wtRl3v/middleware-loader.entry.ts:56:17)\r\n       at __facade_invokeChain__\r\n   (file:///home/user/rpc/worker-b/node_modules/wrangler/templates/middleware/common.ts:53:9)\r\n       at Object.next\r\n   (file:///home/user/rpc/worker-b/node_modules/wrangler/templates/middleware/common.ts:50:11)\r\n       at jsonError\r\n   (file:///home/user/rpc/worker-b/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts:22:30)\r\n\r\n\r\n [wrangler:inf] GET / 500 Internal Server Error (31ms)\r\n ╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\r\n │ [b] open a browser, [d] open Devtools, [l] turn off local mode, [c] clear console, [x] to exit                         │\r\n ╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\r\n```\n\n### What is the expected behavior?\n\nWhen executing `curl http://localhost:3002` - a request to `worker-b` - I expected the said worker to execute RPC on `worker-a` under '/api/hello` with query `name?Hono`. This should result in `Hello via RPC Hono` being printed to the terminal.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nWhile searching through the issue tracker I found [#846](https://github.com/honojs/hono/issues/846) which reports the same error. It might be relevant as its happens when worker is bound to a Durable Object as well as D1.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2234053086},{"id":2234367293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2488","title":"fix(jwt): Make JWT Header `typ` Field Optional to Enhance Compatibility","body":"This PR modifies the JWT header verification to make the `typ` field optional. This change is aligned with the JWT specifications as outlined in RFC 7519 Section 5.1, where the `typ` header parameter is optional. This adjustment was necessary to accommodate tokens, such as those decoded from Cloudflare Access's `CF_Authorization`, which do not include the `typ` field, thus previously preventing successful verification.\r\n\r\n### Changes Made\r\n- Made the `typ` field in the `TokenHeader` interface optional.\r\n- Updated the `isTokenHeader` function to validate headers with or without the `typ` field.\r\n\r\nReference to the RFC: [JWT RFC 7519 Section 5.1](https://datatracker.ietf.org/doc/html/rfc7519#section-5.1)\r\n\r\nThe necessity for this change arose during the verification of JWT tokens from Cloudflare Access, where the absence of the `typ` field led to verification issues. By accommodating tokens without the `typ` field, this PR ensures broader compatibility and adherence to the JWT standard.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests\r\n- [X] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2234367293},{"id":2234373185,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2489","title":"Pure RPC client types","body":"### What is the feature you are proposing?\r\n\r\n# The problem\r\n\r\nI was using Hono for one of my monorepo projects and one of the problems I have is that it fails to compile whenever the process environments are different.\r\n\r\nSome to code to better explain:\r\n\r\n## API environment\r\n\r\nThis below contains all sorts of stuff the API might need, like DB connection strings, payment credentials...\r\n\r\n```typescript\r\ndeclare global {\r\n  namespace NodeJS {\r\n    interface ProcessEnv {\r\n      API_URL: string;\r\n      APP_URL: string;\r\n      REDIS_URL: string;\r\n      MYSQL_URL: string;\r\n      // etc....\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Nextjs web client environment\r\n\r\n```typescript\r\ndeclare global {\r\n  namespace NodeJS {\r\n    interface ProcessEnv {\r\n      API_URL: string;\r\n      APP_URL: string;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Compile issues:\r\n\r\nHow since the Hono RPC client is just the representation of the API, it should not care for missing environment type definitions on the backend.\r\n\r\nHowever, when compiled, (I use `Nx` with `esbuild`), the frontend application complains about missing backend environment types, even though this stuff should be abstracted.\r\n\r\nI should not need the `REDIS_URL` to be in `process.env` within my Nextjs app, however, Hono makes me do this...\r\n\r\n# Possible fix:\r\n\r\nNow I've done some digging and it does not make sense to build ALL of the routes, including their actual implementations in order to have a client type. \r\n\r\n- This slows down the tsc compilation times\r\n- Makes it harder to separate client and non-client environment, therefore harder to maintain.\r\n\r\nIt would make much more sense to have a `route type`, aka input->output definition, from which the client would be constructed. The actual routers would then import this type and have the actual logic.\r\n\r\nThis, in pair with `zod-openapi` package would make Hono a killer RPC platform.\r\n\r\n# How do Hono's competitors achieve this?\r\n\r\nI've also been using [https://ts-rest.com/](ts-rest), which follows pretty much the same pattern I'm proposing here. The only difference is ts-rest follows full OpenAPI specs for their API definitions.\r\n\r\nFor example,\r\n\r\nThis code below describes the type of the router (the client inherits directly from here...)\r\n\r\n```typescript\r\nexport const contract = c.router({\r\n  createPost: {\r\n    method: 'POST',\r\n    path: '/posts',\r\n    responses: {\r\n      201: PostSchema,\r\n    },\r\n    body: CreatePostSchema,\r\n    summary: 'Create a post',\r\n  },\r\n})\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2234373185},{"id":2234446814,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2490","title":"testClient doesn't support websocket route","body":"### What is the feature you are proposing?\n\n`const ws = await client.ws.$ws()` throw an error before try to create real WebSocket client\r\n\r\n```ts\r\n112 |     return new URL(url);\r\n113 |   }\r\n114 |   if (method === \"ws\") {\r\n115 |     const targetUrl = opts.args[0] && opts.args[0].param ? replaceUrlParam(url, opts.args[0].param) : url;\r\n116 |     return new WebSocket(targetUrl);\r\n                                        ^\r\nSyntaxError: Invalid url for WebSocket /ws\r\n```\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2234446814},{"id":2236309585,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2491","title":"Types for values on events","body":"### What is the feature you are proposing?\n\n![Screenshot 2024-04-10 at 12 44 07 PM](https://github.com/honojs/hono/assets/5427394/c90abeae-7224-4443-9a25-6e0f7e74289b)\r\n\r\nIt would be nice to have `event.target.value` as a type that can be accessed.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2236309585},{"id":2236461684,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2492","title":"Allow Users to Specify Types for JWT Middleware Payload","body":"### What is the feature you are proposing?\r\n\r\nWhen using the JWT middleware, end users currently cannot specify the type for the payload. The context variable is set to `jwtPayload: any`, and there have been multiple discussions by people on Discord asking how to set the types. It cannot be overridden in ContextVariableMap, so the only way to set it is by casting.\r\n\r\nI am proposing that we either incorporate generic type parameters, for example, `jwt<MyPayloadType>({ secret: '123' })`, which can be backwards compatible.\r\n\r\nOr we remove the following:\r\n\r\n```ts\r\ninterface ContextVariableMap {\r\n  jwtPayload: any;\r\n}\r\n```\r\n\r\nAnd force the user to set the context variables themselves.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2236461684},{"id":2237016693,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2493","title":"aws-lambda adapter throws error if multi-value headers is used in ALB","body":"### What version of Hono are you using?\n\n4.2.3\n\n### What runtime/platform is your app running on?\n\nAWS Lambda Node.js 20.x\n\n### What steps can reproduce the bug?\n\n1. Create AWS Lambda attached to ALB \r\n2. Set the attribute `lambda.multi_value_headers.enabled` to `true` for the Target Group of the Lambda\r\n3. Submit a request to ALB\r\n\n\n### What is the expected behavior?\n\nALB returns a valid response from Hono\r\n\n\n### What do you see instead?\n\n- ALB returns `502 Bad Gateway` instead.\r\n- According to ALB access logs, it is due to `LambdaUnhandled` which means an unhandled error is thrown in Lambda\r\n- According to CloudWatch Logs, that unhandled error is below:\r\n\r\n```json\r\n{\r\n    \"errorType\": \"TypeError\",\r\n    \"errorMessage\": \"Cannot read properties of undefined (reading 'host')\",\r\n    \"stack\": [\r\n        \"TypeError: Cannot read properties of undefined (reading 'host')\",\r\n        \"    at createRequest (/src/runtime/lambda_handler.ts:6:28)\",\r\n        \"    at <anonymous> (/src/runtime/lambda_handler.ts:6:28)\",\r\n        \"    at handler (/src/runtime/lambda_handler.ts:106:3)\",\r\n        \"    at /opt/nodejs/node_modules/datadog-lambda-js/utils/handler.js:166:25\",\r\n        \"    at /opt/nodejs/node_modules/datadog-lambda-js/index.js:227:70\",\r\n        \"    at step (/opt/nodejs/node_modules/datadog-lambda-js/index.js:44:23)\",\r\n        \"    at Object.next (/opt/nodejs/node_modules/datadog-lambda-js/index.js:25:53)\",\r\n        \"    at /opt/nodejs/node_modules/datadog-lambda-js/index.js:19:71\",\r\n        \"    at new Promise (<anonymous>)\",\r\n        \"    at __awaiter (/opt/nodejs/node_modules/datadog-lambda-js/index.js:15:12)\"\r\n    ]\r\n}\r\n```\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2237016693},{"id":2237017257,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2494","title":"fix(adapter): handle multi value headers in AWS Lambda","body":"Fixes https://github.com/honojs/hono/issues/2493\r\nFixes https://github.com/honojs/hono/issues/2495\r\n\r\n## Fixes for #2493\r\nThe current implementation assumes `headers` are always defined, which is incorrect \r\n`headers` can be `undefined` if `multiValueHeaders` exists,, and vice-versa, since`headers` and `multiValueHeaders` are mutually exclusive.\r\n\r\n[`aws-lambda` type definition](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/46eab7d3077fa7939a1b11efc24358c06838df71/types/aws-lambda/trigger/alb.d.ts#L29-L39) in DefinitelyTyped also does so:\r\n ```typescript\r\nexport interface ALBEvent {\r\n    requestContext: ALBEventRequestContext;\r\n    httpMethod: string;\r\n    path: string;\r\n    queryStringParameters?: ALBEventQueryStringParameters | undefined; // URL encoded\r\n    headers?: ALBEventHeaders | undefined;\r\n    multiValueQueryStringParameters?: ALBEventMultiValueQueryStringParameters | undefined; // URL encoded\r\n    multiValueHeaders?: ALBEventMultiValueHeaders | undefined;\r\n    body: string | null;\r\n    isBase64Encoded: boolean;\r\n}\r\n```\r\n\r\n## Fixes for #2495\r\n\r\nThis PR also fixes a conversion from Lambda Event to Request for all event types (ALB, API GW V1/V2).\r\nThe current implementation does not extract values from multi-value headers.  \r\nThe new impl. extract values and delegates those to Request objects, using [Header#append](https://developer.mozilla.org/en-US/docs/Web/API/Headers/append).\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2237017257},{"id":2237050721,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2495","title":"multi-value headers are not honored on AWS Lambda adapter","body":"### What version of Hono are you using?\n\n4.2.3\n\n### What runtime/platform is your app running on?\n\nAWS Lambda Node.js 20.x\n\n### What steps can reproduce the bug?\n\n1. Create a Lambda function and attache it to API Gateway v1 with Payload format version v1 (which include `multiValueHeaders`)\r\n2. Submit a request to ALB with multi-value headers\r\n\n\n### What is the expected behavior?\n\nHono instance receives multi-value headers\n\n### What do you see instead?\n\nNo multi-value headers are sent to Hono instance\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2237050721},{"id":2237335587,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2496","title":"fix(testing): set `baseUrl` for `testClient`","body":"Fixes #2490\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2237335587},{"id":2238697507,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2499","title":"feat(rpc): Add status code to response type","body":"This PR adds a status code to the response type and allows type filtering in RPC as below.\r\n\r\nserver.ts\r\n```ts\r\nconst app = new Hono().get(\r\n  \"/posts/:id\",\r\n  zValidator(\r\n    \"param\",\r\n    z.object({\r\n      id: z.string(),\r\n    })\r\n  ),\r\n  async (c) => {\r\n    const { id } = c.req.valid(\"param\");\r\n\r\n    try {\r\n      const post: Post | undefined = await getPost(id);\r\n\r\n      if (post !== undefined) {\r\n        return c.json({ post }, 200);\r\n      }\r\n\r\n      return c.json({ error: \"not found\" }, 404);\r\n    } catch (e) {\r\n      return c.json({ error: \"internal server error\" }, 500);\r\n    }\r\n  }\r\n);\r\n\r\nexport type AppType = typeof app;\r\n```\r\n\r\nclient.ts\r\n```ts\r\nconst client = hc<AppType>(\"/api\");\r\n\r\nconst res = await client.posts[\":id\"].$get({\r\n  param: { id: \"1\" },\r\n});\r\n\r\nif (res.status === 404) {\r\n  const data: { error: string } = await res.json();\r\n  console.log(data.error);\r\n}\r\n\r\nif (res.ok) {\r\n  const data: { post: Post } = await res.json();\r\n  console.log(data.post);\r\n}\r\n\r\n// { post: Post } | { error: string }\r\ntype ResponseType = InferResponseType<(typeof client.posts)[\":id\"][\"$get\"]>;\r\n\r\n// { post: Post }\r\ntype ResponseType200 = InferResponseType<(typeof client.posts)[\":id\"][\"$get\"], 200>;\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2238697507},{"id":2240386584,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2500","title":"fix(validator): Default use to `OutputTypeExcludeResponseType` when `InputType` is unknown","body":"This PR fixed an issue where the type was not shared properly on the Hono Client side when `json` was specified for the `validator` function.\r\n\r\n### Changes\r\n\r\n- Default use to `OutputTypeExcludeResponseType` when `InputType` is unknown\r\n\r\n### Example Scenario and Code Snippet\r\n\r\n```ts\r\nconst app = new Hono()\r\n\r\nconst route = app.post(\r\n  '/foo',\r\n  validator('json', () => {\r\n    return {} as {\r\n      id: number\r\n      title: string\r\n    }\r\n  }),\r\n  (c) => {\r\n    return c.json({})\r\n  }\r\n)\r\n\r\ntype AppType = typeof route\r\nconst client = hc<AppType>('http://localhost')\r\n\r\nclient.foo.$post({\r\n  // Previously, this would result in `unknown` instead of `{ id: number; title: string; }`\r\n  json: {\r\n    id: 1,\r\n    title: 'title'\r\n  }\r\n})\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2240386584},{"id":2241152319,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2502","title":"refactor: Remove redundant initializer","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2241152319},{"id":2241153938,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2503","title":"refactor(trie-router): parentPatterns is updated but never queried","body":"It appears that `parentPatterns` is updated but its content is never referenced.\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2241153938},{"id":2241156895,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2504","title":"refactor(cloudflare-workers): Suppress eslint noise","body":"As a contributor, it is annoying to see unaddressed warnings on `pnpm lint`.\r\n\r\n\r\n```\r\n/Users/exoego/IdeaProjects/hono/src/adapter/cloudflare-workers/websocket.test.ts\r\n  23:24  warning  'ws' is defined but never used  @typescript-eslint/no-unused-vars\r\n\r\n✖ 1 problem (0 errors, 1 warning)\r\n```\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2241156895},{"id":2241534531,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2505","title":"Nodenext support for ESM","body":"### What version of Hono are you using?\n\n2.5.7\n\n### What runtime/platform is your app running on?\n\nWorkers\n\n### What steps can reproduce the bug?\n\n`import { Hono } from 'hono'` within a turborepo app.\r\n\r\nTurborepo requires these for tsconfig\r\n```\r\nmodule: NodeNext\r\nmoduleResolution: NodeNext\r\n```\r\n\r\nAnd cannot use this for package.json\r\n```\r\ntype = 'module'\r\n```\n\n### What is the expected behavior?\n\nImport should work.\n\n### What do you see instead?\n\nReceives linter error with no type information imported:\r\n```\r\nThe current file is a CommonJS module whose imports will produce 'require' calls; however, the referenced file is an ECMAScript module and cannot be imported with 'require'. Consider writing a dynamic 'import(\"hono\")' call instead.\r\n````\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2241534531},{"id":2242358353,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2508","title":"More React compatibiliy","body":"### What is the feature you are proposing?\n\nI started thinking wishing hono/jsx/dom would be more compatible with React.\r\n\r\nUsing a bundler such as Vite to create an alias with `hono/jsx/dom` in `react` will work with some React libraries.\r\n\r\n```ts\r\nresolve: {\r\n  alias: {\r\n    react: 'hono/jsx/dom'\r\n  }\r\n}\r\n```\r\n\r\nFor example, [React DnD](https://react-dnd.github.io/react-dnd/about) works: https://github.com/usualoma/hono-jsx-dnd\r\n\r\nHowever, when I tried other UI libraries, they all failed to work.\r\n\r\n* [react-toastify](https://github.com/fkhadra/react-toastify)\r\n* [spinners-react](https://github.com/adexin/spinners-react)\r\n* [Radix UI Primitives](https://www.radix-ui.com/primitives)\r\n\r\nThe errors will occur if the following are not exported:\r\n\r\n* `createRef`\r\n* `Fragment`\r\n* `forwardRef`\r\n* `Children`\r\n* etc\r\n\r\nAlso, even if there is an API, the behavior is different, resulting in an error.\r\n\r\nHowever, it would be great if these libraries were available so that more people could use hono/jsx.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2242358353},{"id":2242441663,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2509","title":"TypeError: Cannot determine default value of object","body":"### What version of Hono are you using?\n\n4.2.3\n\n### What runtime/platform is your app running on?\n\nExpo\n\n### What steps can reproduce the bug?\n\nDocumenting this for posterity, but will have a PR to fix on the way.\r\n\r\n1. Create a new expo app\r\n2. Instantiate a `hono/client` instance (e.g.`const client = hc<AppType>(API_URL)`\r\n3. console.log the client: `console.log(client)`\n\n### What is the expected behavior?\n\nLogs the client object\n\n### What do you see instead?\n\n`TypeError: Cannot determine default value of object`\r\n\r\nThis comes from the hermes javascript engine: https://github.com/facebook/hermes/issues/205\r\n\r\nWhat's happening is that when you try to console.log the client, react-native tries to console.log a function. So it calls `client.name.valueOf()` and `client.name.toString()`. But because the client creates proxy objects for methods, it tries to return a instance of `ClientRequestImpl` with the url of `/name/valueOf` and `/name/toString` respectively.\r\n\r\nFix is to catch these cases (and maybe others?) and return a string instead.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2242441663},{"id":2242497880,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2510","title":"fix(client): Allow calling toString and valueOf on the proxy object","body":"Fixes #2509\r\n\r\nWhen a hono client is instantiated in expo and then console.log(client) is called, an error is thrown:\r\n\r\n`TypeError: Cannot determine default value of object`\r\n\r\nThis is because the hermes javascript engine expects `new String(val)` to always return a string. But the proxy object would return a ClientRequestImpl object instead.\r\n\r\nThis commit makes a string / function returned in the cases where .toString() and .valueOf() is called on the function.name or function respectively.\r\n\r\nAlso see https://github.com/facebook/hermes/issues/205\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [X] Add tests\r\n- [X] Run tests (vitest seems to mess up the bun test runner, so comment out that import)\r\n- [X] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2242497880},{"id":2244395277,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2512","title":"feat(helper/cookie): delete cookie returns the deleted value","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n\r\nresolve #2321 ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2244395277},{"id":2244969280,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2513","title":"Running vitest fails after creating a Hono Cloudflare project","body":"### What version of Hono are you using?\r\n\r\n4.2.4\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nRepo for reproduction: https://github.com/callmetwan/hono-cloudflare-pages-vitest\r\n\r\n```\r\nnpm create hono@latest hono-cloudflare-pages-vitest\r\nNeed to install the following packages:\r\ncreate-hono@0.6.3\r\nOk to proceed? (y) y\r\ncreate-hono version 0.6.3\r\n✔ Using target directory … hono-cloudflare-pages-vitest\r\n? Which template do you want to use? cloudflare-pages\r\n✔ Cloning the template\r\n? Do you want to install project dependencies? yes\r\n? Which package manager do you want to use? yarn\r\n✔ Installing project dependencies\r\n🎉 Copied project files\r\nGet started with: cd hono-cloudflare-pages-vitest\r\n```\r\n\r\nInstall vitest\r\n```bash\r\nyarn add -D vitest\r\n```\r\n\r\nAdd to package.json\r\n```\r\n\"scripts: {\r\n .  .  .\r\n    \"test\": \"vitest\"\r\n},\r\n```\r\n\r\nCreate a test\r\n```typescript\r\n// indext.test.tsx\r\nimport {test, expect} from \"vitest\";\r\n\r\ntest(\"should pass\", () => {\r\n  expect(1 + 1).toBe(2);\r\n})\r\n```\r\n\r\nRun tests\r\n```bash\r\nyarn test\r\n```\r\n\r\nFailure:\r\n```txt\r\n FAIL  src/index.test.tsx [ src/index.test.tsx ]\r\nTypeError: Cannot read properties of undefined (reading 'test')\r\n ❯ src/index.test.tsx:3:1\r\n      1| import {test, expect} from \"vitest\";\r\n      2|\r\n      3| test(\"should pass\", () => {\r\n       | ^\r\n      4|   expect(1 + 1).toBe(2);\r\n      5| })\r\n```\r\n\r\nCommenting out the `build()` plugin in vite.config.ts results in tests passing. Something in the plugin is causing an issue.\r\n\r\n### What is the expected behavior?\r\n\r\nTests should pass, the test method should be defined\r\n\r\n### What do you see instead?\r\n\r\n```txt\r\n FAIL  src/index.test.tsx [ src/index.test.tsx ]\r\nTypeError: Cannot read properties of undefined (reading 'test')\r\n ❯ src/index.test.tsx:3:1\r\n      1| import {test, expect} from \"vitest\";\r\n      2|\r\n      3| test(\"should pass\", () => {\r\n       | ^\r\n      4|   expect(1 + 1).toBe(2);\r\n      5| })\r\n```\r\n\r\n### Additional information\r\n\r\nLogging the test method in the test file does actually show the the test method is defined at some point:\r\n```txt\r\nstdout | src/index.test.tsx:2:9\r\n{\r\n  test: [Function: chain2] {\r\n    each: [Function (anonymous)],\r\n    skipIf: [Function (anonymous)],\r\n    runIf: [Function (anonymous)],\r\n    extend: [Function (anonymous)],\r\n    withContext: [Function (anonymous)],\r\n    setContext: [Function (anonymous)],\r\n    mergeContext: [Function (anonymous)],\r\n    fn: [Function (anonymous)] {\r\n      each: [Function (anonymous)],\r\n      skipIf: [Function (anonymous)],\r\n      runIf: [Function (anonymous)],\r\n      extend: [Function (anonymous)]\r\n    }\r\n  }\r\n}\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2244969280},{"id":2245219814,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2514","title":"feat(bearer-auth): add `headerName` option","body":"Adds the possibility to use custom headers, such as `X-Auth` or `X-Access-Token` instead of `Authorization` with the `bearer-auth` middleware.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2245219814},{"id":2245537041,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2515","title":"feat: expose serve-static builder","body":"This allows accessing `middleware/serve-static` from third-party\r\n\r\n### Use case\r\n\r\nI run my own handler based on Cloudflare R2 to avoid the limitations of Cloudflare KV / Pages. And I found that most of the code I needed there was already built into hono.\r\n\r\nSo what I expect is like:\r\n\r\n```ts\r\nimport { Hono } from 'hono';\r\nimport { serveStatic as makeServe } from 'hono/base-serve-static';\r\n\r\nconst app = new Hono<Env>();\r\n\r\nconst serveContent = makeServe<Env>({\r\n  getContent: async (path, c) => {\r\n    // retrieve\r\n    let response = await cache.match(c.req.raw);\r\n\r\n    // ...get R2 object\r\n    if (!response) {\r\n      let obj = await c.env.CONTENT.get(path);\r\n      if (obj) {\r\n        response = obj.body;\r\n        c.executionCtx.waitUntil(cache.put(c.req.raw, obj.body));\r\n      }\r\n    }\r\n\r\n    c.body(response);\r\n  },\r\n});\r\n\r\napp.use(serveContent);\r\n\r\nexport default app;\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2245537041},{"id":2245608285,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2516","title":"feat: expose built-in MIME types","body":"This allows users reuse builtin MIME types while adding some custom.\r\n\r\n```js\r\nimport { baseMimes, getMimeType } from 'hono/utils/mime';\r\n\r\nconst mimes = {\r\n  ...baseMimes,\r\n  'my-own-ext': 'text/plain',\r\n};\r\n\r\ngetMimeType('base.my-own-ext', mimes)\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2245608285},{"id":2247973226,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2517","title":"Unable to use honox-island before iOS 16.4 due to Safari is not supoorted lookbehind regex.","body":"### What version of Hono are you using?\n\n4.0.5 (latest honox uses this version)\n\n### What runtime/platform is your app running on?\n\niOS 16.3 or lower\n\n### What steps can reproduce the bug?\n\nPrepare a iOS 16.3 or lower iOS device.\r\n\r\nAccess the website which created with honox island component (e.g. honox-samples).\r\n\r\nErrors occurred in browser console:\r\n```\r\nUnhandled Promise Rejection: SyntaxError: Invalid regular expression: invalid group specifier name\r\n```\r\n\r\nI haven't tested it without honox. Sorry.\n\n### What is the expected behavior?\n\nNo error occurred.\n\n### What do you see instead?\n\nhono/jsx uses lookbehind regex in JavaScipt.\r\n\r\nhttps://github.com/honojs/hono/blob/13c3156c67414fdb43ce30d6ce74f3ab1c349305/src/jsx/dom/render.ts#L93 \r\n\r\nIt is not supported by iOS 16.3 or lower.\r\n\r\nhttps://caniuse.com/js-regexp-lookbehind\r\n\r\nTo resolve this issue, we need to rewrite regex without lookbehind pattern as I think.\n\n### Additional information\n\nI don't know about hono's compatibility policy for older devices or OS, if hono decides that this issue will not be resolved, I will follow your decision.👍\r\n\r\nEverything else seemed to be working fine on iOS 15.4 I tested.\r\n\r\nI think hono will be more compatible with older devices.  ","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2247973226},{"id":2248609598,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2519","title":"refactor(ssg): update utils.ts","body":"splitedPath -> splittedPath\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2248609598},{"id":2249023617,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2520","title":"defaultHook not picked up in nested routes","body":"### What version of Hono are you using?\n\n4.2.4\n\n### What runtime/platform is your app running on?\n\nCloudflare Pages Functions\n\n### What steps can reproduce the bug?\n\nCreate a base app like below with a default hook [handling validation errors](https://github.com/honojs/middleware/tree/main/packages/zod-openapi#a-dry-approach-to-handling-validation-errors):\r\n\r\n```\r\nexport const createApp = () => {\r\n  const app = new OpenAPIHono<Env>({\r\n    defaultHook: (result, c) => {\r\n      if (!result.success) {\r\n        return c.json(\r\n          {\r\n            ok: false,\r\n            errors: formatZodErrors(result),\r\n            source: 'custom_error_handler',\r\n          },\r\n          422,\r\n        );\r\n      }\r\n    },\r\n  });\r\n  app.use(logger());\r\n  app.use(prettyJSON());\r\n  app.use(async (c, next) => {\r\n    const adapter = new PrismaD1(c.env.DB);\r\n    const prisma = new PrismaClient({ adapter });\r\n    c.set('prisma', prisma);\r\n    await next();\r\n  });\r\n  return app;\r\n}\r\n\r\n```\r\n\r\nRoutes then directly connected to the `app` instance like will correctly use this `defaultHook` as expected, e.g.:\r\n\r\n```\r\napp.openapi(\r\n  createRoute({\r\n    method: 'get',\r\n    path: '/api/pets/{id}',\r\n    ..\r\n```\r\n\r\nbut when nesting routes like:\r\n\r\n```\r\napp.route('/books', books);\r\n```\r\n\r\nthe book routes will not use the `defautHook` as defined on the base `app`.\r\n\r\n\n\n### What is the expected behavior?\n\nThat the `books` routes will also use the `defaultHook` from the base `app` for handling validation errors.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2249023617},{"id":2249492912,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2521","title":"refactor(adapter/aws): Optimize multiple call of same conditions with polymorphism ","body":"### Summary\r\n\r\n- Conditional logics are capsulated in the subclasses of `EventProcessor<E extends LambdaEvent>`.\r\n- Those classes are stateless, so singleton is used to avoid allocation.\r\n- Redundant calling `isProxyEventV2` is optimized, now only one time per event.\r\n- Not in this PR, but this refactoring may also allow some room for optimization for particular Lambda events.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2249492912},{"id":2249510655,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2522","title":"`testClient` does not support top-level URL without trailing slash on workerd","body":"### What version of Hono are you using?\n\n4.2.4\n\n### What runtime/platform is your app running on?\n\nworkerd\n\n### What steps can reproduce the bug?\n\n```ts\r\nimport { Hono } from 'hono'\r\nimport { testClient } from 'hono/testing'\r\n\r\nconst worker = new Hono()\r\n\r\nworker.get('/', async (c) => {\r\n  const app = new Hono().get('/', (c) => c.json(0))\r\n  const res = await testClient(app).index.$get()\r\n  console.log(res.status) // Should be 200, but 404\r\n  return c.json(0)\r\n})\r\n\r\nexport default worker\r\n```\n\n### What is the expected behavior?\n\nThe status should be `200`.\n\n### What do you see instead?\n\n`404`.\n\n### Additional information\n\nThis works fine on Bun and Node.js.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2249510655},{"id":2249519619,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2523","title":"fix(client): shuold not remove tailing slash from top-level URL","body":"`removeIndexString` should not remove a trailing slash from a top-level URL.\r\n\r\nFixes #2522\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2249519619},{"id":2249555291,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2524","title":"fix(jsx/dom): remove lookbehind assertion in event regexp","body":"fixes #2517\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2249555291},{"id":2250569394,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2525","title":"Type inference not working with zod-openapi and path parameters","body":"### What version of Hono are you using?\n\n4.2.5\n\n### What runtime/platform is your app running on?\n\nWrangler\n\n### What steps can reproduce the bug?\n\nUsing path parameters (e. g. `GET /customers/:id`) with `@hono/zod-openapi` breaks type inference for the complete route.\r\n\r\nThis renders the Hono Client unusable with zod-openapi.\r\n\r\nThe following is a simplified example with only one route. If this is combined with another route, e. g. `GET /customers` (without parameter), type inference will break for this endpoint as well.\r\n\r\n```ts\r\nimport { customerSchema, customersTable } from \"@api/db/schema/customers\";\r\nimport type { Env } from \"@api/index\";\r\nimport { OpenAPIHono, createRoute, z } from \"@hono/zod-openapi\";\r\nimport { and, asc, eq } from \"drizzle-orm\";\r\nimport { Hono } from \"hono\";\r\nimport { hc, type InferResponseType } from \"hono/client\";\r\n\r\nconst customersRoutes = new Hono<Env>().route(\r\n  \"/customers\",\r\n  new OpenAPIHono<Env>().openapi(\r\n    createRoute({\r\n      path: \"/{id}\",\r\n      method: \"get\",\r\n      request: {\r\n        params: z.object({\r\n          id: z.number().int().positive(),\r\n        }),\r\n      },\r\n      responses: {\r\n        200: {\r\n          content: {\r\n            \"application/json\": {\r\n              schema: z.object({\r\n                data: customerSchema,\r\n              }),\r\n            },\r\n          },\r\n          description: \"The customer\",\r\n        },\r\n        404: {\r\n          content: {\r\n            \"application/json\": {\r\n              schema: z.object({\r\n                error: z.string(),\r\n              }),\r\n            },\r\n          },\r\n          description: \"Customer not found\",\r\n        },\r\n      },\r\n    }),\r\n    async (c) => {\r\n      const db = c.get(\"db\");\r\n      const userId = c.get(\"userId\");\r\n\r\n      const { id } = c.req.valid(\"param\");\r\n\r\n      const [customer] = await db\r\n        .select()\r\n        .from(customersTable)\r\n        .where(and(eq(customersTable.userId, +userId), eq(customersTable.id, id)))\r\n        .orderBy(asc(customersTable.name));\r\n\r\n      if (!customer) {\r\n        return c.json({ error: \"Customer not found\" }, 404);\r\n      }\r\n\r\n      return c.json({ data: customer });\r\n    },\r\n  ),\r\n);\r\n\r\nexport default customersRoutes;\r\n```\n\n### What is the expected behavior?\n\nType inference should return the correct response type:\r\n```ts\r\ntype ResponseType = {\r\n    error: string;\r\n} | {\r\n    data: {\r\n        id: number;\r\n        name: string;\r\n        email: string | null;\r\n        createdAt: string;\r\n        updatedAt: string;\r\n        deletedAt: string | null;\r\n        userId: number;\r\n        address: string;\r\n        tel: string | null;\r\n    };\r\n}\r\n```\n\n### What do you see instead?\n\nThe response type is inferred as `any`:\r\n```ts\r\ntype ResponseType = any\r\n```\n\n### Additional information\n\nWorking equivalent example without `@hono/zod-openapi`:\r\n```ts\r\nimport { customersTable } from \"@api/db/schema/customers\";\r\nimport type { Env } from \"@api/index\";\r\nimport { and, asc, eq } from \"drizzle-orm\";\r\nimport { Hono } from \"hono\";\r\nimport { hc, type InferResponseType } from \"hono/client\";\r\n\r\nconst customersRoutes = new Hono<Env>().route(\r\n  \"/customers\",\r\n  new Hono<Env>().get(\"/:id\", async (c) => {\r\n    const db = c.get(\"db\");\r\n    const userId = c.get(\"userId\");\r\n\r\n    const id = c.req.param(\"id\");\r\n\r\n    const [customer] = await db\r\n      .select()\r\n      .from(customersTable)\r\n      .where(and(eq(customersTable.userId, +userId), eq(customersTable.id, +id)))\r\n      .orderBy(asc(customersTable.name));\r\n\r\n    if (!customer) {\r\n      return c.json({ error: \"Customer not found\" }, 404);\r\n    }\r\n\r\n    return c.json({ data: customer });\r\n  }),\r\n);\r\n\r\nexport default customersRoutes;\r\n\r\nconst client = hc<typeof customersRoutes>(\"localhost\");\r\nconst get = client.customers[\":id\"].$get;\r\nconst response = await get({ param: { id: \"1\" } });\r\ntype ResponseType = InferResponseType<typeof get>;\r\n```\r\nResult:\r\n```ts\r\ntype ResponseType = {\r\n    error: string;\r\n} | {\r\n    data: {\r\n        id: number;\r\n        name: string;\r\n        email: string | null;\r\n        createdAt: string;\r\n        updatedAt: string;\r\n        deletedAt: string | null;\r\n        userId: number;\r\n        address: string;\r\n        tel: string | null;\r\n    };\r\n}\r\n```\r\n\r\n---\r\n\r\nThe pattern works for routes *without* path parameters.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2250569394},{"id":2250922231,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2526","title":"How to send HTTP requests? in @cloudflare/workers","body":"### What version of Hono are you using?\n\n4.2.5\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nAxiosError: There is no suitable adapter to dispatch the request since :\r\n  - adapter xhr is not supported by the environment\r\n  - adapter http is not available in the build\n\n### What is the expected behavior?\n\nI need to send HTTP requests to other servers, and I am planning to use Axios, but it has failed. What do I need to do to send HTTP requests? (Note: I am sending HTTP requests to other servers)\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2250922231},{"id":2251697579,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2529","title":"fix(sse): close sse stream on end","body":"Adds a finally block to the SSEStream class. Otherwise streamSSE will error whenever used in Cloudflare Workers.\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2251697579},{"id":2252074285,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2531","title":"throw errors when there is no return","body":"### What is the feature you are proposing?\n\n`hono` will throw a runtime error of `Context is not finalized` if there is no `return c.xxx()`, but there is no typescript check, some functions  return `c.body(null, 204)`, which is easy to be forgotten.\r\nSo I think if we can add some type check or eslint rules to prevent `no return expression`","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2252074285},{"id":2252298033,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2532","title":"fix(client): Don't show `$ws` when not used WebSockets","body":"In client, IntelliSense always shows `(route).$ws` property.\r\nI think client doesn't have to show `(route).$ws` property when route doesn't use WebSocket helper.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2252298033},{"id":2253529283,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2533","title":"onError not called for async errors","body":"### What version of Hono are you using?\n\n4.2.3\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\nThe URL /sync_error triggers the onError() function. \r\nThe URL /async_error doesn't. It does result in a HTTP 500 response.\r\n\r\nconst app = new Hono();\r\napp.onError((, c) => c.text('caught error', 200));\r\napp.get('/sync_error', () => {  throw new Error('Error'); });\r\napp.get('/async_error', async () => Promise.reject('Error'));\n\n### What is the expected behavior?\n\nThat onError is also called for async functions.\n\n### What do you see instead?\n\nFor async functions the onError is not called. Instead a HTTP 500 is returned.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2253529283},{"id":2254538783,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2535","title":"Middlewares cause `TypeError: Headers are immutable.` if not added to the api after an endpoint using upgradeWebSocket.","body":"### Discussed in https://github.com/orgs/honojs/discussions/2534\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **jonasfroeller** April 20, 2024</sup>\r\nI protected my route group with the jwt middleware and I am using upgradeWebSocket.\r\n\r\nIf i send a request to the websocket endpoint with a Authorization: Bearer <token> header I get this error and my api crashes:\r\n```\r\nTypeError: Headers are immutable.\r\n    at Headers.delete (ext:deno_fetch/20_headers.js:336:13)\r\n    at Context.set res (https://deno.land/x/hono@v4.2.5/context.ts:189:31)\r\n    at dispatch (https://deno.land/x/hono@v4.2.5/compose.ts:60:20)\r\n    at eventLoopTick (ext:core/01_core.js:168:7)\r\n    at async https://deno.land/x/hono@v4.2.5/hono-base.ts:356:25\r\n    at async ext:deno_http/00_serve.js:455:18\r\nUpgrade response was not returned from callback\r\n```\r\n\r\n</div>\r\n\r\nI found out, that the jwtMiddleware doesn't seem to work with cookies and the cors middleware, the logger and poweredBy as well as .route crashed the websocket endpoint with the `TypeError: Headers are immutable.` error. WHY?\r\n\r\nI put the middlewares and the route group under the websocket endpoint, and it works now: \r\n\r\n```\r\napp.get('/chat/:monitor_id', upgradeWebSocket((c) => { // HAS TO BE ABOVE, causes `TypeError: Headers are immutable.` if not\r\n  const monitor_id = c.req.param('monitor_id')\r\n\r\n  return {\r\n    onMessage(event, ws) {\r\n      ws.send(event.data.toString() + \" in \" + monitor_id)\r\n    },\r\n    onClose: () => {\r\n      console.log('Connection closed')\r\n    },\r\n  }\r\n}))\r\n\r\napp.use('*', logger(), poweredBy(), cors())\r\napp.route(\"\", home)\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2254538783},{"id":2254756293,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2537","title":"Out-of-order HTML streaming","body":"### What is the feature you are proposing?\n\nA hono utility to output out-of-order HTML streams. \r\n\r\ne.g. A header and footer element are streamed to the client. When some data in the backend is available, the main (i.e. middle) content of the page is rendered.\r\n\r\nHono does not yet support streaming HTML in any capacity, but this doesn't seem especially difficult to add. Out of order streaming itself is not traditionally supported by most frameworks, but it could be cool for Hono to be the front-runner in this domain.\r\n\r\n## Issues\r\nDoing this strictly in the backend isn't yet possible without wrapping the entire page in a declarative shadow dom. This has other implications. Other frameworks do this through injecting small JS snippets, which we may want to explore.\r\n\r\nI have a [snippet here](https://gist.github.com/EmNudge/2a5353488a41b8ea543cf5b7e0f1d31b) of one such implementation, but we can arguably get a cleaner API and implementation without resorting to onload events.\r\n\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2254756293},{"id":2256871885,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2538","title":"Modify request","body":"### What is the feature you are proposing?\r\n\r\nHow to modify request? I want to sanitize input without zod or hono validator.\r\n\r\n```ts\r\napp.use(async (c, next) => {\r\n  const json = await c.req.json();\r\n  for (let key in json) {\r\n    if (json.hasOwnProperty(key)) {\r\n      if (typeof json[key] === \"string\") {\r\n        json[key] = sanitize.parse(json[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  // How to modify request?\r\n  c.setJson(json);\r\n\r\n  await next();\r\n});\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2256871885},{"id":2256875383,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2539","title":"open-runtimes support","body":"### What is the feature you are proposing?\n\nI'm wondering if Hono can support [open-runtime](https://github.com/open-runtimes/open-runtimes), which seems to be the model for functions in AppWrite","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2256875383},{"id":2257076977,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2540","title":"default referrer-policy for secure-headers middleware","body":"### What is the feature you are proposing?\n\n# Default Referrer-Policy for secure-headers middleware\r\n\r\nCurrently the default referrer-policy is `no-referrer`.\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/middleware/secure-headers/index.ts#L73\r\n\r\nWhen referrer-policy sets no-referrer, it also hides not only `referer` header but also `origin` header.\r\n\r\nhttps://fetch.spec.whatwg.org/#origin-header\r\n\r\n> - \"no-referrer\"\r\n>    - Set serializedOrigin to `null`.\r\n\r\n`Origin` header is very important for mitigating CSRF attacks.\r\nSo making it `null` can make the application less secure, since the application server can't make sure it really comes from the same origin.\r\n\r\n\r\nWhat makes it secure is not hiding every referrer, but avoiding leaking much information for cross origin servers. There's no reason to avoid sending the referrer value to the same origin server.\r\n\r\n## What should be the default\r\n\r\nThere are many choices on Referrer-Policy but I prefer using `strict-origin-when-cross-origin`.\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#strict-origin-when-cross-origin_2\r\n\r\nIt minimizes information leaks and keeps sending origin for keep `origin` header based csrf guards works.\r\n\r\n`same-origin` seems an alternative for securerer headers, but it hides sending origin to cross origin. In this case, it can cause some problems if your application interacts with cross origin services.\r\n\r\nThat's the reason why `strict-orign-when-cross-orign` is the default policy for modern browsers now.\r\n\r\nbut it's one of the practices to explicitly set `strcit-origin-when-cross-orign` from middleware to make sure it is enabled.\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2257076977},{"id":2258137306,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2542","title":"A way to pass RequestInit on hc instance","body":"### What is the feature you are proposing?\r\n\r\nHi,\r\n\r\nI'm using NextJS and I would like to be able to pass the `RequestInit` param of the fetch instance on individual calls.\r\n\r\n## Why ?\r\nBecause NextJS overrides `fetch`'s `RequestInit` type to also include the `next` key to handle cache at the fetch level:\r\n```ts\r\nfetch('https://...', {\r\n  next: { \r\n    revalidate: 3600,\r\n    tags: ['some', 'tags'],\r\n    cache: '...'\r\n  }\r\n})\r\n```\r\n\r\n> https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#time-based-revalidation\r\n\r\nFor now we only can override the whole fetch function, but I would like to be able to only override it's params with maybe something like this:\r\n```ts\r\n  const res = await hc.my.request.$get(undefined, {\r\n    fetchOptions: {\r\n      next: {\r\n        revalidate: 3600\r\n      }\r\n    }\r\n  })\r\n```\r\nIt makes sense to me that since `hc` is just a fetch wrapper around `fetch` we should be able to pass it the same params.\r\n\r\n### For reference\r\nI'm used to use [`ofetch`](https://github.com/unjs/ofetch) (which is **not** NextJs related) which is a wrapper of fetch with some built in features like retries, errors on non 200/300 statusCode, json parsing, etc...\r\n\r\nAnd as [`ofetch`](https://github.com/unjs/ofetch) just extends `RequestInit` params from `fetch` I can use the `next` key directly in it just like I would with the basic `fetch`:\r\n\r\n```ts\r\n  const res = await ofetch('https://...', {\r\n    method: 'GET',\r\n    next: {\r\n      revalidate: 3600\r\n    }\r\n  }) \r\n```\r\n\r\nMaybe we could extends `RequestInit` and exclude the `method` & `body` keys since they are already defined by the hc method.\r\n\r\nThanks for reading me,\r\nAnd Keep up with the good stuff 🔥 !\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2258137306},{"id":2258228604,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2543","title":"[WIP] Update secure-headers align with best current practice","body":"closes: #2540\r\n\r\nupdate headers in secure-headers middleware align with best practices.\r\n\r\n1. `Referrer-Policy` to `strict-origin-when-cross-origin`\r\nas I filed #2540 , `no-referer` also make `origin` header to `null`.\r\n`origin` header is important for avoid unexpected api call from browser (which includes CSRF).\r\nthere are no reason to hide referrer from same-origin, so change it to reasonable setting.\r\n`strict-origin-when-cross-origin` is currently default for modern browsers, but explicitly set it is fine.\r\n\r\nsee also: https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#referrer-policy\r\n\r\n2. don't use x-xss-protection\r\n \r\nx-xss-protection is not fully standardized, deprecated, not recommended header. xss filter is depreacted on all browser so there are no reason to serve it even if it intends to disable since there is no guarantee `0` behaves as expected. use CSP instead.\r\n\r\nsee also: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\r\n\r\n3. user QPAC registered value. it compress this header field in 1byte on QUIC\r\n\r\nthere are no reason to shorten `Strict-Transport-Security` 's max-age.\r\nso what is the appropriate value ? => anything long value is fine basically.\r\nin this case you can see the QPACK static table.\r\nhttps://www.rfc-editor.org/rfc/rfc9204.html#name-static-table-2\r\nthe basic values are defined in this table, and qpack will compress it in 1byte on quic transport.\r\n\r\n```\r\n56\tstrict-transport-security\tmax-age=31536000\r\n57\tstrict-transport-security\tmax-age=31536000; includesubdomains\r\n58\tstrict-transport-security\tmax-age=31536000; includesubdomains; preload\r\n```\r\n\r\n57 is fine here.\r\n\r\n\r\n4. X-Frame-Options are replaced by frame-ancestors in CSP.\r\n \r\nit's widely supported in browsers and allow more appropriate directive to customize.\r\n\r\n\r\n## And more.\r\n\r\nBasically, \"**kichen-sink**\" headers are kind of bad practice.\r\nFrom point of view of that, the headers below are also ignorable for me.\r\nsince only for old browser, or the Risks are not clear (secure for who ?).\r\n\r\n`X-Download-Options: noopen`: it's for deprecated IE\r\n`X-Permitted-Cross-Domain-Policies: none'`: it's for deprecated Flash / Silverlight\r\n\r\nI don't know it's really required. but don't have strong opinion to delete thought.\r\n\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2258228604},{"id":2258425315,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2544","title":"SyntaxError: Unexpected end of JSON input on return bodyCache[key] = raw[key]();","body":"### What version of Hono are you using?\n\n^4.2.6\n\n### What runtime/platform is your app running on?\n\nBun 1.1.3\n\n### What steps can reproduce the bug?\n\nYou can try modify request like this to get this error.\r\n\r\n```ts\r\nimport { z } from \"zod\";\r\n\r\nconst escapeHtml = (text: string) => {\r\n  const map: Record<string, string> = {\r\n    \"<\": \"&lt;\",\r\n    \">\": \"&gt;\",\r\n    \"&\": \"&amp;\",\r\n    \"'\": \"&#39;\",\r\n    '\"': \"&quot;\",\r\n    \"/\": \"&#47;\",\r\n  };\r\n  return text.replace(/[<>&'\"\\/]/g, (char: string): string => map[char]);\r\n};\r\n\r\nconst safeHtmlString = z.string().transform((str) => escapeHtml(str));\r\n\r\nexport default safeHtmlString;\r\n```\r\n\r\n```ts\r\napp.use(async (c, next) => {\r\n  const json = await c.req.json();\r\n  for (let key in json) {\r\n    if (json.hasOwnProperty(key)) {\r\n      if (typeof json[key] === \"string\") {\r\n        json[key] = sanitize.parse(json[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Modify request like hono/validator\r\n  c.req.bodyCache.json = json;\r\n\r\n  await next();\r\n});\r\n```\n\n### What is the expected behavior?\n\njson request modified and no error while running server with Bun.\n\n### What do you see instead?\n\n79 |           return await new Response(body)[key]();\r\n80 |         })();\r\n81 |       }\r\n82 |     }\r\n83 |\r\n84 |     return bodyCache[key] = raw[key]();\r\n                                 ^\r\nSyntaxError: Unexpected end of JSON input\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2258425315},{"id":2258976677,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2545","title":"fix(cloudflare-workers): do not buffer content","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2258976677},{"id":2259225421,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2547","title":"useState() does not require initialState","body":"### What is the feature you are proposing?\n\nI'm developing an [embla-carousel](https://github.com/davidjerleke/embla-carousel) plugin for hono/jsx.\r\nAnd I found that useState() in hono/jsx requires initialState.\r\n```ts\r\nimport { useState } from 'hono/jsx'\r\n\r\nconst [count, setCount] = useState() // <= error\r\n```\r\nBut that in react doesn't need an argument.\r\n```ts\r\nimport { useState } from 'react'\r\n\r\nconst [count, setCount] = useState() // <= no error\r\n```\r\nI would like to allows `undefined` to improve compatibility with react.\r\nIt's probably just the problem for the type.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2259225421},{"id":2259406062,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2548","title":"fix(types): useState() has no type errors without arguments","body":"fix #2547\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2259406062},{"id":2259450411,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2549","title":"chore(package.json): prettier use cache","body":"It takes more than 5s to format codes with Prettier.\r\nUsing the cache, it will be less than 1s from the second time onwards.\r\n\r\nhttps://prettier.io/docs/en/cli.html#--cache\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2259450411},{"id":2260034871,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2550","title":"Regression caused by multiHeaderValue handling on Lambda","body":"### What version of Hono are you using?\n\n4.2.5\n\n### What runtime/platform is your app running on?\n\nAWS\n\n### What steps can reproduce the bug?\n\nhttps://github.com/honojs/hono/pull/2494 introduced the handling of multiHeaderValues. However, this seemed to have caused header duplication. On AWS, using API Gateway, a header is put both in `headers` and in `multiValueHeaders` when using proxy integration (even single value ones). The handling introduced in #2494 adds both to the headers array, causing duplicates. As a result, header values are concatenated with commas.\r\n\r\nExample output from API Gateway test console:\r\n```\r\nWed Apr 24 00:49:47 UTC 2024 : Endpoint request body after transformations: {\"resource\":\"/{proxy+}\",\"path\":\"/follows\",\"httpMethod\":\"GET\",\"headers\":{\"test\":\"123\"},\"multiValueHeaders\":{\"test\":[\"123\"]},\"queryStringParameters\":null,\"multiValueQueryStringParameters\":null,\"pathParameters\":{\"proxy\":\"follows\"},\"stageVariables\":null,\"requestContext\":\r\n```\r\nAs you can see, the same header is in both collections, even though provided only once.\n\n### What is the expected behavior?\n\nNo header value duplication.\n\n### What do you see instead?\n\nDuplicate header values:\r\n\r\n```js\r\nc.req.Header(\"test\") // value: '123,123'\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2260034871},{"id":2261110002,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2553","title":"feat(jsx/dom): improve compatibility with React","body":"#2508\r\n\r\n### What is this?\r\n\r\nImprove compatibility with React and make the Getting started level code work for the following UI components\r\n\r\n* [react-toastify](https://github.com/fkhadra/react-toastify)\r\n* [spinners-react](https://github.com/adexin/spinners-react)\r\n* [Radix UI Primitives](https://www.radix-ui.com/primitives)\r\n\r\nhttps://github.com/honojs/hono/assets/30598/c86423d3-90d0-4296-8ae4-ff90a5432188\r\n\r\nby https://github.com/usualoma/hono-react-compat-demo\r\n\r\n### Simple usage \r\n\r\ntsconfig.json\r\nhttps://github.com/usualoma/hono-react-compat-demo/blob/main/tsconfig.json#L22-L28\r\n\r\nvite.config.ts\r\nhttps://github.com/usualoma/hono-react-compat-demo/blob/main/vite.config.ts#L5-L8\r\n\r\n#### You can use `/hono/jsx`\r\n\r\nIt is better to use `hono/jsx/dom` in terms of performance, but simply specifying `hono/jsx` works just as well.\r\n\r\ntsconfig.json\r\n```json\r\n   \"paths\": {\r\n      \"react\": [\"./node_modules/hono/dist/jsx\"],\r\n      \"react-dom\": [\"./node_modules/hono/dist/jsx/dom\"],\r\n    },\r\n```\r\n\r\nvite.config.ts\r\n```ts\r\n    alias: {\r\n      'react': 'hono/jsx',\r\n      'react-dom': 'hono/jsx/dom',\r\n    },\r\n```\r\n\r\n### New staffs\r\n\r\nThe following React compatible staffs are now exported from `hono/jsx` and `hono/jsx/dom`\r\n\r\n* `createRef`\r\n* `forwardRef`\r\n* `useImperativeHandle`\r\n* `useSyncExternalStore`\r\n\r\nThese staff are also exported from `hono/jsx/dom`.\r\n\r\n* `flushSync`\r\n* `createPortal`\r\n\r\n### Children\r\n\r\nImplement `Children` API\r\n\r\nhttps://react.dev/reference/react/Children#alternatives\r\n\r\n### CSS custom properties in style attribute\r\n\r\nCSS custom properties can now be exported.\r\n\r\n```tsx\r\n<div style={{\"--my-custom-property\": \"10px\"}}>{children}</div>\r\n```\r\n\r\n### defaultProps\r\n\r\n`defaultProps` is an old API, but there seems to be a library that uses it, so it is supported\r\n\r\nhttps://legacy.reactjs.org/docs/react-component.html#defaultprops\r\n\r\n### Bug fixes\r\n\r\nVarious bugs have been fixed, such as the behaviour when deleting Elements.\r\n\r\n### Compatibility with hono@v4.2.7\r\n\r\nThere are no breaking changes from v4.2.7. However, the internal structure has been significantly refactored and there is a possibility of unintended incompatible behaviour, so please check the behaviour of your application when updating.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2261110002},{"id":2261243951,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2554","title":"newResponse overwrites existing headers (e.g. set-cookie) on the local response (c.res)","body":"### What version of Hono are you using?\n\n4.2.7\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n```\r\n // file: context.test.ts\r\n \r\n  it('Should extend the cookie headers when res already has cookie headers', () => {\r\n    c.res.headers.append('set-cookie', 'foo=bar; Path=/')\r\n    setCookie(c, 'foo2', 'bar2', { path: '/' })\r\n\r\n    const res = c.json({ message: 'Hello' })\r\n    \r\n    const cookies = res.headers.getSetCookie()\r\n\r\n    expect(cookies.includes('foo=bar; Path=/')).toBe(true)\r\n    expect(cookies.includes('foo2=bar2; Path=/')).toBe(true)\r\n  })\r\n  ```\n\n### What is the expected behavior?\n\nIn my opinion, when an existing header with set-cookie exists in the response, this header shouldn't be overwritten, but added too.\r\n\r\nfile: src/context.ts:384\r\n```\r\n    if (this.#res) {\r\n      this.#res.headers.forEach((v, k) => {\r\n        // NOTE: Maybe only append like in `set res = (_res) ...`\r\n        this.#headers?.append(k, v)\r\n      })\r\n      setHeaders(this.#headers, this.#preparedHeaders)\r\n    }\r\n ```\n\n### What do you see instead?\n\nI see the set-cookie header being completely overwritten.\n\n### Additional information\n\nI think a discussion is needed whether we actually want to fix this or not, and what the impact might be on existing projects.\r\n\r\nIn my case, I want to be able to share the `c.res` to a library which might manipulate it's cookies, but these will be overwritten if I later set my own cookies.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2261243951},{"id":2261307424,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2555","title":"fix(context): keep response cookies in newResponse instead of overwriting","body":"Potential fix for https://github.com/honojs/hono/issues/2554\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2261307424},{"id":2262247313,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2557","title":"Middleware order of definition","body":"### What version of Hono are you using?\n\n4.2.7\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nI'm not sure if it's a bug but I don't really understand why it work this way:\r\nMiddleware are used to run code before and after execution as said [here](https://hono.dev/concepts/middleware)\r\nSo for me no matter where I create a global Middleware it should work on all routes if i'm not mistaking.\r\n\r\nWhen I was trying to add my middleware I did something like this and it was not working.\r\nThen I created this sample and when I was defining my middleware before the get route, it was working. \r\nI just wanted to know if it was a normal behavior\r\n```ts\r\nimport { Hono } from 'hono';\r\nimport { rateLimiter } from 'hono-rate-limiter';\r\n\r\nconst app = new Hono()\r\nconst limiter = rateLimiter({\r\n  windowMs: 60 * 1000, // 1 minute\r\n  limit: 5,\r\n  standardHeaders: \"draft-6\", // draft-6: `RateLimit-*` headers;\r\n  keyGenerator: (c) => {\r\n    return \"<unique_key>\";\r\n  }\r\n});\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello Hono!')\r\n})\r\napp.use(limiter)\r\n\r\nexport default {\r\n  port: 3002,\r\n  fetch: app.fetch,\r\n} \r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2262247313},{"id":2262735849,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2559","title":"c.Var types unknown","body":"### What version of Hono are you using?\n\n4.2.7\n\n### What runtime/platform is your app running on?\n\nCF Workers\n\n### What steps can reproduce the bug?\n\n`\r\n  const redirectHtmx: MiddlewareHandler<{\r\n    Variables: {\r\n      redirectHtmx: (url: string) => Response\r\n    }\r\n  }> = async (c, next) => {\r\n    c.set('redirectHtmx', (url: string) => new Response(null, {headers: {'HX-Location': url}}))\r\n    await next()\r\n  }\r\n  app.use('*', redirectHtmx)\r\n\r\nc.var.redirectHtmx('/page') is of type unkown\r\n`\n\n### What is the expected behavior?\n\nhttps://hono.dev/api/context#var\n\n### What do you see instead?\n\n is of type unkown on additional methods\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2262735849},{"id":2264652457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2561","title":"Look into adding type safe routes instead of stringly types params.","body":"### What is the feature you are proposing?\n\nRoutes could look like this: \r\n```ts\r\nconst user = defineRoute(\r\n  {\r\n    userId: param.path.string,\r\n  },\r\n  (p) => `/users/${p.userId}`\r\n);\r\n\r\nconst { routes } = createRouter({\r\n  home: defineRoute(\"/\"),\r\n  post: defineRoute({ postId: param.path.string }, (p) => `/post/${p.postId}`),\r\n  about: defineRoute(\"/about\"),\r\n  user,\r\n  userSettings: user.extend(\"/settings\"),\r\n  userActivity: user.extend(\"/activity\"),\r\n});\r\n```\r\n\r\nThis have two benefits, inferring data from the route means you can straight up pass it to a component directly.\r\nThe other benefit is when you're creating a link and need to pass it params, you get \r\n\r\n```html\r\n<a\r\n  href={routes.user({userId: \"2\").href}link</a>\r\n  ```\r\n  \r\n  And programatically redirecting would also be supported with types\r\n  \r\n  ```ts\r\n  routes.post({ postId: \"abc\" }).push();\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2264652457},{"id":2265695861,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2562","title":"feat: add `forMiddleware` types to Input","body":"I added a `forMiddleware` prop to `Input`.\r\nIn WebSocket helper, helper uses `json` property for telling data to client, but I think it isn't smart because websocket helper actually doesn't use JSON.\r\n\r\nThis PR adds properties for various helpers and middleware to tell data to clients.\r\n\r\nIn creating this PR, I enabled that `ToSchema` receives `Input` instead of `Input['in']`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2265695861},{"id":2266650089,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2563","title":"fix(jsx): preserve the state of element even if it is repeatedly evaluated by children","body":"There was a bug where the hook state was not maintained when passed as `children`.\r\nThis is not a specification change, but a fix to the original expected behaviour, so a patch version release would be acceptable, but it might cause changes in the results in existing applications, so it is better to include it in a minor version update with #2553.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2266650089},{"id":2267062387,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2565","title":"Unable to Serve Static Files (IMPORTANT)","body":"### What version of Hono are you using?\n\n4.2.3\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nStart the application.\r\nAttempt to access static files using the specified route /static/*.\r\n```ts\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Handler, Hono } from \"hono\";\r\n\r\nimport \"reflect-metadata\";\r\nimport { controllers } from \"./api/registerer\";\r\nimport { MetadataKeys } from \"./core/utils/metadatakeys\";\r\nimport { Router } from \"./core/annotations/types/Route\";\r\nimport showroutes from \"./core/utils/showroutes\";\r\nimport { secureHeaders } from \"hono/secure-headers\";\r\nimport { logger } from 'hono/logger'\r\nimport { prettyJSON } from 'hono/pretty-json'\r\nimport { html } from \"hono/html\";\r\nimport { serveStatic } from 'hono/bun'\r\n// ! APPLICATON BOOT CLASS\r\nclass YouTubeApplication {\r\n  private readonly _instance: Hono;\r\n\r\n  get instance(): Hono {\r\n    return this._instance;\r\n  }\r\n\r\n  constructor() {\r\n    this._instance = new Hono();\r\n    this.implementSecurity();\r\n    this.registerRouters();\r\n  }\r\n\r\n  private implementSecurity() {\r\n    this._instance.use(secureHeaders());\r\n  }\r\n\r\n  private registerRouters() {\r\n    this._instance.use(logger())\r\n    this._instance.use(prettyJSON())\r\n    this._instance.use('/static/*', serveStatic({ root: './',onNotFound(path, c) {\r\n      console.log(path)\r\n    }, }))\r\n    \r\n    this._instance.get('/', (c) => c.text('You can access: /static/hello.txt'))\r\n    this._instance.onError((error,c) => {\r\n      return c.html(html`\r\n          <!DOCTYPE html>\r\n          <html lang=\"en\">\r\n            <head>\r\n              <meta charset=\"UTF-8\" />\r\n              <meta\r\n                name=\"viewport\"\r\n                content=\"width=device-width, initial-scale=1.0\"\r\n              />\r\n              <title>Whitelabel Error Page</title>\r\n              <style>\r\n                body {\r\n                  font-family: Arial, sans-serif;\r\n                  background-color: #f4f4f4;\r\n                  color: #333;\r\n                  margin: 0;\r\n                  padding: 0;\r\n                }\r\n                .container {\r\n                  display: flex;\r\n                  justify-content: start;\r\n                  align-items: start;\r\n                  height: 100vh;\r\n                }\r\n                .content {\r\n                  text-align: left;\r\n                  padding:5rem;\r\n                }\r\n                h1 {\r\n                  font-size: 36px;\r\n                  color: #000; \r\n                }\r\n                p {\r\n                  font-size: 18px;\r\n                  margin-top: 10px;\r\n                }\r\n              </style>\r\n            </head>\r\n            <body>\r\n              <div class=\"container\">\r\n                <div class=\"content\">\r\n                  <h1>The Whitelabel Error</h1>\r\n                  <p>There was an error processing your request.</p>\r\n                  <p>[${c.req.raw.method}] ${c.req.raw.url}</p>\r\n                  <p>[MESSAGE] ${(error.message as string)}</p>\r\n                </div>\r\n              </div>\r\n            </body>\r\n          </html>\r\n        `)\r\n    })\r\n    controllers.forEach((controller) => {\r\n      const controllerInstance = new (controller as { new (): any })();\r\n      const base_path = Reflect.getMetadata(MetadataKeys.BASE_PATH, controller);\r\n      const routers: Router[] = Reflect.getMetadata(\r\n        MetadataKeys.ROUTERS,\r\n        controller\r\n      );\r\n      this.handleSubRoutes(base_path, routers, controllerInstance);\r\n    });\r\n  }\r\n\r\n  private handleSubRoutes(\r\n    base_path: string,\r\n    routers: Router[],\r\n    controllerInstance: { [handleName: string]: Handler }\r\n  ): void {\r\n    routers.forEach((route) => {\r\n      const routeHandler = async (c: any, next: any) => {\r\n              \r\n          const metadata = Reflect.getMetadata(\r\n            MetadataKeys.ROUTERS,\r\n            controllerInstance.constructor\r\n          );\r\n          // const routeMetadata = metadata.find(\r\n          //   (data: { handlerName: string | symbol; }) => data.handlerName === route.handlerName\r\n          // );\r\n\r\n          // Call the route handler method\r\n          const boundHandler =\r\n            controllerInstance[String(route.handlerName)].bind(\r\n              controllerInstance\r\n            );\r\n          const result = await boundHandler(c, next);\r\n          return result;\r\n      };\r\n      this._instance.on(\r\n        route.method,\r\n        base_path.concat(route.path),\r\n        routeHandler\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nshowroutes();\r\nconst Singleton = new YouTubeApplication().instance;\r\nexport default Singleton;\r\n\r\n\r\n```\n\n### What is the expected behavior?\n\nStatic files located in the root directory should be served successfully when accessed via the /static/* route.\n\n### What do you see instead?\n\nInstead of successfully serving static files as expected, the application fails to serve the static content. Upon attempting to access static files through the specified route `/static/*`, the files are not served, and the expected content is not displayed.\n\n### Additional information\n\nDespite the inclusion of the `serveStatic` middleware with appropriate configuration, the static files are not served as expected. Additionally, no specific error message is provided, making it challenging to pinpoint the exact cause of the issue. Further investigation into the middleware configuration, potential conflicts, or errors during initialization may be necessary to resolve the problem with serving static files.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2267062387},{"id":2267308878,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2566","title":"When the response is rewritten, the set-cookie header multiplies.","body":"### What version of Hono are you using?\n\n4.2.8\n\n### What runtime/platform is your app running on?\n\nNode\n\n### What steps can reproduce the bug?\n\n```js\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/\", async (c) => {\r\n  c.res = new Response(null, {\r\n    headers: [\r\n      [\"set-cookie\", \"a\"],\r\n      [\"set-cookie\", \"b\"],\r\n      [\"set-cookie\", \"c\"],\r\n    ],\r\n  });\r\n  return c.text(\"Hi\");\r\n});\r\nconsole.log([...(await app.request(\"/\")).headers])\r\n```\n\n### What is the expected behavior?\n\n```js\r\n[\r\n  [ 'content-type', 'text/plain; charset=UTF-8' ],\r\n  [ 'set-cookie', 'a' ],\r\n  [ 'set-cookie', 'b' ],\r\n  [ 'set-cookie', 'c' ]\r\n]\r\n```\n\n### What do you see instead?\n\n```js\r\n[\r\n  [ 'content-type', 'text/plain; charset=UTF-8' ],\r\n  [ 'set-cookie', 'a' ],\r\n  [ 'set-cookie', 'b' ],\r\n  [ 'set-cookie', 'c' ],\r\n  [ 'set-cookie', 'a' ],\r\n  [ 'set-cookie', 'b' ],\r\n  [ 'set-cookie', 'c' ],\r\n  [ 'set-cookie', 'a' ],\r\n  [ 'set-cookie', 'b' ],\r\n  [ 'set-cookie', 'c' ]\r\n]\r\n```\n\n### Additional information\n\nHow to fix it?\r\nhttps://github.com/honojs/hono/blob/347ef12a9b507f82aefef6b375ffb9f352da98e0/src/context.ts#L384-L393\r\n\r\nLet's do it like this.\r\n\r\n```js\r\n this.#res.headers.forEach((v, k) => { \r\n   if (k === 'set-cookie') { \r\n     this.#headers?.append(k, v)\r\n   } else {\r\n     this.#headers?.set(k, v)\r\n   }\r\n }) \r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2267308878},{"id":2267321557,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2567","title":"Better Router grouping.","body":"### What is the feature you are proposing?\n\n```ts\r\nconst book = new Hono()\r\n\r\nbook.get('/', (c) => c.text('List Books')) // GET /book\r\nbook.get('/:id', (c) => {\r\n  // GET /book/:id\r\n  const id = c.req.param('id')\r\n  return c.text('Get Book: ' + id)\r\n})\r\nbook.post('/', (c) => c.text('Create Book')) // POST /book\r\n\r\nconst app = new Hono()\r\napp.route('/book', book)\r\n```\r\nThe current routing grouping for running multiple Hono initialization methods is not very intuitive. I think we can attach a `group` method to the instance and return child instance, like this:\r\n```ts\r\nconst app = new Hono()\r\nconst bookStore = app.group('/book_store')\r\n\r\nbookStore.get('/:id', (c) => {\r\n  const id = c.req.param('id')\r\n  return c.text('Get Book Store: ' + id)\r\n})\r\n\r\nconst book = bookStore.group('/book')\r\n...\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2267321557},{"id":2267461343,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2568","title":"Module '\"hono/jsx\"' declares 'FC' locally, but it is not exported.ts","body":"### What version of Hono are you using?\r\n\r\n2.7.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\ncloudflare workers or just plain node - same\r\n\r\n### What steps can reproduce the bug?\r\n\r\nas per this guide:\r\nhttps://hono.dev/guides/jsx#jsx\r\n\r\ntry to create a JSX module and add the line:\r\n\r\n`import type { FC } from 'hono/jsx'`\r\n\r\nwill give compiler error:\r\n\r\nModule '\"hono/jsx\"' declares 'FC' locally, but it is not exported.ts(2459)\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nshould be able to create JSX modules\r\n\r\n\r\n\r\n### What do you see instead?\r\n\r\n```\r\n> knowbase-api@0.0.1 run\r\n> node --watch -r ts-node/register src/index.ts\r\n\r\n(node:13184) ExperimentalWarning: Watch mode is an experimental feature and might change at any time\r\n(Use `node --trace-warnings ...` to show where the warning was created)\r\n/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:859\r\n    return new TSError(diagnosticText, diagnosticCodes, diagnostics);\r\n           ^\r\nTSError: ⨯ Unable to compile TypeScript:\r\nsrc/api/home.tsx:2:15 - error TS2459: Module '\"hono/jsx\"' declares 'FC' locally, but it is not exported.\r\n\r\n2 import type { FC } from 'hono/jsx'\r\n                ~~\r\n\r\n  node_modules/hono/dist/types/middleware/jsx/index.d.ts:22:14\r\n    22 declare type FC<T = Props> = (props: T) => HtmlEscapedString;\r\n                    ~~\r\n    'FC' is declared here.\r\n\r\n    at createTSError (/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:859:12)\r\n    at reportTSError (/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:863:19)\r\n    at getOutput (/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:1077:36)\r\n    at Object.compile (/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:1433:41)\r\n    at Module.m._compile (/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:1617:30)\r\n    at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)\r\n    at Object.require.extensions.<computed> [as .tsx] (/Users/dc/dev/hacks/kbxt/workers/node_modules/ts-node/src/index.ts:1621:12)\r\n    at Module.load (node:internal/modules/cjs/loader:1207:32)\r\n    at Function.Module._load (node:internal/modules/cjs/loader:1023:12)\r\n    at Module.require (node:internal/modules/cjs/loader:1235:19) {\r\n  diagnosticCodes: [ 2459 ]\r\n}\r\nFailed running 'src/index.ts'\r\n```\r\n\r\n### Additional information\r\n\r\nand in the file in question:\r\n\r\nit is indeed just declared and not exported:\r\n\r\nnode_modules/hono/dist/types/middleware/jsx/index.d.ts\r\n\r\n`declare type FC<T = Props> = (props: T) => HtmlEscapedString;`\r\n\r\n\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2267461343},{"id":2268098214,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2570","title":"fix(context): correct set-cookie header values if c.res is set","body":"Fixes #2566\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2268098214},{"id":2269369439,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2571","title":"DOMException while using hono/jwt module's sign ","body":"### What version of Hono are you using?\n\n^4.2.3\n\n### What runtime/platform is your app running on?\n\nBun 1.0.3\n\n### What steps can reproduce the bug?\n\nI am facing an issue using the hono/jwt module.\r\n\r\nThe below function is throwing an error\r\n\r\nimport { sign } from \"hono/jwt\";\r\nimport { SignatureKey } from \"hono/utils/jwt/jws\";\r\nimport { JWTPayload } from \"hono/utils/jwt/types\";\r\n\r\nexport async function signToken(payload: JWTPayload) {\r\n  const jwtSecret: SignatureKey = Bun.env.JWT_SECRET!;\r\n  const result = await sign(payload, jwtSecret, \"ES256\");\r\n  return result;\r\n}\r\n\r\n\r\nThe exception was \r\n\r\n\r\nDOMException {\r\n  line: 24,\r\n  column: 41,\r\n  sourceURL: \"/Users/hono/dist/utils/jwt/jws.js\",\r\n  stack: \"importKey@[native code]\\n@/Users/hono/dist/utils/jwt/jws.js:24:41\\nimportPrivateKey@/Users/hono/dist/utils/jwt/jws.js:12:33\\n@/Users/hono/dist/utils/jwt/jws.js:2:77\\nsigning@/Users/hono/dist/utils/jwt/jws.js:1:24\\n@/Users/hono/dist/utils/jwt/jwt.js:20:153\\nsign@/Users/hono/dist/utils/jwt/jwt.js:19:19\\n@/Users/src/utils.ts:6:28\\nsignToken@/Users/src/utils.ts:1:33\\n@/Users/src/auth.ts:137:35\",\r\n  code: 0,\r\n  name: \"DataError\",\r\n  message: \"Data provided to an operation does not meet requirements\",\r\n  INDEX_SIZE_ERR: 1,\r\n  DOMSTRING_SIZE_ERR: 2,\r\n  HIERARCHY_REQUEST_ERR: 3,\r\n  WRONG_DOCUMENT_ERR: 4,\r\n  INVALID_CHARACTER_ERR: 5,\r\n  NO_DATA_ALLOWED_ERR: 6,\r\n  NO_MODIFICATION_ALLOWED_ERR: 7,\r\n  NOT_FOUND_ERR: 8,\r\n  NOT_SUPPORTED_ERR: 9,\r\n  INUSE_ATTRIBUTE_ERR: 10,\r\n  INVALID_STATE_ERR: 11,\r\n  SYNTAX_ERR: 12,\r\n  INVALID_MODIFICATION_ERR: 13,\r\n  NAMESPACE_ERR: 14,\r\n  INVALID_ACCESS_ERR: 15,\r\n  VALIDATION_ERR: 16,\r\n  TYPE_MISMATCH_ERR: 17,\r\n  SECURITY_ERR: 18,\r\n  NETWORK_ERR: 19,\r\n  ABORT_ERR: 20,\r\n  URL_MISMATCH_ERR: 21,\r\n  QUOTA_EXCEEDED_ERR: 22,\r\n  TIMEOUT_ERR: 23,\r\n  INVALID_NODE_TYPE_ERR: 24,\r\n  DATA_CLONE_ERR: 25,\r\n  toString: [Function: toString],\r\n}\r\n\r\nI use the private key by storing it in a .env file.\r\n.env file content\r\nJWT_SECRET=-----BEGIN PRIVATE KEY-----\\nMHcCAQEEIH9XDGr9tm4CkJKspu2C3MJnFIrO7APXgEIuEfCJLShYoAoGCCqGSM49\\nAwEHoUQDQgAE2ppj/fspp3OMUS4htI5XrJ3wd4bteEEJYzy9XKnVqlqgxi8JO3/E\\nv5dtPcgiiYBMZIpV7KFPDcqYn+3EdXNs4w==\\n-----END PRIVATE KEY-----\r\n\r\n\n\n### What is the expected behavior?\n\nI expect the function to sign the payload.\n\n### What do you see instead?\n\n\r\nDOMException {\r\n  line: 24,\r\n  column: 41,\r\n  sourceURL: \"/Users/hono/dist/utils/jwt/jws.js\",\r\n  stack: \"importKey@[native code]\\n@/Users/hono/dist/utils/jwt/jws.js:24:41\\nimportPrivateKey@/Users/hono/dist/utils/jwt/jws.js:12:33\\n@/Users/hono/dist/utils/jwt/jws.js:2:77\\nsigning@/Users/hono/dist/utils/jwt/jws.js:1:24\\n@/Users/hono/dist/utils/jwt/jwt.js:20:153\\nsign@/Users/hono/dist/utils/jwt/jwt.js:19:19\\n@/Users/src/utils.ts:6:28\\nsignToken@/Users/src/utils.ts:1:33\\n@/Users/src/auth.ts:137:35\",\r\n  code: 0,\r\n  name: \"DataError\",\r\n  message: \"Data provided to an operation does not meet requirements\",\r\n  INDEX_SIZE_ERR: 1,\r\n  DOMSTRING_SIZE_ERR: 2,\r\n  HIERARCHY_REQUEST_ERR: 3,\r\n  WRONG_DOCUMENT_ERR: 4,\r\n  INVALID_CHARACTER_ERR: 5,\r\n  NO_DATA_ALLOWED_ERR: 6,\r\n  NO_MODIFICATION_ALLOWED_ERR: 7,\r\n  NOT_FOUND_ERR: 8,\r\n  NOT_SUPPORTED_ERR: 9,\r\n  INUSE_ATTRIBUTE_ERR: 10,\r\n  INVALID_STATE_ERR: 11,\r\n  SYNTAX_ERR: 12,\r\n  INVALID_MODIFICATION_ERR: 13,\r\n  NAMESPACE_ERR: 14,\r\n  INVALID_ACCESS_ERR: 15,\r\n  VALIDATION_ERR: 16,\r\n  TYPE_MISMATCH_ERR: 17,\r\n  SECURITY_ERR: 18,\r\n  NETWORK_ERR: 19,\r\n  ABORT_ERR: 20,\r\n  URL_MISMATCH_ERR: 21,\r\n  QUOTA_EXCEEDED_ERR: 22,\r\n  TIMEOUT_ERR: 23,\r\n  INVALID_NODE_TYPE_ERR: 24,\r\n  DATA_CLONE_ERR: 25,\r\n  toString: [Function: toString],\r\n}\n\n### Additional information\n\n\r\nI am quite confused why this is happening, I tried asking chatgpt, claude, none seem to work so far. All of them saying to check the format of the private key. But everything looks fine. Please help with this. \r\n\r\nThanks in advance.\r\n","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2269369439},{"id":2270262766,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2573","title":"feat(factory): add `createApp()`","body":"This PR introduces `createApp()` in `hono/factory` as an experimental feature. If you use this method with `createFactory()`, you can avoid redundancy in the definition of `Env` types.\r\n\r\nBefore:\r\n\r\n```ts\r\nconst app = new Hono<Env>()\r\n\r\nconst mw = createMiddleware<Env>(async(c, next) => {\r\n  await next()\r\n})\r\n```\r\n\r\nWith this PR:\r\n\r\n```ts\r\nconst factory = createFactory<Env>()\r\n\r\nconst app = factory.createApp()\r\n\r\nconst mw = factory.createMiddleware(async (c, next) => {\r\n  await next()\r\n})\r\n```\r\n\r\nUsing the \"Simple Factory\" pattern with the Factory helper, there is no need to write type definitions in `global.d.ts` with possible type conflicts. Also, you don't have to have `Env` definitions in multiple places.\r\n\r\n```ts\r\n// factory-with-db.ts\r\ntype Env = {\r\n  Bindings: {\r\n    MY_DB: D1Database\r\n  }\r\n  Variables: {\r\n    db: DrizzleD1Database\r\n  }\r\n}\r\n\r\nexport default createFactory<Env>({\r\n  initApp: (app) => {\r\n    app.use(async (c, next) => {\r\n      const db = drizzle(c.env.MY_DB)\r\n      c.set('db', db)\r\n      await next()\r\n    })\r\n  },\r\n})\r\n```\r\n\r\n```ts\r\n// crud.ts\r\nimport factoryWithDB from './factory-with-db'\r\n\r\nconst app = factoryWithDB.createApp()\r\n\r\napp.post('/posts', (c) => {\r\n  c.var.db.insert\r\n})\r\n```\r\n\r\nIn the future, I recommend the use of this \"Simple Factory\" pattern for larger applications, such as those using HonoX.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2270262766},{"id":2270729933,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2574","title":"One optional path parameter marks all param as optional","body":"### What version of Hono are you using?\n\n4.2.9\n\n### What runtime/platform is your app running on?\n\nNode v20\n\n### What steps can reproduce the bug?\n\nDeclare a route like `/api/:a/:b?`\n\n### What is the expected behavior?\n\n`c.req.param('a')` should be `string`, only `c.req.param('b')` should be nullable\n\n### What do you see instead?\n\n`c.req.param('a')` (and 'b') is be typed as `string | undefined`\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2270729933},{"id":2270739296,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2575","title":"RPC does not work with optional parameter","body":"### What version of Hono are you using?\n\n4.2.9\n\n### What runtime/platform is your app running on?\n\nNode v20\n\n### What steps can reproduce the bug?\n\nDeclare multiple routes, include one route using optional parameter like `/api/:a/:b?`\n\n### What is the expected behavior?\n\nRPC mode should work normally\n\n### What do you see instead?\n\nRPC got fallback to match any string, with no known HTTP methods \r\n![image](https://github.com/honojs/hono/assets/23612546/6dc54e67-d522-4f4a-8b54-ad033ba0b712)\r\n\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2270739296},{"id":2271121454,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2576","title":"fix(request): infer params in a path includes one or more optional parameter","body":"Fixes #2574 #2575\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2271121454},{"id":2271233749,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2577","title":"feat(secure-headers): enable to set nonce in CSP","body":"https://github.com/honojs/honox/issues/157\r\n\r\n### Usage\r\n\r\n_middleware.ts\r\n```ts\r\nimport { createRoute } from \"honox/factory\";\r\nimport { secureHeaders, NONCE } from \"hono/secure-headers\";\r\n\r\nexport default createRoute(\r\n  secureHeaders({\r\n    contentSecurityPolicy: {\r\n      scriptSrc: [NONCE, 'https://allowed1.example.com', 'https://allowed2.example.com'],\r\n    },\r\n  })\r\n);\r\n```\r\n\r\n_renderer\r\n```ts\r\nimport { Style } from \"hono/css\";\r\nimport { jsxRenderer } from \"hono/jsx-renderer\";\r\nimport { Script } from \"honox/server\";\r\n\r\nexport default jsxRenderer(\r\n  ({ children, title }, c) => {\r\n    return (\r\n      <html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"utf-8\" />\r\n          <meta\r\n            name=\"viewport\"\r\n            content=\"width=device-width, initial-scale=1.0\"\r\n          />\r\n          <title>{title}</title>\r\n          <Style />\r\n        </head>\r\n        <body>\r\n          {children}\r\n          <Script src=\"/app/client.ts\" async nonce={c.get('secureHeadersNonce')} />\r\n        </body>\r\n      </html>\r\n    );\r\n  },\r\n  { stream: true }\r\n);\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2271233749},{"id":2272359245,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2578","title":"`c.text()` is not typed for RPC","body":"### What version of Hono are you using?\n\n4.2.9\n\n### What runtime/platform is your app running on?\n\nNode v20\n\n### What steps can reproduce the bug?\n\nDeclare a route with a return of `c.text('anything')`\n\n### What is the expected behavior?\n\nThe `Response` type should intersect `TypedResponse<text>`\n\n### What do you see instead?\n\nThe `Response` is not typed\n\n### Additional information\n\nImage:\r\n![image](https://github.com/honojs/hono/assets/23612546/7b43eff8-e813-4e3d-bdd3-6bb9925c17f0)\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2272359245},{"id":2272387468,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2579","title":"feat(context): infer `TypedResponse` for `TextRespond`","body":"### Author should do the followings, if applicable\r\n\r\n- [x] ~~Add tests~~ Adjusted tests\r\n- [x] Run tests - Ran all tests except for deno and wrangler because I don't have them\r\n- [x] `yarn denoify` to generate files for Deno","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2272387468},{"id":2272956085,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2580","title":"Deprecate `serveStatic` for Cloudflare Workers","body":"Cloudflare Workers Site, which is used in `serveStatic` in `hono/cloudflare-workers`, is now deprecated.\r\n\r\nhttps://developers.cloudflare.com/workers/configuration/sites/\r\n\r\nIf you want to create an application that serves asset files, you must use Cloudflare **Pages**. So, following this, we have to make `serveStatic` in `hono/cloudflare-workers` deprecated.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2272956085},{"id":2273197410,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2581","title":"feat(types): improve response types flow","body":"Continuing from #2579\r\n\r\n**UPDATE:** All commits follows conventional syntax, recommended to merge without squashing.\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2273197410},{"id":2273420722,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2582","title":"chore(pr_template): Use Bun instead of yarn","body":"I feel strange when I create PR.\r\n\r\nThis project recommends Bun by default, so I think PR Template should use `bun denoify` instead of `yarn denoify`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `yarn denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2273420722},{"id":2273612882,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2583","title":"feat(cloudflare-workers): deprecate `serveStatic`","body":"### Author should do the followings, if applicable\r\n\r\nCloses #2580\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2273612882},{"id":2273733449,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2585","title":"fix(aws-lambda): avoid duplicating already set headers","body":"fix #2550\r\n\r\n### Description\r\n\r\nThis pull request avoids duplicating already set headers; this was happening because API Gateway V1 event has \"multiValueHeaders\" for headers with multiple values.\r\n\r\nCurrently, Hono AWS Lambda adapter appends any value from these \"multiValueHeaders\" in the current Header instance. `This leads to duplicated values when a key is already defined`.\r\n\r\n### How\r\n- Added a condition to only append a value from \"multiValueHeaders\" when the current key is not already defined or the current value is not already included;\r\n- added unit tests for the createRequest method from EventProcessor to make sure that the Request is adapted correctly, headers are not duplicated and to avoid future regressions;\r\n> Tests are following the arrange / act / assert pattern.\r\n- `getProcessor` function was exported for unit testing purposes;\r\n- Added a comment because the conditions became a little complex.\r\n\r\n### References\r\nhttps://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html\r\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n\r\n### Extra\r\nThanks to @jean-leonco that found the bug in @BemteviSeguros API, @kbrandwijk that opened the issue and @ShaneYu that suggested the idea of the fix.\r\n\r\nPlease let me know if this aligns with the library goals and if the code follows the repository recommendations.\r\n\r\nThanks in advance.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2273733449},{"id":2273995023,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2586","title":"Allow stream helper arguments callback and onError to be synchronous functions","body":"### What is the feature you are proposing?\r\n\r\nCurrent:\r\n\r\n![Screenshot 2024-05-02 at 3 42 21](https://github.com/honojs/hono/assets/80559385/ae079538-8f5e-486c-ae3c-b49bd9e51175)\r\n![Screenshot 2024-05-02 at 3 42 29](https://github.com/honojs/hono/assets/80559385/cbfffa04-78d6-4504-9df6-d4912f9a5485)\r\n\r\nHow to resolve:\r\n\r\nSimply change `Promise<void>` to `Promise<void> | void`\r\n\r\nIf it is good, I'll start developing it.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2273995023},{"id":2274623121,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2588","title":"feat: improve `ToSchema` & `WebSocket Helper` types","body":"A reimplement of #2562, using refactored types flow of #2581\r\n\r\n**UPDATE:** All commits follows conventional syntax, recommended to merge without squashing.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] ~~Add tests~~ Adjusted tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2274623121},{"id":2274887096,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2589","title":"Support for JWT with JWKS","body":"### What is the feature you are proposing?\n\ncurrently the `jwt` middleware requires a static secret value, however in my use case (see below) it's not a static secret instead it is retrieved from an JWKS. Therefore it would be nice if the `jwt` middleware also support an `async function(payload: any) : string` as secret parameter.\r\n\r\nUse Case:\r\n\r\nI'm working on a server endpoint that is called by GitHub actions to authenticate I'm using the Github Actions OIDC tokens.\r\n\r\nCurrently I'm using my own middleware by using `fast-jwt` with `get-jwks` like this\r\n```typescript\r\nimport {createVerifier, DecodedJwt, KeyFetcher} from 'fast-jwt'\r\nimport buildJwks from 'get-jwks'\r\n\r\nconst jwks = buildJwks({providerDiscovery: true})\r\nconst keyFetcher: KeyFetcher = async (jwt: DecodedJwt) => jwks.getPublicKey({\r\n  kid: jwt.header.kid,\r\n  alg: jwt.header.alg,\r\n  domain: jwt.payload.iss,\r\n})\r\n\r\nconst jwtVerifier = createVerifier({\r\n  key: keyFetcher,\r\n})\r\n\r\napp.use(async (c, next) => {\r\n  // ... get jwtTokenString value\r\n  await jwtVerifier(jwtTokenString)\r\n  // ... handle verification errors\r\n  await next()\r\n})\r\n\r\n\r\n```\r\n\r\nhowever it would be nice if I can switch to an official middleware.\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2274887096},{"id":2276006093,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2591","title":"docs(readme): remove Benchmarks section","body":"There is no need to write the benchmarks on README now.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2276006093},{"id":2276234996,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2592","title":"feat(hc): add `init` option","body":"Initally I used a function to merge the headers, but then realized it could be great if it could be used as highest priority control, added comment to tell user to be careful instead.\r\n\r\nResolves #2485\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2276234996},{"id":2276308990,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2593","title":"Add support for AbortController signal in hono/client","body":"### What is the feature you are proposing?\n\nI would like to be able to abort ongoing requests made through the hono client by using the AbortController. Currently, there is no way to pass the AbortController.signal to the requests made by the client.\r\nSupporting the AbortController would allow us to cancel ongoing requests when needed, providing more control over the request lifecycle.\r\nFor example, I should be able to do something like this:\r\n\r\n```ts\r\nconst abortController = new AbortController();\r\nconst response = await hClient.jwt.someEndpoint.$post({\r\n  json: { /* request body */ },\r\n  signal: abortController.signal, // Pass the signal here\r\n});\r\n\r\n// Later, if needed:\r\nabortController.abort(); // This would cancel the ongoing request\r\n```\r\n\r\nBy adding support for the AbortController.signal, we can improve the flexibility and control over requests made through the hono client.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2276308990},{"id":2276319404,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2594","title":"Add support for getting current request progress in hono/client","body":"### What is the feature you are proposing?\n\nI would love to have a way to get the current progress of an ongoing request made through the hono client. This would allow monitoring and displaying the progress of requests, especially for large data transfers or long-running operations.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2276319404},{"id":2276715957,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2595","title":"feat: Introduce ConnInfo helper/adapter","body":"I created ConnInfo helper/adapter for Bun, Deno and CF Workers.\r\nYou can get client IP Address with Hono easier if we marge PR.\r\n\r\nThis provides runtime-less ConnInfo object.\r\n\r\nFor example, you can get IP Address on Bun:\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { getConnInfo } from 'hono/bun'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', c => c.text(`Your ip address is ${getConnInfo(c).remote.address}!!`))\r\n\r\nBun.serve(app)\r\n```\r\n\r\nIf you want to use Workers, replace import:\r\n```ts\r\nimport { getConnInfo } from 'hono/cloudflare-workers'\r\n```\r\n\r\nIn Deno:\r\n```ts\r\nimport { getConnInfo } from 'https://deno.land/x/hono/helper.ts'\r\n```\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2276715957},{"id":2277271631,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2600","title":"Next","body":"v4.3","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2277271631},{"id":2277321713,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2601","title":"Parameters being matched against before other paths if they weren't declared last","body":"### What is the feature you are proposing?\n\nI had a path/:id and a path/another. Declared in that order, and then spend an hour trying to debug it. Can't possibly that big of a performance hit to reorder paths for matching with param paths being last.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2277321713},{"id":2277580690,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2602","title":"c.render with jsxRenderer has type errors for 2 arguments","body":"### What version of Hono are you using?\r\n\r\n4.2.7\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nWorkers\r\n\r\n### What steps can reproduce the bug?\r\nexport const Layout: FC = ({ children, c, title }) => {\r\napp.get(\"*\", jsxRenderer(Layout));\r\n  return c.render(index(c), { c, title: \"Home\", search: true });\r\nExpected 1 arguments, but got 2\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2277580690},{"id":2278775504,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2603","title":"Make a complete example of onError handling in the docs","body":"### What is the feature you are proposing?\n\nThe docs for the `app.onError` handling have an incomplete example. https://hono.dev/api/exception#handling-httpexception\r\n\r\n```typescript\r\napp.onError((err, c) => {\r\n  if (err instanceof HTTPException) {\r\n    // Get the custom response\r\n    return err.getResponse()\r\n  }\r\n  //...\r\n})\r\n```\r\n\r\nIt would be helpful if the example was expanded where the `// ...` is to show how to pass through the err if it is not an `HTTPException`.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2278775504},{"id":2278828831,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2605","title":"fix(types): `ToSchema` compatibility","body":"Resolves honojs/middleware#496\r\n\r\nThis PR make `ToSchema` compatible with older versions.\r\n\r\nSome informations about the issue:\r\n> Okay, so on `4.3.0` we have two types breaking on `ToSchema`:\r\n> \r\n> * Update from `O` is output to `extends TypedResponse` - 8129a3a\r\n> * Update from `I` accepting `Input['in']` to `Input` - ea4e998\r\n> \r\n> Previously I thought `ToSchema` is only for internal use so I didn't think much about it, but if it is exposed for other libraries I think we should revert `ToSchema` and creates a new `ToSchemaV2` for future uses to revert the breaking changes?\r\n\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests - Need help adding tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2278828831},{"id":2279005316,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2607","title":"Wrong type with InferResponseType<> and status code when using .route() method","body":"### What version of Hono are you using?\n\n4.3.1\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nThis code reproduce the bug. You need to create a now router and import it to the current `app` router exposed to the client\r\n\r\n```ts\r\nimport { Hono } from \"hono\"\r\nimport { hc } from \"hono/client\"\r\n\r\nconst myRouter = new Hono()\r\n  .get(\"/\", (c) => {\r\n    const randomBoolean = Math.random() < 0.5\r\n    if (!randomBoolean) {\r\n      return c.json({ error: \"not found\" }, 404)\r\n    }\r\n\r\n    return c.json({ success: true }, 200)\r\n  })\r\n\r\nconst app = new Hono()\r\n  .basePath(\"/api\")\r\n  .route(\"/hello\", myRouter)\r\n\r\nconst client = hc<typeof app>(\"/\")\r\n\r\ntype ResponseType200 = InferResponseType<typeof client.api.hello.$get, 200>\r\ntype ResponseType404 = InferResponseType<typeof client.api.hello.$get, 404>\r\n```\n\n### What is the expected behavior?\n\nIn the previous code, `ResponseType200` should be of type `{ success: boolean }` and `ResponseType404` should be of type `{ error: string }`\n\n### What do you see instead?\n\n`ResponseType200` and `ResponseType404` are both typed as \r\n```ts\r\n{ success: boolean } | { error: string }\r\n```\n\n### Additional information\n\nIn the [4.3.0 releaseStatus code type]( https://github.com/honojs/hono/releases/tag/v4.3.0) the example show a working example that doesn't use `.route()` method. I think the issue came from the type merging with this method.\r\n\r\n## The error\r\n![CleanShot 2024-05-04 at 15 38 34@2x](https://github.com/honojs/hono/assets/28579123/e1eeeec2-57ee-424f-8d5c-e5246db98ce9)\r\n\r\n## ✅ Types in the custom router that I want\r\n![CleanShot 2024-05-04 at 15 39 47@2x](https://github.com/honojs/hono/assets/28579123/6232ff17-f634-4839-8c7c-a8c066da6e29)\r\n\r\n## ❌ Types of the main router with my custom router imported with the `.route()`\r\n![CleanShot 2024-05-04 at 15 40 16@2x](https://github.com/honojs/hono/assets/28579123/940752f9-2c28-4e2a-8ffe-3579bec6ab0a)\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279005316},{"id":2279107681,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2610","title":"fix(types): correct inferring when Method has Endponts as Union","body":"Fixes #2607\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279107681},{"id":2279127211,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2611","title":"fix: Status code of response type with route","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n\r\nClose https://github.com/honojs/hono/issues/2607","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279127211},{"id":2279159603,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2612","title":"inconsistent route response","body":"### What version of Hono are you using?\n\n4.3.1\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\n1. Basic template \r\n2. add this code snippet \r\n```\r\napp.get('/api/v1/users', (c) => {\r\n  return c.json({ message: 'Hello World' });\r\n});\r\n```\n\n### What is the expected behavior?\n\nreturn `{\"message\":\"Hello World\"}` in both \"/api/v1/users\" and \"/api/v1/users/\" routes\n\n### What do you see instead?\n\n404 on \"/api/v1/users/\" route\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279159603},{"id":2279257014,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2613","title":"fix(types): relax the type of `c.req.param()`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279257014},{"id":2279306063,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2614","title":"Importing the StatusCode type from http-status in a project gives a typescript error","body":"### What version of Hono are you using?\n\n4.3.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nAt least when using the Jetbrains IntelliJ / webstorm ide, importing the http StatusCode works, but gives a typescript error, because it isn't an exported type from src/index.ts, and instead has to be imported like this:\r\n`import type {StatusCode} from \"hono/dist/types/utils/http-status\";`\n\n### What is the expected behavior?\n\nlet status code be directly imported from Hono like\r\n```\r\nimport type {StatusCode} from \"Hono\"\r\n// or\r\nimport type {StatusCode} from \"Hono.Utils\"\r\n```\n\n### What do you see instead?\n\na typescript error when using the dist workaround\n\n### Additional information\n\nImporting this type is rather important when implementing custom error handling, especially since you can't directly cast `number` to `StatusCode`","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279306063},{"id":2279345001,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2615","title":"feat(middleware): Introduce Timeout Middleware","body":"I used to use it for personal use, but I see here that there seems to be a demand for it, so I share it with you.\r\nhttps://github.com/orgs/honojs/discussions/1765\r\n\r\nMany cloud environments implement infrastructure-level timeouts, but it is useful if you want to set per-route timeouts on the application side.\r\n\r\n---\r\n\r\n## Timeout Middleware\r\nThis middleware enables you to easily manage request timeouts in your application. It allows you to set a maximum duration for requests and define custom error responses if the specified timeout is exceeded.\r\n\r\n## Import\r\n\r\n```typescript\r\nimport { Hono } from 'hono';\r\nimport { timeout } from 'hono/timeout';\r\n```\r\n\r\n## Usage\r\n\r\nHere's how to use the Timeout Middleware with default and custom settings:\r\n\r\nDefault Settings:\r\n\r\n```typescript\r\nconst app = new Hono();\r\n\r\n// Applying a 5-second timeout\r\napp.use('/api', timeout(5000));\r\n\r\n// Handling a route\r\napp.get('/api/data', async (c) => {\r\n  // Your route handler logic\r\n  return c.json({ data: 'Your data here' });\r\n});\r\n```\r\n\r\n## Custom Timeout Settings:\r\n\r\n```typescript\r\napp.use('/api/long-process', timeout('1m', {\r\n  message: 'Request timeout. Please try again later.',\r\n  code: 408,\r\n}));\r\n\r\napp.get('/api/long-process', async (c) => {\r\n  // Simulate a long process\r\n  await new Promise(resolve => setTimeout(resolve, 61000));\r\n  return c.json({ data: 'This usually takes longer' });\r\n});\r\n```\r\n\r\n## Understanding Timeouts\r\nThe duration for the timeout can be specified in milliseconds or as a string in a human-readable format, such as '1m' for one minute or '10s' for ten seconds. The parseDuration function translates these string values into milliseconds.\r\n\r\n\r\n## Middleware Conflicts\r\nBe cautious about middleware order, especially when using error-handling or other timing-related middleware, as it might affect the behavior of this timeout middleware.\r\n\r\n---\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279345001},{"id":2279471770,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2616","title":"Basic Auth not asking for login details, it instantly returns 401","body":"### What version of Hono are you using?\n\n4.3.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n```ts\r\napp.get(\"/auth\", basicAuth({ username: \"user\", password: \"pass\" }), (c) => {\r\n  return c.json({\r\n    message: \"success\",\r\n    status: 200,\r\n  });\r\n});\r\n```\r\n```ts\r\napp.onError((err, c) => {\r\n  if (err instanceof HTTPException) {\r\n    console.log(\"http exception\");\r\n    const responseStatus = err.getResponse();\r\n    return c.json(\r\n      {\r\n        message: responseStatus.statusText,\r\n        status: err.status,\r\n      },\r\n      err.status,\r\n    );\r\n  } else {\r\n    console.error(\"An error has been thrown: \" + err);\r\n    return c.json(\r\n      {\r\n        message: \"Internal Server Error\",\r\n        status: 500,\r\n      },\r\n      500,\r\n    );\r\n  }\r\n});\r\n```\r\n\r\nThe app logs 'http exception', and returns\r\n\r\n```json\r\n{\"message\":\"Unauthorized\",\"status\":401}\r\n```\r\n\r\nIn previous versions of Hono, it asked the user for basic auth, now instead, it instantly returns Unauthorized without asking for basic auth.\n\n### What is the expected behavior?\n\nIt should ask for basic auth.\n\n### What do you see instead?\n\nNo basic auth being asked, and unauthorized being returned instantly.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279471770},{"id":2279596558,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2618","title":"feat(utils): add named http codes","body":"### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279596558},{"id":2279884849,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2619","title":"feat: custom response in hono/streaming","body":"related: https://github.com/orgs/honojs/discussions/2617\r\n\r\n## proposed signature\r\n\r\nadded new argument\r\n\r\n```typescript\r\n// typeof stream()\r\n(\r\n  c: Context,\r\n  cb: (stream: StreamingApi) => Promise<void>,\r\n  onError?: (e: Error, stream: StreamingApi) => Promise<void>,\r\n  responseFactory?: (c: Context, stream: StreamingApi) => Response // new!\r\n): Response\r\n```\r\n\r\nsame fix can be applied to `streamText` and `streamSSE`.\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2279884849},{"id":2280096577,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2620","title":"Wrong api response after path definition","body":"### What version of Hono are you using?\n\n4.2.9\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\napp.get('/', async (c) => {\r\n\treturn c.text(\"route / GET\");\r\n});\r\n\r\napp.get('/:path', async (c) => {\r\n\treturn c.text(\"route / with path GET\");\r\n});\r\n\r\napp.post('/', async (c) => {\r\n\treturn c.text(\"route / POST\");\r\n});\n\n### What is the expected behavior?\n\nWhen POST to / it should respond: route / POST\n\n### What do you see instead?\n\nroute / GET\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2280096577},{"id":2280155324,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2621","title":"Declaration of `Factory.createHandlers` is not appropriate","body":"### What version of Hono are you using?\r\n\r\n4.3.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. clone this repo. https://github.com/sushi-chaaaan/hono-factory-bind\r\n2. run `pnpm install`.\r\n3. open `src/factory.ts`.\r\n\r\n### What is the expected behavior?\r\n\r\nNo ESLint errors from typescript-eslint\r\n\r\n### What do you see instead?\r\n\r\ntypescript-eslint will cause `unbound-method` error.\r\n\r\n### Additional information\r\n\r\nThis is a error because `createHandlers` is not declared in the Arrow function and `this` is not explicitly bound.\r\nAlso, the actual function implementation does not access `this`, so no runtime error occurs.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2280155324},{"id":2280317188,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2622","title":"chore(eslint): enable `@typescript-eslint/unbound-method`","body":"### Author should do the followings, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2280317188},{"id":2280390837,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2623","title":"fix(factory): support `createFactory()` destruction","body":"Fixes #2621\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2280390837},{"id":2280645639,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2624","title":"If path exists but method is not allowed hono should response with a 405 (method not allowed) status","body":"### What is the feature you are proposing?\r\n\r\nIf path exists but method is not allowed hono should response with a 405 (method not allowed) status, instead of a 404","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2280645639},{"id":2281176514,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2625","title":"[Bug]: form validator does not return all data","body":"### What version of Hono are you using?\r\n\r\n4.3.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode 20.10.0 / Windows 10 Pro\r\n\r\n### What steps can reproduce the bug?\r\n\r\nThe form validator in hono does not return all data when using with zod-validator.\r\n\r\nWhen you use zod-validator to validate multiple uploaded file of request form data then it only returns last file data. It should  return all the files with the same key as an array,\r\n\r\n![validate-body-data](https://github.com/honojs/hono/assets/62164346/3fcdb6a5-6747-4f09-a6c6-9074faa48440)\r\n\r\n1. Start a new Hono project using `create-hono` with `pnpm` and select NodeJS template. `pnpm create hono my-app`\r\n1. Install `@hono/zod-validator` and `zod` to validate incoming request body and params. `pnpm add @hono/zod-validator zod`.\r\n1. Now, in `index.ts` create a `POST /upload` route for file upload without using zod-validator.\r\n1. Create another `POST /validate-upload` route for file upload to accepts data as `FormData` in which use zod-validator to validate incoming data.\r\n\r\nGithub Repro Link: https://github.com/ParasSolanki/hono-multi-file-upload-validation-bug.\r\n\r\nIf i use `c.req.parseBody()` as mentioned [here](https://hono.dev/snippets/file-upload#snippets) then i do get all the multiple uploaded files in an array.\r\n\r\n![parse-body-data](https://github.com/honojs/hono/assets/62164346/5d6d921e-160b-4655-a920-d1e4b962c66a)\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nIf key is ending with \"[]\" then it should return data in an array form after the validation. Same logic as we have for the `parseBody()` [here](https://github.com/honojs/hono/blob/main/src/utils/body.ts#L70).\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nIn the [validator.ts](https://github.com/honojs/hono/blob/main/src/validator/validator.ts#L96) we should handle logic for key ending with \"[]\". Instead of returning last value it should return it as an array.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2281176514},{"id":2281442773,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2626","title":"`headers` and `multiValueHeaders` are not set properly when using `hono/aws-lambda` with ALB","body":"### What version of Hono are you using?\r\n\r\n^4.3.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode, AWS Lambda\r\n\r\n### What steps can reproduce the bug?\r\n\r\nWhen using `hono/aws-lambda`adapter with a Lambda that has an ALB in front of it. It shouldn't use the `multiValueHeaders` as default, as this feature is not default when using ALB with Lambda target. Moreover, the `set-cookie` behavior in the adapter might result in bugs in some cases.\r\n\r\nExample : \r\n\r\n```typescript\r\nimport { handle } from \"hono/aws-lambda\";\r\nimport { getCookie, setCookie } from \"hono/cookie\";\r\nimport { Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\napp.get(\"/set-headers\", (ctx) => {\r\n  setCookie(ctx, \"foo\", \"bar\", {\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    domain: `.${process.env.COOKIE_DOMAINE}`,\r\n    httpOnly: true,\r\n    maxAge: 60 * 10,\r\n    sameSite: \"Lax\",\r\n  });\r\n  setCookie(ctx, \"fizz\", \"buzz\", {\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    domain: `.${process.env.COOKIE_DOMAINE}`,\r\n    httpOnly: true,\r\n    maxAge: 60 * 10,\r\n    sameSite: \"Lax\",\r\n  });\r\n  return ctx.redirect(\"/get-headers\");\r\n});\r\n\r\napp.get(\"/get-headers\", (ctx) => {\r\n  const fooCookie = getCookie(ctx, \"foo\");\r\n  const fizzCookie = getCookie(ctx, \"fizz\");\r\n  return ctx.json({\r\n    fooCookie,\r\n    fizzCookie,\r\n  });\r\n});\r\n\r\nexport const handler = handle(app);\r\n```\r\n\r\nAnd CDK minimal config :\r\n```typescript\r\nimport * as cdk from '@aws-cdk/core';\r\nimport * as ec2 from '@aws-cdk/aws-ec2';\r\nimport * as lambda from '@aws-cdk/aws-lambda';\r\nimport * as lambdaNodejs from '@aws-cdk/aws-lambda-nodejs';\r\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\r\n\r\nexport class CdkAlbLambdaStack extends cdk.Stack {\r\n  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\r\n    super(scope, id, props);\r\n\r\n    // Create VPC\r\n    const vpc = new ec2.Vpc(this, 'MyVpc', {\r\n      maxAzs: 2\r\n    });\r\n\r\n    // Create Lambda function\r\n    const lambdaFunction = new lambdaNodejs.NodejsFunction(this, 'MyLambda', {\r\n      entry: 'lambda/index.ts', // Entry file for your Lambda function\r\n      handler: 'handler', // Exported function name in your entry file\r\n    });\r\n   // Target Groupe\r\n\r\n  const targetGroup = new elbv2.ApplicationTargetGroup(\r\n        this,\r\n        `${name}-target-group`,\r\n        {\r\n          vpc: this.alb.vpc,\r\n          targetType: elbv2.TargetType.LAMBDA,\r\n  \r\n          targets: [new elbv2Targets.LambdaTarget(lambdaFunction)],\r\n        }\r\n      );\r\n\r\n\r\n    // Create ALB\r\n    const alb = new elbv2.ApplicationLoadBalancer(this, 'MyAlb', {\r\n      vpc,\r\n      internetFacing: true\r\n    });\r\n    const albCert = new acm.Certificate(this, \"alb-cert\", {\r\n      domainName: `${hostedZoneName}`,\r\n      validation: acm.CertificateValidation.fromDns(hostedZone),\r\n    });\r\n\r\n    const listener = alb.addListener(\"alb-http-listener\", {\r\n      port: 80,\r\n      open: true,\r\n    });\r\n\r\n    // Create ALB Listener\r\n\r\n    // Add Lambda as a target to ALB Listener\r\n    listener.addTargets('LambdaTarget', {\r\n      port: 80,\r\n      targets: [targetGroup],\r\n    });\r\n  }\r\n}\r\n\r\n```\r\n\r\nAs I mentioned before the `multiValueHeaders` is not enabled by default, to enable it we must add the following \r\n```\r\n...\r\ntargetGroup.setAttribute(\"lambda.multi_value_headers.enabled\", \"true\");\r\n...\r\n```\r\n\r\nBut when this behavior is enabled, the ALB will ignore the `headers` value and only take `multiHeadersValue` except in Hono adapter not all the headers are propagated from `headers` to `multiValueHeaders`. Disabling the `multiValueHeaders` will result in `set-cookie` being passed as an array so the ALB will only take the last value\r\n\r\nHere is the result payload of the example with `multiValueHeaders` enabled :\r\n\r\n```json\r\n{\r\n    \"result\": {\r\n        \"body\": \"\",\r\n        \"headers\": {\r\n            \"access-control-allow-origin\": \"*\",\r\n            \"content-type\": \"text/plain;charset=UTF-8\",\r\n            \"location\": \"/get-headers\"\r\n        },\r\n        \"statusCode\": 302,\r\n        \"isBase64Encoded\": false,\r\n        \"multiValueHeaders\": {\r\n            \"set-cookie\": [\r\n                \"foo=bar; Max-Age=600; Domain=.mydomaine.com; Path=/; HttpOnly; SameSite=Lax\",\r\n                \"fizz=buzz; Max-Age=600; Domain=.mydomaine.com; Path=/; HttpOnly; SameSite=Lax\"\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nMore info from AWS website : https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html#multi-value-headers\r\n\r\n<img width=\"2421\" alt=\"Screenshot 2024-05-06 at 20 00 17\" src=\"https://github.com/honojs/hono/assets/12660796/91759c03-92c9-4e41-943a-50add19e8474\">\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nTwo solution are possible :\r\n- Soluion 1: When the `set-cookie` is available, and it's an array, flatten it and put it directly in the `event.cookies` value as string\r\n- Solution 2: When `multiValueHeaders` is present, pass to it all the values from `headers` as well\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nI would love to contribute and create a PR for the fix. I have managed to create a wrapper around `handle` function for internal testing purposes.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2281442773},{"id":2281518834,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2627","title":"hono.request method does not work in combination with hono/body-limit ","body":"### What version of Hono are you using?\r\n\r\n4.3.2\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```typescript\r\nimport {Hono} from 'hono'\r\nimport {bodyLimit} from 'hono/body-limit'\r\n\r\nconst app = new Hono()\r\napp.use(bodyLimit({maxSize: 100 * 1024})) // 100kb\r\n\r\napp.post('/hello', async (context) => {\r\n  return context.json({message: 'Hello, World!'})\r\n})\r\n\r\nconst response = await app.request('/hello', {\r\n  method: 'POST',\r\n  body: JSON.stringify({foo: 'bar'}),\r\n})\r\nconsole.log('response:', response.status)\r\n```\r\n\r\n### What is the expected behavior?\r\n```\r\nresponse: 200\r\n```\r\n\r\n### What do you see instead?\r\n```\r\nTypeError: RequestInit: duplex option is required when sending a body.\r\n    at new Request (node:internal/deps/undici/undici:5082:19)\r\n    at bodyLimit2 (file:///.../node_modules/hono/dist/middleware/body-limit/index.js:48:17)\r\n    at dispatch (file:///.../node_modules/hono/dist/compose.js:29:23)\r\n    at file:///.../node_modules/hono/dist/compose.js:6:12\r\n    at file:///.../node_modules/hono/dist/hono-base.js:188:31\r\n    at Hono.dispatch (file:///.../node_modules/hono/dist/hono-base.js:198:7)\r\n    at Hono.fetch (file:///.../node_modules/hono/dist/hono-base.js:201:17)\r\n    at Hono.request (file:///.../node_modules/hono/dist/hono-base.js:213:17)\r\n    at <anonymous> (/.../sandbox.ts:12:28)\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:235:25)\r\nresponse: 500\r\n```\r\n\r\n\r\n### Additional information\r\n\r\nSame app set up is working without any error when started as a node server and fetch response, see example below\r\n```TypeScript\r\nimport {Hono} from 'hono'\r\nimport {bodyLimit} from 'hono/body-limit'\r\nimport {serve} from '@hono/node-server'\r\n\r\nconst app = new Hono()\r\napp.use(bodyLimit({maxSize: 1024 * 1024})) // 1mb\r\n\r\napp.post('/hello', async (context) => {\r\n  return context.json({message: 'Hello, World!'})\r\n})\r\n\r\n// const response = await app.request('/hello', {\r\n//   method: 'POST',\r\n//   body: JSON.stringify({foo: 'bar'}),\r\n// })\r\n// console.log('response:', response.status)\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port: 3000,\r\n})\r\n\r\nconst response = await fetch('http://localhost:3000/hello', {\r\n  method: 'POST',\r\n  body: JSON.stringify({foo: 'bar'}),\r\n})\r\nconsole.log('response:', response.status)\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2281518834},{"id":2281966629,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2628","title":"refactor: improve parseBody function and docs","body":"- [x] Refactored `parseBody` and function to improve readability and maintainability.\r\n- [x] Simplified and clarified examples in JSDoc comments\r\n- [X] Improving `performance` from tests ","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2281966629},{"id":2284277600,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2633","title":"Support json subtypes like application/merge-patch+json in validator","body":"### What version of Hono are you using?\n\n4.3.2\n\n### What runtime/platform is your app running on?\n\nBun (but should affect all)\n\n### What steps can reproduce the bug?\n\nCreate a route with a validator with target 'json'.\r\nRequest with a Content-Type Header like 'application/merge-patch+json' \n\n### What is the expected behavior?\n\nValidation should not fail with a message like:\r\nInvalid HTTP header: ContentType=application/merge-patch+json.\n\n### What do you see instead?\n\nThe request should result in a 200, or at least should not fail on this specific check.\n\n### Additional information\n\nOne could additionally argue, that it should not be the responsibility of the json validator to check the request header.\r\nInstead the the validator with target 'header' should be responsible for this. But I see the convenience and brevity of the current solution.\r\n\r\nWe also have no option to control the error response in this case.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2284277600},{"id":2284282349,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2634","title":"feat(validator): check for json subtypes in validator","body":"A minimal fix for #2633 using a regex. \r\nI liked the simplicity of the current `startsWith`-approach but it excluded subtypes.\r\n\r\nI did:\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2284282349},{"id":2284370742,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2635","title":"refactor: functiom from filepath and docs","body":"- [X] Add tests\r\n- [X] Run tests\r\n- [X] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2284370742},{"id":2284529561,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2636","title":"Wrangler fails to load app when using Hono Vite devserver middlewar with custom entry point","body":"### What version of Hono are you using?\n\n4.2.8\n\n### What runtime/platform is your app running on?\n\nCloudflare Pages\n\n### What steps can reproduce the bug?\n\nCreate a new Hono app and choose the Cloudflare Pages option.\r\n\r\nMove `src/index.tsx` into a new directory such as `src/foo/index.tsx`.\r\n\r\nUpdate `vite.config.ts`:\r\n\r\n```typescript\r\nimport build from '@hono/vite-cloudflare-pages'\r\nimport devServer from '@hono/vite-dev-server'\r\nimport adapter from '@hono/vite-dev-server/cloudflare'\r\nimport { defineConfig } from 'vite'\r\n\r\nexport default defineConfig({\r\n  plugins: [\r\n    build(),\r\n    devServer({\r\n      adapter,\r\n      entry: 'src/foo/index.tsx'\r\n    })\r\n  ]\r\n})\r\n```\r\n\r\n\r\nResults in failure:\r\n\r\n```txt\r\n$ yarn preview\r\nyarn run v1.22.22\r\nwarning package.json: No license field\r\n$ wrangler pages dev dist\r\n✨ Compiled Worker successfully\r\n ⛅️ wrangler 3.52.0 (update available 3.53.1)\r\n-------------------------------------------------------\r\n⎔ Starting local server...\r\n✘ [ERROR] service core:user:my-app: Uncaught Error: Can't import modules from ['/src/index.tsx','/app/server.ts']\r\n\r\n    at null.<anonymous> (bundledWorker-0.9798135843018798.js:959:9)\r\n\r\n\r\n✘ [ERROR] MiniflareCoreError [ERR_RUNTIME_FAILURE]: The Workers runtime failed to start. There is likely additional logging output above.\r\n\r\n\r\n[wrangler:inf] Ready on http://localhost:8788\r\n```\n\n### What is the expected behavior?\n\nThe build should succeed and Wrangler should boot the app\n\n### What do you see instead?\n\nWhen viewing the localhost URL the page loads forever\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2284529561},{"id":2284701084,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2639","title":"fix(validator): `form` supports multiple values with `foo[]`","body":"Fixes #2625\r\n\r\nThis PR enables the validator to parse an array form value, such as the key is a `foo[]`. You should specify a key with the `[]` suffix for an array content.\r\n\r\nUsage:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { z } from 'zod'\r\nimport { zValidator } from '@hono/zod-validator'\r\n\r\nconst app = new Hono()\r\n\r\nconst schema = z.object({\r\n  'foo[]': z.array(z.string())\r\n})\r\n\r\napp.post('/', zValidator('form', schema), (c) => {\r\n  const data = c.req.valid('form')\r\n  const fooArray = data['foo[]']\r\n  return c.json({\r\n    fooArray\r\n  })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2284701084},{"id":2284944153,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2640","title":"[jsx/dom] Support `getServerSnapshot`","body":"### What is the feature you are proposing?\n\nIt would be great if `getServerSnapshot` is supported. If so, my favorite library [`swr`](https://swr.vercel.app) will work!\r\n\r\nLike this code:\r\n\r\n```tsx\r\nimport { render } from 'hono/jsx/dom'\r\nimport { hc } from 'hono/client'\r\nimport api from './api'\r\n\r\nimport useSWR from 'swr'\r\n\r\nconst client = hc<typeof api>('/api')\r\n\r\nfunction App() {\r\n  const $get = client.index.$get\r\n  const fetcher = async () => {\r\n    const res = await $get()\r\n    return await res.json()\r\n  }\r\n\r\n  const { data, error, isLoading } = useSWR('api', fetcher)\r\n\r\n  if (isLoading) return <h1>Loading...</h1>\r\n  if (error) return <h1>Error: {error.message}</h1>\r\n  return <h1>Hello {data?.name}</h1>\r\n}\r\n\r\nconst domNode = document.getElementById('root')!\r\nrender(<App />, domNode)\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2284944153},{"id":2285984864,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2643","title":"fixed: asset url import not working","body":"### What version of Hono are you using?\n\n4.3.3\n\n### What runtime/platform is your app running on?\n\nCloudFlare Workers\n\n### What steps can reproduce the bug?\n\nThanks for this amazing project!\r\n\r\nWas trying out the CloudFlare starter and wanted to import a logo.png\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { renderer } from './renderer'\r\n\r\nimport logo from './logo.png'\r\n\r\nconst app = new Hono()\r\n\r\napp.use(renderer)\r\n\r\napp.get('/', async (c) => {\r\n  return c.render(\r\n    <>\r\n      <img src={logo}></img>\r\n      <h1>Hello Hono</h1>\r\n    </>)\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nWhen I run the dev server the logo path shows as `<img src=\"/src/logo.png\"/>` and I'm getting a 404\r\n\r\nNot sure what I'm doing wrong?\n\n### What is the expected behavior?\n\nI'd expect to see the logo\n\n### What do you see instead?\n\nGetting a 404\n\n### Additional information\n\nIf I add ssrEmitAssets to the vite.config\r\n\r\n```ts\r\n  build: {\r\n    assetsDir: \"static\",\r\n    ssrEmitAssets: true\r\n  }\r\n\r\n```\r\n\r\nIt does get generated during the build\r\n\r\n```bash\r\nvite v5.2.11 building SSR bundle for production...\r\n✓ 44 modules transformed.\r\ndist/static/logo-BC-ZWNTt.png  13.50 kB\r\ndist/_worker.js                27.50 kB\r\n```","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2285984864},{"id":2286492354,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2645","title":"WebSocket Helper not working","body":"### What version of Hono are you using?\n\n4.1.1\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nI'm using [Hono websocket helper](https://hono.dev/helpers/websocket) but it return me and error when I try to connect to it\r\n![image](https://github.com/honojs/hono/assets/38434126/6be818ca-fea7-43ee-b71e-6db50d05d0d5)\r\nI cheked if my setup was good and for me it was \r\n![image](https://github.com/honojs/hono/assets/38434126/43acae28-f9fa-4dc1-bfca-4221dfdc405c)\r\nHere how I  setup the ws to hono\r\n![image](https://github.com/honojs/hono/assets/38434126/b042fe79-2461-4dc4-acba-ad72ef6fc694)\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2286492354},{"id":2286680244,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2646","title":"feat(jsx/dom): support getServerSnapshot in useSyncExternalStore","body":"Fixes #2640\r\n\r\n### Author should do the followings, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2286680244},{"id":2286819675,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2647","title":"chore: update the pull request template","body":"* Fixed the grammar.\r\n* Added `bun run format:fix && bun run lint:fix`.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2286819675},{"id":2287140780,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2649","title":"executionCtx getter throws on Bun","body":"### What version of Hono are you using?\r\n\r\n4.3.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\nI want to use executionCtx.waitUntil on CloudFlare Workers, but ignore and just await when running on Bun (since waitUntil is unsupported by Bun.serve)\r\n\r\n```javascript\r\napp.get('/example', async (c) => {\r\n    const p = getSomePromise();\r\n    if (c.executionCtx) {\r\n       c.executionCtx.waitUntil(p);\r\n    } else {\r\n        await p;\r\n    }\r\n    return c.text(\"OK!\")\r\n})\r\n```\r\n\r\nHowever this crashes at the \"if (c.executionCtx)\" guard because executionCtx is a getter function that throws when it's not available.\r\n\r\nShouldn't this return undefined or null instead of throwing to allow for the use case above?\r\n\r\n### What is the expected behavior?\r\n\r\nDo not throw.\r\n\r\n### What do you see instead?\r\n\r\n`error: This context has no ExecutionContext`\r\nas per https://github.com/honojs/hono/blob/aebaa2846228eea30a1787cde01a3d2e25fc803f/src/context.ts#L183\r\n\r\n### Additional information\r\n\r\n_No response_","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2287140780},{"id":2288144401,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2650","title":"[Feature Request]: `hono/cache` cacheName should also take function","body":"### What is the feature you are proposing?\n\nIn the `hono/cache` middleware, how can we add query params or other variables from the context? Like caching the data based on different `limit` parameters or user profiles/roles.\r\n\r\nI checked the code and it's a simple implementation, I can create a PR for this 😀","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2288144401},{"id":2288572962,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2651","title":"Inconsistent Handling of Empty JSON Request Body in Hono Validator","body":"### What version of Hono are you using?\r\n\r\n4.3.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n1. Send a request with an empty JSON body to a route utilizing hono/validator middleware.\r\n2. Observe the unexpected 400 Bad Request response due to the middleware's exception handling for empty JSON bodies.\r\n\r\n### What is the expected behavior?\r\n\r\nThe hono/validator middleware should gracefully handle empty JSON request bodies, considering them valid without triggering exceptions. This behavior is crucial for scenarios where empty JSON bodies are legitimate or expected.\r\n\r\n### What do you see instead?\r\n\r\nThe current behavior negatively affects applications where empty JSON request bodies should be permitted. This inconsistency leads to unexpected errors and hinders the module's usability.\r\n\r\n### Additional information\r\n\r\nThis issue is critical for applications relying on hono/validator. A swift resolution or workaround would greatly benefit the developer community.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2288572962},{"id":2288860597,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2652","title":"feat(cache): improved customizability","body":"Closes #2650 \r\n\r\n- [x] `cacheName` can accept a function, which returns a string\r\n- [x] Added `keyGenerator` function, to define custom cache keys","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2288860597},{"id":2289242551,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2653","title":"Support for `deno serve` in Deno adapter","body":"### What is the feature you are proposing?\n\nDeno now supports a new `serve` command in the command line. It's syntactic sugar for `deno run`, which automatically starts an HTTP server. It works by expecting the executed script to be a module that exports an object with a `fetch` property. This property is an asynchronous function that expects one parameter of type `Request` and returns a `Response`.\r\n\r\nThe following code theoretically should work:\r\n\r\n```typescript\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n    return c.text('Hello Hono!')\r\n})\r\n\r\nexport default {fetch: app.fetch};\r\n```\r\n\r\nOr even simply:\r\n```typescript\r\nexport default app;\r\n```\r\n\r\nHowever, both this code fails when Deno checks if `fetch` is a function expecting one parameter.\r\nInvalid type for fetch: must be a function with a single parameter\r\n\r\nIt's possible to rewrite the code as follows:\r\n\r\n```typescript\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n    return c.text('Hello Hono!')\r\n})\r\n\r\nexport default {\r\n    fetch: async (request: Request): Promise<Response> => await app.fetch(request)\r\n};\r\n```\r\n\r\nBut it would be good if the `fetch` function exported from `Hono` passed the Deno test, allowing the use of the abbreviated notation.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2289242551},{"id":2289398150,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2654","title":"natively support Structured Field Values","body":"### What is the feature you are proposing?\n\nStructured Field Values is the standard spec for serialize structured object into http header value.\r\n\r\n- RFC 8941: Structured Field Values for HTTP\r\n  - https://www.rfc-editor.org/rfc/rfc8941.html\r\n\r\nIt already referrered by tons of newly defined http specs.\r\n\r\n- References to RFC 8941\r\n  - https://datatracker.ietf.org/doc/rfc8941/referencedby/\r\n\r\nAnd also,  IETF HTTP Working Group currently working on retrofit SFV with existing headers.\r\n\r\n- Retrofit Structured Fields for HTTP\r\n  - https://httpwg.org/http-extensions/draft-ietf-httpbis-retrofit.html\r\n\r\nSo we can say it's a best practice to use SFV for headers, not JSON in any headers.\r\nFor avoiding developer using JSON or any other format, or SFV like format via hand-made-string-concat, Hono can natively support SFV encoder/decoder and guide developer to use it.\r\n\r\nfor example. \r\n\r\n```js\r\nc.res.headers.append('Cache-Status', 'OriginCache; hit; ttl=1100, \"CDN Company Here\"; hit; ttl=545')\r\n```\r\n\r\ncan be type gurded, by require SFList for value when key is `Cache-Status`.\r\n\r\n```js\r\nc.res.headers.append('Cache-Status',  sfv.encodeList([{\r\n  \"value\": \"Symbol(OriginCache)\",\r\n  \"params\": {\r\n   \"hit\": true,\r\n   \"ttl\": 1100\r\n  }\r\n },\r\n {\r\n  \"value\": \"CDN Company Here\",\r\n  \"params\": {\r\n   \"hit\": true,\r\n   \"ttl\": 545\r\n  }\r\n }\r\n]))\r\n```\r\n\r\nFYI: I published typed SFV library to npm https://github.com/jxck/structured-field-values\r\n\r\nThanks.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2289398150},{"id":2289964938,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2656","title":"context.req.parseBody(): option for support dot notation","body":"### What is the feature you are proposing?\n\nFor now this method has only option **all** for array support. It is awesome!\r\n\r\nIn my opinion, it would be very convenient to add an option to support dot notation (**dot: boolean**), which would greatly simplify the processing of nested objects.\r\n\r\nExample:\r\n\r\n```js\r\nlet formData = new FormData();\r\nformData.append('obj.key1', 'value1');\r\nformData.append('obj.key2', 'value2');\r\n\r\n// processed without dot notation support, like `await context.req.parseBody()`\r\n{\r\n\t\"obj.key1\": \"value1\",\r\n    \"obj.key2\": \"value2\",\r\n} \r\n\r\n// processed with dot notation support, like `await context.req.parseBody({ dot: true })`\r\n{\r\n\t\"obj\": {\r\n\t\t\"key1\": \"value1\",\r\n\t\t\"key2\": \"value2\"\r\n\t}\r\n}\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2289964938},{"id":2290348183,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2657","title":"feat(aws-lambda): add alb event processor","body":"### The author should do the following, if applicable\r\nThis change is made to address the issue raised in #2626. The change adds the following :\r\n- Create a custom `albProcessor` for `ALBProxyEvent`\r\n- Refactor code and introduced new `getHeaders` method\r\n- Added test for certain cases of the ALB event when `multiValueHeaders` is present\r\n\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2290348183},{"id":2290460431,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2658","title":"refactor(context): remove some `any`","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2290460431},{"id":2290744533,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2661","title":"feat(hono-base): tweaks `fetch` signature for better compatibility with `deno serve`","body":"fixes #2653\r\n\r\nSince deno checks `.length` as follows, this PR adjust `app.fetch.length` to be 1.\r\nhttps://github.com/denoland/deno/blob/dac49a116e094be1a3048305dfb6b10bbddcc030/ext/http/00_serve.ts#L796-L800\r\n\r\nWe will be able to use `export default app` for `deno serve` with this PR.\r\n\r\nThis definition may seem a bit odd, but it is not overly complicated; I think the advantage of \"you can write `dexport defult app` in deno just as well as in bun\" is more significant.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- <del>[ ] Add tests</del>\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2290744533},{"id":2291119121,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2662","title":"feat(jsr): support JSR","body":"This PR will enable Hono to support the [JSR](https://jsr.io/).\r\n\r\nWe've done:\r\n\r\n* Added type annotations to reduce [Slow Types](https://jsr.io/docs/about-slow-types). https://github.com/honojs/hono/pull/2663 \r\n* I added the `jsr-dry-run` command in CI to check if it's ready to publish JSR. https://github.com/honojs/hono/pull/2662/commits/8b247079ce0620aa487fa1efef15035214444298\r\n* Added `deno.json`. https://github.com/honojs/hono/pull/2662/commits/7ac63060928d04beab51e5a3f94adaf02658f37e And modified.\r\n* Made `JSX` be exported from `hono/jsx/jsx-runtime` not `global`. https://github.com/honojs/hono/pull/2662/commits/5bd2b71709a3e8d28a83c193fb70d7363b65dc85\r\n* Made `hono-base.ts` does not use `dynamicClass`. https://github.com/honojs/hono/pull/2662/commits/b9025907175d31879e5f3648661d60536af1a787\r\n* Made `ExecutionContext` is not declared in `global`. https://github.com/honojs/hono/pull/2662/commits/cf020c64c52df488393343efc06a5a2ce3bb6e5a\r\n* Removed `deno_dist` and `denoify` completely. https://github.com/honojs/hono/pull/2662/commits/0c776fa22696b54cbc31c51c7262a0a056316499\r\n* Made `deno.json` exports `./`, `./jsx/jsx-runtime`, ~~`./middleware`, and `./helper`~~.\r\n* Made `deno.json` exports each helper, middleware, and adapter following @nakasyou's [comment](https://github.com/honojs/hono/pull/2662#issuecomment-2106218638). https://github.com/honojs/hono/pull/2662/commits/90892be2a00ca500d337dfa1fd78ceafa9612676\r\n\r\n## Usage\r\n\r\nCurrently, we are uploading Hono as [`@hono/do-not-use-this` on the JSR](https://jsr.io/@hono/do-not-use-this).\r\n\r\n```sh\r\ndeno add @hono/do-not-use-this\r\n```\r\n\r\nYou don't use it, but you can use it for experimental purposes.\r\n\r\n## We will support both npm and JSR\r\n\r\nThough this PR will merged and Hono supports JSR, we don't stop supporting the npm. I'm thinking we can do it with the following publishing steps:\r\n\r\n1. Publish the npm package with the `np` command on my local machine.\r\n2. The new commit and tag will be pushed to this repo.\r\n3. If the tag is created, the GitHub Action will execute and release the new version of the JSR package to the JSR. Can we do it with this? https://github.com/dsherret/jsr-publish-on-tag\r\n\r\n## Differences between npm package\r\n\r\nIt can't use `declare global` if it will be published in JSR. So you can't use `ContextVariableMap`. Instead, you can use the `Variables` type exported from the middleware.\r\n\r\n```ts\r\nimport { Hono } from '@hono/hono'\r\nimport { jwt } from '@hono/hono/jwt'\r\nimport type { JwtVariables } from '@hono/hono/jwt'\r\n\r\ntype Env = {\r\n  Variables: JwtVariables\r\n}\r\n\r\nconst app = new Hono<Env>()\r\n```\r\n\r\n## Goodbye Denoify\r\n\r\nWe have to say Goodbye to [Deonify](https://github.com/garronej/denoify) if this PR is merged.\r\n\r\nWe were using it heavily to support publishing Hono on `deno.land/x`. But with this PR, it's not necessary because the `--unstable-sloppy-imports` option can be used. I've removed the `deno_dist` directory completely.\r\n\r\nThanks Denoify.\r\n\r\n## TODO\r\n\r\n- [x] Review the PR.\r\n- [x] Add a GitHub action to release it to the JSR if the new tag is created. Can we use this? https://github.com/dsherret/jsr-publish-on-tag https://github.com/honojs/hono/pull/2662/commits/e91d92e597381ec3ba7a47b7331ffb6b417c843d\r\n- [x] Publish the RC versions and try them in the real world.  => later\r\n- [ ] Add module docs in the source. => later\r\n- [ ] Update website docs. => later\r\n- [ ] Add badges for the JSR. => later\r\n- [x] Update `jsr.json` to prepare publishing.\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2291119121},{"id":2291144433,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2663","title":"perf(types): add type annotations","body":"This PR added type annotations to reduce \"[Slow Types](https://jsr.io/docs/about-slow-types)\".\r\n\r\nWe are planning to support the [JSR](https://jsr.io/). For this, it's better to remove [Slow Types](https://jsr.io/docs/about-slow-types). Adding type annotations is one big issue in reducing Slow Types. In addition, it will improve TypeScript inferring performance.\r\n\r\nIt could be included in PRs to support the JSR, but not only that, so make it a separate PR and merge it into the `main` now.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2291144433},{"id":2291326321,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2664","title":"Parsing body with `all: true` broken in hono 4.3.3 and above","body":"### What version of Hono are you using?\n\n4.3.5\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nParsing the request body with `all` set to `true` (`c.req.parseBody({ all: true })`) is broken in Hono version 4.3.3 and above (tested with 4.3.3, 4.3.4, 4.3.5).\r\n\r\nCode that works in 4.3.2:\r\n\r\n```typescript\r\napp.post('/upload', async (c) => {\r\n  const body = await c.req.parseBody<{ file: File | File[] }>({ all: true })\r\n  const files = Array.isArray(body['file']) ? body['file'] : [body['file']]\r\n\r\n  if (files.length === 0) {\r\n    c.status(400)\r\n    return c.json({ error: 'No files' })\r\n  }\r\n\r\n  return c.json({ fileNames: files.map((file) => file.name) })\r\n})\r\n```\r\n\r\nThis can be tested with the following `curl` command:\r\n\r\n```shell\r\ncurl -F file=@test1.txt -F file=@test2.txt http://localhost:8787/upload\r\n```\n\n### What is the expected behavior?\n\nParsing all form values into the response, this works in Hono 4.3.2 and below.\n\n### What do you see instead?\n\nRunning in local development results in the error below: \r\n\r\n```\r\n> wrangler dev src/index.ts\r\n\r\n ⛅️ wrangler 3.55.0\r\n-------------------\r\n⎔ Starting local server...\r\n[wrangler:inf] Ready on http://localhost:8787\r\n✘ [ERROR] TypeError: formKey is not iterable\r\n\r\n      at handleParsingAllValues\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/hono@4.3.5/node_modules/hono/dist/utils/body.js:35:27)\r\n      at null.<anonymous>\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/hono@4.3.5/node_modules/hono/dist/utils/body.js:25:7)\r\n      at convertFormDataToBodyData\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/hono@4.3.5/node_modules/hono/dist/utils/body.js:20:12)\r\n      at parseFormData\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/hono@4.3.5/node_modules/hono/dist/utils/body.js:14:12)\r\n      at async HonoRequest.parseBody\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/hono@4.3.5/node_modules/hono/dist/request.js:59:24)\r\n      at async Array.<anonymous> (file:///Users/paul/tmp/hono-test/src/index.ts:6:16)\r\n      at async jsonError\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/wrangler@3.55.0_@cloudflare+workers-types@4.20240502.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts:22:10)\r\n      at async drainBody\r\n  (file:///Users/paul/tmp/hono-test/node_modules/.pnpm/wrangler@3.55.0_@cloudflare+workers-types@4.20240502.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts:5:10)\r\n\r\n\r\n[wrangler:inf] POST /upload 500 Internal Server Error (17ms)\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2291326321},{"id":2291531070,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2665","title":"fix(utils/body): support multiple `File`s","body":"Fixes #2664 and updates the Node.js version for the `Main` CI to `v20.x`.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2291531070},{"id":2291808278,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2666","title":"doc(ssg): Define the default value for Content-Type","body":"close: https://github.com/honojs/hono/issues/2284 https://github.com/honojs/hono/issues/2244\r\n\r\nIt summarizes the history of the discussion and prescribes default values.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2291808278},{"id":2292705843,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2667","title":"feat(jsr): remove helper.ts and middleware.ts","body":"In `feat/jsr`, denoify has removed.\r\nexports field of npm and jsr don't have reference to `helper.ts` and `middleware.ts`, so these files should be removed.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2292705843},{"id":2292799376,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2668","title":"feat(utils/cookie): allow setting cookie SameSite attribute in lowercase too","body":"Added support for allowing `lax`, `strict`, and `none` values for the `SameSite` attribute in the `setCookie` function.\r\n\r\nWhile the [RFC](https://datatracker.ietf.org/doc/html/draft-west-first-party-cookies-07#section-4.1) suggests that the `SameSite` attribute should `Strict`, `Lax`, `None` as values, there is no indication that the `SameSite` attribute should be case-sensitive.\r\n\r\nLibraries like lucia (Undelying [`olso`](https://github.com/pilcrowOnPaper/oslo/blob/26f8c9dabc2dac6212c855602614d91991e87889/src/cookie/index.ts#L7)) returns cookie objects with lowercase `SameSite` attribute values, which conficts with the `SameSite` attribute values in the `setCookie` function. This needs us to convert the `SameSite` attribute values from lucia to the correct case-sensitive values which is a huge pain.\r\n\r\nLibraires like Next.js (underlying [`@edge-runtime/cookie`](https://github.com/vercel/edge-runtime/blob/529e4d5d4df3050eb634cd59d17a0e1801789226/packages/cookies/src/serialize.ts#L102)) allow both cases and uses the lowercase value.\r\n\r\nWhile I could have asked lucia to change the case of the `SameSite` attribute values, Its less likely to happen as changing the case of the `SameSite` attribute values would break existing codebases. So its better to allow both cases for the `SameSite` attribute values.\r\n\r\nI have updated the `setCookie` function to allow `lax`, `strict`, and `none` values for the `SameSite` attribute. While keeping the return value in the original case-sensitive form to stay true to the RFC.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2292799376},{"id":2292800670,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2669","title":"feat(jsr): delete `mod.ts`","body":"The reason is the same as #2667.\r\nI forgot to remove `mod.ts`.\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2292800670},{"id":2294754977,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2671","title":"large requests (>~100MiB) fail before bodyLimit is called","body":"### What version of Hono are you using?\n\n4.3.6\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nI have a use-case where a user submits a POST request to a form with around 200 MiB of image files (large images, ~10MiB each). This is how I have it set up.\r\n\r\n1. Set up an endpoint with `bodyLimit`:\r\n```ts\r\napp.post(\r\n  \"/dashboard/uploads\",\r\n  bodyLimit({\r\n    maxSize: 1024 * 1024 * 200, // 200 MiB\r\n    onError: (c) => c.html(<Error error=\"Files are too big!\" />),\r\n  }),\r\n  routePostDashboardUpload,\r\n);\r\n\r\nexport async function routePostDashboardUpload(c: Context) {\r\n  // there is no omitted code here,\r\n  // it actually just returns rendered jsx\r\n  // (crash happens before endpoint)\r\n  return c.html(\r\n    <Success message=\"Files uploaded successfully. You can check their progress in the Files tab.\" />,\r\n  );\r\n}\r\n```\r\n\r\n2. Call the endpoint with a large multipart body (~180MiB in this case):\r\n```sh\r\ncurl -v \\\r\n  --location 'http://localhost:3000/dashboard/uploads' \\\r\n  --form 'files=@\"/home/boris/Downloads/img/1.png\"' \\\r\n  --form 'files=@\"/home/boris/Downloads/img/2.png\"' \\\r\n  [...more files]\r\n```\r\n\r\nThat's the smallest reproduction I can do.\n\n### What is the expected behavior?\n\nIt should just call the endpoint and return it's return value if the total size of the body is less than `maxSize`.\r\n\r\nIf it isn't, it should return 413. It's my understanding from looking at `hono/src/middleware/body-limit/index.ts`, that the response body in such cases should be the string `Payload Too Large`.\n\n### What do you see instead?\n\nHowever, `curl` returns the following:\r\n```\r\n* processing: http://localhost:3000/dashboard/uploads\r\n*   Trying [::1]:3000...\r\n* Connected to localhost (::1) port 3000\r\n> POST /dashboard/uploads HTTP/1.1\r\n> Host: localhost:3000\r\n> User-Agent: curl/8.2.1\r\n> Accept: */*\r\n> Content-Length: 195543851\r\n> Content-Type: multipart/form-data; boundary=------------------------ae2e9d88e58090c8\r\n> Expect: 100-continue\r\n> \r\n< HTTP/1.1 100 Continue\r\n< HTTP/1.1 413 Request Entity Too Large\r\n< Connection: close\r\n< \r\n* we are done reading and this is set to close, stop send\r\n* Closing connection\r\n```\r\n\r\nAs you can see, several things are wrong.\r\n\r\n1. The [docs suggest](https://hono.dev/middleware/builtin/body-limit) that if a content-length header is present, it will check whether it should error based on that. 195543851 is smaller than 1024 * 1024 * 200  = 209715200, yet 413 is still returned.\r\n\r\n2. Neither a body of `Payload Too Large` or that defined in the `onError` handler is provided, which suggests the error originates somewhere other than the `bodyLimit` middleware.\r\n\r\n3. The endpoint is not called. I tried adding a `console.log` to verify.\n\n### Additional information\n\n1. I tried with different bodies and the threshold for crashing seems to be between 100 and 120 MiB, regardless of `maxSize` (set to 2GiB during testing).\r\n\r\n2. The `bodyLimit` middleware works fine when the `maxSize` value is less than said threshold. The `onError` handler is called when appropriate.\r\n\r\n3. Adding some console logs in `hono/src/middleware/body-limit/index.ts` also leads me to believe the error originates before that middleware is even executed.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2294754977},{"id":2295321387,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2672","title":"Router does not decode URIs","body":"### What version of Hono are you using?\n\n4.3.6\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nDeno/Hono\r\n\r\n```ts\r\nimport { Hono } from 'npm:hono';\r\n\r\nconst h = new Hono();\r\n\r\nh.get('/|', async (c) => c.text('ayy'));\r\n\r\nDeno.serve({\r\n\tport: 8080,\r\n}, h.fetch);\r\n```\r\n\r\nNode\r\n\r\n```js\r\n// ayy\r\nhttp.get({ host: 'localhost', port: 8080, path: '/|' }, res => res.pipe(process.stdout));'';\r\n\r\n// 404 Not Found, expected ayy\r\nhttp.get({ host: 'localhost', port: 8080, path: '/'+encodeURI('|') }, res => res.pipe(process.stdout));'';\r\n```\n\n### What is the expected behavior?\n\nayy\n\n### What do you see instead?\n\n404 Not Found\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2295321387},{"id":2296790533,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2675","title":"feat(utils/body): add dot notation support for `parseBody`","body":"Closes #2656\r\n\r\ncc @yusukebe  @MathurAditya724 \r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2296790533},{"id":2297534677,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2677","title":"docs: Add TSDoc comments to improve code documentation and readability","body":"This PR will takes a long time, I wouldn't finish it in a day.\r\n\r\nBut this is a good start, anyone can contribute in my repository https://github.com/fzn0x/hono/tree/fzn0x/tsdoc\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2297534677},{"id":2297772504,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2679","title":"fix(method-override): remove un-needed import of URLSearchParams in method override middleware","body":"this PR simply removes the `URLSearchParams` import from the node-specific package `url`.\r\n\r\nwhen running hono and using the method override middleware in cloudflare workers, wrangler complains about the use of the `url` package. it prompts you to add the `node_compat` flag.\r\n\r\nthis seems a bit erroneous to me, since node has had `URLSearchParams` as a global since version 10. maybe i'm missing something specific about other runtimes, but all tests pass.\r\n\r\nplease nuke this PR if i'm flat-out wrong ;)\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2297772504},{"id":2297827567,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2680","title":"docs(jsdoc): add JSDoc for Middleware","body":"In this PR, let's write the JSDoc for all builtin Middleware.  Only Middleware is addressed here; other documentation than Middleware is done in other PRs. Example #2677.\r\n\r\nWill fix #1338\r\n\r\n---\r\n\r\n- [x] [Basic Auth Middleware](https://hono.dev/middleware/builtin/basic-auth) https://github.com/honojs/hono/pull/2680/commits/3ba73862283b2c1e859782f67a9b77326b6659e6\r\n- [x] [Bearer Authentication](https://hono.dev/middleware/builtin/bearer-auth)\r\n- [x] [Body Limit](https://hono.dev/middleware/builtin/body-limit)\r\n- [x] [Cache](https://hono.dev/middleware/builtin/cache)\r\n- [x] [Compress](https://hono.dev/middleware/builtin/compress)\r\n- [x] [CORS](https://hono.dev/middleware/builtin/cors)\r\n- [x] [CSRF Protection](https://hono.dev/middleware/builtin/csrf)\r\n- [x] [ETag](https://hono.dev/middleware/builtin/etag)\r\n- [x] [JSX Renderer](https://hono.dev/middleware/builtin/jsx-renderer)\r\n- [x] [JWT](https://hono.dev/middleware/builtin/jwt)\r\n- [x] [Logger](https://hono.dev/middleware/builtin/logger)\r\n- [x] [Method Override](https://hono.dev/middleware/builtin/method-override)\r\n- [x] [Pretty JSON](https://hono.dev/middleware/builtin/pretty-json)\r\n- [x] [Secure Headers](https://hono.dev/middleware/builtin/secure-headers)\r\n- [x] [Timing](https://hono.dev/middleware/builtin/timing)\r\n- [x] [Trailing Slash](https://hono.dev/middleware/builtin/trailing-slash)","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2297827567},{"id":2298304618,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2681","title":"When using `new Response` as a return value, the headers set by `c.header()` are lost in the actual response.","body":"### What version of Hono are you using?\n\n4.3.7\n\n### What runtime/platform is your app running on?\n\nNode.js\n\n### What steps can reproduce the bug?\n\nWhen using `new Response` as a return value, the headers set by `c.header()` are lost in the actual response. If the response is returned using c.text, the headers will appear normally in the actual response.\r\n\r\n![image](https://github.com/honojs/hono/assets/28844480/f828b5a8-0d09-44ad-bf72-67b39b50fb3e)\r\n\r\n1. Run `pnpm init`\r\n2. Run `pnpm i hono @hono/node-server`\r\n3. Paste the following code into the index.mjs file\r\n\r\n```javascript\r\nimport { serve } from '@hono/node-server'\r\nimport { Hono } from 'hono'\r\nimport { setCookie } from \"hono/cookie\";\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/',async (c, next) => {\r\n  setCookie(c, 'x-cookie-1', '1')\r\n  c.header('x-test-1', '1')\r\n  c.res.headers.set('x-test-2', '2')\r\n  await next()\r\n  setCookie(c, 'x-cookie-2', '2')\r\n  c.header('x-test-3', '3')\r\n  c.res.headers.set('x-test-4', '4')\r\n}, async (c) => {\r\n  setCookie(c, 'x-cookie-0', '0')\r\n  c.header('x-test-0', '0')\r\n  c.res.headers.set('x-test-0', '0')\r\n  return new Response('Hello Node.js!')\r\n  // return c.text('Hello Node.js!')\r\n})\r\n\r\nserve(app)\r\n```\r\n\r\n4. Run `node index.mjs`\r\n5. Run `curl http://localhost:3000 -v`\n\n### What is the expected behavior?\n\nThe actual response should contain all the set headers.\n\n### What do you see instead?\n\n> The following is my analysis, I just using Hono for less than half a month, so the analysis may not be accurate.\r\n\r\n- When the header is set using `c.header` before creating the response, it is stored in `c.#header`, See: https://github.com/honojs/hono/blob/main/src/context.ts#L297\r\n- If there is a return Response in the middleware, it will be set back to `c.res`, See: https://github.com/honojs/hono/blob/main/src/compose.ts#L60\r\n- The headers in `c.#res.headers` will then be copied into the response returned from the middleware (_res), See: https://github.com/honojs/hono/blob/main/src/context.ts#L196-L212\r\n- But I don't see the c.#headers copying process, which could be the reason for the missing request headers.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2298304618},{"id":2298998547,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2682","title":"test(validator): compatibility with Node.js `v20.13.1`","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2298998547},{"id":2299602972,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2684","title":"refactor(utils/jwt): remove some `any`","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2299602972},{"id":2299656549,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2685","title":"docs(jsdoc): Bearer Authentication Middleware","body":"This PR is to add JSDoc for Bearer Auth Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2299656549},{"id":2299723172,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2686","title":"feat(ssg): enhance conbined hooks","body":"We are considering making it easier for users to specify hooks without having to be aware of their placement by ultimately passing a list of each hook to either plugins or hooks. As a preliminary step, it is essential to enable each hook to combine multiple hooks. Without this capability, implementing such a patch for extension would be challenging.\r\n\r\n## Combining Hook\r\nYou can enhance your site generation process by combining multiple hooks.\r\nWhile this approach can be applied to any type of hook (BeforeRequestHook, AfterResponseHook, AfterGenerateHook), the example below demonstrates combining multiple BeforeRequestHook instances to achieve fine-grained request filtering.\r\n\r\n### Example: \r\n\r\nCombining BeforeRequestHook. First, define two hooks: one to allow requests for certain paths, and another to deny requests for specific paths.\r\n\r\n```typescript\r\n// Hook to allow requests only to specified paths\r\nconst filterPathsBeforeRequestHook = (allowedPaths: string | string[]): BeforeRequestHook => {\r\n  const baseURL = 'http://localhost';\r\n  return async (req: Request): Promise<Request | false> => {\r\n    const paths = Array.isArray(allowedPaths) ? allowedPaths : [allowedPaths];\r\n    const pathname = new URL(req.url, baseURL).pathname;\r\n    return paths.some(path => pathname === path || pathname.startsWith(`${path}/`)) ? req : false;\r\n  };\r\n};\r\n\r\n// Hook to deny requests to specified paths\r\nconst denyPathsBeforeRequestHook = (deniedPaths: string | string[]): BeforeRequestHook => {\r\n  const baseURL = 'http://localhost';\r\n  return async (req: Request): Promise<Request | false> => {\r\n    const paths = Array.isArray(deniedPaths) ? deniedPaths : [deniedPaths];\r\n    const pathname = new URL(req.url, baseURL).pathname;\r\n    return !paths.some(path => pathname === path || pathname.startsWith(`${path}/`)) ? req : false;\r\n  };\r\n};\r\n```\r\n\r\nCombine these hooks to filter requests by allowing them for /public path, but denying them for /public/secret.\r\n\r\n```typescript\r\ntoSSG(app, fs, {\r\n  beforeRequestHook: [\r\n    filterPathsBeforeRequestHook(['/public']),  // Allow only '/public'\r\n    denyPathsBeforeRequestHook(['/public/secret'])  // Deny '/public/secret'\r\n  ],\r\n})\r\n```\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2299723172},{"id":2299991962,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2687","title":"`deleteCookie()` function does not return the deleted value","body":"### What version of Hono are you using?\r\n\r\n4.2.6\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nBun\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { deleteCookie } from 'hono/cookie'\r\n\r\nconst app = new Hono()\r\n\r\napp.post('/', (c) => {\r\n  const user = deleteCookie(c, 'user')\r\n        // ^? const user: void\r\n  return c.text('Signed out', 200)\r\n})\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nAccording to the [documentation](https://hono.dev/helpers/cookie#deletecookie), `deleteCookie()` function should return the deleted value.\r\n\r\n\r\n### What do you see instead?\r\n\r\nContrary to the documentation, the `deleteCookie()` function is defined with a return type of `void`.\r\n\r\n```ts\r\nexport declare const deleteCookie: (c: Context, name: string, opt?: CookieOptions) => void;\r\n```\r\n\r\n### Additional information\r\n\r\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2299991962},{"id":2301558684,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2688","title":"feat: decode percent-encoded path in getPath","body":"#2672\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2301558684},{"id":2301917071,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2689","title":"FormData parse error missing final boundary","body":"### What version of Hono are you using?\n\n4.3.7\n\n### What runtime/platform is your app running on?\n\nbun\n\n### What steps can reproduce the bug?\n\nHave following error when try to parse body from request\r\n```\r\nconst body = await c.req.parseBody();\r\n```\r\n\r\n> FormData parse error missing final boundary\r\n\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2301917071},{"id":2302437565,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2690","title":"fix(context): Retain all cookies when passing `ResponseInit` to `c.body`","body":"It seems cookie headers are not correctly appended when passing `ResponseInit` as a second parameter to `c.body(..., res)`.\r\n\r\nSupport for setting cookies was recently added to `@hono/trpc-server` in\r\nhttps://github.com/honojs/middleware/pull/517, but this bug prevents multiple cookies from being set.\r\n\r\n[Here's a reproduction](https://github.com/codeflows/hono-cookie-test/tree/main)\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2302437565},{"id":2302934927,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2691","title":"docs(jsdoc): Body Limit Middleware","body":"This PR is to add JSDoc for Body Limit Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2302934927},{"id":2302951220,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2692","title":"docs(jsdoc): Cache Middleware","body":"This PR is to add JSDoc for Cache Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2302951220},{"id":2303044644,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2693","title":"Type bug introduced in `v4.3.0` in `secureHeaders` middleware","body":"### What version of Hono are you using?\n\n4.3.0\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\n1. Install version `4.3.0` of Hono.\r\n2. Create a TS file with an app that uses `secureHeaders` middleware and another arbitrary middleware that sets the context (I used `@hono/clerk-auth` as an example). Also in this file you'll mount the routes from another file with `app.route()`.\r\n3. In another file, create another app and try to access the context value with `context.get` from this other middleware, and see it fail, as the context only contains \"secureHeadersNonce\" variable.\r\n\r\n`4.3.0` CodeSandbox with a bug: https://codesandbox.io/p/devbox/hono-4-3-0-not-working-9kg2s7\r\n\r\n`4.2.9` CodeSandbox working fine: https://codesandbox.io/p/devbox/hono-4-2-9-working-vlx83h\n\n### What is the expected behavior?\n\nOne can access the context variable in another file.\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nI confirmed that the issue lies in the `secureHeaders` middleware, as by commenting it out everything works fine as before. I suspect [these lines](https://github.com/honojs/hono/blob/d87d9964433a4777b09abff9360ff12643d00440/src/middleware/secure-headers/index.ts#L4) to be the issue from PR #2577:\r\n```ts\r\ndeclare module '../../context' {\r\n  interface ContextVariableMap {\r\n    secureHeadersNonce?: string\r\n  }\r\n}\r\n```\r\n\r\nIt seems like this is overwriting the context variables set by other middleware, therefore it's impossible to access variables from other middleware without importing it directly (which would be an unused import technically).","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303044644},{"id":2303075107,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2694","title":"fix(middleware): Context declaration","body":"Fixes #2693 \r\n\r\n@yusukebe not sure it's the best way though, as `denoify` automatically adds `node:` to `hono` import... Without this import TS yells that `hono` is an \"unknown\" module...\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] ~Add tests~ (n/a)\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303075107},{"id":2303197266,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2695","title":"Empty c.req.raw body for application/x-www-form-urlencoded","body":"### What version of Hono are you using?\n\n4.3.6\n\n### What runtime/platform is your app running on?\n\nbun 1.1.8\n\n### What steps can reproduce the bug?\n\n```\r\nimport { HTTPException } from 'hono/http-exception'\r\nimport { OpenAPIHono } from '@hono/zod-openapi'\r\n\r\nconst app = new OpenAPIHono()\r\n\r\napp.use(async (c, next) => {\r\n  console.log('Request received:: \\n',c.req.raw)\r\n  const bod = await c.req.parseBody()\r\n  console.log('After parse:: ',bod)\r\n  await next()\r\n})\r\n\r\nexport default {\r\n  port: 4000,\r\n  fetch: app.fetch,\r\n}\r\n\r\n```\r\n\n\n### What is the expected behavior?\n\n```\r\n{\r\n  accept: \"*/*\",\r\n  \"accept-encoding\": \"deflate, gzip, br\",\r\n  authorization: \"-------\",\r\n  \"content-length\": \"125073\",\r\n  \"content-type\": \"application/x-www-form-urlencoded\",\r\n  host: \"api-service:4000\",\r\n  \"user-agent\": \"MoodleBot/4.3 (+http://localhost:8080)\",\r\n  client_id: \"nkalnw0ov\",\r\n}\r\n\u001cftypM4A M4A isommp42\u0001mdat\u0001� ...\r\n```\n\n### What do you see instead?\n\n```\r\nRequest (0 KB) {\r\nmethod: \"POST\",\r\nurl: \"http://api-service:4000/endpoint\",\r\nheaders: Headers {\r\n    \"host\": \"api-service:4000\",\r\n     \"accept\": \"*/*\",\r\n     \"accept-encoding\": \"deflate, gzip, br\",\r\n     \"authorization\": \"------\",\r\n     \"user-agent\": \"MoodleBot/4.3 (+http://localhost:8080)\",\r\n     \"content-length\": \"125073\",\r\n     \"content-type\": \"application/x-www-form-urlencoded\",\r\n   }\r\n}\r\n{}\r\n```\n\n### Additional information\n\nI can get the body using plain bun.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303197266},{"id":2303509187,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2696","title":"WebSockets In Bun","body":"### What version of Hono are you using?\n\n4.3.7\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nIf you `Bun.serve` and return `app.fetch()` it will not allow Bun to switch protocols, making web sockets unusable. The following is an example of that\r\n```ts\r\nBun.serve({\r\n  fetch(req, server) {\r\n    return app.fetch(req, { ip: server.requestIP(req) }) // This return prevents protocol switching\r\n  },\r\n  websocket,\r\n})\r\n```\r\n\r\nNow that is expected behavior in Bun, so here is how [Bun says it should be done instead](https://bun.sh/guides/websocket/simple):\r\n```ts\r\nconst server = Bun.serve{\r\n  fetch(req, server) {\r\n    const success = server.upgrade(req);\r\n    if (success) {\r\n      // Bun automatically returns a 101 Switching Protocols\r\n      // if the upgrade succeeds\r\n      return undefined;\r\n    }\r\n\r\n    // handle HTTP request normally\r\n    return app.fetch(req, { ip: server.requestIP(req) })\r\n  },\r\n  websocket,\r\n  },\r\n});\r\n\r\nconsole.log(`Listening on ${server.hostname}:${server.port}`);\r\n```\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\nThis appears to be because since the `server.upgrade` was already ran, it is causing issues.\r\nHere is the error that is received:\r\n\r\n```bash\r\n43 |       if (websocketListeners.onOpen) {\r\n44 |         websocketListeners.onOpen(new Event(\"open\"), createWSContext(ws));\r\n45 |       }\r\n46 |     },\r\n47 |     close(ws, code, reason) {\r\n48 |       const websocketListeners = websocketConns[ws.data.connId];\r\n                                                     ^\r\nTypeError: undefined is not an object (evaluating 'ws.data.connId')\r\n      at close (/hono-test/node_modules/hono/dist/adapter/bun/websocket.js:48:49)\r\n      at fetch (/hono-test/src/index.ts:41:16)\r\n37 |       await next();\r\n38 |     };\r\n39 |   };\r\n40 |   const websocket = {\r\n41 |     open(ws) {\r\n42 |       const websocketListeners = websocketConns[ws.data.connId];\r\n                                                     ^\r\nTypeError: undefined is not an object (evaluating 'ws.data.connId')\r\n      at open (/hono-test/node_modules/hono/dist/adapter/bun/websocket.js:42:49)\r\n      at fetch (/hono-test/src/index.ts:41:16)\r\n\r\n22 |   const websocketConns = [];\r\n23 |   const upgradeWebSocket = (createEvents) => {\r\n24 |     return async (c, next) => {\r\n25 |       const server = c.env;\r\n26 |       const connId = websocketConns.push(await createEvents(c)) - 1;\r\n27 |       const upgradeResult = server.upgrade(c.req.raw, {\r\n                                 ^\r\nTypeError: undefined is not an object (evaluating 'server.upgrade')\r\n      at /hono-test/node_modules/hono/dist/adapter/bun/websocket.js:27:29\r\n\r\n```\n\n### Additional information\n\nI've had two different people mention this issue, so I decided to investigate further. I think it is important and reasonable, for a user to need to access the IP, or set any env and be able to still use websockets","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303509187},{"id":2303694502,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2697","title":"docs(jsdoc): Compress Middleware","body":"This PR is to add JSDoc for Compress Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303694502},{"id":2303698906,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2698","title":"docs(jsdoc): CORS Middleware","body":"This PR is to add JSDoc for CORS Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303698906},{"id":2303704495,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2699","title":"docs(jsdoc): CSRF Protection Middleware","body":"This PR is to add JSDoc for CSRF Protection Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303704495},{"id":2303811587,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2701","title":"docs(jsdoc): ETag Middleware","body":"This PR is to add JSDoc for ETag Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303811587},{"id":2303853257,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2702","title":"docs(jsdoc): Trailing Slash Middleware","body":"This PR is to add JSDoc for Trailing Slash Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303853257},{"id":2303853481,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2703","title":"docs(jsdoc): Server-Timing Middleware","body":"This PR is to add JSDoc for Server-Timing Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303853481},{"id":2303853751,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2704","title":"docs(jsdoc): Secure Headers Middleware","body":"This PR is to add JSDoc for Secure Headers Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303853751},{"id":2303854001,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2705","title":"docs(jsdoc): Pretty JSON Middleware","body":"This PR is to add JSDoc for Pretty JSON Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303854001},{"id":2303854146,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2706","title":"docs(jsdoc): Method Override Middleware","body":"This PR is to add JSDoc for Method Override Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303854146},{"id":2303854424,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2707","title":"HTTPException status is ignored if a Response is provided","body":"### What version of Hono are you using?\r\n\r\n4.3.7\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nDeno\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```ts\r\nimport { HTTPException, Hono } from \"hono\";\r\n\r\nconst app = new Hono();\r\n\r\n// Should throw 400, status is 200\r\napp.get(\"/example-a\", (c) => {\r\n  throw new HTTPException(400, {\r\n    res: new Response(\"An exception\", { status: 200 }),\r\n  });\r\n});\r\n\r\n// Should throw 401, status is 200\r\napp.get(\"/example-b\", (c) => {\r\n  throw new HTTPException(401, {\r\n    res: c.text(\"An exception\"),\r\n  });\r\n});\r\n\r\n// Correctly throws 401\r\napp.get(\"/example-c\", (c) => {\r\n  throw new HTTPException(401, {\r\n    res: c.text(\"An exception\", 401),\r\n  });\r\n});\r\n\r\napp.onError((err, c) => {\r\n  if (err instanceof HTTPException) {\r\n    return err.getResponse();\r\n  }\r\n\r\n  console.error(`${err}`);\r\n  return c.text(\"Internal Server Error\", 500);\r\n});\r\n\r\nDeno.serve(app.fetch);\r\n\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\nThe behavior I expected is that the status provided to `HTTPException` would take precedent over response, especially if `c.text()`, `c.json()`, or `c.html()` are used, since those all set a `200` status by default.\r\n\r\n### What do you see instead?\r\n\r\nThe status of the response provided in the `res` argument always takes precedence.\r\n\r\n### Additional information\r\n\r\nUnless this is intended behavior, I would propose `HTTPException` always return a response with the status code provided in the first argument.\r\n\r\nNote: I did some cursory research into modifying the status of a Response instance. It appears modifying a Response status isn't possible, and clones of responses have read-only statuses as well. It would seem that implementing this change would necessitate creating a new Response, then applying the body and headers from the given Response, but ignoring the status and instead using the status given to `HTTPException`.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303854424},{"id":2303854485,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2708","title":"docs(jsdoc): Logger Middleware","body":"This PR is to add JSDoc for Logger Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303854485},{"id":2303854667,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2709","title":"docs(jsdoc): JWT Auth Middleware","body":"This PR is to add JSDoc for JWT Auth Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303854667},{"id":2303855213,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2710","title":"docs(jsdoc): JSX Renderer Middleware","body":"This PR is to add JSDoc for JSX Renderer Middleware.\r\nNote that the target of the PR is not `main`.\r\n\r\nRelated:\r\n- #1338\r\n- #2680\r\n\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303855213},{"id":2303890312,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2711","title":"feat: encode static parts of route paths by encodeURI().","body":"#2672\r\n\r\nThe request to `app.get('/|')` and the registered path is made via a URL like `http://localhost/%7C` according to RFC 3986, to which Hono did not return a response So, we will make it possible to return it.\r\n\r\nThe URL `http://localhost/|` is not usually used, so if this URL is accessed, it should be set to 404.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303890312},{"id":2303983277,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2712","title":"refactor(timing): don't use `Partial` for the options","body":"`Partial` is convinient. However, it is easy for users to understand that it does not use `Partial`.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2303983277},{"id":2304015239,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2713","title":"refactor(secure-headers): don't use `Partial` for the options","body":"It is the same reason as #2712 .\r\n\r\nSometimes `Partial` is used instead of making all option values optional, but this is not necessary in this case.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304015239},{"id":2304080938,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2714","title":"feat: decode percent-encoded path in getPath","body":"#2672\r\n\r\nThis PR contains #2688 + https://github.com/honojs/hono/pull/2688#discussion_r1605780997\r\n\r\n### Specification Changes\r\n\r\nThere are no major release-level changes, but there are some minor changes as follows\r\n\r\n#### Symbols and multibyte characters can be included in the static string of the routing definition\r\n\r\nWhen you define a routing as follows, it will now match, whereas before it did not match because the percent encoding for static strings was not taken into account when routing.\r\n\r\n```ts\r\napp.get('/🔥', (c) => c.text(`I'm hono`)\r\n```\r\n\r\n```\r\nhttp://example.com/%F0%9F%94%A5\r\n```\r\n\r\n#### Requests made with a URL that are encoded more than necessary are now matched with a decoded URL\r\n\r\nSuppose we have a routing definition like this,\r\n\r\n```ts\r\napp.get('/static', (c) => c.text('static)\r\n```\r\n\r\nEven if unreserved characters are extra encoded, they are now decoded and matched.\r\n\r\n```\r\nhttp://example.com/%73tatic // %73 is 's'\r\n```\r\n\r\n#### Regular expressions for path parameters are now tested against decoded characters\r\n\r\nWe do not think that this will break any applications, but applications that use regular expressions in path parameters should check when updating to see if they are affected.\r\n\r\n\r\nSuppose we have a routing definition like this,\r\n\r\n```ts\r\napp.get('/about/:product{🔥|Hono}', (c) => c.text(`Hono is a framework`)\r\n```\r\n\r\nThe following URLs match\r\n\r\n```\r\nhttp://example.com/about/%F0%9F%94%A5\r\n```\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304080938},{"id":2304119142,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2715","title":"fix(hono-jsx): make ref unrequried for forward ref","body":"My problem -  hono forward ref always need me to put ref. It's not true. It should be like \"if i need to forward ref (maybe by thirdparty library like mantine, they love to put ref to your custom components)\r\n\r\nDoes hono works correct? Yes no error runtime throws, code works fine. \r\nWhat my code fixes? \r\nTHIS:\r\n <img width=\"478\" alt=\"Screenshot 2024-05-18 at 16 41 02\" src=\"https://github.com/honojs/hono/assets/23248488/77fccfad-ee2e-4e97-84e0-43213434b6c7\">\r\n<img width=\"548\" alt=\"Screenshot 2024-05-18 at 16 41 07\" src=\"https://github.com/honojs/hono/assets/23248488/32725d9e-3219-4d19-9e7f-a3b2e2968e3c\">\r\n\r\ni have to always cover with ts expect error every time i use component that i need to forward ref.\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304119142},{"id":2304312039,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2717","title":"Use `navigator.userAgent` to determine the runtime","body":"### What is the feature you are proposing?\n\nThis is not a new feature. Refactoring mater. Currently, `getRuntimeKey()` in `hono/adapter` determines the runtime by checking the `global` object like the following:\r\n\r\n```ts\r\nif (typeof global?.WebSocketPair === 'function') {\r\n  return 'workerd'\r\n}\r\n```\r\n\r\nBut, I noticed that we can use `navigator.userAgent` instead of it. Context: https://x.com/jasnell/status/1791106278103879835\r\n\r\nChecking `navigator.userAgent` is better than `global?.WebSocketPair`.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304312039},{"id":2304313470,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2718","title":"Add \"Author should include JSDoc\" to PR template","body":"### What is the feature you are proposing?\n\nContext: https://github.com/honojs/hono/pull/2615#issuecomment-2114090960\r\n\r\n> I'm thinking we should improve the PR template to tell every PR that adding a new feature should add TSDoc/JSDoc (if it's necessary) @yusukebe This way we can slowly migrate codebase to use TSDoc/JSDoc","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304313470},{"id":2304321021,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2719","title":"RPC supports middleware responses","body":"### What is the feature you are proposing?\n\nCurrently, the RPC mode does not support middleware response. The client can't handle the response from the middleware:\r\n\r\n![CleanShot 2024-05-19 at 06 46 01@2x](https://github.com/honojs/hono/assets/10682/cc9793c9-77c1-4cce-8561-1d113bd02d9c)\r\n\r\nI'm not 100% sure, but perhaps we can implement it by modifying `types.ts`:\r\n\r\n```diff\r\ndiff --git a/src/types.ts b/src/types.ts\r\nindex 3c7a53d..5e93fc1 100644\r\n--- a/src/types.ts\r\n+++ b/src/types.ts\r\n@@ -190,13 +190,22 @@ export interface HandlerInterface<\r\n     I3 extends Input = I & I2,\r\n     E2 extends Env = E,\r\n     E3 extends Env = E,\r\n-    E4 extends Env = IntersectNonAnyTypes<[E, E2, E3]>\r\n+    E4 extends Env = IntersectNonAnyTypes<[E, E2, E3]>,\r\n+    // Response from Middleware\r\n+    RM1 extends HandlerResponse<any> = any,\r\n+    RM2 extends HandlerResponse<any> = any\r\n   >(\r\n     path: P,\r\n-    ...handlers: [H<E2, MergedPath, I>, H<E3, MergedPath, I2>, H<E4, MergedPath, I3, R>]\r\n+    ...handlers: [H<E2, MergedPath, I, RM1>, H<E3, MergedPath, I2, RM2>, H<E4, MergedPath, I3, R>]\r\n   ): Hono<\r\n     IntersectNonAnyTypes<[E, E2, E3, E4]>,\r\n-    S & ToSchema<M, MergePath<BasePath, P>, I3, MergeTypedResponse<R>>,\r\n+    S &\r\n+      ToSchema<\r\n+        M,\r\n+        MergePath<BasePath, P>,\r\n+        I3,\r\n+        MergeTypedResponse<R> | MergeTypedResponse<RM1> | MergeTypedResponse<RM2>\r\n+      >,\r\n     BasePath\r\n   >\r\n```\r\n\r\n![CleanShot 2024-05-19 at 06 48 11@2x](https://github.com/honojs/hono/assets/10682/3dc0f023-fe2d-4375-a414-ff22f0e6d6bc)\r\n\r\nIt will be worth implementing, though the code will be very long.\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304321021},{"id":2304722035,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2723","title":"hono/aws-lambda + @hono/graphql-server GET not working!","body":"### What version of Hono are you using?\r\n\r\n4.3.7\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nLambda\r\n\r\n### What steps can reproduce the bug?\r\n\r\nAny idea why the GET method doesn't work?\r\n\r\n```ts\r\nimport rootResolver from \"./resolvers/resolvers\"\r\nimport { GraphQLFileLoader } from \"@graphql-tools/graphql-file-loader\"\r\nimport { loadSchemaSync } from \"@graphql-tools/load\"\r\nimport { addResolversToSchema } from \"@graphql-tools/schema\"\r\nimport { graphqlServer } from \"@hono/graphql-server\"\r\nimport { serve } from \"@hono/node-server\"\r\nimport { Hono } from \"hono\"\r\nimport { handle } from \"hono/aws-lambda\"\r\nimport { compress } from \"hono/compress\"\r\nimport { cors } from \"hono/cors\"\r\nimport { logger } from \"hono/logger\"\r\nimport { prettyJSON } from \"hono/pretty-json\"\r\nimport path from \"path\"\r\n\r\nconst app = new Hono()\r\n\r\napp.use(logger())\r\napp.use(cors())\r\napp.use(compress())\r\napp.use(prettyJSON())\r\n\r\nconst schemaPath = path.join(__dirname, \"schemas/schema.graphql\")\r\n\r\nconst schema = loadSchemaSync(schemaPath, {\r\n  loaders: [new GraphQLFileLoader()],\r\n})\r\n\r\nconst schemaWithResolvers = addResolversToSchema({\r\n  schema,\r\n  resolvers: rootResolver,\r\n})\r\n\r\napp.use(\r\n  \"/graphql\",\r\n  graphqlServer({\r\n    schema: schemaWithResolvers,\r\n  }),\r\n)\r\n\r\nif (process.env.AWS_LAMBDA_FUNCTION_NAME) {\r\n  console.log(\"Running in AWS Lambda environment.\")\r\n  exports.handler = handle(app)\r\n} else {\r\n  console.log(\"Server is running on http://localhost:3000\")\r\n  serve(app)\r\n}\r\n\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n![image](https://github.com/honojs/hono/assets/121470728/4c2a348c-513f-4403-829f-79484b59d524)\r\n\r\n\r\n### What do you see instead?\r\n\r\n\r\n![image](https://github.com/honojs/hono/assets/121470728/01cbbbfc-4d01-4ba9-821a-1c71c8f3d604)\r\n\r\n![image](https://github.com/honojs/hono/assets/121470728/c49d5a1f-6ccb-47b3-8b83-bf35a8dc95be)\r\n\r\n### Additional information\r\n\r\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304722035},{"id":2304787728,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2725","title":"Generated nonce for secure headers middleware uses NodeJS Buffer API","body":"### What is the feature you are proposing?\r\n\r\nI would like to use the secure headers NONCE value using only web platform APIs. It currently uses `Buffer.from()` to convert the data to base64.\r\n\r\n- https://github.com/honojs/hono/pull/2577\r\n- https://github.com/honojs/hono/blob/v4.3.8/src/middleware/secure-headers/index.ts#L115\r\n\r\nWith Cloudflare Workers, that requires enabling nodejs_compat. \r\n\r\noslo.js contains an alternate implementation that does not require NodeJS APIs. It works for me, but I can understand you might not want to add a new dependency.\r\n\r\n- https://oslo.js.org/reference/encoding/base64\r\n- https://github.com/pilcrowOnPaper/oslo/blob/main/src/encoding/base64.ts\r\n\r\n```\r\nimport { base64 } from \"oslo/encoding\"\r\n\r\nconst generateNonce = () => {\r\n  const buffer = new Uint8Array(16)\r\n  crypto.getRandomValues(buffer)\r\n  return base64.encode(buffer)\r\n}\r\n```\r\n\r\nIt may be possible to use a different Buffer or base64 polyfill.","state":"closed","labels":"[\"enhancement\",\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2304787728},{"id":2305431761,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2726","title":"RFC(adapter/aws-lambda): generalize `LambdaEvent`, `EventProcessor`","body":"Resolves #2723 - Edit: unsure, see https://github.com/honojs/hono/pull/2726#issuecomment-2120316641\r\n\r\nLambda's event could come from any source, e.g: manual invokations, AWS triggers like S3, EventBridge, etc. So it should have the type of `unknown`\r\n\r\nThis PR generalizes `EventProcessor` to accept an `unknown` event, with the old processor logic for \"Request\"-based event sources moved to `RequestEventProcessor`\r\n\r\nBecause the processor's logic was moved to a different file, for easier reviewing what have really changed, the maintainer could check specifically the commit: [fix: generalize LambdaEvent](https://github.com/honojs/hono/commit/9c489bf6a51cee03fe380656e4aa5f151cd5bb61)\r\n\r\n---\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2305431761},{"id":2306357561,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2751","title":"feat(aws-lambda): add support for alb multiValueQueryStringParameters","body":"When working on #2626, I realized that when `multiValueHeaders` is enabled, the query string parameters are passed as an array as well. More info : https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html#multi-value-headers\r\n\r\n> If you enable multi-value headers, the load balancer uses both key values sent by the client and sends you an event that includes query string parameters using multiValueQueryStringParameters. For example:\r\n`\"multiValueQueryStringParameters\": { \"myKey\": [\"val1\", \"val2\"] },`\r\n\r\nThis PR adds support for `multiValueQueryStringParameters` when it's available on the event\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2306357561},{"id":2306995789,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2752","title":"fix(factory): export `CreateHandlersInterface`","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2306995789},{"id":2308125428,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2756","title":"feat(jsx/dom): improve compatibility with React - The 2024 May Update","body":"### Added hook\r\n\r\n#### useInsertionEffect\r\n\r\n`useInsertionEffect` is implemented.\r\nhttps://ja.react.dev/reference/react/useInsertionEffect\r\n\r\n### Fixed Features\r\n\r\n#### createPortal\r\n\r\nWhen `createPortal` was called repeatedly in the same context, the DOM was not updated correctly.\r\nfixed in 8974135e400cd0f8d1e03b8d623a6dd05f841dc3.\r\n\r\n#### Update when `key` attribute is not specified\r\n\r\nAdjusted the rules for finding old elements when the key attribute is not specified so that the behavior is more like React. efb876e8725c70e81183de1817d0b8167aeaada8\r\n\r\n#### Attribute name for SVGElement\r\n\r\nSVGElement has a variety of attribute names, some are camel cases, some are kebab cases. So far, we have not converted to Kebab case, but now we convert to Kebab case as well as React. a036181677a1e6d3611f6d10323e9c4c57d2bb9b\r\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\r\n\r\n#### Multiple uses of children\r\n\r\nIt did not work correctly when children were used multiple times within a single component, as in the following test case, which has been fixed.\r\nhttps://github.com/usualoma/hono/blob/8f6639f218c768beae414a78d13271d86e6007b5/src/jsx/dom/index.test.tsx#L439-L444\r\n\r\nb19749bb29a620057a975cf66a240fa6f366ce9d\r\n\r\n### Cautions for updating\r\n\r\nI don't think there is a breaking change since it is the addition of one hook and a minor bug fix.  However, for 8974135e400cd0f8d1e03b8d623a6dd05f841dc3, there is a slight possibility that \"previously the bug resulted in the expected result, but the correction results in an unexpected result\". Therefore, I think this should be in the minor release, not in the patch release.\r\n\r\n### What did I use to verify?\r\n\r\nhttps://ui.shadcn.com/docs/components/toast\r\nhttps://ui.shadcn.com/docs/components/tooltip\r\n\r\nThese two UI components were verified in the following repositories\r\n\r\nhttps://github.com/usualoma/hono-react-compat-demo\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2308125428},{"id":2308487560,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2757","title":"attachReactJsxNode convenience feature to help injecting React components in the \"faked/compatibility\" react JSX","body":"### What is the feature you are proposing?\n\n[#2508](https://github.com/honojs/hono/issues/2508)\r\n\r\n### Feature/Rationale\r\n\r\n`hono/jsx/dom` in many cases now allows for interoperation with React UI libraries / components (guests) without actually running / mounting a real React renderer or explicitly wrapping user code in react-renderer middleware. However additional code/method sugar around in-place rendering of such guest React components might help code logic / DX.\r\n\r\n### Example of usage\r\n\r\nWe could take a React React component from shadcn or Tamagui or similar like: \r\nhttps://ui.shadcn.com/docs/components/tooltip\r\nand wrap it into a hono/honox (island) custom component like so (the styling issues are omitted here):\r\n```javascript\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger,} \r\nfrom '@/components/ui/tooltip'\r\nimport { attachReactJsxNode } from 'hono/jsx/dom'\r\n\r\nexport default function TtDemo (/* props/children in case of a button/etc */) {\r\n\r\n  const tt = \r\n    <TooltipProvider>\r\n      <Tooltip>\r\n        <TooltipTrigger>Hover</TooltipTrigger>\r\n        <TooltipContent>\r\n          <p>Add to library</p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </TooltipProvider>\r\n\r\n  return attachReactJsxNode(tt)  // children are handled in the JSX above\r\n}\r\n\r\n// On the higher level then: <><TtDemo /></> OR <MyTamaguiButton children attribs /> ...\r\n```\r\n(Also works with a simple Tamagui button as of 240520)\r\n\r\n### Reference implementation code of the idea\r\n```javascript\r\nimport { useEffect } from 'hono/jsx'\r\nimport { render } from 'hono/jsx/dom'\r\n// import { v4 as uuidv4 } from 'uuid'\r\n// import { nanoid } from 'nanoid/non-secure';\r\n\r\nexport function attachReactJsxNode (\r\n  jsxNode: JSX.Element  // shall come from island or an other \"browser-time\" component (?) *\r\n) {\r\n  const mountPointId = _randomId()   // uuidv4() / nanoid()\r\n\r\n  useEffect(() => {\r\n    render(jsxNode, document.getElementById(mountPointId)!)\r\n  }, [])\r\n\r\n  return <span id={mountPointId} style={{display:'content'}} />\r\n}\r\n\r\n// if no random id lib used, then:\r\nfunction _randomId () { return Math.random().toString(36).replace(/^0\\./, '_') }\r\n\r\n```\r\nNote: Children are handled in the ingress JSX\r\n\r\nThe above sample implementation code works. The actual implementation might better utilize the hono/useEffect internals or other dom lifecycle related internals.\r\n\r\n*Please extend with the SSR/SSG aspects. \r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2308487560},{"id":2308495829,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2758","title":"`getPath` does not work with grouped routes","body":"### What version of Hono are you using?\n\n4.3.9\n\n### What runtime/platform is your app running on?\n\nBun & Deno\n\n### What steps can reproduce the bug?\n\nI have created a basic reproducible sandbox to demonstrate the issue using Deno Deploy: https://dash.deno.com/playground/hono-grouping-getpath-bug.\r\n\r\n## Works\r\n\r\n```ts\r\nimport { Hono } from 'https://deno.land/x/hono@v4.3.9/mod.ts';\r\n\r\nconst groupApp = new Hono().get('/:foo/:bar', (c) => c.json({\r\n\tok: true,\r\n\tparams: c.req.param()\r\n}));\r\n\r\nconst app = new Hono({\r\n\t// Adding the path override at the top level works\r\n\tgetPath: (req) => new URL(decodeURIComponent(req.url)).pathname,\r\n})\r\n\t.get('/', (c) => c.json({ ok: true, }))\r\n\t.route('/', groupApp);\r\n\r\nDeno.serve(app.fetch);\r\n```\r\n\r\n### Does not work\r\n\r\n```ts\r\nimport { Hono } from 'https://deno.land/x/hono@v4.3.9/mod.ts';\r\n\r\nconst groupApp = new Hono({\r\n\t// But if you try and override / modify the path in a grouped route it doesn't work\r\n\tgetPath: (req) => new URL(decodeURIComponent(req.url)).pathname\r\n})\r\n.get('/:foo/:bar', (c) => c.json({\r\n\tok: true,\r\n\tparams: c.req.param()\r\n}))\r\n\r\nconst app = new Hono()\r\n  .get('/', (c) => c.json({ ok: true, }))\r\n  .route('/', groupApp);\r\n\r\nDeno.serve(app.fetch);\r\n```\r\n\r\nIn summary: If you try and use `getPath` inside of a nested or grouped route, the mutation / path override does not seem to be applied.\r\n\r\nThe context here is that this is a URL that is hit by the npm CLI so all URL's are URI encoded & this `getPath` will decode them for Hono to use normally.\n\n### What is the expected behavior?\n\nIdeally `getPath` should apply the path modification / override at all levels, not just the top.\r\n\r\nThe alternative here would be use some kind of middleware but I think it would be better to keep with the built-ins where possible, which in this case is `getPath`.\n\n### What do you see instead?\n\nIf you try to navigate to `/foo%2fbar` or any other URI encoded URL it will just return a 404 as the expected path does not exist.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2308495829},{"id":2309297600,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2759","title":"Middleware is not properly isolated when multiple routes share the same path","body":"### What version of Hono are you using?\n\n4.3.9\n\n### What runtime/platform is your app running on?\n\nBun\n\n### What steps can reproduce the bug?\n\nMiddleware does not have proper route isolation when paths are shared leading to extra executions and new types of bugs.\r\n\r\nGiven this example code...\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport { logger } from 'hono/logger';\r\n\r\nconst r1 = new Hono()\r\n  .use(async (_, next) => {\r\n    console.log('r1 start')\r\n    await next()\r\n    console.log('r1 end')\r\n  }).\r\n  get(\"/test\", (c) => c.json({ message: \"get\" }));\r\n\r\nconst r2 = new Hono()\r\n  .use(async (_, next) => {\r\n    console.log('r2 start')\r\n    await next()\r\n    console.log('r2 end')\r\n  }).post(\"/test\", (c) => c.json({ message: \"post\" }));\r\n\r\nconst r3 = new Hono()\r\n  .use(async (_, next) => {\r\n    console.log('r3 start')\r\n    await next()\r\n    console.log('r3 end')\r\n  }).put(\"/test\", (c) => c.json({ message: \"put\" }));\r\n\r\nconst app = new Hono()\r\n  .use(logger())\r\n  .route(\"/\", r1)\r\n  .route(\"/\", r2)\r\n  .route(\"/\", r3);\r\n\r\nexport default app\r\n```\n\n### What is the expected behavior?\n\nWhen calling the `GET` endpoint, followed by the `POST` endpoint, and then followed by the `PUT` endpoint, I would expect:\r\n\r\n- middleware for `r1` runs on `r1` route\r\n- middleware for `r2` runs on `r2` route\r\n- middleware for `r3` runs on `r3` route\r\n\n\n### What do you see instead?\n\nInstead, I see...\r\n- the middleware for `r` running on the `r1` endpoint\r\n- the middleware for `r1` & `r2` running on the `r2` endpoint\r\n- the middleware for `r1` & `r2` & `r3` running on the `r3` endpoint\r\n\r\n```\r\n  <-- GET /test\r\nr1 start\r\nr1 end\r\n  --> GET /test 200 1ms\r\n  <-- GET /test\r\nr1 start\r\nr1 end\r\n  --> GET /test 200 0ms\r\n  <-- POST /test\r\nr1 start\r\nr2 start\r\nr2 end\r\nr1 end\r\n  --> POST /test 200 0ms\r\n  <-- PUT /test\r\nr1 start\r\nr2 start\r\nr3 start\r\nr3 end\r\nr2 end\r\nr1 end\r\n  --> PUT /test 200 0ms\r\n```\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2309297600},{"id":2309310759,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2760","title":"Access path parameters from middleware","body":"### What is the feature you are proposing?\n\nI have a use-case which requires knowing a route's path parameters from within middleware.\r\n\r\nGiven an app like this:\r\n```typescript\r\nconst app = new Hono()\r\n  .use(middleware())\r\n  .get(\"/api/users/:userId/posts/:postId\", () => \"Future\");\r\n```\r\n\r\nI'd like to be able to easily access `userId` and `postId` from within `middleware` which is unaware of the route and parameters declared in the `get` (same problem in `OpenApiHono`, but maybe even worse). I don't need these values to be correctly typed - string is fine - but I do want to easily grab them.\r\n\r\nIdeally, I'd like to do this in middleware and have it work:\r\n```\r\nconst { userId, postId } = c.req.param();\r\n```\r\n\r\nI can write that today, but it does not work (at least with `OpenApiHono`).\r\n\r\nThat has led me to do nasty things with identifying the matched route and manually splitting strings to derive the parameters the hard way. (Mining the matched routes actually led me to find #2759.) I am sure there is a more elegant way to achieve this result and it seems like this would be a nice improvement to have in Hono.\r\n\r\n","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2309310759},{"id":2309464572,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2761","title":"fix(secure-header): Replace NodeJS Buffer API","body":"close: https://github.com/honojs/hono/issues/2725\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2309464572},{"id":2309471860,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2762","title":"Setting cookie with Max-Age > 400 days throws","body":"### What version of Hono are you using?\n\n4.3.9\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\nSet cookie with Max-Age > 400 days.\n\n### What is the expected behavior?\n\nCookie is set without throwing an error.\n\n### What do you see instead?\n\nAn error is thrown.\n\n### Additional information\n\nThis has caused an issue with [supabase's auth library](https://github.com/supabase/auth-helpers/pull/776) and could affect similar usage of cookies in other libs/projects.\r\n\r\nGiven the RFC is targeted primarily at User Agents ([_The user agent MUST limit the maximum value of the Max-Age attribute_](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-13#section-4.1.2.2-2)), I don't believe it's wise to force this onto users of Hono.","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2309471860},{"id":2310030692,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2763","title":"feat(etag): export `RETAINED_304_HEADERS`","body":"In this PR, I've done:\r\n\r\n* Export `RETAINED_304_HEADERS` to make **adding** the retained header value easy.\r\n* Add the test for retained headers.\r\n* Refactor the tests. Removed `beforeEach` since the scope is not clear.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2310030692},{"id":2310424991,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2766","title":"LambdaContext and LambdaEvent bindings not working","body":"### What version of Hono are you using?\n\n4.3.7\n\n### What runtime/platform is your app running on?\n\nAWS Lambda\n\n### What steps can reproduce the bug?\n\nFollowed the \"Access AWS Lambda Object\" instruction from the docs.\r\n\r\n```typescript\r\nimport { Hono } from 'hono'\r\nimport type { LambdaEvent, LambdaContext } from 'hono/aws-lambda'\r\nimport { handle } from 'hono/aws-lambda'\r\n\r\ntype Bindings = {\r\n  event: LambdaEvent\r\n  context: LambdaContext \r\n}\r\n\r\nconst app = new Hono<{ Bindings: Bindings }>()\r\n\r\napp.get('/aws-lambda-info/', (c) => {\r\n  return c.json({\r\n      isBase64Encoded: c.env.event.isBase64Encoded,\r\n      awsRequestId: c.env.context.awsRequestId\r\n  })\r\n})\r\n\r\nexport const handler = handle(app)\r\n```\n\n### What is the expected behavior?\n\nI should be able to get the values for `isBase64Encoded` and `awsRequestId`.\n\n### What do you see instead?\n\nI'm getting `undefined` for both properties.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2310424991},{"id":2310762875,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2767","title":"fix(http-exception): prioritize the status code","body":"Fixes #2707\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2310762875},{"id":2311452385,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2769","title":"Next for `v4.4.0`","body":"For the `v4.4.0`.","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2311452385},{"id":2311723242,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2771","title":"feat(utils): specify detailed return type for parseBody","body":"### What is this?\r\n\r\nMore restrictive on the type of value returned from `parseBody()`.\r\n\r\n```ts\r\nconst value = (await parseBody(req))['key'] // => string | File\r\nconst maybeArray = (await parseBody(req, {all: true}))['key'] // => string | File | (string | File)[]\r\nconst maybeObject = (await parseBody(req, {dot: true}))['key'] // => string | File | Object\r\n```\r\n\r\n### Specification Changes\r\n\r\nIn v4.3.x, BodyData was defined as follows\r\n\r\nhttps://github.com/honojs/hono/blob/75a7a09fc548da2a1a8f35431c456922db7d6c76/src/utils/body.ts#L3\r\n\r\nFor applications using it directly, this change results in the following (`(string | File)[]` is no longer included)\r\n\r\n```ts\r\nconst data: BodyData = {} // means Record<string, string | File>\r\n```\r\n\r\nTo get the same result as in v4.3.x, you need to do the following.\r\n\r\n```ts\r\nconst data: BodyData<{all: true}> = {}\r\n```\r\n\r\nAlthough there are some changes from v4.3.x as described above, I think it is useful to restrict the type of `parseBody()`, so I think it is better to include this change.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2311723242},{"id":2312098422,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2772","title":"Update ESLint rules","body":"### What is the feature you are proposing?\n\nI'll do it later!","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2312098422},{"id":2312222521,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2773","title":"refactor(cloudflare-workers): remove `@cloudflare/workers-types`","body":"This PR removes `@cloudflare/workers-types` from the dev dependencies.\r\n\r\nIt is used for the serve static feature which is deperecated. And used in the `src/adapter/cloudflare-workers/websocket.ts`  internally. I think we can remove it.\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[\"v4.4\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2312222521},{"id":2312948402,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2774","title":"adding 'px' in css variable automatically ","body":"### What version of Hono are you using?\r\n\r\n4.0.9\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode.js\r\n\r\n### What steps can reproduce the bug?\r\n\r\ncreate a basic layout file and generating tiles and I want to change diffrent background color using hue property as a variable but when I run and see the element panel; it change hue value from number to string and sppend px behind it. this is trange.\r\n\r\nhere is basic code\r\n\r\n### package.json \r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"dev\": \"tsx watch src/index.tsx\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@hono/node-server\": \"^1.8.2\",\r\n    \"@xkeshav/alphabet\": \"^1.2.1\",\r\n    \"hono\": \"^4.0.9\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\": \"^20.11.17\",\r\n    \"tsx\": \"^3.12.2\"\r\n  }\r\n}\r\n\r\n```\r\n\r\n### index.tsx\r\n\r\n```tsx\r\nimport { serve } from '@hono/node-server';\r\nimport { Hono } from 'hono';\r\nimport { showRoutes } from 'hono/dev';\r\nimport { logger } from 'hono/logger';\r\nimport { Alphabet } from './Alphabet';\r\n\r\nimport { alphabet } from '@xkeshav/alphabet'; \r\n\r\n// above return  ['A', 'B', .... 'Z'] \r\n\r\nconst app = new Hono() // .basePath('/api/v1/');\r\n\r\napp.use(logger())\r\n\r\napp.get('/', (c) => {\r\n  return c.html(\r\n  <div>\r\n    <a href=\"/alphabet\">Alphabet</a>\r\n  </div>\r\n  )\r\n})\r\n\r\napp.get('/alphabet', (c) => {\r\n  return c.html(<Alphabet list={alphabet}/>)\r\n});\r\n\r\napp.onError((err, c) => {\r\n  console.error(`${err}`)\r\n  return c.text('Custom Error Message', 500)\r\n})\r\n\r\n\r\nconst port = 3000\r\nconsole.log(`Server is running on port ${port}`);\r\n\r\nshowRoutes(app);\r\n\r\nserve({\r\n  fetch: app.fetch,\r\n  port\r\n})\r\n```\r\n\r\n### Layout.tsx\r\n\r\n```tsx\r\nimport { Style, css } from 'hono/css';\r\nimport { FC } from 'hono/jsx';\r\n\r\nexport const Layout: FC = (props) =>  (\r\n    <html>\r\n      <head>\r\n     <Style>{\r\n\t\t\t\tcss`\r\n        @property --hue {\r\n          syntax: \"<number>\";\r\n          inherits: true;\r\n          initial-value: 10;\r\n        }\r\n          html {\r\n            font-family: Arial, Helvetica, sans-serif;\r\n          }\r\n\t\t\t\t\t:root {\r\n\t\t\t\t\t\t--hue: 10;\r\n\t\t\t\t\t}\r\n        `}\r\n\t\t\t\t</Style>\r\n\t\t\t\t</head>\r\n      <body>{props.children}</body>\r\n    </html>\r\n  );\r\n\r\n```\r\n\r\n### Alphabet.tsx\r\n\r\n```tsx\r\nimport { css } from 'hono/css';\r\nimport { FC } from 'hono/jsx';\r\nimport { Layout } from './Layout';\r\n\r\nconst parentContainer = css`\r\n  display:grid;\r\n  grid-gap: 4px;\r\n  grid-template-columns: repeat(5,1fr);\r\n`\r\nconst itemClass = css`\r\n  display: grid;\r\n  height: 10rem;\r\n  color: var(--text, white);\r\n  background-color: hwb(var(--hue) 0% 0%);\r\n  place-content: center;\r\n  font-size: 4rem;\r\n}\r\n`\r\nconst Alphabet: FC<{ list: string[] }> = ({ list }) => (\r\n  <Layout>\r\n    <h1>Alphabets</h1>\r\n    <div class={parentContainer}>\r\n      {list.map(((item, id) => <div class={itemClass} style={{ \"--hue\": id*10 + 20, \"--text\": id < 20 ? '#000' : '#FFF' }}>{item}</div>))}\r\n    </div>\r\n  </Layout>\r\n);\r\n\r\n\r\nexport { Alphabet };\r\n```\r\n\r\n![Screenshot from 2024-05-23 18-56-02](https://github.com/honojs/hono/assets/415219/0cf487f0-6335-41b4-b8bd-9cfbf2c1ea60)\r\n\r\nchecking in Ubuntu 24.04 with firefox v 126.0  and chrome v 124.x browser\r\n\r\n### What is the expected behavior?\r\n\r\nevery tile must have diffrent color as per changed hue and it was working earlier (checked in non ubuntu system)  but suddenly stopped working \r\n\r\n### What do you see instead?\r\n\r\nall Tile have same color because the varibel --hue assigned a string value \r\n\r\n### Additional information\r\n\r\n in chrome text color changed as per logic  but background remain same while in firefox all tile have same color and background-color","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2312948402},{"id":2313051726,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2775","title":"fix(middleware/jwt): fix incorrect assumption in jwt impl","body":"### The author should do the following, if applicable\r\n\r\nPlease see https://discord.com/channels/595317990191398933/1243024990652207115/1243024990652207115 (in the cloudflare discord)\r\n\r\n**THIS WILL BREAK PRODUCTION**\r\n\r\nIn the docs it says\r\n\r\n```ts\r\napp.use(\r\n  '/auth/*',\r\n  jwt({\r\n    secret: 'it-is-very-secret',\r\n  })\r\n)\r\napp.get('/auth/page', (c) => {\r\n  return c.text('You are authorized')\r\n})\r\n```\r\n\r\nrealalitically code in production will look more like\r\n\r\n```ts\r\napp.use(\r\n  '/auth/*',\r\n  jwt({\r\n    secret: process.env.SECRET,\r\n  })\r\n)\r\napp.get('/auth/page', (c) => {\r\n  return c.text('You are authorized')\r\n})\r\n```\r\n\r\nhowever, if this app.use is at the top level, in some instances in cloudflare process.env can be undefined. Nobody noticed this, because the code failed to check if it was actually defined.\r\n\r\nedit: another solution would be to move this check inside the return callback, but this means that every API call it would run the getter on `process.env` which would make it susceptible to runtime manipulation. \r\n\r\nThough actually if my theory that this is an issue is correct, in its current impl where the check is running before the callback is constructed, it is still vulnerable to runtime manipulation without reruning the check because it never does `let secret = options.secret` so if you could modify the value of secret (eg if it is a reference to process.env.secret and you modify it elsewhere) but actually, I think I'm wrong because when you construct an object like `let obj = { secret: process.env.SECRET }`, changing process.env wouldn't have an impact because when SECRET is accessed thats no longer a reference type, thats a copy. \r\n\r\nHOWEVER if you access `process.env.SECRET` every single request, like when I proposed\r\n\r\n> edit: another solution would be to move this\r\n\r\nit would hit the ref type every single request, so that would make it a vuln\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2313051726},{"id":2314122267,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2778","title":"CloudFrontResult needs to be exported?","body":"### What version of Hono are you using?\n\n4.3.10\n\n### What runtime/platform is your app running on?\n\nLambda@Edge\n\n### What steps can reproduce the bug?\n\nThe linter is failing just following the tutorial. It's having an issue with the return type of the handle function (CloudFrontResult).\r\n\r\n<img width=\"936\" alt=\"Screenshot 2024-05-23 at 6 22 16 PM\" src=\"https://github.com/honojs/hono/assets/2498495/fbec96d6-9d5a-43b7-ac9a-d1bef399992a\">\r\n\r\nI think CloudFrontResult may just need to be exported.\n\n### What is the expected behavior?\n\nNo lint errors from the basic tutorial.\n\n### What do you see instead?\n\nLint error on handle function.\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2314122267},{"id":2314204662,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2779","title":"Remove `honojs/hono-minimal`","body":"### What is the feature you are proposing?\n\nWe have to remove the [honojs/hono-minimal](https://github.com/honojs/hono-minimal) project. It's no longer maintained and it will confuse the beginner for Hono.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2314204662},{"id":2314902563,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2780","title":"refactor(request): show user-friendly type for `c.req.param()`","body":"### Before\r\n\r\n![CleanShot 2024-05-24 at 17 46 31@2x](https://github.com/honojs/hono/assets/30598/c07387b6-86b3-43e1-8ea3-c23020688484)\r\n\r\n### After\r\n\r\n![CleanShot 2024-05-24 at 17 46 49@2x](https://github.com/honojs/hono/assets/30598/0f193def-901a-428f-bfb2-a8f582f97359)\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- <del>Add tests</del>\r\n    - The [tests](https://github.com/honojs/hono/blob/main/src/hono.test.ts#L2342-L2352) we have now are sufficient.\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2314902563},{"id":2315032964,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2781","title":"app.mount() removing the subpath from the request url is causing routing error in the inner routers","body":"### What version of Hono are you using?\n\n4.3.11\n\n### What runtime/platform is your app running on?\n\nCloudflare workers\n\n### What steps can reproduce the bug?\n\n`app.mount()` removes the subpath, and this is causing some issues in the inner mounted router.\r\nI think the current behavior works for almost all applications, and in my opinion it should continue to be the default behavior, but in some particular routers, like `itty-router-openapi` that auto generates some routes for users, is causing some routes to point to non-existing routes.\r\n\r\nThis issue was raised in itty-router-openapi [repo here](https://github.com/cloudflare/itty-router-openapi/issues/150) and the linked issue provides some more information on this.\r\n\r\n\r\nThis example uses itty-router-openapi, but it would work the same way in other routers\r\n```ts\r\nimport { OpenAPIRouter } from '@cloudflare/itty-router-openapi'\r\nimport { Hono } from 'hono'\r\n\r\nconst router = OpenAPIRouter()\r\nrouter.get('/example', (request) => new Response(request.url))\r\n\r\nconst app = new Hono()\r\napp.mount('/api', router.handle)\r\n\r\nexport default app\r\n```\r\n\n\n### What is the expected behavior?\n\nBefore this issue was raised in itty-router-openapi repository, i wasn't aware of this `request.url` change from Hono, so my expected behavior before knowing this, would be that a user would just define the `base` parameter in itty-router-openapi and everything would work correctly, like this example\r\n\r\n```ts\r\nimport { OpenAPIRouter } from '@cloudflare/itty-router-openapi'\r\nimport { Hono } from 'hono'\r\n\r\nconst router = OpenAPIRouter({ base: '/api' })\r\nrouter.get('/example', (request) => new Response(request.url))\r\n\r\nconst app = new Hono()\r\napp.mount('/api', router.handle)\r\n\r\nexport default app\r\n```\r\n\r\nIn this example, calling `http://localhost:8787/api/example` would print `http://localhost:8787/api/example`.\n\n### What do you see instead?\n\nRunning the script in the \"What steps can reproduce the bug\", then calling `http://localhost:8787/api/example` prints `http://localhost:8787/example`.\r\n\r\nAn example of the auto generated routes not working is to open this url `http://localhost:8787/api/docs` in the browser, that is trowing an error, because the lib expects the openapi spec to be an `/openapi.json` but it actually is in `/api/openapi.json` because of the url re-write.\n\n### Additional information\n\nI think that this should continue to be the default way of mounting other routers in Hono, as probably some routers don't support defining base paths and makes the developer experience better for users.\r\n\r\nMy initial suggestion was to add a parameter when calling the inner router in [this line](https://github.com/honojs/hono/blob/main/src/hono-base.ts#L275), and this would make \"it work\" for users, and users wouldn't need to change anything, then on itty-router-openapi side I could expect this new parameter and work around it.\r\nBut after talking to @yusukebe he suggested creating an additional option to disable this behavior, maybe something like this `app.mount('/api', router.handle, { subpathRewrite: false })`","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2315032964},{"id":2315138302,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2782","title":"fix(aws-lambda): Update handler.ts getQueryString","body":"Updated the getQueryString function to handle the case when both queryStringParameters and multiValueQueryStringParameters properties exists.","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2315138302},{"id":2315385568,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2783","title":"refactor(utils/body): minor cleanup","body":"Some minor changes I suggested @fzn0x in this #2675. He might have forgotten to include these\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2315385568},{"id":2316556785,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2785","title":"docs(readme): update the badges","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2316556785},{"id":2316561489,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2786","title":"chore(actions): update `on` condition for `publish-to-jsr`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2316561489},{"id":2316773159,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2787","title":"feat(middleware): Introduce IP Limit Middleware","body":"I created IP Limit Middleware.\r\n\r\nYou can limit request by IP Address.\r\n\r\nFor example, you can limit request, this server accepts local-only requests:\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { ipLimit } from 'hono/ip-limit'\r\nimport { getConnInfo } from 'hono/...'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', ipLimit(getConnInfo, {\r\n  deny: [],\r\n  allow: ['127.0.0.1', '::1']\r\n}))\r\napp.get('/', c => c.text('Hello world!'))\r\n```\r\n`deny` takes precedence over `allow`.\r\n\r\nRules supported some syntax:\r\n\r\n| Title | example of IPv4 | example of IPv6 |\r\n| --- | --- | --- |\r\n| static | `0.0.0.0` | `::1` |\r\n| CIDR | `192.168.2.1/24` | `abcd::ef01/64` |\r\n| Wildcard | `192.*.2.*` |  |\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2316773159},{"id":2316925203,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2788","title":"chore(deno): change path including deno_dist","body":"Fix path including deno_dist.\r\n`--unstable-sloppy-imports` flag is now required on benchmark due to jsr aliases.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2316925203},{"id":2316925287,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2789","title":"fix(middleware/jwt): typo","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2316925287},{"id":2317214493,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2790","title":"chore(lint): update eslint rules","body":"Updated ESLint rules regarding import styles:\r\n\r\n* Don't allow duplicate imports.\r\n* `sort-imports` - Set `ignoreMemberSort` `false`.\r\n* `import/consistent-type-specifier-style` - prefer \"top-level\" style.\r\n\r\nFixes #2772\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317214493},{"id":2317214895,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2791","title":"fix(client): allow multiple files on the same key in form","body":"In addition to the [#664](https://github.com/honojs/hono/issues/664), the client did not manage multiple files on a single key in FormData. It's quite the same code as `query`.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317214895},{"id":2317250680,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2792","title":"Missing pieces for React compatibility","body":"### What is the feature you are proposing?\n\n\r\n\r\n### version\r\n\r\nIn React we can get the version string as follows, but not in hono/jsx\r\n\r\n```ts\r\nimport { version } from 'react';\r\n```\r\n\r\nhttps://github.com/facebook/react/blob/main/packages/shared/ReactVersion.js#L15\r\n\r\n### react/dom/client\r\n\r\nThe createRoot and hydrateRoot APIs are not implemented in hono.\r\n\r\n```ts\r\nimport { createRoot, hydrateRoot } from 'react-dom/client';\r\n```","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317250680},{"id":2317257948,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2793","title":"fix(middleware): export variables type from each `index.ts`","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317257948},{"id":2317276059,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2794","title":"route/mount should also accept middlewares","body":"### What is the feature you are proposing?\n\nI had this\r\n\r\n```\r\napp\r\n  .route('/foo/', PageFoo)\r\n  .get('/protected', authMiddleware, (ctx) => ctx.text('protected', 200))\r\n```\r\n\r\nand then wanted to also protect `/foo/` by applying the `authMiddleware`. I assume this would work:\r\n\r\n```\r\napp\r\n  .route('/foo/', authMiddleware, PageFoo)\r\n  .get('/protected', authMiddleware, (ctx) => ctx.text('protected', 200))\r\n```\r\n\r\nbut it seems that's not the case.\r\n\r\nIMO `route` and `mount` (what's the difference?) should both accept middlewares.\r\n\r\nRight now this causes\r\n\r\n```\r\n88 |   route(path, app) {\r\n89 |     const subApp = this.basePath(path);\r\n90 |     if (!app) {\r\n91 |       return subApp;\r\n92 |     }\r\n93 |     app.routes.map((r) => {\r\n         ^\r\nTypeError: undefined is not an object (evaluating 'app.routes.map')\r\n```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317276059},{"id":2317410000,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2795","title":"feat(jsx/dom): introduce react-dom/client APIs and React.version","body":"Fixes #2792\r\n\r\n### version\r\n\r\nThere seems to be a library that does conditional branching on the major version number of `React.version`.\r\n\r\nThis is like a UserAgent of a web browser (e.g. Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537. 36), which is a string for compatibility and somewhat unpleasant to use, and we do not recommend its use, but if this improves compatibility, it should be added.\r\n\r\n### createRoot / hydrateRoot\r\n\r\nSome options are not yet supported, but they can be rendered in the way recommended by React since version 18, as shown in the following diff.\r\n\r\nhttps://github.com/usualoma/hono-react-compat-demo/commit/38773555179ef54f8564ca1963720ac16f720987\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317410000},{"id":2317486899,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2796","title":"docs: add module docs","body":"Added [module docs](https://jsr.io/docs/writing-docs#module-documentation) for all entry points.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317486899},{"id":2317616281,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2797","title":"fix(utils): remove limit of max-age","body":"see: https://github.com/honojs/hono/issues/2762\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317616281},{"id":2317635193,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2798","title":"fix(helper): fix bug of joinPaths","body":"### The author should do the following, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317635193},{"id":2317648929,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2799","title":"feat(context): c.redirect support punycode and URL object","body":"### The author should do the following, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317648929},{"id":2317655699,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2800","title":"refactor: change to short-hand","body":"For readability\r\nI don't change \"if syntax\" of \"return with handler syntax\" and \"assign syntax\".\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317655699},{"id":2317664701,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2801","title":"fix: remove any of .use","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317664701},{"id":2317671505,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2802","title":"fix(hono-base): remove any of .use","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [x] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317671505},{"id":2317730235,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2803","title":"docs(readme): update readme and `jsr.json`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2317730235},{"id":2318458750,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2805","title":"chore: update lockfile","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318458750},{"id":2318512996,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2806","title":"fix(hono-base): remove any of .use","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [x] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318512996},{"id":2318520003,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2807","title":"feat(middleware): Introduce IP Limit Middleware","body":"Recreated #2787\r\n***\r\nI created IP Limit Middleware.\r\n\r\nYou can limit request by IP Address.\r\n\r\nFor example, you can limit request, this server accepts local-only requests:\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { ipLimit } from 'hono/ip-limit'\r\nimport { getConnInfo } from 'hono/...'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', ipLimit(getConnInfo, {\r\n  deny: [],\r\n  allow: ['127.0.0.1', '::1']\r\n}))\r\napp.get('/', c => c.text('Hello world!'))\r\n```\r\n`deny` takes precedence over `allow`.\r\n\r\nRules supported some syntax:\r\n\r\n| Title | example of IPv4 | example of IPv6 |\r\n| --- | --- | --- |\r\n| static | `0.0.0.0` | `::1` |\r\n| CIDR | `192.168.2.1/24` | `abcd::ef01/64` |\r\n| Wildcard | `192.*.2.*` |  |\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318520003},{"id":2318527226,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2808","title":"feat(context): c.redirect support punycode and URL object","body":"### The author should do the following, if applicable\n\n- [x] Add tests\n- [x] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318527226},{"id":2318539237,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2809","title":"fix(helper/ssg): fix bug of joinPaths","body":"### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318539237},{"id":2318545340,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2810","title":"fix(utils): remove limit of max-age","body":"### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318545340},{"id":2318587606,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2811","title":"docs(jsdoc): add jsdoc of .route","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318587606},{"id":2318594564,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2812","title":"feat(bun): WebSocket helper supports that env be `{ server: server }`","body":"Resolves #2645 and #2696\r\n\r\nIn ConnInfo helper on Bun, you can give Hono env like `{ server: server }`.\r\nHowever WebSocket Helper can't receive `{ server: server }`, so I created this PR. WebSocket helper on Bun can receive like it if we merged this.\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318594564},{"id":2318599852,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2813","title":"feat(middleware): Introduce IP Limit Middleware","body":"Recreated #2807 \r\n***\r\n\r\nI created IP Limit Middleware.\r\n\r\nYou can limit request by IP Address.\r\n\r\nFor example, you can limit request, this server accepts local-only requests:\r\n```ts\r\nimport { Hono } from 'hono'\r\nimport { ipLimit } from 'hono/ip-limit'\r\nimport { getConnInfo } from 'hono/...'\r\n\r\nconst app = new Hono()\r\n\r\napp.use('*', ipLimit(getConnInfo, {\r\n  deny: [],\r\n  allow: ['127.0.0.1', '::1']\r\n}))\r\napp.get('/', c => c.text('Hello world!'))\r\n```\r\n`deny` takes precedence over `allow`.\r\n\r\nRules supported some syntax:\r\n\r\n| Title | example of IPv4 | example of IPv6 |\r\n| --- | --- | --- |\r\n| static | `0.0.0.0` | `::1` |\r\n| CIDR | `192.168.2.1/24` | `abcd::ef01/64` |\r\n| Wildcard | `192.*.2.*` |  |\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [ ] `bun denoify` to generate files for Deno\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318599852},{"id":2318612341,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2814","title":"docs(jsdoc): add jsdoc of .mount","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2318612341},{"id":2319149928,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2815","title":"refactor(pretty-json): remove useless condition","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319149928},{"id":2319409601,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2816","title":"Memory leak with `hono`, `@hono/node-server`, `@hono/graphql-server`","body":"### What version of Hono are you using?\r\n\r\n4.3.10\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNode\r\n\r\n### What steps can reproduce the bug?\r\n\r\n```js\r\nimport { Hono } from \"hono\";\r\nimport { serve } from \"@hono/node-server\";\r\nimport { graphqlServer } from \"@hono/graphql-server\";\r\nimport { buildSchema } from \"graphql\";\r\n\r\nsetInterval(() => {\r\n  const before = process.memoryUsage().heapUsed / 1024 / 1024;\r\n  global.gc?.();\r\n  const after = process.memoryUsage().heapUsed / 1024 / 1024;\r\n  console.log({ before: before.toFixed(2), after: after.toFixed(2) });\r\n}, 1_000);\r\n\r\nexport const app = new Hono();\r\n\r\nconst schema = buildSchema(`\r\ntype Query {\r\n  hello: String\r\n}\r\n`);\r\n\r\nconst rootResolver = (ctx) => {\r\n  return {\r\n    hello: () => \"Hello Hono!\",\r\n  };\r\n};\r\n\r\napp.use(\r\n  \"/graphql\",\r\n  graphqlServer({\r\n    schema,\r\n    rootResolver,\r\n  })\r\n);\r\n\r\nserve(app);\r\n```\r\n\r\n\r\n### What is the expected behavior?\r\n\r\n_No response_\r\n\r\n### What do you see instead?\r\n\r\nResult of running the server and then sending requests with autocannon after a few seconds:\r\n\r\n```sh\r\nautocannon -c 100 -d 10 -m POST -H \"Content-Type: application/json\" -b '{\"query\":\"{ hello }\"}' http://localhost:3000/graphql\r\n```\r\n\r\n```sh\r\n(base) kylescott@Kyles-MacBook-Pro-2 hono-node-repro % node --expose-gc index.js\r\n{ before: '8.86', after: '6.72' }\r\n{ before: '6.83', after: '6.75' }\r\n{ before: '6.77', after: '6.75' }\r\n{ before: '6.77', after: '6.75' }\r\n{ before: '6.82', after: '6.76' }\r\n{ before: '6.78', after: '6.76' }\r\n{ before: '6.83', after: '6.77' }\r\n{ before: '55.64', after: '37.63' }\r\n{ before: '153.87', after: '97.79' }\r\n{ before: '205.73', after: '152.70' }\r\n{ before: '262.65', after: '208.79' }\r\n{ before: '310.95', after: '259.03' }\r\n{ before: '355.99', after: '308.32' }\r\n{ before: '400.77', after: '354.94' }\r\n{ before: '444.92', after: '398.86' }\r\n{ before: '489.06', after: '443.80' }\r\n{ before: '523.01', after: '484.06' }\r\n{ before: '565.09', after: '523.40' }\r\n```\r\n\r\n### Additional information\r\n\r\nhttps://github.com/kyscott18/hono-node-mem-leak\r\n\r\nPretty sure the memory for the request body is what is being leaked, not sure if it is related to GraphQL at all. I was able to fix this issue locally by removing the call to `Readable.toWeb()` in this file. https://github.com/honojs/node-server/blob/main/src/request.ts#L67","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319409601},{"id":2319503078,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2817","title":"Add NestJS Hono Adapter","body":"### What is the feature you are proposing?\n\n# Hono Adapter for NestJs\r\n\r\nhttps://hono.dev\r\n\r\n<img src=\"https://img.itch.zone/aW1nLzY1ODIzMjcucG5n/315x250%23c/vBpQ2S.png\" width=\"60\">\r\n\r\nSimilar to https://docs.nestjs.com/techniques/performance#adapter\r\n\r\n## Reason\r\nIt would be amazing to have the choice for honojs in nestjs applications. Not only would it make hono more recognized in the JavaScript world, but also improve the NestJS ecosystem i believe.\r\n\r\n## Goal\r\n\r\nThe goal is to have a simple NestJS application adapter as we have for express and fastify. E.g.:\r\n\r\n```ts\r\nconst app = await NestFactory.create<NestFastifyApplication>(AppModule, new FastifyAdapter());\r\nawait app.listen(3000);\r\n```\r\n\r\nand the ideal equivalent:\r\n\r\n```ts\r\nconst app = await NestFactory.create<NestHonoApplication>(AppModule, new HonoAdapter());\r\nawait app.listen(3000);\r\n```\r\n\r\n## Ideas From\r\n\r\nUnfortunately, NestJS is not officially working on a Hono integration:\r\n\r\nhttps://github.com/nestjs/nest/issues/13013\r\n\r\nhttps://github.com/nestjs/nest/issues/13073#issuecomment-1902730322\r\n\r\nbut they are welcoming community contributions.\r\n\r\n## My attempt\r\nMy repo for testing, any help is appreciated: [https://github.com/drdreo/nest-hono-adapter](https://github.com/drdreo/nest-hono-adapter)\r\n\r\nI tried to get an adapter going but ran into roadblocks so i hope someone from here or the community can contribute and help me solve it. \r\n\r\n### Problems\r\n\r\nFor some reason, the response / hono context is not correctly propagated when calling the adapter methods.\r\nInstead, an async function is passed around, e.g. to the Nest `reply()`. Seems to be something like the `next()` handler\r\nfunction. I have also aligned to use the exact same underlying `http.server` as the express adapter with no luck.\r\n\r\n`getRequestHostname` and co. seem to get the correct HonoContext.\r\n\r\n\r\n","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319503078},{"id":2319701339,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2818","title":"documentation at https://hono.dev/guides/jsx seems out of date","body":"### What version of Hono are you using?\n\n4.2.4 I think.  you know the web just keeps getting wilder\n\n### What runtime/platform is your app running on?\n\ndeno\n\n### What steps can reproduce the bug?\n\nIf I use the the `jsx.tsx` from https://github.com/honojs/examples/blob/main/deno/jsx.tsx\r\n(and no compiler options in my `deno.jsonc`) things work.\r\n\r\nIf I add the second pragma suggested on https://hono.dev/guides/jsx like so:\r\n```\r\n/** @jsx jsx */\r\n/** @jsxImportSource hono/jsx */\r\n```\r\nthen deno errors on deno task dev:\r\n```\r\nerror: Relative import path \"hono/jsx/jsx-runtime\" not prefixed with / or ./ or ../\r\n    at file:///var/www/betatest.mydomain.com/html/deno_tsx_test.tsx:3:22\r\n```\r\n\r\nSo it looks like the example is right and the docs wrong.\r\n\r\nIf I use the the compiler configuration that the docs seem to be saying can be used instead of the pragmas I get a similar error but at a different location:\r\n```\r\nerror: Relative import path \"hono/jsx/jsx-runtime\" not prefixed with / or ./ or ../\r\n    at file:///var/www/betatest.mydomain.com/html/deno_tsx_test.tsx:1:1\r\n```\r\n\n\n### What is the expected behavior?\n\nThe docs should work like the example I think\n\n### What do you see instead?\n\nPlease see above\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319701339},{"id":2319822525,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2819","title":"serveStatic middleware fails","body":"### What version of Hono are you using?\n\n4.4.0\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nI have the following `serveStatic` configuration with a custom `root` and `rewriteRequestPath` options.\r\n```ts\r\napp.get(\r\n  \"*\",\r\n  serveStatic({\r\n    root,\r\n    rewriteRequestPath: (path: string) =>\r\n      normalizePath(path.substring(this.options.basePath.length)),\r\n  }),\r\n);\r\n```\n\n### What is the expected behavior?\n\nAfter upgrading to v4.4.0 I expect everything works as usual.\n\n### What do you see instead?\n\n<img width=\"1131\" alt=\"imaxe\" src=\"https://github.com/honojs/hono/assets/377873/86f28a45-eb13-4bc7-b933-cfc78ce09225\">\r\n\n\n### Additional information\n\nI didn't see anything relevant in the changelog, so I assumed nothing changed here.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319822525},{"id":2319895276,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2820","title":"docs(jsdoc): change jsdoc of .basePath","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319895276},{"id":2319898393,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2821","title":"docs(jsdoc): change jsdoc of .onError","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319898393},{"id":2319907200,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2822","title":"docs(jsdoc): change jsdoc of .notFound","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319907200},{"id":2319912281,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2823","title":"docs(jsdoc): change jsdoc of .fetch","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319912281},{"id":2319933118,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2824","title":"docs(jsdoc): change jsdoc of .request","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319933118},{"id":2319935619,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2825","title":"docs(jsdoc): change jsdoc of .fire","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319935619},{"id":2319937749,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2826","title":"docs(jsdoc): change jsdoc of hono-options","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319937749},{"id":2319946231,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2827","title":"docs(jsdoc): change jsdoc of http-exception","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319946231},{"id":2319957346,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2828","title":"refactor(aws-lambda): remove unused setHeadersToResult","body":"`setHeadersToResult` was added in https://github.com/honojs/hono/pull/2657 but seems not used.\r\n\r\n@yiss Please confirm it should be deleted or called.\r\nIf it should be called, I'll add tests and fix implementation.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319957346},{"id":2319957678,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2829","title":"docs(jsdoc): change jsdoc of hono-request","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319957678},{"id":2319961481,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2830","title":"docs(jsdoc): change jsdoc of context","body":"### The author should do the following, if applicable\n\n- [ ] Add tests\n- [ ] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319961481},{"id":2319970794,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2831","title":"refactor(aws-lambda): Object.hasOwn is recommended","body":"Refer. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\r\n\r\n\r\n> It is recommended over [Object.prototype.hasOwnProperty()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty) because it works for [null-prototype objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects) and with objects that have overridden the inherited hasOwnProperty() method. While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty() on an external object, Object.hasOwn() is more intuitive.\r\n\r\n`Object.hasOwn` is supported since Node.js v16.9.0 which is [the minimum supported Node.js version in AWS Lambda](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)\r\nAnd,  Hono also declares it requires Node.js v16+: \r\nhttps://github.com/honojs/hono/blob/dfbc6c47643e027af484cfc028050124a21d9158/package.json#L600\r\n\r\nSo I don't think this is going to be a breaking change for Hono+Lambda users\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319970794},{"id":2319996055,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2832","title":"bug: types broken after setting a basepath","body":"### What version of Hono are you using?\n\n4.4.0\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\nTypescript playground repro: [link](https://www.typescriptlang.org/play/?#code/JYWwDg9gTgLgBAbzgCQgOwnAvnAZlCEOAcgAt0JiBuAKFElkThgFMBnGAYQBtgW14OfIRLkMAelYdgaAObUaNceLgAVAJ5h2cAIZQWcAPIBpOAHdS-OBngBXNjNm64AIx1sWABR0xSNAMboHLpgYACMcAC81ixmKBQAFACUtIFowQS2rBHROqFhAHSyLDAJxOLArCBsxAA0umzqaP5wLZEAfK0FAFZs6AlIwAAmAFxwEVhJKTQwmgYAgvkaWlHMcxC4cJnZqUHwecA5zOxcvPwwADyL4css7Ql54dMAbhDDIYcFlSzVBQAkxVK0yUKlubF0+msEHgJnMljQcHsjmcbg83l8AT2ITAACZVmhYvEMMkCqivD5SGVxCB1GSwBTiNM0hkIFkWHjcqEcUUSlTvtU6g0mi02p1-D0+mgBnBhmM8ZNprMVtccbdVkqWBstqzWDjdul9mBgBzjhweHwBFcubd7o8cdNlHAnc6Xa63e7XQA9AD8NFe7wO3JpdIpXyqbH+gOStCAA)\n\n### What is the expected behavior?\n\nThere should be a way to create a typed testClient when using a basepath.\n\n### What do you see instead?\n\ntestClient types are broken when using a basepath.\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2319996055},{"id":2320031098,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2833","title":"refactor(helper/testing): remove some any of helper/testing","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320031098},{"id":2320090561,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2834","title":"fix(types): allow blank env","body":"Closes #2832 and improve types for handling blank input and blank schema\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320090561},{"id":2320101250,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2835","title":"Jsdoc on error","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320101250},{"id":2320102137,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2836","title":"docs(jsdoc): add jsdoc of some modules","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320102137},{"id":2320176397,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2837","title":"fix(middleware/body-limit): set default duplex option for readable stream","body":"Fixes #2627\r\n\r\nIn this case we do not need globalThis.Request anymore.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320176397},{"id":2320728228,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2839","title":"refactor(websocket): remove unused condition","body":"Looking at WSEvents type, we don't really need extra AND condition here, just make sure `undefined` is not invoked by specifying `?.()`\r\n```ts\r\n// EVENT is onOpen, onClose, onMessage, onError\r\n(property) WSEvents.EVENT?: ((evt: CloseEvent, ws: WSContext) => void) | undefined\r\n```\r\n\r\nAlso removes console logs in websocket test.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320728228},{"id":2320762105,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2840","title":"chore: Author should include JSDoc","body":"Closes #2718 \r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320762105},{"id":2320772163,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2841","title":"docs(src/*): Add TSDoc comments to improve code documentation","body":"Port of #2677 and better.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320772163},{"id":2320987174,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2842","title":"Fetch does not send headers, body ","body":"### What version of Hono are you using?\n\n4.1.5 4.4.0\n\n### What runtime/platform is your app running on?\n\nNode.js v20.13.1 aws lambda\n\n### What steps can reproduce the bug?\n\ncode snippet to reproduce and issue:\r\n\r\n```typescript\r\napp.post(\"/http-bin-post\", async (c) => {\r\n  console.log(\"--- hit /http-bin-post\");\r\n\r\n  const { code, scope, grant_type } = await c.req.parseBody();\r\n  const authorization = c.req.header(\"authorization\");\r\n\r\n  const headers = new Headers();\r\n  headers.append(\"content-type\", \"application/x-www-form-urlencoded\");\r\n  headers.append(\"authorization\", authorization as string);\r\n\r\n  const urlencoded = new URLSearchParams();\r\n  urlencoded.append(\"grant_type\", grant_type as string);\r\n  urlencoded.append(\"scope\", scope as string);\r\n  urlencoded.append(\"code\", code as string);\r\n\r\n  const response = await fetch(\"https://httpbin.org/post\", {\r\n    method: \"POST\",\r\n    headers: headers,\r\n    body: urlencoded,\r\n    redirect: \"follow\",\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  console.log(\"--- status\", response.status);\r\n  console.log(\"--- statusText\", response.statusText);\r\n\r\n  return c.json(data);\r\n});\r\n```\r\n\n\n### What is the expected behavior?\n\nwe expect fetch to correctly pass headers, body, etc.\r\n\r\nExpected response from httpbin:\r\n```json\r\n{\r\n    \"args\": {},\r\n    \"data\": \"\",\r\n    \"files\": {},\r\n    \"form\": {\r\n        \"code\": \"code_VALUE\",\r\n        \"grant_type\": \"grant_type_VALUE\",\r\n        \"scope\": \"scope_VALUE\"\r\n    },\r\n    \"headers\": {\r\n        \"Accept\": \"*/*\",\r\n        \"Accept-Encoding\": \"br, gzip, deflate\",\r\n        \"Accept-Language\": \"*\",\r\n        \"Authorization\": \"Bearer authorization\",\r\n        \"Content-Length\": \"60\",\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        \"Host\": \"httpbin.org\",\r\n        \"Sec-Fetch-Mode\": \"cors\",\r\n        \"User-Agent\": \"node\",\r\n       \"X-Amzn-Trace-Id\": \"Root=0-00000000-000000000000000000000000\"\r\n    },\r\n    \"json\": null,\r\n    \"origin\": \"11.111.11.111\",\r\n    \"url\": \"https://httpbin.org/post\"\r\n}\r\n```\n\n### What do you see instead?\n\nResponse from httpbin:\r\n```json\r\n{\r\n    \"args\": {},\r\n    \"headers\": {\r\n        \"Host\": \"httpbin.org\",\r\n        \"X-Amzn-Trace-Id\": \"Root=0-00000000-000000000000000000000000\"\r\n    },\r\n    \"origin\": \"1.111.111.111\",\r\n    \"url\": \"https://httpbin.org/post\"\r\n}\r\n```\n\n### Additional information\n\nWe can not reproduce this issue locally it is reproducible only in aws lambda. Interestingly, for the last few months, we have been using the version and everything was working correctly and suddenly a problem appeared. Axios library is working correctly.","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2320987174},{"id":2321260127,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2843","title":"New Event Emitter middleware","body":"Hi there, I have created Event Emitter functionality/middleware for Hono and have been using it in my projects for a while.\r\nIt works great so I wanted to contribute it to the Hono itself if you like it.\r\n\r\nSee usage bellow.\r\nFor more complete documentation: [https://github.com/DavidHavl/hono-event-emitter](https://github.com/DavidHavl/hono-event-emitter)\r\n\r\n\r\n## Usage\r\n\r\n```js\r\n// app.js\r\n\r\nimport { emitter } from 'hono-event-emitter'\r\nimport { Hono } from 'hono'\r\n\r\n// Define event handlers\r\nconst handlers = {\r\n  'todo:created': [\r\n    (payload, c) => { console.log('New todo created:', payload) }\r\n  ],\r\n  'foo': [\r\n    (payload) => { console.log('Foo:', payload) }\r\n  ]\r\n}\r\n\r\nconst app = new Hono()\r\n\r\n// Register the emitter middleware and provide it with the handlers\r\napp.use('*', emitter(handlers))\r\n\r\napp.post('/todo', async (c) => {\r\n  // ...\r\n  // The emitter is available under \"emitter\" key in the context. Use emit method to emit events\r\n  c.get('emitter').emit('foo', 42)\r\n  // You can also pass along the context\r\n  c.get('emitter').emit('todo:created', { todo, c })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\nYou can also subscribe to events inside middlewares or route handlers.\r\nThe emitter is available in the context as `emitter` key, and handlers (when using named functions) will only be subscribed to events once, even if the middleware is called multiple times.\r\n\r\n```js\r\n// Define event handler as named function\r\nconst todoCreatedHandler = ({ todo, c }) => {\r\n  console.log('New todo created:', todo)\r\n}\r\n// ...\r\napp.use((c) => {\r\n  // ...\r\n  // Subscribe to event\r\n  c.get('emitter').on('todo:created', todoCreatedHandler)\r\n})\r\n\r\napp.post('/todo', async (c) => {\r\n  // ...\r\n    // Emit event\r\n  c.get('emitter').emit('todo:created', { todo, c });\r\n})\r\n// ...\r\n```\r\n\r\n### Typescript\r\n\r\n```ts\r\n// app.ts\r\n\r\nimport { emitter, type Emitter, type EventHandlers } from 'hono-event-emitter'\r\nimport { Hono } from 'hono'\r\n\r\ntype Todo = {\r\n  id: string,\r\n  title: string,\r\n  completed: boolean\r\n}\r\n\r\ntype AvailableEvents = {\r\n  // event key: payload type\r\n  'todo:created': { todo: Todo, c: Context };\r\n  'todo:deleted': { id: string };\r\n  'foo': number;\r\n};\r\n\r\nconst handlers: EventHandlers<AvailableEvents> = {\r\n  'todo:deleted': [\r\n    (payload) => {} // payload will be inferred as { id: string }\r\n  ]\r\n}\r\n\r\nconst todoCreatedHandler = ({ todo: Todo, c: Context }) => {\r\n  // ...\r\n  console.log('New todo created:', todo)\r\n}\r\n\r\n// Initialize the app with emitter type\r\nconst app = new Hono<{ Variables: { emitter: Emitter<AvailableEvents> }}>()\r\n\r\n// Register the emitter middleware and provide it with the handlers\r\napp.use('*', emitter(handlers))\r\n\r\n// And/Or setup event listeners as \"named function\" inside middleware or route handler\r\napp.use((c) => {\r\n  c.get('emitter').on('todo:created', todoCreatedHandler)\r\n})\r\n\r\napp.post('/todo', async (c) => {\r\n  // ...\r\n  // Emit event and pass the payload (todo object) plus context\r\n  c.get('emitter').emit('todo:created', { todo, c })\r\n})\r\n\r\napp.delete('/todo/:id', async (c) => {\r\n  // ...\r\n  // Emit event\r\n  c.get('emitter').emit('todo:deleted', { id })\r\n})\r\n\r\nexport default app\r\n```\r\n\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2321260127},{"id":2321928457,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2845","title":"fix(jsx/dom): Fixed to not add \"px\" for certain properties, even if numeric value is given","body":"Fix #2774\r\n\r\nChange in #2553 to add \"px\" when a value of type number is passed. However, it was found that some properties need to output number as is, as defined in React as follows.\r\n\r\nhttps://github.com/facebook/react/blob/46339720d75337ae1d1e113fd56ac99e7fd1a0b3/packages/react-dom-bindings/src/shared/isUnitlessNumber.js#L14-L84\r\n\r\nKeeping the entire list would increase the code, so this PR implementation was made smaller by excluding 'deprecated' and 'vendor-prefixed' items from the React list, and then grouping them into regular expressions.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [x] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2321928457},{"id":2322079706,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2846","title":"refactor(helper/adapter): improve runtime detection","body":"detect runtime using `navigator.userAgent` when possible\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [x] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322079706},{"id":2322402778,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2848","title":"docs: change to shell highlight","body":"hightlight for shell code\r\n\r\n```shell\r\ncd /hono\r\n```","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322402778},{"id":2322410262,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2849","title":"refactor: removed v4 branch in actions.","body":"We don't needs","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322410262},{"id":2322426441,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2850","title":"refactor: added paths-ignore for ignore files of dont need tests","body":"docs, .vscode, ... don't need tests","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322426441},{"id":2322583735,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2851","title":"ci: include node22 tests","body":"Node.js 22 added to the test matrix.\r\n\r\nref : https://github.com/honojs/node-server/pull/170\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322583735},{"id":2322688106,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2852","title":"feat(hono-base): add `replaceRequest` option for `app.mount`","body":"Resolves #2781\r\n\r\nThis PR introduces the `rewritePath` option to `app.mount()`. With the current spec, if you use `app.mount()`, the path to pass to your mounted application will be changed. The base path will be removed.\r\n\r\n```ts\r\napp.mount('/sub-app', subApp.handle)\r\n```\r\n\r\nIf you access `/sub-app/hello/foo`, the subApp receives `/hello/foo`. This is good behavior for some apps, but it's bad for some apps like #2781.\r\n\r\nWith the `rewritePath` option, you can specify the path to pass to the sub-application. If you don't want to remove the base path, you can write the following:\r\n\r\n```ts\r\napp.mount('/sub-app', subApp.handle, {\r\n  rewritePath: (path) => path,\r\n})\r\n```\r\n\r\n### The pain point\r\n\r\nThe logic will be a little bit complex. As for this, the application size will be slightly increased. Eitherway, I think we can reduce the size in other places.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322688106},{"id":2322702217,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2853","title":"feat: Mounting Helper","body":"WIP\r\n\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2322702217},{"id":2323068768,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2855","title":"fix(validator): support json api header","body":"The author should do the following, if applicable\r\n  - [x] Add tests\r\n  - [x] Run tests\r\n  - [x] bun run format:fix && bun run lint:fix to format the code\r\n\r\n![Screenshot 2024-05-29 at 13 47 15](https://github.com/honojs/hono/assets/117665459/9b3de9db-6f51-45e0-8b77-1059702c75a7)\r\n\r\nspecs: https://jsonapi.org/format/","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2323068768},{"id":2323532874,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2857","title":"Consider continuous coverage tool","body":"As a contributor to this repo, it is great if coverage tool continuously reports coverage changes on each PR.\nSo we can identify uncovered changes like https://github.com/honojs/hono/pull/2828\n\n- https://about.codecov.io\n- https://coveralls.io","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2323532874},{"id":2323758625,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2858","title":"refactor(compose): Remove type definition of ComposeContext that was defined twice","body":"## Overview\r\n\r\nThere are two `ComposeContexts` with the same type definition.\r\nOne of them is unnecessary, so it has been deleted.\r\n\r\nhttps://github.com/honojs/hono/blob/1da43aee3be0ed2a991ee7199a32ed3ad4ad8fe5/src/compose.ts#L5-L23\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2323758625},{"id":2324224626,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2860","title":"OData Middleware","body":"### What is the feature you are proposing?\r\n\r\n**Description:**\r\nI would like to request the addition of an OData middleware to HONO.js. This middleware would enable HONO.js to act as an OData server.\r\n\r\n**Benefits:**\r\n- Simplifies the implementation of RESTful APIs following the OData protocol.\r\n- Enhances compatibility with various clients that support OData.\r\n- Expands the use cases for HONO.js in enterprise applications.\r\n\r\n**Suggested Implementation:**\r\n- Provide documentation and examples for setting up OData endpoints using HONO.js.\r\n\r\n**References:**\r\n- [OData Official Site](https://www.odata.org/)\r\n- [OData Documentation](https://www.odata.org/documentation/)\r\n\r\nThank you for considering this feature request.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324224626},{"id":2324406184,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2861","title":"Improve score of JSR symbol","body":"### What is the feature you are proposing?\n\n![Screenshot 2024-05-30 064618](https://github.com/honojs/hono/assets/50759463/a9887bf4-48d0-424b-a9ce-c133e7389d79)\r\n\r\nReference: https://jsr.io/docs/writing-docs#symbol-documentation\r\n\r\nNow (when this issue was created) we only have 19% of the code documented, we can start with the public methods first before focusing on the private ones. In future, after we done with the JSR symbol, we can continously improve the code documentation.","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324406184},{"id":2324517780,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2862","title":"ci: Report coverage with CodeCov","body":"Closes #2857\r\nCloses #1391\r\nCloses #175\r\n\r\nThis PR configures Vitest to generate coverage in JSON format per each test suite.\r\nMultiple coverage files are uploaded into CodeCov, then CodeCov automatically merges those uploaded coverages smartly.\r\n\r\nhttps://github.com/exoego/hono/pull/3 is a working demo how CodeCov bot reports coverage changes on each PR\r\nYou can also see [the demo coverage on my CodeCov account](https://app.codecov.io/github/exoego/hono):\r\n![image](https://github.com/honojs/hono/assets/127635/eafddcde-d976-48a0-b30b-b9da6e2ad1ea)\r\n(this demo coverage is not \"accurate\" since it includes unexpected files like `benchmarks` and `runtime_tests`. Such unexpected files are excluded in this PR)\r\n\r\n### :warning: Attention :warning: \r\n\r\nRepo administrator should set `CODECOV_TOKEN` as GitHub secret for Actions.\r\nThe token can be obtained in https://app.codecov.io/github/honojs/hono/settings\r\nor maybe https://app.codecov.io/github/honojs/hono\r\n\r\n### Note\r\n\r\nCodeCov is free for open-source repos while some enterprise-level features are not available.\r\nhttps://about.codecov.io/pricing/\r\n\r\nThis PR does not enable coverage report on terminal (`text` reporter).\r\nBecause it is required to merge multiple coverage.\r\nI will implement that in a separate PR if needed.\r\n\r\nYou can configure behavior in `codecov.yml`. Refer https://docs.codecov.com/docs/common-recipe-list#set-non-blocking-status-checks\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324517780},{"id":2324578309,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2863","title":"Coverage report demo","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324578309},{"id":2324673709,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2864","title":"fix(websocket): the onopen event cannot be triggered during delayed operations in deno","body":"```ts\r\nconst app = new Hono()\r\n\r\napp.get(\r\n  '/ws',\r\n  upgradeWebSocket(async (c) => {\r\n    await new Promise(resolve => setTimeout(resolve, 5e2)) // Simulate time-consuming operation\r\n    return {\r\n      onOpen: () => console.log('opened') // can't be trigger\r\n    }\r\n  })\r\n)\r\n```\r\nBecause `socket.onopen` was triggered before `createEvents`.\r\nSwapping L7 and L9 can solve this problem：\r\n\r\nhttps://github.com/honojs/hono/blob/3d6820b46e51622435aeb0cacc6434d722581aa2/src/adapter/deno/websocket.ts#L7-L9","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324673709},{"id":2324693113,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2866","title":"Create .gitpod.yml for Developers","body":"### What is the feature you are proposing?\n\nI think, we should create `.gitpod.yml` for developers.\r\nDocs: https://www.gitpod.io/docs/references/gitpod-yml\r\n\r\nI'll try it","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324693113},{"id":2324703226,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2867","title":"feat(stream): Options compress/decompress","body":"\r\nhttps://developer.mozilla.org/ja/docs/Web/API/Compression_Streams_API\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324703226},{"id":2324752531,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2868","title":"chore: create .gitpod.yml","body":"Close https://github.com/honojs/hono/issues/2866","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2324752531},{"id":2325310703,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2869","title":"refactor: removed unnecessary line","body":"The ternary operator can be used.\nThis is smarter than before.\n\n### The author should do the following, if applicable\n\n- [ ] Add tests\n- [x] Run tests\n- [x] `bun run format:fix && bun run lint:fix` to format the code\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2325310703},{"id":2325321345,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2870","title":"fix: add return types of void function","body":"JSR was throwing an error because some functions had return types that were not set. This has been fixed.\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2325321345},{"id":2325682836,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2871","title":"refactor(helper/testing): removed some any of helper/testing","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2325682836},{"id":2326766428,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2873","title":"feat(hono-base): introduce `replaceRequest` option instead of `rewritePath`","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2326766428},{"id":2326858617,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2874","title":"ci: Update workflow name of release.yml","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2326858617},{"id":2326941194,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2875","title":"ci: change name of workflow jobs","body":"I think this is more appropriate than before.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2326941194},{"id":2326944642,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2876","title":"ci: set \".github/**\" at paths-ignore","body":"I don't think “.github” needs \"ci\" of actions either.\r\nhttps://github.com/honojs/hono/pull/2850","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2326944642},{"id":2327796640,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2877","title":"Type of zod-validator not compatible with Context in Deno","body":"### What version of Hono are you using?\n\n4.4.2\n\n### What runtime/platform is your app running on?\n\nDeno\n\n### What steps can reproduce the bug?\n\nCreating a .ts file and using the simple example from [documentation](https://hono.dev/guides/validation#zod-validator-middleware):\r\n\r\n```ts\r\nimport { z } from 'https://deno.land/x/zod@v3.23.8/mod.ts';\r\nimport { Hono } from \"jsr:@hono/hono@^4.4.2\";\r\nimport { zValidator } from \"npm:@hono/zod-validator@0.2.1\";\r\n\r\nconst app = new Hono();\r\n\r\napp.post(\r\n  '/posts',\r\n  zValidator(\r\n    'form',\r\n    z.object({\r\n      body: z.string(),\r\n    })\r\n  ),\r\n  (c) => {\r\n    const validated = c.req.valid(\"form\");\r\n    // ... use your validated data\r\n  }\r\n)\r\n```\r\n\r\nand running in Deno to downloading all packages.\n\n### What is the expected behavior?\n\nAll types are correct.\n\n### What do you see instead?\n\nTypeScript complained on line `zValidator(`:\r\n```\r\nTypes of parameters 'c' and 'c' are incompatible.\r\n          Property '#private' is missing in type 'Context<BlankEnv, \"/posts\", BlankInput>' but required in type 'Context<Env, string, { in: any; out: { form: { body: string; }; }; }>'.deno-ts(2769)\r\n```\n\n### Additional information\n\nI tried clearing Deno's cache but no effect.\r\n\r\nMy Deno version:\r\n```\r\n❯ deno --version\r\ndeno 1.44.0 (release, x86_64-unknown-linux-gnu)\r\nv8 12.6.228.3\r\ntypescript 5.4.5\r\n```\r\n\r\nand VS Code Deno extension version is `v3.37.1`.\r\n\r\nI'm not sure if it is expected. I created the same project in Node.js, and there is no TypeScript error. It may also be a bug in Deno VS Code extension...?","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2327796640},{"id":2328031538,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2878","title":"With typescript, type inference is lost if the json returned is not an object but an array","body":"### What version of Hono are you using?\n\n4.3.11\"\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\n``` js\r\nconst app = new Hono()\r\n  .get(\"/\", async (c) => {\r\n    const data = await readData();\r\n    return c.json(data);\r\n  })\r\n  .get(\r\n    \"/filtration\",\r\n    zValidator(\r\n      \"query\",\r\n      z.object({\r\n        pageSize: z.number().default(10),\r\n      })\r\n    ),\r\n    async (c) => {\r\n      const { pageSize } = c.req.valid(\"query\");\r\n      const data = await readData();\r\n      const result = await splitArrayBySize(data, pageSize);\r\n      return c.json(result);\r\n    }\r\n  );\r\n\r\nexport default app;\r\n\r\n```\r\n\r\n``` js\r\n  client.api.issues.filtration.$get({ query: {} }).then((res) => {\r\n    const value = res.json();\r\n// never\r\n  });\r\n```\r\n\n\n### What is the expected behavior?\n\nHopefully, the result will be returned correctly\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\nIf you return objects instead, everything is fine\r\n\r\n``` js\r\nconst app = new Hono()\r\n  .get(\"/\", async (c) => {\r\n    const data = await readData();\r\n    return c.json(data);\r\n  })\r\n  .get(\r\n    \"/filtration\",\r\n    zValidator(\r\n      \"query\",\r\n      z.object({\r\n        pageSize: z.number().default(10),\r\n      })\r\n    ),\r\n    async (c) => {\r\n      const { pageSize } = c.req.valid(\"query\");\r\n      const data = await readData();\r\n      const result = await splitArrayBySize(data, pageSize);\r\n      return c.json({result});\r\n    }\r\n  );\r\n\r\nexport default app;\r\n```","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2328031538},{"id":2328593107,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2879","title":"docs: update readme and migrate guide for migrating `deno.land/x` to JSR","body":"Ref: https://github.com/honojs/hono/issues/2201#issuecomment-2139166691","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2328593107},{"id":2328651532,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2880","title":"chore: reestructure `message` of tests","body":"Improved the assertion messages in the tests for better clarity and understanding\r\n\r\n![image](https://github.com/honojs/hono/assets/88039515/5db12de3-d45e-4186-bd6e-097c848bff30)\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2328651532},{"id":2328692758,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2881","title":"chore: add coverage badge to README","body":"Follow up to #2862 \r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\nN/A, doc change only\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2328692758},{"id":2328912145,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2882","title":"netlify boilarplate doesnt comes up with package.json ","body":"### What version of Hono are you using?\r\n\r\n4.0.9\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nNetlify\r\n\r\n### What steps can reproduce the bug?\r\n\r\ntry to install new app using hono\r\n\r\n> npm create hono@latest my-app\r\n\r\nbut in local I cant run it , also see there are import statment in  edge_functsions/index.ts\r\n\r\n```ts\r\nimport { Hono } from 'jsr:@hono/hono'\r\nimport { handle } from 'jsr:@hono/hono/netlify'\r\n\r\nconst app = new Hono()\r\n\r\napp.get('/', (c) => {\r\n  return c.text('Hello Hono!')\r\n})\r\n\r\nexport default handle(app)\r\n```\r\n\r\nbut didnt see any package.json? \r\n\r\nAm i Missing something?\r\n\r\nalthough netlify dev runs great\r\n\r\n### What is the expected behavior?\r\n\r\nthere must be package.json so that we can run command and add other features\r\n\r\n### What do you see instead?\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nrunning on Ubuntu 24.04 and having netlify CLI insatted and logged in","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2328912145},{"id":2329149767,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2883","title":"Error using WebSocket Helper for Cloudflare Workers","body":"### What version of Hono are you using?\n\n4.4.2\n\n### What runtime/platform is your app running on?\n\nCloudflare Workers\n\n### What steps can reproduce the bug?\n\n### Range Error\r\nEmploying the `upgradeWebSocket` helper produces an error and immediately returns a `500` response:\r\n\r\n`✘ [ERROR] RangeError: Responses with a WebSocket must have status code 101.`\r\n\r\n\r\n### Minimal Example\r\nHere is a minimal example using a snippet taken from the [docs](https://hono.dev/helpers/websocket):\r\n\r\n```\r\nimport { Hono } from 'hono'\r\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\r\n\r\nconst app = new Hono()\r\n\r\napp.get(\r\n\t'/ws',\r\n\tupgradeWebSocket((c) => {\r\n\t\treturn {\r\n\t\t\tonMessage(event, ws) {\r\n\t\t\t\tconsole.log(`Message from client: ${event.data}`)\r\n\t\t\t\tws.send('Hello from server!')\r\n\t\t\t},\r\n\t\t\tonClose: () => {\r\n\t\t\t\tconsole.log('Connection closed')\r\n\t\t\t},\r\n\t\t}\r\n\t}),\r\n)\r\n\r\nexport default app\r\n```\r\n### Example Repo\r\nI also created a repo with the example so that this can be easily reproduced:\r\nhttps://github.com/ronkeiser/hono-ws-example\r\n\r\n\r\n\n\n### What is the expected behavior?\n\nRequests to the `/ws` endpoint should be upgraded to a websocket. \n\n### What do you see instead?\n\n<img width=\"878\" alt=\"hono-ws-error\" src=\"https://github.com/honojs/hono/assets/682323/ff387fad-7845-4014-8735-420caf9e1e05\">\n\n### Additional information\n\n_No response_","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329149767},{"id":2329478110,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2884","title":"An error occurs when the route optional matches query","body":"### What version of Hono are you using?\n\n4.3.11\n\n### What runtime/platform is your app running on?\n\nnode\n\n### What steps can reproduce the bug?\n\n``` js\r\nconst app = new Hono()\r\n  .get(\r\n    \"/filtration/:type?\",\r\n    zValidator(\r\n      \"query\",\r\n      z.object({\r\n        pageSize: z.string().default(\"10\"),\r\n        page: z.string().default(\"\"),\r\n      })\r\n    ),\r\n    async (c) => {\r\n      const { pageSize, page } = c.req.valid(\"query\");\r\n\r\n\r\n      return c.json({});\r\n    }\r\n  );\r\n\r\nexport default app;\r\n\r\n```\r\n\r\nWork with clients\r\n\r\n``` js\r\n  const list = await client.api.issues.filtration[\":type?\"]\r\n    .$get({ param: { type }, query: { page } })\r\n    .then((res) => res.json());\r\n\r\n```\r\n\r\nresult\r\nquery parsing error because :type? Suffix? The cause of the removal? All is well\r\n\n\n### What is the expected behavior?\n\n_No response_\n\n### What do you see instead?\n\n_No response_\n\n### Additional information\n\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329478110},{"id":2329563519,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2885","title":"perf(hono-base): don't import `HTTPException`","body":"This is like a `refactor` but is made a `perf` since reducing the bundle size for the performance.\r\n\r\nWith this PR, the `hono-base.ts` does not need to import the `HTTPException` class directly. So, the bundle size for the app that does not use `HTTPException` will be small. To enable it, it does not use `instanceOf`; it will detect by checking the property named a symbol of `IS_HTTP_EXCEPTION.`\r\n\r\nResult:\r\n\r\n![CleanShot 2024-06-02 at 18 40 35@2x](https://github.com/honojs/hono/assets/10682/bcdcce43-4ba3-48f7-a1ae-fabcbaf98dbf)\r\n\r\nIt was reduced by 260 bytes. It seems small, but reducing size is important for edge environments such as Cloudflare Workers.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329563519},{"id":2329620299,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2886","title":"fix(cloudflare-workers): Update websocket.ts to return 101 status code","body":null,"state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329620299},{"id":2329626540,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2887","title":"express/connect compat middleware","body":"### What is the feature you are proposing?\n\nThis middleware is for Hono library developers.","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329626540},{"id":2329663420,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2888","title":"test(workerd): rename the runtime test `wrangler` to `workerd`","body":"The runtime test is more appropriately named `wokerd` than `wrangler`. So, I've renamed it. And updated `wrangler` and added a test for `getRuntimeKey()`.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329663420},{"id":2329680808,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2889","title":"refactor(aws-lambda): merge custom-context into types ","body":"Currently, `aws-lambda` adapter has two type-only files.\r\nThis PR merges them and make `types.ts` is a single source of types.\r\n\r\nMotivation\r\n- To make it more clear where types are added\r\n- To exclude custom-context types since  `types.ts`s are already excluded from coverage\r\n\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [x] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329680808},{"id":2329685523,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2890","title":"chore: Exclude type-only files from coverage","body":"These two type-only files are relatively-large uncovered files.\r\nhttps://github.com/honojs/hono/blob/f634c824510f265976f4f15312e098ab37aefb21/src/jsx/intrinsic-elements.ts\r\nhttps://github.com/honojs/hono/blob/f634c824510f265976f4f15312e098ab37aefb21/src/utils/http-status.ts\r\n\r\nThis change will increase coverage dramatically\r\n```\r\n##             main    #2890      +/-   ##\r\n+ Coverage   87.88%   93.06%   +5.18%     \r\n```\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329685523},{"id":2329707694,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2891","title":"test(workerd): add tests for WebSocket","body":"### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329707694},{"id":2329716464,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2892","title":"test(presets): add tests for `hono/quick` and `hono/tiny`","body":"### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329716464},{"id":2329728882,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2893","title":"Improvement  a new logic for HTTPException","body":"### What is the feature you are proposing?\n\nCurrently, the `HTTPException` class accepts HTTP status codes as numeric values directly. While this approach is functional, it has several drawbacks:\r\n\r\n1. Readability: Numeric status codes are less readable and require the developer to remember or look up what each code represents.\r\n2. Maintainability: Hardcoding numeric values throughout the codebase makes it more difficult to update or refactor error handling.\r\n3. Type Safety: Direct use of numeric codes increases the risk of using invalid or incorrect status codes, leading to potential bugs and inconsistencies.\r\n\r\nHere's an example of test:\r\n```ts\r\n  it('Should be 401 HTTP exception object', async () => {\r\n    const exception = new HTTPException(HTTPException.CODES.UNAUTHORIZED, {\r\n      message: 'unauthorized',\r\n    });\r\n    const res = exception.getResponse();\r\n\r\n    expect(res.status).toBe(401);\r\n    expect(await res.text()).toBe('Unauthorized');\r\n    expect(exception.status).toBe(401);\r\n    expect(exception.message).toBe('Unauthorized');\r\n  });\r\n  ```","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329728882},{"id":2329788190,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2894","title":"fix(types): fix typo for unofficial status code type","body":"This PR fixes typo for unofficial status code type.\r\n\r\n## Deprecate `UnOfficalStatusCode`\r\nAdd `UnofficialStatusCode` and announce to use the type instead.\r\nPlease remove the type at an appropriate time.\r\n\r\n## Improve `UnofficialStatusCode` example\r\nThe old example includes that a religious number and meaningless status message.\r\nUse an unofficial status code that actually exists.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [x] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2329788190},{"id":2330031047,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2895","title":"c.json() incomplete JSONRespond/TypedResponse implementation (data & format are undefined)","body":"### What version of Hono are you using?\r\n\r\n4.3.8\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudFlare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/context.ts#L662\r\n\r\nI understand that TypedResponse is mainly used for type inference.\r\n\r\n```ts\r\napp.get(\"/\", (c) => {\r\n  const res = c.json({ message: \"hello hono\" });\r\n  console.log(res.data, res.format, res.status);\r\n  return res;\r\n});\r\n```\r\n\r\nThe above outputs\r\n\r\n```\r\nundefined undefined 200\r\n```\r\n\r\nIs there any harm in attaching the data and format to the response?\r\n\r\n```ts\r\n  json: JSONRespond = <T extends JSONValue | Simplify<unknown>, U extends StatusCode>(\r\n    object: T,\r\n    arg?: U | ResponseInit,\r\n    headers?: HeaderRecord\r\n  ): ReturnType<JSONRespond> => {\r\n    const body = JSON.stringify(object)\r\n    this.#preparedHeaders ??= {}\r\n    this.#preparedHeaders['content-type'] = 'application/json; charset=UTF-8'\r\n    /* eslint-disable @typescript-eslint/no-explicit-any */\r\n    const res = (\r\n      typeof arg === 'number' ? this.newResponse(body, arg, headers) : this.newResponse(body, arg)\r\n    ) as any\r\n\r\n    // SET data & format\r\n    res.data = object\r\n    res.format = 'json'\r\n\r\n    return res;\r\n  }\r\n```\r\n\r\n### What is the expected behavior?\r\n\r\ndata & format should have valid values\r\n\r\n### What do you see instead?\r\n\r\ndata & format are undefined\r\n\r\n### Additional information\r\n\r\n_No response_","state":"open","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2330031047},{"id":2330463659,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2897","title":"Allow throwing responses (like Remix) and automatically wrap them in HttpException","body":"### What is the feature you are proposing?\r\n\r\nHaving a conditional response like the following breaks type inference as a generic Response is inferred\r\n\r\n```ts\r\napp.get(\"/profile\", (c) => {\r\n  return c.var.user ? c.json(c.var.user) : c.redirect(\"/login\");\r\n});\r\n```\r\n\r\nFeel the documentation could be enhanced to avoid conditional responses and use HttpException instead\r\n\r\n```ts\r\napp.get(\"/profile\", (c) => {\r\n  if (!c.var.user) {\r\n    throw new HTTPException(undefined, {\r\n      res: c.redirect(\"/login\"),\r\n    });\r\n  }\r\n  return c.json(c.var.user);\r\n});\r\n```\r\n\r\nSince we are throwing an exception for the redirect, the return type is inferred correctly for the happy path.\r\n\r\nEven better maybe hono could support throwing responses similar to Remix?\r\n\r\nhttps://remix.run/docs/en/main/utils/redirect\r\nhttps://remix.run/docs/en/main/guides/not-found#how-to-send-a-404\r\n\r\n```ts\r\napp.get(\"/profile\", (c) => {\r\n  if (!c.var.user) {\r\n    throw c.redirect(\"/login\")\r\n  }\r\n  return c.json(c.var.user);\r\n});\r\n```\r\n\r\nThis can be achieved with a simple middleware, but feel this _might_ be a good enhancement?","state":"open","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2330463659},{"id":2330973473,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2898","title":"feat(hono-base): skip import HTTPException by using HTTPResponseError","body":"This change is intended to make error handling more flexible and reduce bundle size. This idea is originated from https://github.com/honojs/hono/pull/2885\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [x] Add tests\r\n- [x] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- <del>Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code</del>\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2330973473},{"id":2331080055,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2899","title":"fix(typo): Fix typo in request.test.ts","body":"Fixed what appears to be a typo in the test case.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [ ] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2331080055},{"id":2332244576,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2901","title":"`notFound` handling change from v3 -> v4 migration","body":"### What version of Hono are you using?\r\n\r\n4.4.3\r\n\r\n### What runtime/platform is your app running on?\r\n\r\nCloudflare Workers\r\n\r\n### What steps can reproduce the bug?\r\n\r\nUsing the following code:\r\n\r\n```ts\r\nimport { Hono } from 'hono'\r\n\r\nconst app = new Hono();\r\n\r\napp.get('/foo', async (context) => {\r\n\tif (Math.random() <= 0.5) {\r\n\t\treturn new Response('success');\r\n\t}\r\n\r\n\t// shouldn't this raise a typescript error?\r\n\treturn;\r\n});\r\n\r\napp.notFound((context) => {\r\n\treturn new Response('404z', {\r\n\t\tstatus: 400\r\n\t});\r\n})\r\n\r\nexport default app;\r\n```\r\n\r\nAnd then `npx wrangler dev`:\r\n\r\nUsing hono 3, observe a mixture of `success` and `404z` response\r\nUsing hono 4, observe a mixture of `success`, and `Internal Server Error` responses, with this logged:\r\n```\r\nContext is not finalized. You may forget returning Response object or `await next()`\r\n```\r\n\r\n\r\n\r\n### What is the expected behavior?\r\n\r\nIs this the intended behaviour? I feel like this does make more sense in version 4, and feels more semantically correct, but I didn't see it called out in the migration guide - let me know if I missed it.\r\n\r\n\r\n### Additional information\r\n\r\nI would honestly expect the following function to throw a TypeScript issue:\r\n```typescript\r\napp.get('/foo', async (context) => {\r\n\tif (Math.random() <= 0.5) {\r\n\t\treturn new Response('success');\r\n\t}\r\n\r\n\t// shouldn't this raise a typescript error?\r\n\treturn;\r\n});\r\n```\r\n\r\nIf I remove the `async` declaration from the function, so it's just:\r\n```typescript\r\napp.get('/foo', (context) => {\r\n\tif (Math.random() <= 0.5) {\r\n\t\treturn new Response('success');\r\n\t}\r\n\r\n\treturn;\r\n});\r\n```\r\n\r\nI do then receive a error:\r\n```\r\nNo overload matches this call.\r\n  The last overload gave the following error.\r\n    Argument of type '(context: Context<BlankEnv, \"/foo\", BlankInput>) => Response | undefined' is not assignable to parameter of type 'H<BlankEnv, \"/foo\", BlankInput, HandlerResponse<any>>'.\r\n      Type '(context: Context<BlankEnv, \"/foo\", BlankInput>) => Response | undefined' is not assignable to type 'MiddlewareHandler<BlankEnv, \"/foo\", BlankInput>'.\r\n        Type 'Response | undefined' is not assignable to type 'Promise<void | Response>'.\r\n          Type 'undefined' is not assignable to type 'Promise<void | Response>'.\r\n```\r\n","state":"closed","labels":"[\"bug\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2332244576},{"id":2332250728,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2902","title":"chore: improve unfinalized response error","body":"This simply tweaks the grammar of the unfinalized response error to read a little nicer. I saw this when hitting https://github.com/honojs/hono/issues/2901\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"closed","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2332250728},{"id":2333226957,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/issues/2904","title":"perf: Async match processing for each router (SmartRouter)","body":"### What is the feature you are proposing?\r\n\r\nCan't we use a way that performs the match process for each router in parallel, stops the for syntax when the result is obtained, and returns the result? It seems like it would improve performance. Have you done this approach in the past?\r\n\r\nhttps://github.com/honojs/hono/blob/main/src/router/smart-router/router.ts#L31-L49","state":"closed","labels":"[\"enhancement\"]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2333226957},{"id":2333874415,"owner":"honojs","repo":"hono","url":"https://github.com/honojs/hono/pull/2906","title":"fix(cloudflare-workers): export getConnInfo()","body":"This issue is reported on Discord.\r\nIt seems like we forgot to export, so this PR fixes this.\r\n\r\n### The author should do the following, if applicable\r\n\r\n- [ ] Add tests\r\n- [ ] Run tests\r\n- [x] `bun run format:fix && bun run lint:fix` to format the code\r\n- [ ] Add [TSDoc](https://tsdoc.org/)/[JSDoc](https://jsdoc.app/about-getting-started) to document the code\r\n","state":"open","labels":"[]","created_at":null,"updated_at":null,"closed_at":null,"__drizzlerowid__":2333874415}]