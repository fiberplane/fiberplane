{"context":"[\n  \"<expanded-function>\\n<entry>\\n  <name filename=\\\"index.mjs\\\">neon</name>\\n  <definition>\\n    #third-party-library-code\\n  </definition>\\n  <package>@neondatabase+serverless@0.10.1/node_modules</package>\\n</entry>\\n<entry>\\n  <name filename=\\\"driver.js\\\">drizzle</name>\\n  <definition>\\n    #third-party-library-code\\n  </definition>\\n  <package>drizzle-orm@0.35.3_@cloudflare+workers-types@4.20241022.0_@libsql+client-wasm@0.14.0_@libsql+_32z3jowq6bwfxjazeh5bxmnv6m</package>\\n</entry>\\n<entry>\\n  <name filename=\\\"measure.js\\\">measure</name>\\n  <definition>\\n    #third-party-library-code\\n  </definition>\\n</entry>\\n<entry>\\n  <name filename=\\\"client.ts\\\">createGoose</name>\\n  <definition>\\n    async (\\n      db: ReturnType<typeof drizzle>,\\n      gooseData: Partial<typeof geese.$inferInsert>,\\n    ) => {\\n      const { name, isFlockLeader, programmingLanguage, motivations, location } =\\n        gooseData;\\n      const description = `A person named ${name} who talks like a Goose`;\\n    \\n      console.log({\\n        action: \\\"createGoose\\\",\\n        name,\\n        isFlockLeader,\\n        programmingLanguage,\\n      });\\n    \\n      return await db\\n        .insert(geese)\\n        .values({\\n          name,\\n          description,\\n          isFlockLeader,\\n          programmingLanguage,\\n          motivations,\\n          location,\\n        })\\n        .returning({\\n          id: geese.id,\\n          name: geese.name,\\n          description: geese.description,\\n          isFlockLeader: geese.isFlockLeader,\\n          programmingLanguage: geese.programmingLanguage,\\n          motivations: geese.motivations,\\n          location: geese.location,\\n        });\\n    }\\n  </definition>\\n</entry>\\n</expanded-function>\",\n  \"<middleware>\\n\\n</middleware>\"\n]","routeId":3085,"method":"POST","path":"/api/geese"}